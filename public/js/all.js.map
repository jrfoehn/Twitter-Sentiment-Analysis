{"version":3,"sources":["arbor.js","cola.v3.min.js","cytoscape.js","cytoscape.min.js","dagre.js","foograph.js","rhill-voronoi-core.js","springy.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClqzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxkwtrfile":"all.js","sourcesContent":["//\n//  arbor.js - version 0.91\n//  a graph vizualization toolkit\n//\n//  Copyright (c) 2011 Samizdat Drafting Co.\n//  Physics code derived from springy.js, copyright (c) 2010 Dennis Hotson\n// \n//  Permission is hereby granted, free of charge, to any person\n//  obtaining a copy of this software and associated documentation\n//  files (the \"Software\"), to deal in the Software without\n//  restriction, including without limitation the rights to use,\n//  copy, modify, merge, publish, distribute, sublicense, and/or sell\n//  copies of the Software, and to permit persons to whom the\n//  Software is furnished to do so, subject to the following\n//  conditions:\n// \n//  The above copyright notice and this permission notice shall be\n//  included in all copies or substantial portions of the Software.\n// \n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n//  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n//  OTHER DEALINGS IN THE SOFTWARE.\n//\n\n(function($){\n\n  /*        etc.js */  var trace=function(msg){if(typeof(window)==\"undefined\"||!window.console){return}var len=arguments.length;var args=[];for(var i=0;i<len;i++){args.push(\"arguments[\"+i+\"]\")}eval(\"console.log(\"+args.join(\",\")+\")\")};var dirname=function(a){var b=a.replace(/^\\/?(.*?)\\/?$/,\"$1\").split(\"/\");b.pop();return\"/\"+b.join(\"/\")};var basename=function(b){var c=b.replace(/^\\/?(.*?)\\/?$/,\"$1\").split(\"/\");var a=c.pop();if(a==\"\"){return null}else{return a}};var _ordinalize_re=/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g;var ordinalize=function(a){var b=\"\"+a;if(a<11000){b=(\"\"+a).replace(_ordinalize_re,\"$1,\")}else{if(a<1000000){b=Math.floor(a/1000)+\"k\"}else{if(a<1000000000){b=(\"\"+Math.floor(a/1000)).replace(_ordinalize_re,\"$1,\")+\"m\"}}}return b};var nano=function(a,b){return a.replace(/\\{([\\w\\-\\.]*)}/g,function(f,c){var d=c.split(\".\"),e=b[d.shift()];$.each(d,function(){if(e.hasOwnProperty(this)){e=e[this]}else{e=f}});return e})};var objcopy=function(a){if(a===undefined){return undefined}if(a===null){return null}if(a.parentNode){return a}switch(typeof a){case\"string\":return a.substring(0);break;case\"number\":return a+0;break;case\"boolean\":return a===true;break}var b=($.isArray(a))?[]:{};$.each(a,function(d,c){b[d]=objcopy(c)});return b};var objmerge=function(d,b){d=d||{};b=b||{};var c=objcopy(d);for(var a in b){c[a]=b[a]}return c};var objcmp=function(e,c,d){if(!e||!c){return e===c}if(typeof e!=typeof c){return false}if(typeof e!=\"object\"){return e===c}else{if($.isArray(e)){if(!($.isArray(c))){return false}if(e.length!=c.length){return false}}else{var h=[];for(var f in e){if(e.hasOwnProperty(f)){h.push(f)}}var g=[];for(var f in c){if(c.hasOwnProperty(f)){g.push(f)}}if(!d){h.sort();g.sort()}if(h.join(\",\")!==g.join(\",\")){return false}}var i=true;$.each(e,function(a){var b=objcmp(e[a],c[a]);i=i&&b;if(!i){return false}});return i}};var objkeys=function(b){var a=[];$.each(b,function(d,c){if(b.hasOwnProperty(d)){a.push(d)}});return a};var objcontains=function(c){if(!c||typeof c!=\"object\"){return false}for(var b=1,a=arguments.length;b<a;b++){if(c.hasOwnProperty(arguments[b])){return true}}return false};var uniq=function(b){var a=b.length;var d={};for(var c=0;c<a;c++){d[b[c]]=true}return objkeys(d)};var arbor_path=function(){var a=$(\"script\").map(function(b){var c=$(this).attr(\"src\");if(!c){return}if(c.match(/arbor[^\\/\\.]*.js|dev.js/)){return c.match(/.*\\//)||\"/\"}});if(a.length>0){return a[0]}else{return null}};\n  /*     kernel.js */  var Kernel=function(b){var k=window.location.protocol==\"file:\"&&navigator.userAgent.toLowerCase().indexOf(\"chrome\")>-1;var a=(window.Worker!==undefined&&!k);var i=null;var c=null;var f=[];f.last=new Date();var l=null;var e=null;var d=null;var h=null;var g=false;var j={system:b,tween:null,nodes:{},init:function(){if(typeof(Tween)!=\"undefined\"){c=Tween()}else{if(typeof(arbor.Tween)!=\"undefined\"){c=arbor.Tween()}else{c={busy:function(){return false},tick:function(){return true},to:function(){trace(\"Please include arbor-tween.js to enable tweens\");c.to=function(){};return}}}}j.tween=c;var m=b.parameters();if(a){trace(\"using web workers\");l=setInterval(j.screenUpdate,m.timeout);i=new Worker(arbor_path()+\"arbor.js\");i.onmessage=j.workerMsg;i.onerror=function(n){trace(\"physics:\",n)};i.postMessage({type:\"physics\",physics:objmerge(m,{timeout:Math.ceil(m.timeout)})})}else{trace(\"couldn't use web workers, be careful...\");i=Physics(m.dt,m.stiffness,m.repulsion,m.friction,j.system._updateGeometry);j.start()}return j},graphChanged:function(m){if(a){i.postMessage({type:\"changes\",changes:m})}else{i._update(m)}j.start()},particleModified:function(n,m){if(a){i.postMessage({type:\"modify\",id:n,mods:m})}else{i.modifyNode(n,m)}j.start()},physicsModified:function(m){if(!isNaN(m.timeout)){if(a){clearInterval(l);l=setInterval(j.screenUpdate,m.timeout)}else{clearInterval(d);d=null}}if(a){i.postMessage({type:\"sys\",param:m})}else{i.modifyPhysics(m)}j.start()},workerMsg:function(n){var m=n.data.type;if(m==\"geometry\"){j.workerUpdate(n.data)}else{trace(\"physics:\",n.data)}},_lastPositions:null,workerUpdate:function(m){j._lastPositions=m;j._lastBounds=m.bounds},_lastFrametime:new Date().valueOf(),_lastBounds:null,_currentRenderer:null,screenUpdate:function(){var n=new Date().valueOf();var m=false;if(j._lastPositions!==null){j.system._updateGeometry(j._lastPositions);j._lastPositions=null;m=true}if(c&&c.busy()){m=true}if(j.system._updateBounds(j._lastBounds)){m=true}if(m){var o=j.system.renderer;if(o!==undefined){if(o!==e){o.init(j.system);e=o}if(c){c.tick()}o.redraw();var p=f.last;f.last=new Date();f.push(f.last-p);if(f.length>50){f.shift()}}}},physicsUpdate:function(){if(c){c.tick()}i.tick();var n=j.system._updateBounds();if(c&&c.busy()){n=true}var o=j.system.renderer;var m=new Date();var o=j.system.renderer;if(o!==undefined){if(o!==e){o.init(j.system);e=o}o.redraw({timestamp:m})}var q=f.last;f.last=m;f.push(f.last-q);if(f.length>50){f.shift()}var p=i.systemEnergy();if((p.mean+p.max)/2<0.05){if(h===null){h=new Date().valueOf()}if(new Date().valueOf()-h>1000){clearInterval(d);d=null}else{}}else{h=null}},fps:function(n){if(n!==undefined){var q=1000/Math.max(1,targetFps);j.physicsModified({timeout:q})}var r=0;for(var p=0,o=f.length;p<o;p++){r+=f[p]}var m=r/Math.max(1,f.length);if(!isNaN(m)){return Math.round(1000/m)}else{return 0}},start:function(m){if(d!==null){return}if(g&&!m){return}g=false;if(a){i.postMessage({type:\"start\"})}else{h=null;d=setInterval(j.physicsUpdate,j.system.parameters().timeout)}},stop:function(){g=true;if(a){i.postMessage({type:\"stop\"})}else{if(d!==null){clearInterval(d);d=null}}}};return j.init()};\n  /*      atoms.js */  var Node=function(a){this._id=_nextNodeId++;this.data=a||{};this._mass=(a.mass!==undefined)?a.mass:1;this._fixed=(a.fixed===true)?true:false;this._p=new Point((typeof(a.x)==\"number\")?a.x:null,(typeof(a.y)==\"number\")?a.y:null);delete this.data.x;delete this.data.y;delete this.data.mass;delete this.data.fixed};var _nextNodeId=1;var Edge=function(b,c,a){this._id=_nextEdgeId--;this.source=b;this.target=c;this.length=(a.length!==undefined)?a.length:1;this.data=(a!==undefined)?a:{};delete this.data.length};var _nextEdgeId=-1;var Particle=function(a,b){this.p=a;this.m=b;this.v=new Point(0,0);this.f=new Point(0,0)};Particle.prototype.applyForce=function(a){this.f=this.f.add(a.divide(this.m))};var Spring=function(c,b,d,a){this.point1=c;this.point2=b;this.length=d;this.k=a};Spring.prototype.distanceToParticle=function(a){var c=that.point2.p.subtract(that.point1.p).normalize().normal();var b=a.p.subtract(that.point1.p);return Math.abs(b.x*c.x+b.y*c.y)};var Point=function(a,b){if(a&&a.hasOwnProperty(\"y\")){b=a.y;a=a.x}this.x=a;this.y=b};Point.random=function(a){a=(a!==undefined)?a:5;return new Point(2*a*(Math.random()-0.5),2*a*(Math.random()-0.5))};Point.prototype={exploded:function(){return(isNaN(this.x)||isNaN(this.y))},add:function(a){return new Point(this.x+a.x,this.y+a.y)},subtract:function(a){return new Point(this.x-a.x,this.y-a.y)},multiply:function(a){return new Point(this.x*a,this.y*a)},divide:function(a){return new Point(this.x/a,this.y/a)},magnitude:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normal:function(){return new Point(-this.y,this.x)},normalize:function(){return this.divide(this.magnitude())}};\n  /*     system.js */  var ParticleSystem=function(d,r,f,g,v,m,s){var k=[];var i=null;var l=0;var w=null;var o=0.04;var j=[20,20,20,20];var p=null;var q=null;if(typeof r==\"object\"){var u=r;f=u.friction;d=u.repulsion;v=u.fps;m=u.dt;r=u.stiffness;g=u.gravity;s=u.precision}f=isNaN(f)?0.5:f;d=isNaN(d)?1000:d;v=isNaN(v)?55:v;r=isNaN(r)?600:r;m=isNaN(m)?0.02:m;s=isNaN(s)?0.6:s;g=(g===true);var t=(v!==undefined)?1000/v:1000/50;var b={repulsion:d,stiffness:r,friction:f,dt:m,gravity:g,precision:s,timeout:t};var a;var c={renderer:null,tween:null,nodes:{},edges:{},adjacency:{},names:{},kernel:null};var h={parameters:function(x){if(x!==undefined){if(!isNaN(x.precision)){x.precision=Math.max(0,Math.min(1,x.precision))}$.each(b,function(z,y){if(x[z]!==undefined){b[z]=x[z]}});c.kernel.physicsModified(x)}return b},fps:function(x){if(x===undefined){return c.kernel.fps()}else{h.parameters({timeout:1000/(x||50)})}},start:function(){c.kernel.start()},stop:function(){c.kernel.stop()},addNode:function(A,D){D=D||{};var E=c.names[A];if(E){E.data=D;return E}else{if(A!=undefined){var z=(D.x!=undefined)?D.x:null;var F=(D.y!=undefined)?D.y:null;var C=(D.fixed)?1:0;var B=new Node(D);B.name=A;B._state=c;c.names[A]=B;c.nodes[B._id]=B;k.push({t:\"addNode\",id:B._id,m:B.mass,x:z,y:F,f:C});h._notify();return B}}},pruneNode:function(y){var x=h.getNode(y);if(typeof(c.nodes[x._id])!==\"undefined\"){delete c.nodes[x._id];delete c.names[x.name]}$.each(c.edges,function(A,z){if(z.source._id===x._id||z.target._id===x._id){h.pruneEdge(z)}});k.push({t:\"dropNode\",id:x._id});h._notify()},getNode:function(x){if(x._id!==undefined){return x}else{if(typeof x==\"string\"||typeof x==\"number\"){return c.names[x]}}},eachNode:function(x){$.each(c.nodes,function(A,z){if(z._p.x==null||z._p.y==null){return}var y=(w!==null)?h.toScreen(z._p):z._p;x.call(h,z,y)})},addEdge:function(B,C,A){B=h.getNode(B)||h.addNode(B);C=h.getNode(C)||h.addNode(C);A=A||{};var z=new Edge(B,C,A);var D=B._id;var E=C._id;c.adjacency[D]=c.adjacency[D]||{};c.adjacency[D][E]=c.adjacency[D][E]||[];var y=(c.adjacency[D][E].length>0);if(y){$.extend(c.adjacency[D][E].data,z.data);return}else{c.edges[z._id]=z;c.adjacency[D][E].push(z);var x=(z.length!==undefined)?z.length:1;k.push({t:\"addSpring\",id:z._id,fm:D,to:E,l:x});h._notify()}return z},pruneEdge:function(C){k.push({t:\"dropSpring\",id:C._id});delete c.edges[C._id];for(var z in c.adjacency){for(var D in c.adjacency[z]){var A=c.adjacency[z][D];for(var B=A.length-1;B>=0;B--){if(c.adjacency[z][D][B]._id===C._id){c.adjacency[z][D].splice(B,1)}}}}h._notify()},getEdges:function(y,x){y=h.getNode(y);x=h.getNode(x);if(!y||!x){return[]}if(typeof(c.adjacency[y._id])!==\"undefined\"&&typeof(c.adjacency[y._id][x._id])!==\"undefined\"){return c.adjacency[y._id][x._id]}return[]},getEdgesFrom:function(x){x=h.getNode(x);if(!x){return[]}if(typeof(c.adjacency[x._id])!==\"undefined\"){var y=[];$.each(c.adjacency[x._id],function(A,z){y=y.concat(z)});return y}return[]},getEdgesTo:function(x){x=h.getNode(x);if(!x){return[]}var y=[];$.each(c.edges,function(A,z){if(z.target==x){y.push(z)}});return y},eachEdge:function(x){$.each(c.edges,function(B,z){var A=c.nodes[z.source._id]._p;var y=c.nodes[z.target._id]._p;if(A.x==null||y.x==null){return}A=(w!==null)?h.toScreen(A):A;y=(w!==null)?h.toScreen(y):y;if(A&&y){x.call(h,z,A,y)}})},prune:function(y){var x={dropped:{nodes:[],edges:[]}};if(y===undefined){$.each(c.nodes,function(A,z){x.dropped.nodes.push(z);h.pruneNode(z)})}else{h.eachNode(function(A){var z=y.call(h,A,{from:h.getEdgesFrom(A),to:h.getEdgesTo(A)});if(z){x.dropped.nodes.push(A);h.pruneNode(A)}})}return x},graft:function(y){var x={added:{nodes:[],edges:[]}};if(y.nodes){$.each(y.nodes,function(A,z){var B=h.getNode(A);if(B){B.data=z}else{x.added.nodes.push(h.addNode(A,z))}c.kernel.start()})}if(y.edges){$.each(y.edges,function(B,z){var A=h.getNode(B);if(!A){x.added.nodes.push(h.addNode(B,{}))}$.each(z,function(F,C){var E=h.getNode(F);if(!E){x.added.nodes.push(h.addNode(F,{}))}var D=h.getEdges(B,F);if(D.length>0){D[0].data=C}else{x.added.edges.push(h.addEdge(B,F,C))}})})}return x},merge:function(y){var x={added:{nodes:[],edges:[]},dropped:{nodes:[],edges:[]}};$.each(c.edges,function(C,B){if((y.edges[B.source.name]===undefined||y.edges[B.source.name][B.target.name]===undefined)){h.pruneEdge(B);x.dropped.edges.push(B)}});var A=h.prune(function(C,B){if(y.nodes[C.name]===undefined){x.dropped.nodes.push(C);return true}});var z=h.graft(y);x.added.nodes=x.added.nodes.concat(z.added.nodes);x.added.edges=x.added.edges.concat(z.added.edges);x.dropped.nodes=x.dropped.nodes.concat(A.dropped.nodes);x.dropped.edges=x.dropped.edges.concat(A.dropped.edges);return x},tweenNode:function(A,x,z){var y=h.getNode(A);if(y){c.tween.to(y,x,z)}},tweenEdge:function(y,x,B,A){if(A===undefined){h._tweenEdge(y,x,B)}else{var z=h.getEdges(y,x);$.each(z,function(C,D){h._tweenEdge(D,B,A)})}},_tweenEdge:function(y,x,z){if(y&&y._id!==undefined){c.tween.to(y,x,z)}},_updateGeometry:function(A){if(A!=undefined){var x=(A.epoch<l);a=A.energy;var B=A.geometry;if(B!==undefined){for(var z=0,y=B.length/3;z<y;z++){var C=B[3*z];if(x&&c.nodes[C]==undefined){continue}c.nodes[C]._p.x=B[3*z+1];c.nodes[C]._p.y=B[3*z+2]}}}},screen:function(x){if(x==undefined){return{size:(w)?objcopy(w):undefined,padding:j.concat(),step:o}}if(x.size!==undefined){h.screenSize(x.size.width,x.size.height)}if(!isNaN(x.step)){h.screenStep(x.step)}if(x.padding!==undefined){h.screenPadding(x.padding)}},screenSize:function(x,y){w={width:x,height:y};h._updateBounds()},screenPadding:function(A,B,x,y){if($.isArray(A)){trbl=A}else{trbl=[A,B,x,y]}var C=trbl[0];var z=trbl[1];var D=trbl[2];if(z===undefined){trbl=[C,C,C,C]}else{if(D==undefined){trbl=[C,z,C,z]}}j=trbl},screenStep:function(x){o=x},toScreen:function(z){if(!p||!w){return}var y=j||[0,0,0,0];var x=p.bottomright.subtract(p.topleft);var B=y[3]+z.subtract(p.topleft).divide(x.x).x*(w.width-(y[1]+y[3]));var A=y[0]+z.subtract(p.topleft).divide(x.y).y*(w.height-(y[0]+y[2]));return arbor.Point(B,A)},fromScreen:function(B){if(!p||!w){return}var A=j||[0,0,0,0];var z=p.bottomright.subtract(p.topleft);var y=(B.x-A[3])/(w.width-(A[1]+A[3]))*z.x+p.topleft.x;var x=(B.y-A[0])/(w.height-(A[0]+A[2]))*z.y+p.topleft.y;return arbor.Point(y,x)},_updateBounds:function(y){if(w===null){return}if(y){q=y}else{q=h.bounds()}var B=new Point(q.bottomright.x,q.bottomright.y);var A=new Point(q.topleft.x,q.topleft.y);var D=B.subtract(A);var x=A.add(D.divide(2));var z=4;var F=new Point(Math.max(D.x,z),Math.max(D.y,z));q.topleft=x.subtract(F.divide(2));q.bottomright=x.add(F.divide(2));if(!p){if($.isEmptyObject(c.nodes)){return false}p=q;return true}var E=o;_newBounds={bottomright:p.bottomright.add(q.bottomright.subtract(p.bottomright).multiply(E)),topleft:p.topleft.add(q.topleft.subtract(p.topleft).multiply(E))};var C=new Point(p.topleft.subtract(_newBounds.topleft).magnitude(),p.bottomright.subtract(_newBounds.bottomright).magnitude());if(C.x*w.width>1||C.y*w.height>1){p=_newBounds;return true}else{return false}},energy:function(){return a},bounds:function(){var y=null;var x=null;$.each(c.nodes,function(B,A){if(!y){y=new Point(A._p);x=new Point(A._p);return}var z=A._p;if(z.x===null||z.y===null){return}if(z.x>y.x){y.x=z.x}if(z.y>y.y){y.y=z.y}if(z.x<x.x){x.x=z.x}if(z.y<x.y){x.y=z.y}});if(y&&x){return{bottomright:y,topleft:x}}else{return{topleft:new Point(-1,-1),bottomright:new Point(1,1)}}},nearest:function(z){if(w!==null){z=h.fromScreen(z)}var y={node:null,point:null,distance:null};var x=h;$.each(c.nodes,function(D,A){var B=A._p;if(B.x===null||B.y===null){return}var C=B.subtract(z).magnitude();if(y.distance===null||C<y.distance){y={node:A,point:B,distance:C};if(w!==null){y.screenPoint=h.toScreen(B)}}});if(y.node){if(w!==null){y.distance=h.toScreen(y.node.p).subtract(h.toScreen(z)).magnitude()}return y}else{return null}},_notify:function(){if(i===null){l++}else{clearTimeout(i)}i=setTimeout(h._synchronize,20)},_synchronize:function(){if(k.length>0){c.kernel.graphChanged(k);k=[];i=null}}};c.kernel=Kernel(h);c.tween=c.kernel.tween||null;var e=(window.__defineGetter__==null||window.__defineSetter__==null)?function(y,x,z){if(!y.hasOwnProperty(x)){Object.defineProperty(y,x,z)}}:function(y,x,z){if(z.get){y.__defineGetter__(x,z.get)}if(z.set){y.__defineSetter__(x,z.set)}};var n=function(x){this._n=x;this._state=c};n.prototype=new Point();e(n.prototype,\"x\",{get:function(){return this._n._p.x},set:function(x){this._state.kernel.particleModified(this._n._id,{x:x})}});e(n.prototype,\"y\",{get:function(){return this._n._p.y},set:function(x){this._state.kernel.particleModified(this._n._id,{y:x})}});e(Node.prototype,\"p\",{get:function(){return new n(this)},set:function(x){this._p.x=x.x;this._p.y=x.y;this._state.kernel.particleModified(this._id,{x:x.x,y:x.y})}});e(Node.prototype,\"mass\",{get:function(){return this._mass},set:function(x){this._mass=x;this._state.kernel.particleModified(this._id,{m:x})}});e(Node.prototype,\"tempMass\",{set:function(x){this._state.kernel.particleModified(this._id,{_m:x})}});e(Node.prototype,\"fixed\",{get:function(){return this._fixed},set:function(x){this._fixed=x;this._state.kernel.particleModified(this._id,{f:x?1:0})}});return h};\n  /* barnes-hut.js */  var BarnesHutTree=function(){var b=[];var a=0;var e=null;var d=0.5;var c={init:function(g,h,f){d=f;a=0;e=c._newBranch();e.origin=g;e.size=h.subtract(g)},insert:function(j){var f=e;var g=[j];while(g.length){var h=g.shift();var m=h._m||h.m;var p=c._whichQuad(h,f);if(f[p]===undefined){f[p]=h;f.mass+=m;if(f.p){f.p=f.p.add(h.p.multiply(m))}else{f.p=h.p.multiply(m)}}else{if(\"origin\" in f[p]){f.mass+=(m);if(f.p){f.p=f.p.add(h.p.multiply(m))}else{f.p=h.p.multiply(m)}f=f[p];g.unshift(h)}else{var l=f.size.divide(2);var n=new Point(f.origin);if(p[0]==\"s\"){n.y+=l.y}if(p[1]==\"e\"){n.x+=l.x}var o=f[p];f[p]=c._newBranch();f[p].origin=n;f[p].size=l;f.mass=m;f.p=h.p.multiply(m);f=f[p];if(o.p.x===h.p.x&&o.p.y===h.p.y){var k=l.x*0.08;var i=l.y*0.08;o.p.x=Math.min(n.x+l.x,Math.max(n.x,o.p.x-k/2+Math.random()*k));o.p.y=Math.min(n.y+l.y,Math.max(n.y,o.p.y-i/2+Math.random()*i))}g.push(o);g.unshift(h)}}}},applyForces:function(m,g){var f=[e];while(f.length){node=f.shift();if(node===undefined){continue}if(m===node){continue}if(\"f\" in node){var k=m.p.subtract(node.p);var l=Math.max(1,k.magnitude());var i=((k.magnitude()>0)?k:Point.random(1)).normalize();m.applyForce(i.multiply(g*(node._m||node.m)).divide(l*l))}else{var j=m.p.subtract(node.p.divide(node.mass)).magnitude();var h=Math.sqrt(node.size.x*node.size.y);if(h/j>d){f.push(node.ne);f.push(node.nw);f.push(node.se);f.push(node.sw)}else{var k=m.p.subtract(node.p.divide(node.mass));var l=Math.max(1,k.magnitude());var i=((k.magnitude()>0)?k:Point.random(1)).normalize();m.applyForce(i.multiply(g*(node.mass)).divide(l*l))}}}},_whichQuad:function(i,f){if(i.p.exploded()){return null}var h=i.p.subtract(f.origin);var g=f.size.divide(2);if(h.y<g.y){if(h.x<g.x){return\"nw\"}else{return\"ne\"}}else{if(h.x<g.x){return\"sw\"}else{return\"se\"}}},_newBranch:function(){if(b[a]){var f=b[a];f.ne=f.nw=f.se=f.sw=undefined;f.mass=0;delete f.p}else{f={origin:null,size:null,nw:undefined,ne:undefined,sw:undefined,se:undefined,mass:0};b[a]=f}a++;return f}};return c};\n  /*    physics.js */  var Physics=function(a,m,n,e,h){var f=BarnesHutTree();var c={particles:{},springs:{}};var l={particles:{}};var o=[];var k=[];var d=0;var b={sum:0,max:0,mean:0};var g={topleft:new Point(-1,-1),bottomright:new Point(1,1)};var j=1000;var i={stiffness:(m!==undefined)?m:1000,repulsion:(n!==undefined)?n:600,friction:(e!==undefined)?e:0.3,gravity:false,dt:(a!==undefined)?a:0.02,theta:0.4,init:function(){return i},modifyPhysics:function(p){$.each([\"stiffness\",\"repulsion\",\"friction\",\"gravity\",\"dt\",\"precision\"],function(r,s){if(p[s]!==undefined){if(s==\"precision\"){i.theta=1-p[s];return}i[s]=p[s];if(s==\"stiffness\"){var q=p[s];$.each(c.springs,function(u,t){t.k=q})}}})},addNode:function(u){var t=u.id;var q=u.m;var p=g.bottomright.x-g.topleft.x;var s=g.bottomright.y-g.topleft.y;var r=new Point((u.x!=null)?u.x:g.topleft.x+p*Math.random(),(u.y!=null)?u.y:g.topleft.y+s*Math.random());c.particles[t]=new Particle(r,q);c.particles[t].connections=0;c.particles[t].fixed=(u.f===1);l.particles[t]=c.particles[t];o.push(c.particles[t])},dropNode:function(s){var r=s.id;var q=c.particles[r];var p=$.inArray(q,o);if(p>-1){o.splice(p,1)}delete c.particles[r];delete l.particles[r]},modifyNode:function(r,p){if(r in c.particles){var q=c.particles[r];if(\"x\" in p){q.p.x=p.x}if(\"y\" in p){q.p.y=p.y}if(\"m\" in p){q.m=p.m}if(\"f\" in p){q.fixed=(p.f===1)}if(\"_m\" in p){if(q._m===undefined){q._m=q.m}q.m=p._m}}},addSpring:function(t){var s=t.id;var p=t.l;var r=c.particles[t.fm];var q=c.particles[t.to];if(r!==undefined&&q!==undefined){c.springs[s]=new Spring(r,q,p,i.stiffness);k.push(c.springs[s]);r.connections++;q.connections++;delete l.particles[t.fm];delete l.particles[t.to]}},dropSpring:function(s){var r=s.id;var q=c.springs[r];q.point1.connections--;q.point2.connections--;var p=$.inArray(q,k);if(p>-1){k.splice(p,1)}delete c.springs[r]},_update:function(p){d++;$.each(p,function(q,r){if(r.t in i){i[r.t](r)}});return d},tick:function(){i.tendParticles();i.eulerIntegrator(i.dt);i.tock()},tock:function(){var p=[];$.each(c.particles,function(r,q){p.push(r);p.push(q.p.x);p.push(q.p.y)});if(h){h({geometry:p,epoch:d,energy:b,bounds:g})}},tendParticles:function(){$.each(c.particles,function(q,p){if(p._m!==undefined){if(Math.abs(p.m-p._m)<1){p.m=p._m;delete p._m}else{p.m*=0.98}}p.v.x=p.v.y=0})},eulerIntegrator:function(p){if(i.repulsion>0){if(i.theta>0){i.applyBarnesHutRepulsion()}else{i.applyBruteForceRepulsion()}}if(i.stiffness>0){i.applySprings()}i.applyCenterDrift();if(i.gravity){i.applyCenterGravity()}i.updateVelocity(p);i.updatePosition(p)},applyBruteForceRepulsion:function(){$.each(c.particles,function(q,p){$.each(c.particles,function(s,r){if(p!==r){var u=p.p.subtract(r.p);var v=Math.max(1,u.magnitude());var t=((u.magnitude()>0)?u:Point.random(1)).normalize();p.applyForce(t.multiply(i.repulsion*(r._m||r.m)*0.5).divide(v*v*0.5));r.applyForce(t.multiply(i.repulsion*(p._m||p.m)*0.5).divide(v*v*-0.5))}})})},applyBarnesHutRepulsion:function(){if(!g.topleft||!g.bottomright){return}var q=new Point(g.bottomright);var p=new Point(g.topleft);f.init(p,q,i.theta);$.each(c.particles,function(s,r){f.insert(r)});$.each(c.particles,function(s,r){f.applyForces(r,i.repulsion)})},applySprings:function(){$.each(c.springs,function(t,p){var s=p.point2.p.subtract(p.point1.p);var q=p.length-s.magnitude();var r=((s.magnitude()>0)?s:Point.random(1)).normalize();p.point1.applyForce(r.multiply(p.k*q*-0.5));p.point2.applyForce(r.multiply(p.k*q*0.5))})},applyCenterDrift:function(){var q=0;var r=new Point(0,0);$.each(c.particles,function(t,s){r.add(s.p);q++});if(q==0){return}var p=r.divide(-q);$.each(c.particles,function(t,s){s.applyForce(p)})},applyCenterGravity:function(){$.each(c.particles,function(r,p){var q=p.p.multiply(-1);p.applyForce(q.multiply(i.repulsion/100))})},updateVelocity:function(p){$.each(c.particles,function(t,q){if(q.fixed){q.v=new Point(0,0);q.f=new Point(0,0);return}var s=q.v.magnitude();q.v=q.v.add(q.f.multiply(p)).multiply(1-i.friction);q.f.x=q.f.y=0;var r=q.v.magnitude();if(r>j){q.v=q.v.divide(r*r)}})},updatePosition:function(q){var r=0,p=0,u=0;var t=null;var s=null;$.each(c.particles,function(w,v){v.p=v.p.add(v.v.multiply(q));var x=v.v.magnitude();var z=x*x;r+=z;p=Math.max(z,p);u++;if(!t){t=new Point(v.p.x,v.p.y);s=new Point(v.p.x,v.p.y);return}var y=v.p;if(y.x===null||y.y===null){return}if(y.x>t.x){t.x=y.x}if(y.y>t.y){t.y=y.y}if(y.x<s.x){s.x=y.x}if(y.y<s.y){s.y=y.y}});b={sum:r,max:p,mean:r/u,n:u};g={topleft:s||new Point(-1,-1),bottomright:t||new Point(1,1)}},systemEnergy:function(p){return b}};return i.init()};var _nearParticle=function(b,c){var c=c||0;var a=b.x;var f=b.y;var e=c*2;return new Point(a-c+Math.random()*e,f-c+Math.random()*e)};\n\n  // if called as a worker thread, set up a run loop for the Physics object and bail out\n  if (typeof(window)=='undefined') return (function(){\n  /* hermetic.js */  $={each:function(d,e){if($.isArray(d)){for(var c=0,b=d.length;c<b;c++){e(c,d[c])}}else{for(var a in d){e(a,d[a])}}},map:function(a,c){var b=[];$.each(a,function(f,e){var d=c(e);if(d!==undefined){b.push(d)}});return b},extend:function(c,b){if(typeof b!=\"object\"){return c}for(var a in b){if(b.hasOwnProperty(a)){c[a]=b[a]}}return c},isArray:function(a){if(!a){return false}return(a.constructor.toString().indexOf(\"Array\")!=-1)},inArray:function(c,a){for(var d=0,b=a.length;d<b;d++){if(a[d]===c){return d}}return -1},isEmptyObject:function(a){if(typeof a!==\"object\"){return false}var b=true;$.each(a,function(c,d){b=false});return b},};\n  /*     worker.js */  var PhysicsWorker=function(){var b=20;var a=null;var d=null;var c=null;var g=[];var f=new Date().valueOf();var e={init:function(h){e.timeout(h.timeout);a=Physics(h.dt,h.stiffness,h.repulsion,h.friction,e.tock);return e},timeout:function(h){if(h!=b){b=h;if(d!==null){e.stop();e.go()}}},go:function(){if(d!==null){return}c=null;d=setInterval(e.tick,b)},stop:function(){if(d===null){return}clearInterval(d);d=null},tick:function(){a.tick();var h=a.systemEnergy();if((h.mean+h.max)/2<0.05){if(c===null){c=new Date().valueOf()}if(new Date().valueOf()-c>1000){e.stop()}else{}}else{c=null}},tock:function(h){h.type=\"geometry\";postMessage(h)},modifyNode:function(i,h){a.modifyNode(i,h);e.go()},modifyPhysics:function(h){a.modifyPhysics(h)},update:function(h){var i=a._update(h)}};return e};var physics=PhysicsWorker();onmessage=function(a){if(!a.data.type){postMessage(\"¿kérnèl?\");return}if(a.data.type==\"physics\"){var b=a.data.physics;physics.init(a.data.physics);return}switch(a.data.type){case\"modify\":physics.modifyNode(a.data.id,a.data.mods);break;case\"changes\":physics.update(a.data.changes);physics.go();break;case\"start\":physics.go();break;case\"stop\":physics.stop();break;case\"sys\":var b=a.data.param||{};if(!isNaN(b.timeout)){physics.timeout(b.timeout)}physics.modifyPhysics(b);physics.go();break}};\n  })()\n\n\n  arbor = (typeof(arbor)!=='undefined') ? arbor : {}\n  $.extend(arbor, {\n    // object constructors (don't use ‘new’, just call them)\n    ParticleSystem:ParticleSystem,\n    Point:function(x, y){ return new Point(x, y) },\n\n    // immutable object with useful methods\n    etc:{      \n      trace:trace,              // ƒ(msg) -> safe console logging\n      dirname:dirname,          // ƒ(path) -> leading part of path\n      basename:basename,        // ƒ(path) -> trailing part of path\n      ordinalize:ordinalize,    // ƒ(num) -> abbrev integers (and add commas)\n      objcopy:objcopy,          // ƒ(old) -> clone an object\n      objcmp:objcmp,            // ƒ(a, b, strict_ordering) -> t/f comparison\n      objkeys:objkeys,          // ƒ(obj) -> array of all keys in obj\n      objmerge:objmerge,        // ƒ(dst, src) -> like $.extend but non-destructive\n      uniq:uniq,                // ƒ(arr) -> array of unique items in arr\n      arbor_path:arbor_path,    // ƒ() -> guess the directory of the lib code\n    }\n  })\n  \n})(this.jQuery)","var cola;\n(function (cola) {\n    var Locks = (function () {\n        function Locks() {\n            this.locks = {};\n        }\n        Locks.prototype.add = function (id, x) {\n            if (isNaN(x[0]) || isNaN(x[1]))\n                debugger;\n            this.locks[id] = x;\n        };\n\n        Locks.prototype.clear = function () {\n            this.locks = {};\n        };\n\n        Locks.prototype.isEmpty = function () {\n            for (var l in this.locks)\n                return false;\n            return true;\n        };\n\n        Locks.prototype.apply = function (f) {\n            for (var l in this.locks) {\n                f(l, this.locks[l]);\n            }\n        };\n        return Locks;\n    })();\n    cola.Locks = Locks;\n\n    var Descent = (function () {\n        function Descent(x, D, G) {\n            if (typeof G === \"undefined\") { G = null; }\n            this.D = D;\n            this.G = G;\n            this.threshold = 0.0001;\n            this.random = new PseudoRandom();\n            this.project = null;\n            this.x = x;\n            this.k = x.length;\n            var n = this.n = x[0].length;\n            this.H = new Array(this.k);\n            this.g = new Array(this.k);\n            this.Hd = new Array(this.k);\n            this.a = new Array(this.k);\n            this.b = new Array(this.k);\n            this.c = new Array(this.k);\n            this.d = new Array(this.k);\n            this.e = new Array(this.k);\n            this.ia = new Array(this.k);\n            this.ib = new Array(this.k);\n            this.xtmp = new Array(this.k);\n            this.locks = new Locks();\n            this.minD = Number.MAX_VALUE;\n            var i = n, j;\n            while (i--) {\n                j = n;\n                while (--j > i) {\n                    var d = D[i][j];\n                    if (d > 0 && d < this.minD) {\n                        this.minD = d;\n                    }\n                }\n            }\n            if (this.minD === Number.MAX_VALUE)\n                this.minD = 1;\n            i = this.k;\n            while (i--) {\n                this.g[i] = new Array(n);\n                this.H[i] = new Array(n);\n                j = n;\n                while (j--) {\n                    this.H[i][j] = new Array(n);\n                }\n                this.Hd[i] = new Array(n);\n                this.a[i] = new Array(n);\n                this.b[i] = new Array(n);\n                this.c[i] = new Array(n);\n                this.d[i] = new Array(n);\n                this.e[i] = new Array(n);\n                this.ia[i] = new Array(n);\n                this.ib[i] = new Array(n);\n                this.xtmp[i] = new Array(n);\n            }\n        }\n        Descent.createSquareMatrix = function (n, f) {\n            var M = new Array(n);\n            for (var i = 0; i < n; ++i) {\n                M[i] = new Array(n);\n                for (var j = 0; j < n; ++j) {\n                    M[i][j] = f(i, j);\n                }\n            }\n            return M;\n        };\n\n        Descent.prototype.offsetDir = function () {\n            var _this = this;\n            var u = new Array(this.k);\n            var l = 0;\n            for (var i = 0; i < this.k; ++i) {\n                var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;\n                l += x * x;\n            }\n            l = Math.sqrt(l);\n            return u.map(function (x) {\n                return x *= _this.minD / l;\n            });\n        };\n\n        Descent.prototype.computeDerivatives = function (x) {\n            var _this = this;\n            var n = this.n;\n            if (n < 1)\n                return;\n            var i;\n\n            var d = new Array(this.k);\n            var d2 = new Array(this.k);\n            var Huu = new Array(this.k);\n            var maxH = 0;\n            for (var u = 0; u < n; ++u) {\n                for (i = 0; i < this.k; ++i)\n                    Huu[i] = this.g[i][u] = 0;\n                for (var v = 0; v < n; ++v) {\n                    if (u === v)\n                        continue;\n                    while (true) {\n                        var sd2 = 0;\n                        for (i = 0; i < this.k; ++i) {\n                            var dx = d[i] = x[i][u] - x[i][v];\n                            sd2 += d2[i] = dx * dx;\n                        }\n                        if (sd2 > 1e-9)\n                            break;\n                        var rd = this.offsetDir();\n                        for (i = 0; i < this.k; ++i)\n                            x[i][v] += rd[i];\n                    }\n                    var l = Math.sqrt(sd2);\n                    var D = this.D[u][v];\n                    var weight = this.G != null ? this.G[u][v] : 1;\n                    if (weight > 1 && l > D || !isFinite(D)) {\n                        for (i = 0; i < this.k; ++i)\n                            this.H[i][u][v] = 0;\n                        continue;\n                    }\n                    if (weight > 1) {\n                        weight = 1;\n                    }\n                    var D2 = D * D;\n                    var gs = weight * (l - D) / (D2 * l);\n                    var hs = -weight / (D2 * l * l * l);\n                    if (!isFinite(gs))\n                        console.log(gs);\n                    for (i = 0; i < this.k; ++i) {\n                        this.g[i][u] += d[i] * gs;\n                        Huu[i] -= this.H[i][u][v] = hs * (D * (d2[i] - sd2) + l * sd2);\n                    }\n                }\n                for (i = 0; i < this.k; ++i)\n                    maxH = Math.max(maxH, this.H[i][u][u] = Huu[i]);\n            }\n            if (!this.locks.isEmpty()) {\n                this.locks.apply(function (u, p) {\n                    for (i = 0; i < _this.k; ++i) {\n                        _this.H[i][u][u] += maxH;\n                        _this.g[i][u] -= maxH * (p[i] - x[i][u]);\n                    }\n                });\n            }\n        };\n\n        Descent.dotProd = function (a, b) {\n            var x = 0, i = a.length;\n            while (i--)\n                x += a[i] * b[i];\n            return x;\n        };\n\n        Descent.rightMultiply = function (m, v, r) {\n            var i = m.length;\n            while (i--)\n                r[i] = Descent.dotProd(m[i], v);\n        };\n\n        Descent.prototype.computeStepSize = function (d) {\n            var numerator = 0, denominator = 0;\n            for (var i = 0; i < 2; ++i) {\n                numerator += Descent.dotProd(this.g[i], d[i]);\n                Descent.rightMultiply(this.H[i], d[i], this.Hd[i]);\n                denominator += Descent.dotProd(d[i], this.Hd[i]);\n            }\n            if (denominator === 0 || !isFinite(denominator))\n                return 0;\n            return numerator / denominator;\n        };\n\n        Descent.prototype.reduceStress = function () {\n            this.computeDerivatives(this.x);\n            var alpha = this.computeStepSize(this.g);\n            for (var i = 0; i < this.k; ++i) {\n                this.takeDescentStep(this.x[i], this.g[i], alpha);\n            }\n            return this.computeStress();\n        };\n\n        Descent.copy = function (a, b) {\n            var m = a.length, n = b[0].length;\n            for (var i = 0; i < m; ++i) {\n                for (var j = 0; j < n; ++j) {\n                    b[i][j] = a[i][j];\n                }\n            }\n        };\n\n        Descent.prototype.stepAndProject = function (x0, r, d, stepSize) {\n            Descent.copy(x0, r);\n            this.takeDescentStep(r[0], d[0], stepSize);\n            if (this.project)\n                this.project[0](x0[0], x0[1], r[0]);\n            this.takeDescentStep(r[1], d[1], stepSize);\n            if (this.project)\n                this.project[1](r[0], x0[1], r[1]);\n        };\n\n        Descent.mApply = function (m, n, f) {\n            var i = m;\n            while (i-- > 0) {\n                var j = n;\n                while (j-- > 0)\n                    f(i, j);\n            }\n        };\n        Descent.prototype.matrixApply = function (f) {\n            Descent.mApply(this.k, this.n, f);\n        };\n\n        Descent.prototype.computeNextPosition = function (x0, r) {\n            var _this = this;\n            this.computeDerivatives(x0);\n            var alpha = this.computeStepSize(this.g);\n            this.stepAndProject(x0, r, this.g, alpha);\n\n            for (var u = 0; u < this.n; ++u)\n                for (var i = 0; i < this.k; ++i)\n                    if (isNaN(r[i][u]))\n                        debugger;\n\n            if (this.project) {\n                this.matrixApply(function (i, j) {\n                    return _this.e[i][j] = x0[i][j] - r[i][j];\n                });\n                var beta = this.computeStepSize(this.e);\n                beta = Math.max(0.2, Math.min(beta, 1));\n                this.stepAndProject(x0, r, this.e, beta);\n            }\n        };\n\n        Descent.prototype.run = function (iterations) {\n            var stress = Number.MAX_VALUE, converged = false;\n            while (!converged && iterations-- > 0) {\n                var s = this.rungeKutta();\n                converged = Math.abs(stress / s - 1) < this.threshold;\n                stress = s;\n            }\n            return stress;\n        };\n\n        Descent.prototype.rungeKutta = function () {\n            var _this = this;\n            this.computeNextPosition(this.x, this.a);\n            Descent.mid(this.x, this.a, this.ia);\n            this.computeNextPosition(this.ia, this.b);\n            Descent.mid(this.x, this.b, this.ib);\n            this.computeNextPosition(this.ib, this.c);\n            this.computeNextPosition(this.c, this.d);\n            var disp = 0;\n            this.matrixApply(function (i, j) {\n                var x = (_this.a[i][j] + 2.0 * _this.b[i][j] + 2.0 * _this.c[i][j] + _this.d[i][j]) / 6.0, d = _this.x[i][j] - x;\n                disp += d * d;\n                _this.x[i][j] = x;\n            });\n            return disp;\n        };\n\n        Descent.mid = function (a, b, m) {\n            Descent.mApply(a.length, a[0].length, function (i, j) {\n                return m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0;\n            });\n        };\n\n        Descent.prototype.takeDescentStep = function (x, d, stepSize) {\n            for (var i = 0; i < this.n; ++i) {\n                x[i] = x[i] - stepSize * d[i];\n            }\n        };\n\n        Descent.prototype.computeStress = function () {\n            var stress = 0;\n            for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {\n                for (var v = u + 1, n = this.n; v < n; ++v) {\n                    var l = 0;\n                    for (var i = 0; i < this.k; ++i) {\n                        var dx = this.x[i][u] - this.x[i][v];\n                        l += dx * dx;\n                    }\n                    l = Math.sqrt(l);\n                    var d = this.D[u][v];\n                    if (!isFinite(d))\n                        continue;\n                    var rl = d - l;\n                    var d2 = d * d;\n                    stress += rl * rl / d2;\n                }\n            }\n            return stress;\n        };\n        Descent.zeroDistance = 1e-10;\n        return Descent;\n    })();\n    cola.Descent = Descent;\n\n    var PseudoRandom = (function () {\n        function PseudoRandom(seed) {\n            if (typeof seed === \"undefined\") { seed = 1; }\n            this.seed = seed;\n            this.a = 214013;\n            this.c = 2531011;\n            this.m = 2147483648;\n            this.range = 32767;\n        }\n        PseudoRandom.prototype.getNext = function () {\n            this.seed = (this.seed * this.a + this.c) % this.m;\n            return (this.seed >> 16) / this.range;\n        };\n\n        PseudoRandom.prototype.getNextBetween = function (min, max) {\n            return min + this.getNext() * (max - min);\n        };\n        return PseudoRandom;\n    })();\n    cola.PseudoRandom = PseudoRandom;\n})(cola || (cola = {}));\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar cola;\n(function (cola) {\n    (function (geom) {\n        var Point = (function () {\n            function Point() {\n            }\n            return Point;\n        })();\n        geom.Point = Point;\n\n        var LineSegment = (function () {\n            function LineSegment(x1, y1, x2, y2) {\n                this.x1 = x1;\n                this.y1 = y1;\n                this.x2 = x2;\n                this.y2 = y2;\n            }\n            return LineSegment;\n        })();\n        geom.LineSegment = LineSegment;\n\n        var PolyPoint = (function (_super) {\n            __extends(PolyPoint, _super);\n            function PolyPoint() {\n                _super.apply(this, arguments);\n            }\n            return PolyPoint;\n        })(Point);\n        geom.PolyPoint = PolyPoint;\n\n        function isLeft(P0, P1, P2) {\n            return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);\n        }\n        geom.isLeft = isLeft;\n\n        function above(p, vi, vj) {\n            return isLeft(p, vi, vj) > 0;\n        }\n\n        function below(p, vi, vj) {\n            return isLeft(p, vi, vj) < 0;\n        }\n\n        function ConvexHull(S) {\n            var P = S.slice(0).sort(function (a, b) {\n                return a.x !== b.x ? b.x - a.x : b.y - a.y;\n            });\n            var n = S.length, i;\n            var minmin = 0;\n            var xmin = P[0].x;\n            for (i = 1; i < n; ++i) {\n                if (P[i].x !== xmin)\n                    break;\n            }\n            var minmax = i - 1;\n            var H = [];\n            H.push(P[minmin]);\n            if (minmax === n - 1) {\n                if (P[minmax].y !== P[minmin].y)\n                    H.push(P[minmax]);\n            } else {\n                var maxmin, maxmax = n - 1;\n                var xmax = P[n - 1].x;\n                for (i = n - 2; i >= 0; i--)\n                    if (P[i].x !== xmax)\n                        break;\n                maxmin = i + 1;\n\n                i = minmax;\n                while (++i <= maxmin) {\n                    if (isLeft(P[minmin], P[maxmin], P[i]) >= 0 && i < maxmin)\n                        continue;\n\n                    while (H.length > 1) {\n                        if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\n                            break;\n                        else\n                            H.length -= 1;\n                    }\n                    if (i != minmin)\n                        H.push(P[i]);\n                }\n\n                if (maxmax != maxmin)\n                    H.push(P[maxmax]);\n                var bot = H.length;\n                i = maxmin;\n                while (--i >= minmax) {\n                    if (isLeft(P[maxmax], P[minmax], P[i]) >= 0 && i > minmax)\n                        continue;\n\n                    while (H.length > bot) {\n                        if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\n                            break;\n                        else\n                            H.length -= 1;\n                    }\n                    if (i != minmin)\n                        H.push(P[i]);\n                }\n            }\n            return H;\n        }\n        geom.ConvexHull = ConvexHull;\n\n        function clockwiseRadialSweep(p, P, f) {\n            P.slice(0).sort(function (a, b) {\n                return Math.atan2(a.y - p.y, a.x - p.x) - Math.atan2(b.y - p.y, b.x - p.x);\n            }).forEach(f);\n        }\n        geom.clockwiseRadialSweep = clockwiseRadialSweep;\n\n        function nextPolyPoint(p, ps) {\n            if (p.polyIndex === ps.length - 1)\n                return ps[0];\n            return ps[p.polyIndex + 1];\n        }\n\n        function prevPolyPoint(p, ps) {\n            if (p.polyIndex === 0)\n                return ps[ps.length - 1];\n            return ps[p.polyIndex - 1];\n        }\n\n        function tangent_PointPolyC(P, V) {\n            return { rtan: Rtangent_PointPolyC(P, V), ltan: Ltangent_PointPolyC(P, V) };\n        }\n\n        function Rtangent_PointPolyC(P, V) {\n            var n = V.length - 1;\n\n            var a, b, c;\n            var upA, dnC;\n\n            if (below(P, V[1], V[0]) && !above(P, V[n - 1], V[0]))\n                return 0;\n\n            for (a = 0, b = n; ;) {\n                if (b - a === 1)\n                    if (above(P, V[a], V[b]))\n                        return a;\n                    else\n                        return b;\n\n                c = Math.floor((a + b) / 2);\n                dnC = below(P, V[c + 1], V[c]);\n                if (dnC && !above(P, V[c - 1], V[c]))\n                    return c;\n\n                upA = above(P, V[a + 1], V[a]);\n                if (upA) {\n                    if (dnC)\n                        b = c;\n                    else {\n                        if (above(P, V[a], V[c]))\n                            b = c;\n                        else\n                            a = c;\n                    }\n                } else {\n                    if (!dnC)\n                        a = c;\n                    else {\n                        if (below(P, V[a], V[c]))\n                            b = c;\n                        else\n                            a = c;\n                    }\n                }\n            }\n        }\n\n        function Ltangent_PointPolyC(P, V) {\n            var n = V.length - 1;\n\n            var a, b, c;\n            var dnA, dnC;\n\n            if (above(P, V[n - 1], V[0]) && !below(P, V[1], V[0]))\n                return 0;\n\n            for (a = 0, b = n; ;) {\n                if (b - a === 1)\n                    if (below(P, V[a], V[b]))\n                        return a;\n                    else\n                        return b;\n\n                c = Math.floor((a + b) / 2);\n                dnC = below(P, V[c + 1], V[c]);\n                if (above(P, V[c - 1], V[c]) && !dnC)\n                    return c;\n\n                dnA = below(P, V[a + 1], V[a]);\n                if (dnA) {\n                    if (!dnC)\n                        b = c;\n                    else {\n                        if (below(P, V[a], V[c]))\n                            b = c;\n                        else\n                            a = c;\n                    }\n                } else {\n                    if (dnC)\n                        a = c;\n                    else {\n                        if (above(P, V[a], V[c]))\n                            b = c;\n                        else\n                            a = c;\n                    }\n                }\n            }\n        }\n\n        function tangent_PolyPolyC(V, W, t1, t2, cmp1, cmp2) {\n            var ix1, ix2;\n\n            ix1 = t1(W[0], V);\n            ix2 = t2(V[ix1], W);\n\n            var done = false;\n            while (!done) {\n                done = true;\n                while (true) {\n                    if (ix1 === V.length - 1)\n                        ix1 = 0;\n                    if (cmp1(W[ix2], V[ix1], V[ix1 + 1]))\n                        break;\n                    ++ix1;\n                }\n                while (true) {\n                    if (ix2 === 0)\n                        ix2 = W.length - 1;\n                    if (cmp2(V[ix1], W[ix2], W[ix2 - 1]))\n                        break;\n                    --ix2;\n                    done = false;\n                }\n            }\n            return { t1: ix1, t2: ix2 };\n        }\n        geom.tangent_PolyPolyC = tangent_PolyPolyC;\n\n        function LRtangent_PolyPolyC(V, W) {\n            var rl = RLtangent_PolyPolyC(W, V);\n            return { t1: rl.t2, t2: rl.t1 };\n        }\n        geom.LRtangent_PolyPolyC = LRtangent_PolyPolyC;\n\n        function RLtangent_PolyPolyC(V, W) {\n            return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);\n        }\n        geom.RLtangent_PolyPolyC = RLtangent_PolyPolyC;\n\n        function LLtangent_PolyPolyC(V, W) {\n            return tangent_PolyPolyC(V, W, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);\n        }\n        geom.LLtangent_PolyPolyC = LLtangent_PolyPolyC;\n\n        function RRtangent_PolyPolyC(V, W) {\n            return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);\n        }\n        geom.RRtangent_PolyPolyC = RRtangent_PolyPolyC;\n\n        var BiTangent = (function () {\n            function BiTangent(t1, t2) {\n                this.t1 = t1;\n                this.t2 = t2;\n            }\n            return BiTangent;\n        })();\n        geom.BiTangent = BiTangent;\n\n        var BiTangents = (function () {\n            function BiTangents() {\n            }\n            return BiTangents;\n        })();\n        geom.BiTangents = BiTangents;\n\n        var TVGPoint = (function (_super) {\n            __extends(TVGPoint, _super);\n            function TVGPoint() {\n                _super.apply(this, arguments);\n            }\n            return TVGPoint;\n        })(Point);\n        geom.TVGPoint = TVGPoint;\n\n        var VisibilityVertex = (function () {\n            function VisibilityVertex(id, polyid, polyvertid, p) {\n                this.id = id;\n                this.polyid = polyid;\n                this.polyvertid = polyvertid;\n                this.p = p;\n                p.vv = this;\n            }\n            return VisibilityVertex;\n        })();\n        geom.VisibilityVertex = VisibilityVertex;\n\n        var VisibilityEdge = (function () {\n            function VisibilityEdge(source, target) {\n                this.source = source;\n                this.target = target;\n            }\n            VisibilityEdge.prototype.length = function () {\n                var dx = this.source.p.x - this.target.p.x;\n                var dy = this.source.p.y - this.target.p.y;\n                return Math.sqrt(dx * dx + dy * dy);\n            };\n            return VisibilityEdge;\n        })();\n        geom.VisibilityEdge = VisibilityEdge;\n\n        var TangentVisibilityGraph = (function () {\n            function TangentVisibilityGraph(P, g0) {\n                this.P = P;\n                this.V = [];\n                this.E = [];\n                if (!g0) {\n                    var n = P.length;\n                    for (var i = 0; i < n; i++) {\n                        var p = P[i];\n                        for (var j = 0; j < p.length; ++j) {\n                            var pj = p[j], vv = new VisibilityVertex(this.V.length, i, j, pj);\n                            this.V.push(vv);\n                            if (j > 0)\n                                this.E.push(new VisibilityEdge(p[j - 1].vv, vv));\n                        }\n                    }\n                    for (var i = 0; i < n - 1; i++) {\n                        var Pi = P[i];\n                        for (var j = i + 1; j < n; j++) {\n                            var Pj = P[j], t = geom.tangents(Pi, Pj);\n                            for (var q in t) {\n                                var c = t[q], source = Pi[c.t1], target = Pj[c.t2];\n                                this.addEdgeIfVisible(source, target, i, j);\n                            }\n                        }\n                    }\n                } else {\n                    this.V = g0.V.slice(0);\n                    this.E = g0.E.slice(0);\n                }\n            }\n            TangentVisibilityGraph.prototype.addEdgeIfVisible = function (u, v, i1, i2) {\n                if (!this.intersectsPolys(new LineSegment(u.x, u.y, v.x, v.y), i1, i2)) {\n                    this.E.push(new VisibilityEdge(u.vv, v.vv));\n                }\n            };\n            TangentVisibilityGraph.prototype.addPoint = function (p, i1) {\n                var n = this.P.length;\n                this.V.push(new VisibilityVertex(this.V.length, n, 0, p));\n                for (var i = 0; i < n; ++i) {\n                    if (i === i1)\n                        continue;\n                    var poly = this.P[i], t = tangent_PointPolyC(p, poly);\n                    this.addEdgeIfVisible(p, poly[t.ltan], i1, i);\n                    this.addEdgeIfVisible(p, poly[t.rtan], i1, i);\n                }\n                return p.vv;\n            };\n            TangentVisibilityGraph.prototype.intersectsPolys = function (l, i1, i2) {\n                for (var i = 0, n = this.P.length; i < n; ++i) {\n                    if (i != i1 && i != i2 && intersects(l, this.P[i]).length > 0) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            return TangentVisibilityGraph;\n        })();\n        geom.TangentVisibilityGraph = TangentVisibilityGraph;\n\n        function intersects(l, P) {\n            var ints = [];\n            for (var i = 1, n = P.length; i < n; ++i) {\n                var int = cola.vpsc.Rectangle.lineIntersection(l.x1, l.y1, l.x2, l.y2, P[i - 1].x, P[i - 1].y, P[i].x, P[i].y);\n                if (int)\n                    ints.push(int);\n            }\n            return ints;\n        }\n\n        function tangents(V, W) {\n            var m = V.length - 1, n = W.length - 1;\n            var bt = new BiTangents();\n            for (var i = 0; i < m; ++i) {\n                for (var j = 0; j < n; ++j) {\n                    var v1 = V[i == 0 ? m - 1 : i - 1];\n                    var v2 = V[i];\n                    var v3 = V[i + 1];\n                    var w1 = W[j == 0 ? n - 1 : j - 1];\n                    var w2 = W[j];\n                    var w3 = W[j + 1];\n                    var v1v2w2 = isLeft(v1, v2, w2);\n                    var v2w1w2 = isLeft(v2, w1, w2);\n                    var v2w2w3 = isLeft(v2, w2, w3);\n                    var w1w2v2 = isLeft(w1, w2, v2);\n                    var w2v1v2 = isLeft(w2, v1, v2);\n                    var w2v2v3 = isLeft(w2, v2, v3);\n                    if (v1v2w2 >= 0 && v2w1w2 >= 0 && v2w2w3 < 0 && w1w2v2 >= 0 && w2v1v2 >= 0 && w2v2v3 < 0) {\n                        bt.ll = new BiTangent(i, j);\n                    } else if (v1v2w2 <= 0 && v2w1w2 <= 0 && v2w2w3 > 0 && w1w2v2 <= 0 && w2v1v2 <= 0 && w2v2v3 > 0) {\n                        bt.rr = new BiTangent(i, j);\n                    } else if (v1v2w2 <= 0 && v2w1w2 > 0 && v2w2w3 <= 0 && w1w2v2 >= 0 && w2v1v2 < 0 && w2v2v3 >= 0) {\n                        bt.rl = new BiTangent(i, j);\n                    } else if (v1v2w2 >= 0 && v2w1w2 < 0 && v2w2w3 >= 0 && w1w2v2 <= 0 && w2v1v2 > 0 && w2v2v3 <= 0) {\n                        bt.lr = new BiTangent(i, j);\n                    }\n                }\n            }\n            return bt;\n        }\n        geom.tangents = tangents;\n\n        function isPointInsidePoly(p, poly) {\n            for (var i = 1, n = poly.length; i < n; ++i)\n                if (below(poly[i - 1], poly[i], p))\n                    return false;\n            return true;\n        }\n\n        function isAnyPInQ(p, q) {\n            return !p.every(function (v) {\n                return !isPointInsidePoly(v, q);\n            });\n        }\n\n        function polysOverlap(p, q) {\n            if (isAnyPInQ(p, q))\n                return true;\n            if (isAnyPInQ(q, p))\n                return true;\n            for (var i = 1, n = p.length; i < n; ++i) {\n                var v = p[i], u = p[i - 1];\n                if (intersects(new LineSegment(u.x, u.y, v.x, v.y), q).length > 0)\n                    return true;\n            }\n            return false;\n        }\n        geom.polysOverlap = polysOverlap;\n    })(cola.geom || (cola.geom = {}));\n    var geom = cola.geom;\n})(cola || (cola = {}));\nvar cola;\n(function (cola) {\n    (function (vpsc) {\n        var PositionStats = (function () {\n            function PositionStats(scale) {\n                this.scale = scale;\n                this.AB = 0;\n                this.AD = 0;\n                this.A2 = 0;\n            }\n            PositionStats.prototype.addVariable = function (v) {\n                var ai = this.scale / v.scale;\n                var bi = v.offset / v.scale;\n                var wi = v.weight;\n                this.AB += wi * ai * bi;\n                this.AD += wi * ai * v.desiredPosition;\n                this.A2 += wi * ai * ai;\n            };\n\n            PositionStats.prototype.getPosn = function () {\n                return (this.AD - this.AB) / this.A2;\n            };\n            return PositionStats;\n        })();\n        vpsc.PositionStats = PositionStats;\n\n        var Constraint = (function () {\n            function Constraint(left, right, gap, equality) {\n                if (typeof equality === \"undefined\") { equality = false; }\n                this.left = left;\n                this.right = right;\n                this.gap = gap;\n                this.equality = equality;\n                this.active = false;\n                this.unsatisfiable = false;\n                this.left = left;\n                this.right = right;\n                this.gap = gap;\n                this.equality = equality;\n            }\n            Constraint.prototype.slack = function () {\n                return this.unsatisfiable ? Number.MAX_VALUE : this.right.scale * this.right.position() - this.gap - this.left.scale * this.left.position();\n            };\n            return Constraint;\n        })();\n        vpsc.Constraint = Constraint;\n\n        var Variable = (function () {\n            function Variable(desiredPosition, weight, scale) {\n                if (typeof weight === \"undefined\") { weight = 1; }\n                if (typeof scale === \"undefined\") { scale = 1; }\n                this.desiredPosition = desiredPosition;\n                this.weight = weight;\n                this.scale = scale;\n                this.offset = 0;\n            }\n            Variable.prototype.dfdv = function () {\n                return 2.0 * this.weight * (this.position() - this.desiredPosition);\n            };\n\n            Variable.prototype.position = function () {\n                return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\n            };\n\n            Variable.prototype.visitNeighbours = function (prev, f) {\n                var ff = function (c, next) {\n                    return c.active && prev !== next && f(c, next);\n                };\n                this.cOut.forEach(function (c) {\n                    return ff(c, c.right);\n                });\n                this.cIn.forEach(function (c) {\n                    return ff(c, c.left);\n                });\n            };\n            return Variable;\n        })();\n        vpsc.Variable = Variable;\n\n        var Block = (function () {\n            function Block(v) {\n                this.vars = [];\n                v.offset = 0;\n                this.ps = new PositionStats(v.scale);\n                this.addVariable(v);\n            }\n            Block.prototype.addVariable = function (v) {\n                v.block = this;\n                this.vars.push(v);\n                this.ps.addVariable(v);\n                this.posn = this.ps.getPosn();\n            };\n\n            Block.prototype.updateWeightedPosition = function () {\n                this.ps.AB = this.ps.AD = this.ps.A2 = 0;\n                for (var i = 0, n = this.vars.length; i < n; ++i)\n                    this.ps.addVariable(this.vars[i]);\n                this.posn = this.ps.getPosn();\n            };\n\n            Block.prototype.compute_lm = function (v, u, postAction) {\n                var _this = this;\n                var dfdv = v.dfdv();\n                v.visitNeighbours(u, function (c, next) {\n                    var _dfdv = _this.compute_lm(next, v, postAction);\n                    if (next === c.right) {\n                        dfdv += _dfdv * c.left.scale;\n                        c.lm = _dfdv;\n                    } else {\n                        dfdv += _dfdv * c.right.scale;\n                        c.lm = -_dfdv;\n                    }\n                    postAction(c);\n                });\n                return dfdv / v.scale;\n            };\n\n            Block.prototype.populateSplitBlock = function (v, prev) {\n                var _this = this;\n                v.visitNeighbours(prev, function (c, next) {\n                    next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\n                    _this.addVariable(next);\n                    _this.populateSplitBlock(next, v);\n                });\n            };\n\n            Block.prototype.traverse = function (visit, acc, v, prev) {\n                var _this = this;\n                if (typeof v === \"undefined\") { v = this.vars[0]; }\n                if (typeof prev === \"undefined\") { prev = null; }\n                v.visitNeighbours(prev, function (c, next) {\n                    acc.push(visit(c));\n                    _this.traverse(visit, acc, next, v);\n                });\n            };\n\n            Block.prototype.findMinLM = function () {\n                var m = null;\n                this.compute_lm(this.vars[0], null, function (c) {\n                    if (!c.equality && (m === null || c.lm < m.lm))\n                        m = c;\n                });\n                return m;\n            };\n\n            Block.prototype.findMinLMBetween = function (lv, rv) {\n                this.compute_lm(lv, null, function () {\n                });\n                var m = null;\n                this.findPath(lv, null, rv, function (c, next) {\n                    if (!c.equality && c.right === next && (m === null || c.lm < m.lm))\n                        m = c;\n                });\n                return m;\n            };\n\n            Block.prototype.findPath = function (v, prev, to, visit) {\n                var _this = this;\n                var endFound = false;\n                v.visitNeighbours(prev, function (c, next) {\n                    if (!endFound && (next === to || _this.findPath(next, v, to, visit))) {\n                        endFound = true;\n                        visit(c, next);\n                    }\n                });\n                return endFound;\n            };\n\n            Block.prototype.isActiveDirectedPathBetween = function (u, v) {\n                if (u === v)\n                    return true;\n                var i = u.cOut.length;\n                while (i--) {\n                    var c = u.cOut[i];\n                    if (c.active && this.isActiveDirectedPathBetween(c.right, v))\n                        return true;\n                }\n                return false;\n            };\n\n            Block.split = function (c) {\n                c.active = false;\n                return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\n            };\n\n            Block.createSplitBlock = function (startVar) {\n                var b = new Block(startVar);\n                b.populateSplitBlock(startVar, null);\n                return b;\n            };\n\n            Block.prototype.splitBetween = function (vl, vr) {\n                var c = this.findMinLMBetween(vl, vr);\n                if (c !== null) {\n                    var bs = Block.split(c);\n                    return { constraint: c, lb: bs[0], rb: bs[1] };\n                }\n\n                return null;\n            };\n\n            Block.prototype.mergeAcross = function (b, c, dist) {\n                c.active = true;\n                for (var i = 0, n = b.vars.length; i < n; ++i) {\n                    var v = b.vars[i];\n                    v.offset += dist;\n                    this.addVariable(v);\n                }\n                this.posn = this.ps.getPosn();\n            };\n\n            Block.prototype.cost = function () {\n                var sum = 0, i = this.vars.length;\n                while (i--) {\n                    var v = this.vars[i], d = v.position() - v.desiredPosition;\n                    sum += d * d * v.weight;\n                }\n                return sum;\n            };\n            return Block;\n        })();\n        vpsc.Block = Block;\n\n        var Blocks = (function () {\n            function Blocks(vs) {\n                this.vs = vs;\n                var n = vs.length;\n                this.list = new Array(n);\n                while (n--) {\n                    var b = new Block(vs[n]);\n                    this.list[n] = b;\n                    b.blockInd = n;\n                }\n            }\n            Blocks.prototype.cost = function () {\n                var sum = 0, i = this.list.length;\n                while (i--)\n                    sum += this.list[i].cost();\n                return sum;\n            };\n\n            Blocks.prototype.insert = function (b) {\n                b.blockInd = this.list.length;\n                this.list.push(b);\n            };\n\n            Blocks.prototype.remove = function (b) {\n                var last = this.list.length - 1;\n                var swapBlock = this.list[last];\n                this.list.length = last;\n                if (b !== swapBlock) {\n                    this.list[b.blockInd] = swapBlock;\n                    swapBlock.blockInd = b.blockInd;\n                }\n            };\n\n            Blocks.prototype.merge = function (c) {\n                var l = c.left.block, r = c.right.block;\n\n                var dist = c.right.offset - c.left.offset - c.gap;\n                if (l.vars.length < r.vars.length) {\n                    r.mergeAcross(l, c, dist);\n                    this.remove(l);\n                } else {\n                    l.mergeAcross(r, c, -dist);\n                    this.remove(r);\n                }\n            };\n\n            Blocks.prototype.forEach = function (f) {\n                this.list.forEach(f);\n            };\n\n            Blocks.prototype.updateBlockPositions = function () {\n                this.list.forEach(function (b) {\n                    return b.updateWeightedPosition();\n                });\n            };\n\n            Blocks.prototype.split = function (inactive) {\n                var _this = this;\n                this.updateBlockPositions();\n                this.list.forEach(function (b) {\n                    var v = b.findMinLM();\n                    if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\n                        b = v.left.block;\n                        Block.split(v).forEach(function (nb) {\n                            return _this.insert(nb);\n                        });\n                        _this.remove(b);\n                        inactive.push(v);\n                    }\n                });\n            };\n            return Blocks;\n        })();\n        vpsc.Blocks = Blocks;\n\n        var Solver = (function () {\n            function Solver(vs, cs) {\n                this.vs = vs;\n                this.cs = cs;\n                this.vs = vs;\n                vs.forEach(function (v) {\n                    v.cIn = [], v.cOut = [];\n                });\n                this.cs = cs;\n                cs.forEach(function (c) {\n                    c.left.cOut.push(c);\n                    c.right.cIn.push(c);\n                });\n                this.inactive = cs.map(function (c) {\n                    c.active = false;\n                    return c;\n                });\n                this.bs = null;\n            }\n            Solver.prototype.cost = function () {\n                return this.bs.cost();\n            };\n\n            Solver.prototype.setStartingPositions = function (ps) {\n                this.inactive = this.cs.map(function (c) {\n                    c.active = false;\n                    return c;\n                });\n                this.bs = new Blocks(this.vs);\n                this.bs.forEach(function (b, i) {\n                    return b.posn = ps[i];\n                });\n            };\n\n            Solver.prototype.setDesiredPositions = function (ps) {\n                this.vs.forEach(function (v, i) {\n                    return v.desiredPosition = ps[i];\n                });\n            };\n\n            Solver.prototype.mostViolated = function () {\n                var minSlack = Number.MAX_VALUE, v = null, l = this.inactive, n = l.length, deletePoint = n;\n                for (var i = 0; i < n; ++i) {\n                    var c = l[i];\n                    if (c.unsatisfiable)\n                        continue;\n                    var slack = c.slack();\n                    if (c.equality || slack < minSlack) {\n                        minSlack = slack;\n                        v = c;\n                        deletePoint = i;\n                        if (c.equality)\n                            break;\n                    }\n                }\n                if (deletePoint !== n && (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality)) {\n                    l[deletePoint] = l[n - 1];\n                    l.length = n - 1;\n                }\n                return v;\n            };\n\n            Solver.prototype.satisfy = function () {\n                if (this.bs == null) {\n                    this.bs = new Blocks(this.vs);\n                }\n\n                this.bs.split(this.inactive);\n                var v = null;\n                while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\n                    var lb = v.left.block, rb = v.right.block;\n\n                    if (lb !== rb) {\n                        this.bs.merge(v);\n                    } else {\n                        if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\n                            v.unsatisfiable = true;\n                            continue;\n                        }\n\n                        var split = lb.splitBetween(v.left, v.right);\n                        if (split !== null) {\n                            this.bs.insert(split.lb);\n                            this.bs.insert(split.rb);\n                            this.bs.remove(lb);\n                            this.inactive.push(split.constraint);\n                        } else {\n                            v.unsatisfiable = true;\n                            continue;\n                        }\n                        if (v.slack() >= 0) {\n                            this.inactive.push(v);\n                        } else {\n                            this.bs.merge(v);\n                        }\n                    }\n                }\n            };\n\n            Solver.prototype.solve = function () {\n                this.satisfy();\n                var lastcost = Number.MAX_VALUE, cost = this.bs.cost();\n                while (Math.abs(lastcost - cost) > 0.0001) {\n                    this.satisfy();\n                    lastcost = cost;\n                    cost = this.bs.cost();\n                }\n                return cost;\n            };\n            Solver.LAGRANGIAN_TOLERANCE = -1e-4;\n            Solver.ZERO_UPPERBOUND = -1e-10;\n            return Solver;\n        })();\n        vpsc.Solver = Solver;\n    })(cola.vpsc || (cola.vpsc = {}));\n    var vpsc = cola.vpsc;\n})(cola || (cola = {}));\nvar cola;\n(function (cola) {\n    (function (vpsc) {\n        function computeGroupBounds(g) {\n            g.bounds = typeof g.leaves !== \"undefined\" ? g.leaves.reduce(function (r, c) {\n                return c.bounds.union(r);\n            }, Rectangle.empty()) : Rectangle.empty();\n            if (typeof g.groups !== \"undefined\")\n                g.bounds = g.groups.reduce(function (r, c) {\n                    return computeGroupBounds(c).union(r);\n                }, g.bounds);\n            g.bounds = g.bounds.inflate(g.padding);\n            return g.bounds;\n        }\n        vpsc.computeGroupBounds = computeGroupBounds;\n\n        var Rectangle = (function () {\n            function Rectangle(x, X, y, Y) {\n                this.x = x;\n                this.X = X;\n                this.y = y;\n                this.Y = Y;\n            }\n            Rectangle.empty = function () {\n                return new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);\n            };\n\n            Rectangle.prototype.cx = function () {\n                return (this.x + this.X) / 2;\n            };\n\n            Rectangle.prototype.cy = function () {\n                return (this.y + this.Y) / 2;\n            };\n\n            Rectangle.prototype.overlapX = function (r) {\n                var ux = this.cx(), vx = r.cx();\n                if (ux <= vx && r.x < this.X)\n                    return this.X - r.x;\n                if (vx <= ux && this.x < r.X)\n                    return r.X - this.x;\n                return 0;\n            };\n\n            Rectangle.prototype.overlapY = function (r) {\n                var uy = this.cy(), vy = r.cy();\n                if (uy <= vy && r.y < this.Y)\n                    return this.Y - r.y;\n                if (vy <= uy && this.y < r.Y)\n                    return r.Y - this.y;\n                return 0;\n            };\n\n            Rectangle.prototype.setXCentre = function (cx) {\n                var dx = cx - this.cx();\n                this.x += dx;\n                this.X += dx;\n            };\n\n            Rectangle.prototype.setYCentre = function (cy) {\n                var dy = cy - this.cy();\n                this.y += dy;\n                this.Y += dy;\n            };\n\n            Rectangle.prototype.width = function () {\n                return this.X - this.x;\n            };\n\n            Rectangle.prototype.height = function () {\n                return this.Y - this.y;\n            };\n\n            Rectangle.prototype.union = function (r) {\n                return new Rectangle(Math.min(this.x, r.x), Math.max(this.X, r.X), Math.min(this.y, r.y), Math.max(this.Y, r.Y));\n            };\n\n            Rectangle.prototype.lineIntersections = function (x1, y1, x2, y2) {\n                var sides = [\n                    [this.x, this.y, this.X, this.y],\n                    [this.X, this.y, this.X, this.Y],\n                    [this.X, this.Y, this.x, this.Y],\n                    [this.x, this.Y, this.x, this.y]];\n                var intersections = [];\n                for (var i = 0; i < 4; ++i) {\n                    var r = Rectangle.lineIntersection(x1, y1, x2, y2, sides[i][0], sides[i][1], sides[i][2], sides[i][3]);\n                    if (r !== null)\n                        intersections.push({ x: r.x, y: r.y });\n                }\n                return intersections;\n            };\n\n            Rectangle.prototype.rayIntersection = function (x2, y2) {\n                var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);\n                return ints.length > 0 ? ints[0] : null;\n            };\n\n            Rectangle.prototype.vertices = function () {\n                return [\n                    { x: this.x, y: this.y },\n                    { x: this.X, y: this.y },\n                    { x: this.X, y: this.Y },\n                    { x: this.x, y: this.Y },\n                    { x: this.x, y: this.y }];\n            };\n\n            Rectangle.lineIntersection = function (x1, y1, x2, y2, x3, y3, x4, y4) {\n                var dx12 = x2 - x1, dx34 = x4 - x3, dy12 = y2 - y1, dy34 = y4 - y3, denominator = dy34 * dx12 - dx34 * dy12;\n                if (denominator == 0)\n                    return null;\n                var dx31 = x1 - x3, dy31 = y1 - y3, numa = dx34 * dy31 - dy34 * dx31, a = numa / denominator, numb = dx12 * dy31 - dy12 * dx31, b = numb / denominator;\n                if (a >= 0 && a <= 1 && b >= 0 && b <= 1) {\n                    return {\n                        x: x1 + a * dx12,\n                        y: y1 + a * dy12\n                    };\n                }\n                return null;\n            };\n\n            Rectangle.prototype.inflate = function (pad) {\n                return new Rectangle(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);\n            };\n            return Rectangle;\n        })();\n        vpsc.Rectangle = Rectangle;\n\n        function makeEdgeBetween(link, source, target, ah) {\n            var si = source.rayIntersection(target.cx(), target.cy());\n            if (!si)\n                si = { x: source.cx(), y: source.cy() };\n            var ti = target.rayIntersection(source.cx(), source.cy());\n            if (!ti)\n                ti = { x: target.cx(), y: target.cy() };\n            var dx = ti.x - si.x, dy = ti.y - si.y, l = Math.sqrt(dx * dx + dy * dy), al = l - ah;\n            link.sourceIntersection = si;\n            link.targetIntersection = ti;\n            link.arrowStart = { x: si.x + al * dx / l, y: si.y + al * dy / l };\n        }\n        vpsc.makeEdgeBetween = makeEdgeBetween;\n\n        function makeEdgeTo(s, target, ah) {\n            var ti = target.rayIntersection(s.x, s.y);\n            if (!ti)\n                ti = { x: target.cx(), y: target.cy() };\n            var dx = ti.x - s.x, dy = ti.y - s.y, l = Math.sqrt(dx * dx + dy * dy);\n            return { x: ti.x - ah * dx / l, y: ti.y - ah * dy / l };\n        }\n        vpsc.makeEdgeTo = makeEdgeTo;\n\n        var Node = (function () {\n            function Node(v, r, pos) {\n                this.v = v;\n                this.r = r;\n                this.pos = pos;\n                this.prev = makeRBTree();\n                this.next = makeRBTree();\n            }\n            return Node;\n        })();\n\n        var Event = (function () {\n            function Event(isOpen, v, pos) {\n                this.isOpen = isOpen;\n                this.v = v;\n                this.pos = pos;\n            }\n            return Event;\n        })();\n\n        function compareEvents(a, b) {\n            if (a.pos > b.pos) {\n                return 1;\n            }\n            if (a.pos < b.pos) {\n                return -1;\n            }\n            if (a.isOpen) {\n                return -1;\n            }\n            return 0;\n        }\n\n        function makeRBTree() {\n            return new RBTree(function (a, b) {\n                return a.pos - b.pos;\n            });\n        }\n\n        var xRect = {\n            getCentre: function (r) {\n                return r.cx();\n            },\n            getOpen: function (r) {\n                return r.y;\n            },\n            getClose: function (r) {\n                return r.Y;\n            },\n            getSize: function (r) {\n                return r.width();\n            },\n            makeRect: function (open, close, center, size) {\n                return new Rectangle(center - size / 2, center + size / 2, open, close);\n            },\n            findNeighbours: findXNeighbours\n        };\n\n        var yRect = {\n            getCentre: function (r) {\n                return r.cy();\n            },\n            getOpen: function (r) {\n                return r.x;\n            },\n            getClose: function (r) {\n                return r.X;\n            },\n            getSize: function (r) {\n                return r.height();\n            },\n            makeRect: function (open, close, center, size) {\n                return new Rectangle(open, close, center - size / 2, center + size / 2);\n            },\n            findNeighbours: findYNeighbours\n        };\n\n        function generateGroupConstraints(root, f, minSep, isContained) {\n            if (typeof isContained === \"undefined\") { isContained = false; }\n            var padding = root.padding, gn = typeof root.groups !== 'undefined' ? root.groups.length : 0, ln = typeof root.leaves !== 'undefined' ? root.leaves.length : 0, childConstraints = !gn ? [] : root.groups.reduce(function (ccs, g) {\n                return ccs.concat(generateGroupConstraints(g, f, minSep, true));\n            }, []), n = (isContained ? 2 : 0) + ln + gn, vs = new Array(n), rs = new Array(n), i = 0, add = function (r, v) {\n                rs[i] = r;\n                vs[i++] = v;\n            };\n            if (isContained) {\n                var b = root.bounds, c = f.getCentre(b), s = f.getSize(b) / 2, open = f.getOpen(b), close = f.getClose(b), min = c - s + padding / 2, max = c + s - padding / 2;\n                root.minVar.desiredPosition = min;\n                add(f.makeRect(open, close, min, padding), root.minVar);\n                root.maxVar.desiredPosition = max;\n                add(f.makeRect(open, close, max, padding), root.maxVar);\n            }\n            if (ln)\n                root.leaves.forEach(function (l) {\n                    return add(l.bounds, l.variable);\n                });\n            if (gn)\n                root.groups.forEach(function (g) {\n                    var b = g.bounds;\n                    add(f.makeRect(f.getOpen(b), f.getClose(b), f.getCentre(b), f.getSize(b)), g.minVar);\n                });\n            var cs = generateConstraints(rs, vs, f, minSep);\n            if (gn) {\n                vs.forEach(function (v) {\n                    v.cOut = [], v.cIn = [];\n                });\n                cs.forEach(function (c) {\n                    c.left.cOut.push(c), c.right.cIn.push(c);\n                });\n                root.groups.forEach(function (g) {\n                    var gapAdjustment = (g.padding - f.getSize(g.bounds)) / 2;\n                    g.minVar.cIn.forEach(function (c) {\n                        return c.gap += gapAdjustment;\n                    });\n                    g.minVar.cOut.forEach(function (c) {\n                        c.left = g.maxVar;\n                        c.gap += gapAdjustment;\n                    });\n                });\n            }\n            return childConstraints.concat(cs);\n        }\n\n        function generateConstraints(rs, vars, rect, minSep) {\n            var i, n = rs.length;\n            var N = 2 * n;\n            console.assert(vars.length >= n);\n            var events = new Array(N);\n            for (i = 0; i < n; ++i) {\n                var r = rs[i];\n                var v = new Node(vars[i], r, rect.getCentre(r));\n                events[i] = new Event(true, v, rect.getOpen(r));\n                events[i + n] = new Event(false, v, rect.getClose(r));\n            }\n            events.sort(compareEvents);\n            var cs = new Array();\n            var scanline = makeRBTree();\n            for (i = 0; i < N; ++i) {\n                var e = events[i];\n                var v = e.v;\n                if (e.isOpen) {\n                    scanline.insert(v);\n                    rect.findNeighbours(v, scanline);\n                } else {\n                    scanline.remove(v);\n                    var makeConstraint = function (l, r) {\n                        var sep = (rect.getSize(l.r) + rect.getSize(r.r)) / 2 + minSep;\n                        cs.push(new cola.vpsc.Constraint(l.v, r.v, sep));\n                    };\n                    var visitNeighbours = function (forward, reverse, mkcon) {\n                        var u, it = v[forward].iterator();\n                        while ((u = it[forward]()) !== null) {\n                            mkcon(u, v);\n                            u[reverse].remove(v);\n                        }\n                    };\n                    visitNeighbours(\"prev\", \"next\", function (u, v) {\n                        return makeConstraint(u, v);\n                    });\n                    visitNeighbours(\"next\", \"prev\", function (u, v) {\n                        return makeConstraint(v, u);\n                    });\n                }\n            }\n            console.assert(scanline.size === 0);\n            return cs;\n        }\n\n        function findXNeighbours(v, scanline) {\n            var f = function (forward, reverse) {\n                var it = scanline.findIter(v);\n                var u;\n                while ((u = it[forward]()) !== null) {\n                    var uovervX = u.r.overlapX(v.r);\n                    if (uovervX <= 0 || uovervX <= u.r.overlapY(v.r)) {\n                        v[forward].insert(u);\n                        u[reverse].insert(v);\n                    }\n                    if (uovervX <= 0) {\n                        break;\n                    }\n                }\n            };\n            f(\"next\", \"prev\");\n            f(\"prev\", \"next\");\n        }\n\n        function findYNeighbours(v, scanline) {\n            var f = function (forward, reverse) {\n                var u = scanline.findIter(v)[forward]();\n                if (u !== null && u.r.overlapX(v.r) > 0) {\n                    v[forward].insert(u);\n                    u[reverse].insert(v);\n                }\n            };\n            f(\"next\", \"prev\");\n            f(\"prev\", \"next\");\n        }\n\n        function generateXConstraints(rs, vars) {\n            return generateConstraints(rs, vars, xRect, 1e-6);\n        }\n        vpsc.generateXConstraints = generateXConstraints;\n\n        function generateYConstraints(rs, vars) {\n            return generateConstraints(rs, vars, yRect, 1e-6);\n        }\n        vpsc.generateYConstraints = generateYConstraints;\n\n        function generateXGroupConstraints(root) {\n            return generateGroupConstraints(root, xRect, 1e-6);\n        }\n        vpsc.generateXGroupConstraints = generateXGroupConstraints;\n\n        function generateYGroupConstraints(root) {\n            return generateGroupConstraints(root, yRect, 1e-6);\n        }\n        vpsc.generateYGroupConstraints = generateYGroupConstraints;\n\n        function removeOverlaps(rs) {\n            var vs = rs.map(function (r) {\n                return new cola.vpsc.Variable(r.cx());\n            });\n            var cs = cola.vpsc.generateXConstraints(rs, vs);\n            var solver = new cola.vpsc.Solver(vs, cs);\n            solver.solve();\n            vs.forEach(function (v, i) {\n                return rs[i].setXCentre(v.position());\n            });\n            vs = rs.map(function (r) {\n                return new cola.vpsc.Variable(r.cy());\n            });\n            cs = cola.vpsc.generateYConstraints(rs, vs);\n            solver = new cola.vpsc.Solver(vs, cs);\n            solver.solve();\n            vs.forEach(function (v, i) {\n                return rs[i].setYCentre(v.position());\n            });\n        }\n        vpsc.removeOverlaps = removeOverlaps;\n\n        var IndexedVariable = (function (_super) {\n            __extends(IndexedVariable, _super);\n            function IndexedVariable(index, w) {\n                _super.call(this, 0, w);\n                this.index = index;\n            }\n            return IndexedVariable;\n        })(cola.vpsc.Variable);\n\n        var Projection = (function () {\n            function Projection(nodes, groups, rootGroup, constraints, avoidOverlaps) {\n                if (typeof rootGroup === \"undefined\") { rootGroup = null; }\n                if (typeof constraints === \"undefined\") { constraints = null; }\n                if (typeof avoidOverlaps === \"undefined\") { avoidOverlaps = false; }\n                var _this = this;\n                this.nodes = nodes;\n                this.groups = groups;\n                this.rootGroup = rootGroup;\n                this.avoidOverlaps = avoidOverlaps;\n                this.variables = nodes.map(function (v, i) {\n                    return v.variable = new IndexedVariable(i, 1);\n                });\n\n                if (constraints)\n                    this.createConstraints(constraints);\n\n                if (avoidOverlaps && rootGroup && typeof rootGroup.groups !== 'undefined') {\n                    nodes.forEach(function (v) {\n                        if (!v.width || !v.height) {\n                            v.bounds = new cola.vpsc.Rectangle(v.x, v.x, v.y, v.y);\n                            return;\n                        }\n                        var w2 = v.width / 2, h2 = v.height / 2;\n                        v.bounds = new cola.vpsc.Rectangle(v.x - w2, v.x + w2, v.y - h2, v.y + h2);\n                    });\n                    computeGroupBounds(rootGroup);\n                    var i = nodes.length;\n                    groups.forEach(function (g) {\n                        _this.variables[i] = g.minVar = new IndexedVariable(i++, 0.01);\n                        _this.variables[i] = g.maxVar = new IndexedVariable(i++, 0.01);\n                    });\n                }\n            }\n            Projection.prototype.createSeparation = function (c) {\n                return new cola.vpsc.Constraint(this.nodes[c.left].variable, this.nodes[c.right].variable, c.gap, typeof c.equality !== \"undefined\" ? c.equality : false);\n            };\n\n            Projection.prototype.makeFeasible = function (c) {\n                var _this = this;\n                if (!this.avoidOverlaps)\n                    return;\n                var axis = 'x', dim = 'width';\n                if (c.axis === 'x')\n                    axis = 'y', dim = 'height';\n                var vs = c.offsets.map(function (o) {\n                    return _this.nodes[o.node];\n                }).sort(function (a, b) {\n                    return a[axis] - b[axis];\n                });\n                var p = null;\n                vs.forEach(function (v) {\n                    if (p)\n                        v[axis] = p[axis] + p[dim] + 1;\n                    p = v;\n                });\n            };\n\n            Projection.prototype.createAlignment = function (c) {\n                var _this = this;\n                var u = this.nodes[c.offsets[0].node].variable;\n                this.makeFeasible(c);\n                var cs = c.axis === 'x' ? this.xConstraints : this.yConstraints;\n                c.offsets.slice(1).forEach(function (o) {\n                    var v = _this.nodes[o.node].variable;\n                    cs.push(new cola.vpsc.Constraint(u, v, o.offset, true));\n                });\n            };\n\n            Projection.prototype.createConstraints = function (constraints) {\n                var _this = this;\n                var isSep = function (c) {\n                    return typeof c.type === 'undefined' || c.type === 'separation';\n                };\n                this.xConstraints = constraints.filter(function (c) {\n                    return c.axis === \"x\" && isSep(c);\n                }).map(function (c) {\n                    return _this.createSeparation(c);\n                });\n                this.yConstraints = constraints.filter(function (c) {\n                    return c.axis === \"y\" && isSep(c);\n                }).map(function (c) {\n                    return _this.createSeparation(c);\n                });\n                constraints.filter(function (c) {\n                    return c.type === 'alignment';\n                }).forEach(function (c) {\n                    return _this.createAlignment(c);\n                });\n            };\n\n            Projection.prototype.setupVariablesAndBounds = function (x0, y0, desired, getDesired) {\n                this.nodes.forEach(function (v, i) {\n                    if (v.fixed) {\n                        v.variable.weight = 1000;\n                        desired[i] = getDesired(v);\n                    } else {\n                        v.variable.weight = 1;\n                    }\n                    var w = (v.width || 0) / 2, h = (v.height || 0) / 2;\n                    var ix = x0[i], iy = y0[i];\n                    v.bounds = new Rectangle(ix - w, ix + w, iy - h, iy + h);\n                });\n            };\n\n            Projection.prototype.xProject = function (x0, y0, x) {\n                if (!this.rootGroup && !(this.avoidOverlaps || this.xConstraints))\n                    return;\n                this.project(x0, y0, x0, x, function (v) {\n                    return v.px;\n                }, this.xConstraints, generateXGroupConstraints, function (v) {\n                    return v.bounds.setXCentre(x[v.variable.index] = v.variable.position());\n                }, function (g) {\n                    var xmin = x[g.minVar.index] = g.minVar.position();\n                    var xmax = x[g.maxVar.index] = g.maxVar.position();\n                    var p2 = g.padding / 2;\n                    g.bounds.x = xmin - p2;\n                    g.bounds.X = xmax + p2;\n                });\n            };\n\n            Projection.prototype.yProject = function (x0, y0, y) {\n                if (!this.rootGroup && !this.yConstraints)\n                    return;\n                this.project(x0, y0, y0, y, function (v) {\n                    return v.py;\n                }, this.yConstraints, generateYGroupConstraints, function (v) {\n                    return v.bounds.setYCentre(y[v.variable.index] = v.variable.position());\n                }, function (g) {\n                    var ymin = y[g.minVar.index] = g.minVar.position();\n                    var ymax = y[g.maxVar.index] = g.maxVar.position();\n                    var p2 = g.padding / 2;\n                    g.bounds.y = ymin - p2;\n                    ;\n                    g.bounds.Y = ymax + p2;\n                });\n            };\n\n            Projection.prototype.projectFunctions = function () {\n                var _this = this;\n                return [\n                    function (x0, y0, x) {\n                        return _this.xProject(x0, y0, x);\n                    },\n                    function (x0, y0, y) {\n                        return _this.yProject(x0, y0, y);\n                    }\n                ];\n            };\n\n            Projection.prototype.project = function (x0, y0, start, desired, getDesired, cs, generateConstraints, updateNodeBounds, updateGroupBounds) {\n                this.setupVariablesAndBounds(x0, y0, desired, getDesired);\n                if (this.rootGroup && this.avoidOverlaps) {\n                    computeGroupBounds(this.rootGroup);\n                    cs = cs.concat(generateConstraints(this.rootGroup));\n                }\n                this.solve(this.variables, cs, start, desired);\n                this.nodes.forEach(updateNodeBounds);\n                if (this.rootGroup && this.avoidOverlaps) {\n                    this.groups.forEach(updateGroupBounds);\n                }\n            };\n\n            Projection.prototype.solve = function (vs, cs, starting, desired) {\n                var solver = new cola.vpsc.Solver(vs, cs);\n                solver.setStartingPositions(starting);\n                solver.setDesiredPositions(desired);\n                solver.solve();\n            };\n            return Projection;\n        })();\n        vpsc.Projection = Projection;\n    })(cola.vpsc || (cola.vpsc = {}));\n    var vpsc = cola.vpsc;\n})(cola || (cola = {}));\nvar PairingHeap = (function () {\n    function PairingHeap(elem) {\n        this.elem = elem;\n        this.subheaps = [];\n    }\n    PairingHeap.prototype.toString = function (selector) {\n        var str = \"\", needComma = false;\n        for (var i = 0; i < this.subheaps.length; ++i) {\n            var subheap = this.subheaps[i];\n            if (!subheap.elem) {\n                needComma = false;\n                continue;\n            }\n            if (needComma) {\n                str = str + \",\";\n            }\n            str = str + subheap.toString(selector);\n            needComma = true;\n        }\n        if (str !== \"\") {\n            str = \"(\" + str + \")\";\n        }\n        return (this.elem ? selector(this.elem) : \"\") + str;\n    };\n\n    PairingHeap.prototype.forEach = function (f) {\n        if (!this.empty()) {\n            f(this.elem, this);\n            this.subheaps.forEach(function (s) {\n                return s.forEach(f);\n            });\n        }\n    };\n\n    PairingHeap.prototype.count = function () {\n        return this.empty() ? 0 : 1 + this.subheaps.reduce(function (n, h) {\n            return n + h.count();\n        }, 0);\n    };\n\n    PairingHeap.prototype.min = function () {\n        return this.elem;\n    };\n\n    PairingHeap.prototype.empty = function () {\n        return this.elem == null;\n    };\n\n    PairingHeap.prototype.contains = function (h) {\n        if (this === h)\n            return true;\n        for (var i = 0; i < this.subheaps.length; i++) {\n            if (this.subheaps[i].contains(h))\n                return true;\n        }\n        return false;\n    };\n\n    PairingHeap.prototype.isHeap = function (lessThan) {\n        var _this = this;\n        return this.subheaps.every(function (h) {\n            return lessThan(_this.elem, h.elem) && h.isHeap(lessThan);\n        });\n    };\n\n    PairingHeap.prototype.insert = function (obj, lessThan) {\n        return this.merge(new PairingHeap(obj), lessThan);\n    };\n\n    PairingHeap.prototype.merge = function (heap2, lessThan) {\n        if (this.empty())\n            return heap2;\n        else if (heap2.empty())\n            return this;\n        else if (lessThan(this.elem, heap2.elem)) {\n            this.subheaps.push(heap2);\n            return this;\n        } else {\n            heap2.subheaps.push(this);\n            return heap2;\n        }\n    };\n\n    PairingHeap.prototype.removeMin = function (lessThan) {\n        if (this.empty())\n            return null;\n        else\n            return this.mergePairs(lessThan);\n    };\n\n    PairingHeap.prototype.mergePairs = function (lessThan) {\n        if (this.subheaps.length == 0)\n            return new PairingHeap(null);\n        else if (this.subheaps.length == 1) {\n            return this.subheaps[0];\n        } else {\n            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);\n            var remaining = this.mergePairs(lessThan);\n            return firstPair.merge(remaining, lessThan);\n        }\n    };\n    PairingHeap.prototype.decreaseKey = function (subheap, newValue, setHeapNode, lessThan) {\n        var newHeap = subheap.removeMin(lessThan);\n\n        subheap.elem = newHeap.elem;\n        subheap.subheaps = newHeap.subheaps;\n        if (setHeapNode !== null && newHeap.elem !== null) {\n            setHeapNode(subheap.elem, subheap);\n        }\n        var pairingNode = new PairingHeap(newValue);\n        if (setHeapNode !== null) {\n            setHeapNode(newValue, pairingNode);\n        }\n        return this.merge(pairingNode, lessThan);\n    };\n    return PairingHeap;\n})();\n\nvar PriorityQueue = (function () {\n    function PriorityQueue(lessThan) {\n        this.lessThan = lessThan;\n    }\n    PriorityQueue.prototype.top = function () {\n        if (this.empty()) {\n            return null;\n        }\n        return this.root.elem;\n    };\n\n    PriorityQueue.prototype.push = function () {\n        var args = [];\n        for (var _i = 0; _i < (arguments.length - 0); _i++) {\n            args[_i] = arguments[_i + 0];\n        }\n        var pairingNode;\n        for (var i = 0, arg; arg = args[i]; ++i) {\n            pairingNode = new PairingHeap(arg);\n            this.root = this.empty() ? pairingNode : this.root.merge(pairingNode, this.lessThan);\n        }\n        return pairingNode;\n    };\n\n    PriorityQueue.prototype.empty = function () {\n        return !this.root || !this.root.elem;\n    };\n\n    PriorityQueue.prototype.isHeap = function () {\n        return this.root.isHeap(this.lessThan);\n    };\n\n    PriorityQueue.prototype.forEach = function (f) {\n        this.root.forEach(f);\n    };\n\n    PriorityQueue.prototype.pop = function () {\n        if (this.empty()) {\n            return null;\n        }\n        var obj = this.root.min();\n        this.root = this.root.removeMin(this.lessThan);\n        return obj;\n    };\n\n    PriorityQueue.prototype.reduceKey = function (heapNode, newKey, setHeapNode) {\n        if (typeof setHeapNode === \"undefined\") { setHeapNode = null; }\n        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);\n    };\n    PriorityQueue.prototype.toString = function (selector) {\n        return this.root.toString(selector);\n    };\n\n    PriorityQueue.prototype.count = function () {\n        return this.root.count();\n    };\n    return PriorityQueue;\n})();\nvar cola;\n(function (cola) {\n    (function (shortestpaths) {\n        var Neighbour = (function () {\n            function Neighbour(id, distance) {\n                this.id = id;\n                this.distance = distance;\n            }\n            return Neighbour;\n        })();\n\n        var Node = (function () {\n            function Node(id) {\n                this.id = id;\n                this.neighbours = [];\n            }\n            return Node;\n        })();\n\n        var QueueEntry = (function () {\n            function QueueEntry(node, prev, d) {\n                this.node = node;\n                this.prev = prev;\n                this.d = d;\n            }\n            return QueueEntry;\n        })();\n\n        var Calculator = (function () {\n            function Calculator(n, es, getSourceIndex, getTargetIndex, getLength) {\n                this.n = n;\n                this.es = es;\n                this.neighbours = new Array(this.n);\n                var i = this.n;\n                while (i--)\n                    this.neighbours[i] = new Node(i);\n\n                i = this.es.length;\n                while (i--) {\n                    var e = this.es[i];\n                    var u = getSourceIndex(e), v = getTargetIndex(e);\n                    var d = getLength(e);\n                    this.neighbours[u].neighbours.push(new Neighbour(v, d));\n                    this.neighbours[v].neighbours.push(new Neighbour(u, d));\n                }\n            }\n            Calculator.prototype.DistanceMatrix = function () {\n                var D = new Array(this.n);\n                for (var i = 0; i < this.n; ++i) {\n                    D[i] = this.dijkstraNeighbours(i);\n                }\n                return D;\n            };\n\n            Calculator.prototype.DistancesFromNode = function (start) {\n                return this.dijkstraNeighbours(start);\n            };\n\n            Calculator.prototype.PathFromNodeToNode = function (start, end) {\n                return this.dijkstraNeighbours(start, end);\n            };\n\n            Calculator.prototype.PathFromNodeToNodeWithPrevCost = function (start, end, prevCost) {\n                var q = new PriorityQueue(function (a, b) {\n                    return a.d <= b.d;\n                }), u = this.neighbours[start], qu = new QueueEntry(u, null, 0), visitedFrom = {};\n                q.push(qu);\n                while (!q.empty()) {\n                    qu = q.pop();\n                    u = qu.node;\n                    if (u.id === end) {\n                        break;\n                    }\n                    var i = u.neighbours.length;\n                    while (i--) {\n                        var neighbour = u.neighbours[i], v = this.neighbours[neighbour.id];\n\n                        if (qu.prev && v.id === qu.prev.node.id)\n                            continue;\n\n                        var viduid = v.id + ',' + u.id;\n                        if (viduid in visitedFrom && visitedFrom[viduid] <= qu.d)\n                            continue;\n\n                        var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0, t = qu.d + neighbour.distance + cc;\n\n                        visitedFrom[viduid] = t;\n                        q.push(new QueueEntry(v, qu, t));\n                    }\n                }\n                var path = [];\n                while (qu.prev) {\n                    qu = qu.prev;\n                    path.push(qu.node.id);\n                }\n                return path;\n            };\n\n            Calculator.prototype.dijkstraNeighbours = function (start, dest) {\n                if (typeof dest === \"undefined\") { dest = -1; }\n                var q = new PriorityQueue(function (a, b) {\n                    return a.d <= b.d;\n                }), i = this.neighbours.length, d = new Array(i);\n                while (i--) {\n                    var node = this.neighbours[i];\n                    node.d = i === start ? 0 : Number.POSITIVE_INFINITY;\n                    node.q = q.push(node);\n                }\n                while (!q.empty()) {\n                    var u = q.pop();\n                    d[u.id] = u.d;\n                    if (u.id === dest) {\n                        var path = [];\n                        var v = u;\n                        while (typeof v.prev !== 'undefined') {\n                            path.push(v.prev.id);\n                            v = v.prev;\n                        }\n                        return path;\n                    }\n                    i = u.neighbours.length;\n                    while (i--) {\n                        var neighbour = u.neighbours[i];\n                        var v = this.neighbours[neighbour.id];\n                        var t = u.d + neighbour.distance;\n                        if (u.d !== Number.MAX_VALUE && v.d > t) {\n                            v.d = t;\n                            v.prev = u;\n                            q.reduceKey(v.q, v, function (e, q) {\n                                return e.q = q;\n                            });\n                        }\n                    }\n                }\n                return d;\n            };\n            return Calculator;\n        })();\n        shortestpaths.Calculator = Calculator;\n    })(cola.shortestpaths || (cola.shortestpaths = {}));\n    var shortestpaths = cola.shortestpaths;\n})(cola || (cola = {}));\nvar cola;\n(function (cola) {\n    var NodeWrapper = (function () {\n        function NodeWrapper(id, rect, children) {\n            this.id = id;\n            this.rect = rect;\n            this.children = children;\n            this.leaf = typeof children === 'undefined' || children.length === 0;\n        }\n        return NodeWrapper;\n    })();\n    cola.NodeWrapper = NodeWrapper;\n    var Vert = (function () {\n        function Vert(id, x, y, node, line) {\n            if (typeof node === \"undefined\") { node = null; }\n            if (typeof line === \"undefined\") { line = null; }\n            this.id = id;\n            this.x = x;\n            this.y = y;\n            this.node = node;\n            this.line = line;\n        }\n        return Vert;\n    })();\n    cola.Vert = Vert;\n\n    var LongestCommonSubsequence = (function () {\n        function LongestCommonSubsequence(s, t) {\n            this.s = s;\n            this.t = t;\n            var mf = LongestCommonSubsequence.findMatch(s, t);\n            var tr = t.slice(0).reverse();\n            var mr = LongestCommonSubsequence.findMatch(s, tr);\n            if (mf.length >= mr.length) {\n                this.length = mf.length;\n                this.si = mf.si;\n                this.ti = mf.ti;\n                this.reversed = false;\n            } else {\n                this.length = mr.length;\n                this.si = mr.si;\n                this.ti = t.length - mr.ti - mr.length;\n                this.reversed = true;\n            }\n        }\n        LongestCommonSubsequence.findMatch = function (s, t) {\n            var m = s.length;\n            var n = t.length;\n            var match = { length: 0, si: -1, ti: -1 };\n            var l = new Array(m);\n            for (var i = 0; i < m; i++) {\n                l[i] = new Array(n);\n                for (var j = 0; j < n; j++)\n                    if (s[i] === t[j]) {\n                        var v = l[i][j] = (i === 0 || j === 0) ? 1 : l[i - 1][j - 1] + 1;\n                        if (v > match.length) {\n                            match.length = v;\n                            match.si = i - v + 1;\n                            match.ti = j - v + 1;\n                        }\n                        ;\n                    } else\n                        l[i][j] = 0;\n            }\n            return match;\n        };\n        LongestCommonSubsequence.prototype.getSequence = function () {\n            return this.length >= 0 ? this.s.slice(this.si, this.si + this.length) : [];\n        };\n        return LongestCommonSubsequence;\n    })();\n    cola.LongestCommonSubsequence = LongestCommonSubsequence;\n    var GridRouter = (function () {\n        function GridRouter(originalnodes, accessor) {\n            var _this = this;\n            this.originalnodes = originalnodes;\n            this.groupPadding = 12;\n            this.leaves = null;\n            this.nodes = originalnodes.map(function (v, i) {\n                return new NodeWrapper(i, accessor.getBounds(v), accessor.getChildren(v));\n            });\n            this.leaves = this.nodes.filter(function (v) {\n                return v.leaf;\n            });\n            this.groups = this.nodes.filter(function (g) {\n                return !g.leaf;\n            });\n            this.cols = this.getGridDim('x');\n            this.rows = this.getGridDim('y');\n\n            this.groups.forEach(function (v) {\n                return v.children.forEach(function (c) {\n                    return _this.nodes[c].parent = v;\n                });\n            });\n\n            this.root = { children: [] };\n            this.nodes.forEach(function (v) {\n                if (typeof v.parent === 'undefined') {\n                    v.parent = _this.root;\n                    _this.root.children.push(v.id);\n                }\n\n                v.ports = [];\n            });\n\n            this.backToFront = this.nodes.slice(0);\n            this.backToFront.sort(function (x, y) {\n                return _this.getDepth(x) - _this.getDepth(y);\n            });\n\n            var frontToBackGroups = this.backToFront.slice(0).reverse().filter(function (g) {\n                return !g.leaf;\n            });\n            frontToBackGroups.forEach(function (v) {\n                var r = cola.vpsc.Rectangle.empty();\n                v.children.forEach(function (c) {\n                    return r = r.union(_this.nodes[c].rect);\n                });\n                v.rect = r.inflate(_this.groupPadding);\n            });\n\n            var colMids = this.midPoints(this.cols.map(function (r) {\n                return r.x;\n            }));\n            var rowMids = this.midPoints(this.rows.map(function (r) {\n                return r.y;\n            }));\n\n            var rowx = colMids[0], rowX = colMids[colMids.length - 1];\n            var coly = rowMids[0], colY = rowMids[rowMids.length - 1];\n\n            var hlines = this.rows.map(function (r) {\n                return { x1: rowx, x2: rowX, y1: r.y, y2: r.y };\n            }).concat(rowMids.map(function (m) {\n                return { x1: rowx, x2: rowX, y1: m, y2: m };\n            }));\n\n            var vlines = this.cols.map(function (c) {\n                return { x1: c.x, x2: c.x, y1: coly, y2: colY };\n            }).concat(colMids.map(function (m) {\n                return { x1: m, x2: m, y1: coly, y2: colY };\n            }));\n\n            var lines = hlines.concat(vlines);\n\n            lines.forEach(function (l) {\n                return l.verts = [];\n            });\n\n            this.verts = [];\n            this.edges = [];\n\n            hlines.forEach(function (h) {\n                return vlines.forEach(function (v) {\n                    var p = new Vert(_this.verts.length, v.x1, h.y1);\n                    h.verts.push(p);\n                    v.verts.push(p);\n                    _this.verts.push(p);\n\n                    var i = _this.backToFront.length;\n                    while (i-- > 0) {\n                        var node = _this.backToFront[i], r = node.rect;\n                        var dx = Math.abs(p.x - r.cx()), dy = Math.abs(p.y - r.cy());\n                        if (dx < r.width() / 2 && dy < r.height() / 2) {\n                            p.node = node;\n                            break;\n                        }\n                    }\n                });\n            });\n\n            lines.forEach(function (l, li) {\n                _this.nodes.forEach(function (v, i) {\n                    v.rect.lineIntersections(l.x1, l.y1, l.x2, l.y2).forEach(function (intersect, j) {\n                        var p = new Vert(_this.verts.length, intersect.x, intersect.y, v, l);\n                        _this.verts.push(p);\n                        l.verts.push(p);\n                        v.ports.push(p);\n                    });\n                });\n\n                var isHoriz = Math.abs(l.y1 - l.y2) < 0.1;\n                var delta = function (a, b) {\n                    return isHoriz ? b.x - a.x : b.y - a.y;\n                };\n                l.verts.sort(delta);\n                for (var i = 1; i < l.verts.length; i++) {\n                    var u = l.verts[i - 1], v = l.verts[i];\n                    if (u.node && u.node === v.node && u.node.leaf)\n                        continue;\n                    _this.edges.push({ source: u.id, target: v.id, length: Math.abs(delta(u, v)) });\n                }\n            });\n        }\n        GridRouter.prototype.avg = function (a) {\n            return a.reduce(function (x, y) {\n                return x + y;\n            }) / a.length;\n        };\n        GridRouter.prototype.getGridDim = function (axis) {\n            var columns = [];\n            var ls = this.leaves.slice(0, this.leaves.length);\n            while (ls.length > 0) {\n                var r = ls[0].rect;\n                var col = ls.filter(function (v) {\n                    return v.rect['overlap' + axis.toUpperCase()](r);\n                });\n                columns.push(col);\n                col.forEach(function (v) {\n                    return ls.splice(ls.indexOf(v), 1);\n                });\n                col[axis] = this.avg(col.map(function (v) {\n                    return v.rect['c' + axis]();\n                }));\n            }\n            columns.sort(function (x, y) {\n                return x[axis] - y[axis];\n            });\n            return columns;\n        };\n\n        GridRouter.prototype.getDepth = function (v) {\n            var depth = 0;\n            while (v.parent !== this.root) {\n                depth++;\n                v = v.parent;\n            }\n            return depth;\n        };\n\n        GridRouter.prototype.midPoints = function (a) {\n            var gap = a[1] - a[0];\n            var mids = [a[0] - gap / 2];\n            for (var i = 1; i < a.length; i++) {\n                mids.push((a[i] + a[i - 1]) / 2);\n            }\n            mids.push(a[a.length - 1] + gap / 2);\n            return mids;\n        };\n\n        GridRouter.prototype.findLineage = function (v) {\n            var lineage = [v];\n            do {\n                v = v.parent;\n                lineage.push(v);\n            } while(v !== this.root);\n            return lineage.reverse();\n        };\n\n        GridRouter.prototype.findAncestorPathBetween = function (a, b) {\n            var aa = this.findLineage(a), ba = this.findLineage(b), i = 0;\n            while (aa[i] === ba[i])\n                i++;\n\n            return { commonAncestor: aa[i - 1], lineages: aa.slice(i).concat(ba.slice(i)) };\n        };\n\n        GridRouter.prototype.siblingObstacles = function (a, b) {\n            var _this = this;\n            var path = this.findAncestorPathBetween(a, b);\n            var lineageLookup = {};\n            path.lineages.forEach(function (v) {\n                return lineageLookup[v.id] = {};\n            });\n            var obstacles = path.commonAncestor.children.filter(function (v) {\n                return !(v in lineageLookup);\n            });\n\n            path.lineages.filter(function (v) {\n                return v.parent !== path.commonAncestor;\n            }).forEach(function (v) {\n                return obstacles = obstacles.concat(v.parent.children.filter(function (c) {\n                    return c !== v.id;\n                }));\n            });\n\n            return obstacles.map(function (v) {\n                return _this.nodes[v];\n            });\n        };\n\n        GridRouter.getSegmentSets = function (routes, x, y) {\n            var vsegments = [];\n            for (var ei = 0; ei < routes.length; ei++) {\n                var route = routes[ei];\n                for (var si = 0; si < route.length; si++) {\n                    var s = route[si];\n                    s.edgeid = ei;\n                    s.i = si;\n                    var sdx = s[1][x] - s[0][x];\n                    if (Math.abs(sdx) < 0.1) {\n                        vsegments.push(s);\n                    }\n                }\n            }\n            vsegments.sort(function (a, b) {\n                return a[0][x] - b[0][x];\n            });\n\n            var vsegmentsets = [];\n            var segmentset = null;\n            for (var i = 0; i < vsegments.length; i++) {\n                var s = vsegments[i];\n                if (!segmentset || Math.abs(s[0][x] - segmentset.pos) > 0.1) {\n                    segmentset = { pos: s[0][x], segments: [] };\n                    vsegmentsets.push(segmentset);\n                }\n                segmentset.segments.push(s);\n            }\n            return vsegmentsets;\n        };\n\n        GridRouter.nudgeSegs = function (x, y, routes, segments, leftOf, gap) {\n            var n = segments.length;\n            if (n <= 1)\n                return;\n            var vs = segments.map(function (s) {\n                return new cola.vpsc.Variable(s[0][x]);\n            });\n            var cs = [];\n            for (var i = 0; i < n; i++) {\n                for (var j = 0; j < n; j++) {\n                    if (i === j)\n                        continue;\n                    var s1 = segments[i], s2 = segments[j], e1 = s1.edgeid, e2 = s2.edgeid, lind = -1, rind = -1;\n\n                    if (x == 'x') {\n                        if (leftOf(e1, e2)) {\n                            console.log('s1: ' + s1[0][x] + ',' + s1[0][y] + '-' + s1[1][x] + ',' + s1[1][y]);\n                            if (s1[0][y] < s1[1][y]) {\n                                lind = j, rind = i;\n                            } else {\n                                lind = i, rind = j;\n                            }\n                        }\n                    } else {\n                        if (leftOf(e1, e2)) {\n                            if (s1[0][y] < s1[1][y]) {\n                                lind = i, rind = j;\n                            } else {\n                                lind = j, rind = i;\n                            }\n                        }\n                    }\n                    if (lind >= 0) {\n                        console.log(x + ' constraint: ' + lind + '<' + rind);\n                        cs.push(new cola.vpsc.Constraint(vs[lind], vs[rind], gap));\n                    }\n                }\n            }\n            var solver = new cola.vpsc.Solver(vs, cs);\n            solver.solve();\n            vs.forEach(function (v, i) {\n                var s = segments[i];\n                var pos = v.position();\n                s[0][x] = s[1][x] = pos;\n                var route = routes[s.edgeid];\n                if (s.i > 0)\n                    route[s.i - 1][1][x] = pos;\n                if (s.i < route.length - 1)\n                    route[s.i + 1][0][x] = pos;\n            });\n        };\n\n        GridRouter.nudgeSegments = function (routes, x, y, leftOf, gap) {\n            var vsegmentsets = GridRouter.getSegmentSets(routes, x, y);\n\n            for (var i = 0; i < vsegmentsets.length; i++) {\n                var ss = vsegmentsets[i];\n                var events = [];\n                for (var j = 0; j < ss.segments.length; j++) {\n                    var s = ss.segments[j];\n                    events.push({ type: 0, s: s, pos: Math.min(s[0][y], s[1][y]) });\n                    events.push({ type: 1, s: s, pos: Math.max(s[0][y], s[1][y]) });\n                }\n                events.sort(function (a, b) {\n                    return a.pos - b.pos + a.type - b.type;\n                });\n                var open = [];\n                var openCount = 0;\n                events.forEach(function (e) {\n                    if (e.type === 0) {\n                        open.push(e.s);\n                        openCount++;\n                    } else {\n                        openCount--;\n                    }\n                    if (openCount == 0) {\n                        GridRouter.nudgeSegs(x, y, routes, open, leftOf, gap);\n                        open = [];\n                    }\n                });\n            }\n        };\n\n        GridRouter.prototype.routeEdges = function (edges, source, target) {\n            var _this = this;\n            var routes = edges.map(function (e) {\n                return _this.route(source(e), target(e));\n            });\n\n            return routes;\n        };\n\n        GridRouter.angleBetween2Lines = function (line1, line2) {\n            var angle1 = Math.atan2(line1[0].y - line1[1].y, line1[0].x - line1[1].x);\n            var angle2 = Math.atan2(line2[0].y - line2[1].y, line2[0].x - line2[1].x);\n            var diff = angle1 - angle2;\n            if (diff > Math.PI || diff < -Math.PI) {\n                diff = angle2 - angle1;\n            }\n            return diff;\n        };\n\n        GridRouter.isLeft = function (a, b, c) {\n            return ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) <= 0;\n        };\n\n        GridRouter.getOrder = function (pairs) {\n            var outgoing = {};\n            for (var i = 0; i < pairs.length; i++) {\n                var p = pairs[i];\n                if (typeof outgoing[p.l] === 'undefined')\n                    outgoing[p.l] = {};\n                outgoing[p.l][p.r] = true;\n            }\n            return function (l, r) {\n                return typeof outgoing[l] !== 'undefined' && outgoing[l][r];\n            };\n        };\n\n        GridRouter.orderEdges = function (edges) {\n            var edgeOrder = [];\n            for (var i = 0; i < edges.length - 1; i++) {\n                for (var j = i + 1; j < edges.length; j++) {\n                    var e = edges[i], f = edges[j], lcs = new cola.LongestCommonSubsequence(e, f);\n                    if (!lcs.reversed) {\n                        var u = e[lcs.si + lcs.length - 2], vi = e[lcs.si + lcs.length], vj = f[lcs.ti + lcs.length];\n                        if (GridRouter.isLeft(u, vi, vj)) {\n                            edgeOrder.push({ l: j, r: i });\n                        } else {\n                            edgeOrder.push({ l: i, r: j });\n                        }\n                    } else {\n                        lcs.s.forEach(function (p, i) {\n                            console.log('s[' + i + ']=' + p.id);\n                        });\n                        lcs.t.forEach(function (p, i) {\n                            console.log('t[' + i + ']=' + p.id);\n                        });\n                        var u = e[lcs.si], vi = e[lcs.si - 1], vj = f[lcs.ti + lcs.length];\n\n                        if (GridRouter.isLeft(u, vi, vj)) {\n                            edgeOrder.push({ l: j, r: i });\n                        } else {\n                            edgeOrder.push({ l: i, r: j });\n                        }\n                    }\n                }\n            }\n            edgeOrder.forEach(function (e) {\n                console.log('l:' + e.l + ',r:' + e.r);\n            });\n            return cola.GridRouter.getOrder(edgeOrder);\n        };\n\n        GridRouter.makeSegments = function (path) {\n            function copyPoint(p) {\n                return { x: p.x, y: p.y };\n            }\n            var isStraight = function (a, b, c) {\n                return Math.abs((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) < 0.001;\n            };\n            var segments = [];\n            var a = copyPoint(path[0]);\n            for (var i = 1; i < path.length; i++) {\n                var b = copyPoint(path[i]), c = i < path.length - 1 ? path[i + 1] : null;\n                if (!c || !isStraight(a, b, c)) {\n                    segments.push([a, b]);\n                    a = b;\n                }\n            }\n            return segments;\n        };\n\n        GridRouter.prototype.route = function (s, t) {\n            var _this = this;\n            var source = this.nodes[s], target = this.nodes[t];\n            this.obstacles = this.siblingObstacles(source, target);\n\n            var obstacleLookup = {};\n            this.obstacles.forEach(function (o) {\n                return obstacleLookup[o.id] = o;\n            });\n            this.passableEdges = this.edges.filter(function (e) {\n                var u = _this.verts[e.source], v = _this.verts[e.target];\n                return !(u.node && u.node.id in obstacleLookup || v.node && v.node.id in obstacleLookup);\n            });\n\n            for (var i = 1; i < source.ports.length; i++) {\n                var u = source.ports[0].id;\n                var v = source.ports[i].id;\n                this.passableEdges.push({\n                    source: u,\n                    target: v,\n                    length: 0\n                });\n            }\n            for (var i = 1; i < target.ports.length; i++) {\n                var u = target.ports[0].id;\n                var v = target.ports[i].id;\n                this.passableEdges.push({\n                    source: u,\n                    target: v,\n                    length: 0\n                });\n            }\n\n            var getSource = function (e) {\n                return e.source;\n            }, getTarget = function (e) {\n                return e.target;\n            }, getLength = function (e) {\n                return e.length;\n            };\n\n            var shortestPathCalculator = new cola.shortestpaths.Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);\n            var bendPenalty = function (u, v, w) {\n                var a = _this.verts[u], b = _this.verts[v], c = _this.verts[w];\n                var dx = Math.abs(c.x - a.x), dy = Math.abs(c.y - a.y);\n\n                if (a.node === source && a.node === b.node || b.node === target && b.node === c.node)\n                    return 0;\n                return dx > 1 && dy > 1 ? 1000 : 0;\n            };\n\n            var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(source.ports[0].id, target.ports[0].id, bendPenalty);\n\n            var pathSegments = [];\n            for (var i = 0; i < shortestPath.length; i++) {\n                var a = i === 0 ? this.nodes[target.id].ports[0] : this.verts[shortestPath[i - 1]];\n                var b = this.verts[shortestPath[i]];\n                if (a.node === source && b.node === source)\n                    continue;\n                if (a.node === target && b.node === target)\n                    continue;\n                pathSegments.push([a, b]);\n            }\n\n            var mergedSegments = [];\n            var a = pathSegments[0][0];\n            for (var i = 0; i < pathSegments.length; i++) {\n                var b = pathSegments[i][1], c = i < pathSegments.length - 1 ? pathSegments[i + 1][1] : null;\n                if (!c || c && bendPenalty(a.id, b.id, c.id) > 0) {\n                    mergedSegments.push([a, b]);\n                    a = b;\n                }\n            }\n\n            mergedSegments = pathSegments;\n            var result = mergedSegments.map(function (s) {\n                return [{ x: s[1].x, y: s[1].y }, { x: s[0].x, y: s[0].y }];\n            });\n            result.reverse();\n            return result;\n            return pathSegments;\n        };\n        return GridRouter;\n    })();\n    cola.GridRouter = GridRouter;\n})(cola || (cola = {}));\nvar cola;\n(function (cola) {\n    function unionCount(a, b) {\n        var u = {};\n        for (var i in a)\n            u[i] = {};\n        for (var i in b)\n            u[i] = {};\n        return Object.keys(u).length;\n    }\n\n    function intersectionCount(a, b) {\n        var n = 0;\n        for (var i in a)\n            if (typeof b[i] !== 'undefined')\n                ++n;\n        return n;\n    }\n\n    function getNeighbours(links, la) {\n        var neighbours = {};\n        var addNeighbours = function (u, v) {\n            if (typeof neighbours[u] === 'undefined')\n                neighbours[u] = {};\n            neighbours[u][v] = {};\n        };\n        links.forEach(function (e) {\n            var u = la.getSourceIndex(e), v = la.getTargetIndex(e);\n            addNeighbours(u, v);\n            addNeighbours(v, u);\n        });\n        return neighbours;\n    }\n\n    function computeLinkLengths(links, w, f, la) {\n        var neighbours = getNeighbours(links, la);\n        links.forEach(function (l) {\n            var a = neighbours[la.getSourceIndex(l)];\n            var b = neighbours[la.getTargetIndex(l)];\n            la.setLength(l, 1 + w * f(a, b));\n        });\n    }\n\n    function symmetricDiffLinkLengths(links, la, w) {\n        if (typeof w === \"undefined\") { w = 1; }\n        computeLinkLengths(links, w, function (a, b) {\n            return Math.sqrt(unionCount(a, b) - intersectionCount(a, b));\n        }, la);\n    }\n    cola.symmetricDiffLinkLengths = symmetricDiffLinkLengths;\n\n    function jaccardLinkLengths(links, la, w) {\n        if (typeof w === \"undefined\") { w = 1; }\n        computeLinkLengths(links, w, function (a, b) {\n            return Math.min(Object.keys(a).length, Object.keys(b).length) < 1.1 ? 0 : intersectionCount(a, b) / unionCount(a, b);\n        }, la);\n    }\n    cola.jaccardLinkLengths = jaccardLinkLengths;\n\n    function generateDirectedEdgeConstraints(n, links, axis, la) {\n        var components = stronglyConnectedComponents(n, links, la);\n        var nodes = {};\n        components.filter(function (c) {\n            return c.length > 1;\n        }).forEach(function (c) {\n            return c.forEach(function (v) {\n                return nodes[v] = c;\n            });\n        });\n        var constraints = [];\n        links.forEach(function (l) {\n            var ui = la.getSourceIndex(l), vi = la.getTargetIndex(l), u = nodes[ui], v = nodes[vi];\n            if (!u || !v || u.component !== v.component) {\n                constraints.push({\n                    axis: axis,\n                    left: ui,\n                    right: vi,\n                    gap: la.getMinSeparation(l)\n                });\n            }\n        });\n        return constraints;\n    }\n    cola.generateDirectedEdgeConstraints = generateDirectedEdgeConstraints;\n\n    function stronglyConnectedComponents(numVertices, edges, la) {\n        var adjList = new Array(numVertices);\n        var index = new Array(numVertices);\n        var lowValue = new Array(numVertices);\n        var active = new Array(numVertices);\n\n        for (var i = 0; i < numVertices; ++i) {\n            adjList[i] = [];\n            index[i] = -1;\n            lowValue[i] = 0;\n            active[i] = false;\n        }\n\n        for (var i = 0; i < edges.length; ++i) {\n            adjList[la.getSourceIndex(edges[i])].push(la.getTargetIndex(edges[i]));\n        }\n\n        var count = 0;\n        var S = [];\n        var components = [];\n\n        function strongConnect(v) {\n            index[v] = count;\n            lowValue[v] = count;\n            active[v] = true;\n            count += 1;\n            S.push(v);\n            var e = adjList[v];\n            for (var i = 0; i < e.length; ++i) {\n                var u = e[i];\n                if (index[u] < 0) {\n                    strongConnect(u);\n                    lowValue[v] = Math.min(lowValue[v], lowValue[u]) | 0;\n                } else if (active[u]) {\n                    lowValue[v] = Math.min(lowValue[v], lowValue[u]);\n                }\n            }\n            if (lowValue[v] === index[v]) {\n                var component = [];\n                for (var i = S.length - 1; i >= 0; --i) {\n                    var w = S[i];\n                    active[w] = false;\n                    component.push(w);\n                    if (w === v) {\n                        S.length = i;\n                        break;\n                    }\n                }\n                components.push(component);\n            }\n        }\n\n        for (var i = 0; i < numVertices; ++i) {\n            if (index[i] < 0) {\n                strongConnect(i);\n            }\n        }\n\n        return components;\n    }\n})(cola || (cola = {}));\nvar cola;\n(function (cola) {\n    (function (powergraph) {\n        var PowerEdge = (function () {\n            function PowerEdge(source, target, type) {\n                this.source = source;\n                this.target = target;\n                this.type = type;\n            }\n            return PowerEdge;\n        })();\n        powergraph.PowerEdge = PowerEdge;\n\n        var Configuration = (function () {\n            function Configuration(n, edges, linkAccessor) {\n                var _this = this;\n                this.linkAccessor = linkAccessor;\n                this.modules = new Array(n);\n                this.roots = new ModuleSet();\n                for (var i = 0; i < n; ++i) {\n                    this.roots.add(this.modules[i] = new Module(i));\n                }\n                this.R = edges.length;\n                edges.forEach(function (e) {\n                    var s = _this.modules[linkAccessor.getSourceIndex(e)], t = _this.modules[linkAccessor.getTargetIndex(e)], type = linkAccessor.getType(e);\n                    s.outgoing.add(type, t);\n                    t.incoming.add(type, s);\n                });\n            }\n            Configuration.prototype.merge = function (a, b) {\n                var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\n                var children = new ModuleSet();\n                children.add(a);\n                children.add(b);\n                var m = new Module(this.modules.length, outInt, inInt, children);\n                this.modules.push(m);\n                var update = function (s, i, o) {\n                    s.forAll(function (ms, linktype) {\n                        ms.forAll(function (n) {\n                            var nls = n[i];\n                            nls.add(linktype, m);\n                            nls.remove(linktype, a);\n                            nls.remove(linktype, b);\n                            a[o].remove(linktype, n);\n                            b[o].remove(linktype, n);\n                        });\n                    });\n                };\n                update(outInt, \"incoming\", \"outgoing\");\n                update(inInt, \"outgoing\", \"incoming\");\n                this.R -= inInt.count() + outInt.count();\n                this.roots.remove(a);\n                this.roots.remove(b);\n                this.roots.add(m);\n                return m;\n            };\n\n            Configuration.prototype.rootMerges = function () {\n                var rs = this.roots.modules();\n                var n = rs.length;\n                var merges = new Array(n * (n - 1));\n                var ctr = 0;\n                for (var i = 0, i_ = n - 1; i < i_; ++i) {\n                    for (var j = i + 1; j < n; ++j) {\n                        var a = rs[i], b = rs[j];\n                        merges[ctr++] = { nEdges: this.nEdges(a, b), a: a, b: b };\n                    }\n                }\n                return merges;\n            };\n\n            Configuration.prototype.greedyMerge = function () {\n                var ms = this.rootMerges().sort(function (a, b) {\n                    return a.nEdges - b.nEdges;\n                });\n                var m = ms[0];\n                if (m.nEdges >= this.R)\n                    return false;\n                this.merge(m.a, m.b);\n                return true;\n            };\n\n            Configuration.prototype.nEdges = function (a, b) {\n                var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\n                return this.R - inInt.count() - outInt.count();\n            };\n\n            Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\n                var _this = this;\n                var groups = [];\n                var root = {};\n                toGroups(this.roots, root, groups);\n                var es = this.allEdges();\n                es.forEach(function (e) {\n                    var a = _this.modules[e.source];\n                    var b = _this.modules[e.target];\n                    retargetedEdges.push(new PowerEdge(typeof a.gid === \"undefined\" ? e.source : groups[a.gid], typeof b.gid === \"undefined\" ? e.target : groups[b.gid], e.type));\n                });\n                return groups;\n            };\n\n            Configuration.prototype.allEdges = function () {\n                var es = [];\n                Configuration.getEdges(this.roots, es);\n                return es;\n            };\n\n            Configuration.getEdges = function (modules, es) {\n                modules.forAll(function (m) {\n                    m.getEdges(es);\n                    Configuration.getEdges(m.children, es);\n                });\n            };\n            return Configuration;\n        })();\n        powergraph.Configuration = Configuration;\n\n        function toGroups(modules, group, groups) {\n            modules.forAll(function (m) {\n                if (m.isLeaf()) {\n                    if (!group.leaves)\n                        group.leaves = [];\n                    group.leaves.push(m.id);\n                } else {\n                    var g = group;\n                    m.gid = groups.length;\n                    if (!m.isIsland()) {\n                        g = { id: m.gid };\n                        if (!group.groups)\n                            group.groups = [];\n                        group.groups.push(m.gid);\n                        groups.push(g);\n                    }\n                    toGroups(m.children, g, groups);\n                }\n            });\n        }\n\n        var Module = (function () {\n            function Module(id, outgoing, incoming, children) {\n                if (typeof outgoing === \"undefined\") { outgoing = new LinkSets(); }\n                if (typeof incoming === \"undefined\") { incoming = new LinkSets(); }\n                if (typeof children === \"undefined\") { children = new ModuleSet(); }\n                this.id = id;\n                this.outgoing = outgoing;\n                this.incoming = incoming;\n                this.children = children;\n            }\n            Module.prototype.getEdges = function (es) {\n                var _this = this;\n                this.outgoing.forAll(function (ms, edgetype) {\n                    ms.forAll(function (target) {\n                        es.push(new PowerEdge(_this.id, target.id, edgetype));\n                    });\n                });\n            };\n\n            Module.prototype.isLeaf = function () {\n                return this.children.count() === 0;\n            };\n\n            Module.prototype.isIsland = function () {\n                return this.outgoing.count() === 0 && this.incoming.count() === 0;\n            };\n            return Module;\n        })();\n        powergraph.Module = Module;\n\n        function intersection(m, n) {\n            var i = {};\n            for (var v in m)\n                if (v in n)\n                    i[v] = m[v];\n            return i;\n        }\n\n        var ModuleSet = (function () {\n            function ModuleSet() {\n                this.table = {};\n            }\n            ModuleSet.prototype.count = function () {\n                return Object.keys(this.table).length;\n            };\n            ModuleSet.prototype.intersection = function (other) {\n                var result = new ModuleSet();\n                result.table = intersection(this.table, other.table);\n                return result;\n            };\n            ModuleSet.prototype.intersectionCount = function (other) {\n                return this.intersection(other).count();\n            };\n            ModuleSet.prototype.contains = function (id) {\n                return id in this.table;\n            };\n            ModuleSet.prototype.add = function (m) {\n                this.table[m.id] = m;\n            };\n            ModuleSet.prototype.remove = function (m) {\n                delete this.table[m.id];\n            };\n            ModuleSet.prototype.forAll = function (f) {\n                for (var mid in this.table) {\n                    f(this.table[mid]);\n                }\n            };\n            ModuleSet.prototype.modules = function () {\n                var vs = [];\n                this.forAll(function (m) {\n                    return vs.push(m);\n                });\n                return vs;\n            };\n            return ModuleSet;\n        })();\n        powergraph.ModuleSet = ModuleSet;\n\n        var LinkSets = (function () {\n            function LinkSets() {\n                this.sets = {};\n                this.n = 0;\n            }\n            LinkSets.prototype.count = function () {\n                return this.n;\n            };\n            LinkSets.prototype.contains = function (id) {\n                var result = false;\n                this.forAllModules(function (m) {\n                    if (!result && m.id == id) {\n                        result = true;\n                    }\n                });\n                return result;\n            };\n            LinkSets.prototype.add = function (linktype, m) {\n                var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\n                s.add(m);\n                ++this.n;\n            };\n            LinkSets.prototype.remove = function (linktype, m) {\n                var ms = this.sets[linktype];\n                ms.remove(m);\n                if (ms.count() === 0) {\n                    delete this.sets[linktype];\n                }\n                --this.n;\n            };\n            LinkSets.prototype.forAll = function (f) {\n                for (var linktype in this.sets) {\n                    f(this.sets[linktype], linktype);\n                }\n            };\n            LinkSets.prototype.forAllModules = function (f) {\n                this.forAll(function (ms, lt) {\n                    return ms.forAll(f);\n                });\n            };\n            LinkSets.prototype.intersection = function (other) {\n                var result = new LinkSets();\n                this.forAll(function (ms, lt) {\n                    if (lt in other.sets) {\n                        var i = ms.intersection(other.sets[lt]), n = i.count();\n                        if (n > 0) {\n                            result.sets[lt] = i;\n                            result.n += n;\n                        }\n                    }\n                });\n                return result;\n            };\n            return LinkSets;\n        })();\n        powergraph.LinkSets = LinkSets;\n\n        function intersectionCount(m, n) {\n            return Object.keys(intersection(m, n)).length;\n        }\n\n        function getGroups(nodes, links, la) {\n            var n = nodes.length, c = new powergraph.Configuration(n, links, la);\n            while (c.greedyMerge())\n                ;\n            var powerEdges = [];\n            var g = c.getGroupHierarchy(powerEdges);\n            powerEdges.forEach(function (e) {\n                var f = function (end) {\n                    var g = e[end];\n                    if (typeof g == \"number\")\n                        e[end] = nodes[g];\n                };\n                f(\"source\");\n                f(\"target\");\n            });\n            return { groups: g, powerEdges: powerEdges };\n        }\n        powergraph.getGroups = getGroups;\n    })(cola.powergraph || (cola.powergraph = {}));\n    var powergraph = cola.powergraph;\n})(cola || (cola = {}));\n\n/**\n * @module cola\n */\nvar cola;\n(function (cola) {\n\n    /**\n     * @class d3adaptor\n     */\n    cola.d3adaptor = function () {\n        var event = d3.dispatch(\"start\", \"tick\", \"end\");\n\n        var adaptor = cola.adaptor({\n            trigger: function (e) {\n                event[e.type](e); // via d3 dispatcher, e.g. event.start(e);\n            },\n\n            on: function(type, listener){\n                return event.on(type, listener);\n            },\n\n            kick: function (tick) {\n                d3.timer(tick);\n            },\n\n            // use `node.call(adaptor.drag)` to make nodes draggable\n            drag: function () {\n                var drag = d3.behavior.drag()\n                    .origin(function(d){ return d; })\n                    .on(\"dragstart.d3adaptor\", colaDragstart)\n                    .on(\"drag.d3adaptor\", function (d) {\n                        d.px = d3.event.x, d.py = d3.event.y;\n                        adaptor.resume(); // restart annealing\n                    })\n                    .on(\"dragend.d3adaptor\", colaDragend);\n\n                if (!arguments.length) return drag;\n\n                this//.on(\"mouseover.adaptor\", colaMouseover)\n                    //.on(\"mouseout.adaptor\", colaMouseout)\n                    .call(drag);\n            }\n        });\n        \n        return adaptor;\n    };\n\n    /**\n     * @class adaptor\n     */\n    cola.adaptor = function (options) {   \n        var adaptor = {},\n            trigger = options.trigger, // a function that is notified of events like \"tick\"\n            kick = options.kick, // a function that kicks off the simulation tick loop\n            size = [1, 1],\n            linkDistance = 20,\n            linkType = null,\n            avoidOverlaps = false,\n            handleDisconnected = true,\n            drag,\n            alpha,\n            lastStress,\n            running = false,\n            nodes = [],\n            groups = [],\n            variables = [],\n            rootGroup = null,\n            links = [],\n            constraints = [],\n            distanceMatrix = null,\n            descent = null,\n            directedLinkConstraints = null,\n            threshold = 0.01,\n            defaultNodeSize = 10,\n            visibilityGraph = null;\n\n        adaptor.on = options.on; // a function for binding to events on the adapter\n        adaptor.drag = options.drag; // a function to allow for dragging of nodes\n\n        // give external access to drag-related helper functions\n        adaptor.dragstart = colaDragstart;\n        adaptor.dragend = colaDragend;\n        adaptor.mouseover = colaMouseover;\n        adaptor.mouseout = colaMouseout;\n\n        adaptor.tick = function () {\n            if (alpha < threshold) {\n                trigger({ type: \"end\", alpha: alpha = 0 });\n                delete lastStress;\n                running = false;\n                return true;\n            }\n\n            var n = nodes.length,\n                m = links.length,\n                o;\n\n            descent.locks.clear();\n            for (i = 0; i < n; ++i) {\n                o = nodes[i];\n                if (o.fixed) {\n                    if (typeof o.px === 'undefined' || typeof o.py === 'undefined') {\n                        o.px = o.x;\n                        o.py = o.y;\n                    }\n                    var p = [o.px, o.py];\n                    descent.locks.add(i, p);\n                }\n            }\n\n            var s1 = descent.rungeKutta();\n            //var s1 = descent.reduceStress();\n            if (s1 === 0) {\n                alpha = 0;\n            } else if (typeof lastStress !== 'undefined') {\n                alpha = Math.abs(Math.abs(lastStress / s1) - 1);\n            }\n            lastStress = s1;\n\n            for (i = 0; i < n; ++i) {\n                o = nodes[i];\n                if (o.fixed) {\n                    o.x = o.px;\n                    o.y = o.py;\n                } else {\n                    o.x = descent.x[0][i];\n                    o.y = descent.x[1][i];\n                }\n            }\n\n            trigger({ type: \"tick\", alpha: alpha });\n        };\n\n        /**\n         * the list of nodes.\n         * If nodes has not been set, but links has, then we instantiate a nodes list here, of the correct size,\n         * before returning it.\n         * @property nodes {Array}\n         * @default empty list\n         */\n        adaptor.nodes = function (v) {\n            if (!arguments.length) {\n                if (nodes.length === 0 && links.length > 0) {\n                    var n = 0;\n                    links.forEach(function (l) {\n                        n = Math.max(n, l.source, l.target);\n                    });\n                    nodes = new Array(++n);\n                    for (var i = 0; i < n; ++i) {\n                        nodes[i] = {};\n                    }\n                }\n                return nodes;\n            }\n            nodes = v;\n            return adaptor;\n        };\n\n        /**\n         * a list of hierarchical groups defined over nodes\n         * @property groups {Array}\n         * @default empty list\n         */\n        adaptor.groups = function (x) {\n            if (!arguments.length) return groups;\n            groups = x;\n            rootGroup = {};\n            groups.forEach(function (g) {\n                if (typeof g.padding === \"undefined\")\n                    g.padding = 1;\n                if (typeof g.leaves !== \"undefined\")\n                    g.leaves.forEach(function (v, i) { (g.leaves[i] = nodes[v]).parent = g });\n                if (typeof g.groups !== \"undefined\")\n                    g.groups.forEach(function (gi, i) { (g.groups[i] = groups[gi]).parent = g });\n            });\n            rootGroup.leaves = nodes.filter(function (v) { return typeof v.parent === 'undefined'; });\n            rootGroup.groups = groups.filter(function (g) { return typeof g.parent === 'undefined'; });\n            return adaptor;\n        };\n\n        adaptor.powerGraphGroups = function (f) {\n            var g = cola.powergraph.getGroups(nodes, links, linkAccessor);\n            this.groups(g.groups);\n            f(g);\n            return adaptor;\n        }\n\n        /**\n         * if true, the layout will not permit overlaps of the node bounding boxes (defined by the width and height properties on nodes)\n         * @property avoidOverlaps\n         * @type bool\n         * @default false\n         */\n        adaptor.avoidOverlaps = function (v) {\n            if (!arguments.length) return avoidOverlaps;\n            avoidOverlaps = v;\n            return adaptor;\n        }\n\n        /**\n         * if true, the layout will not permit overlaps of the node bounding boxes (defined by the width and height properties on nodes)\n         * @property avoidOverlaps\n         * @type bool\n         * @default false\n         */\n        adaptor.handleDisconnected = function (v) {\n            if (!arguments.length) return handleDisconnected;\n            handleDisconnected = v;\n            return adaptor;\n        }\n\n\n        /**\n         * causes constraints to be generated such that directed graphs are laid out either from left-to-right or top-to-bottom.\n         * a separation constraint is generated in the selected axis for each edge that is not involved in a cycle (part of a strongly connected component)\n         * @param axis {string} 'x' for left-to-right, 'y' for top-to-bottom\n         * @param minSeparation {number|link=>number} either a number specifying a minimum spacing required across all links or a function to return the minimum spacing for each link\n         */\n        adaptor.flowLayout = function (axis, minSeparation) {\n            if (!arguments.length) axis = 'y';\n            directedLinkConstraints = {\n                axis: axis,\n                getMinSeparation: typeof minSeparation === 'number' ?  function () { return minSeparation } : minSeparation\n            };\n            return adaptor;\n        }\n\n        /**\n         * links defined as source, target pairs over nodes\n         * @property links {array}\n         * @default empty list\n         */\n        adaptor.links = function (x) {\n            if (!arguments.length) return links;\n            links = x;\n            return adaptor;\n        };\n\n        /**\n         * list of constraints of various types\n         * @property constraints\n         * @type {array} \n         * @default empty list\n         */\n        adaptor.constraints = function (c) {\n            if (!arguments.length) return constraints;\n            constraints = c;\n            return adaptor;\n        }\n\n        /**\n         * Matrix of ideal distances between all pairs of nodes.\n         * If unspecified, the ideal distances for pairs of nodes will be based on the shortest path distance between them.\n         * @property distanceMatrix\n         * @type {Array of Array of Number}\n         * @default null\n         */\n        adaptor.distanceMatrix = function (d) {\n            if (!arguments.length) return distanceMatrix;\n            distanceMatrix = d;\n            return adaptor;\n        }\n\n        /**\n         * Size of the layout canvas dimensions [x,y]. Currently only used to determine the midpoint which is taken as the starting position\n         * for nodes with no preassigned x and y.\n         * @property size\n         * @type {Array of Number}\n         */\n        adaptor.size = function (x) {\n            if (!arguments.length) return size;\n            size = x;\n            return adaptor;\n        };\n\n        /**\n         * Default size (assume nodes are square so both width and height) to use in packing if node width/height are not specified.\n         * @property defaultNodeSize\n         * @type {Number}\n         */\n        adaptor.defaultNodeSize = function (x) {\n            if (!arguments.length) return defaultNodeSize;\n            defaultNodeSize = x;\n            return adaptor;\n        };\n\n        adaptor.linkDistance = function (x) {\n            if (!arguments.length) \n                return typeof linkDistance === \"function\" ? linkDistance() : linkDistance;\n            linkDistance = typeof x === \"function\" ? x : +x;\n            return adaptor;\n        };\n\n        adaptor.linkType = function (f) {\n            linkType = f;\n            return adaptor;\n        }\n\n        adaptor.convergenceThreshold = function (x) {\n            if (!arguments.length) return threshold;\n            threshold = typeof x === \"function\" ? x : +x;\n            return adaptor;\n        };\n\n        adaptor.alpha = function (x) {\n            if (!arguments.length) return alpha;\n\n            x = +x;\n            if (alpha) { // if we're already running\n                if (x > 0) alpha = x; // we might keep it hot\n                else alpha = 0; // or, next tick will dispatch \"end\"\n            } else if (x > 0) { // otherwise, fire it up!\n                if (!running) {\n                    running = true;\n                    trigger({ type: \"start\", alpha: alpha = x });\n                    kick( adaptor.tick );\n                }\n            }\n\n            return adaptor;\n        };\n\n        function getLinkLength(link) {\n            return typeof linkDistance === \"function\" ? +linkDistance.call(null, link) : linkDistance;\n        }\n\n        function setLinkLength(link, length) {\n            link.length = length;\n        }\n\n        function getLinkType(link) {\n            return typeof linkType === \"function\" ? linkType(link) : 0;\n        }\n\n        var linkAccessor = { getSourceIndex: getSourceIndex, getTargetIndex: getTargetIndex, setLength: setLinkLength, getType: getLinkType };\n\n        adaptor.symmetricDiffLinkLengths = function (idealLength, w) {\n            cola.symmetricDiffLinkLengths(links, linkAccessor, w);\n            this.linkDistance(function (l) { return idealLength * l.length });\n            return adaptor;\n        }\n\n        adaptor.jaccardLinkLengths = function (idealLength, w) {\n            cola.jaccardLinkLengths(links, linkAccessor, w);\n            this.linkDistance(function (l) { return idealLength * l.length });\n            return adaptor;\n        }\n\n        /**\n         * start the layout process\n         * @method start\n         * @param {number} [initialUnconstrainedIterations=0] unconstrained initial layout iterations \n         * @param {number} [initialUserConstraintIterations=0] initial layout iterations with user-specified constraints\n         * @param {number} [initialAllConstraintsIterations=0] initial layout iterations with all constraints including non-overlap\n         */\n        adaptor.start = function () {\n            var i,\n                j,\n                n = this.nodes().length,\n                N = n + 2 * groups.length,\n                m = links.length,\n                w = size[0],\n                h = size[1];\n\n            var x = new Array(N), y = new Array(N);\n            variables = new Array(N);\n\n            var makeVariable = function (i, w) {\n                var v = variables[i] = new cola.vpsc.Variable(0, w);\n                v.index = i;\n                return v;\n            }\n\n            var G = null;\n\n            var ao = this.avoidOverlaps();\n\n            nodes.forEach(function (v, i) {\n                v.index = i;\n                if (typeof v.x === 'undefined') {\n                    v.x = w / 2, v.y = h / 2;\n                }\n                x[i] = v.x, y[i] = v.y;\n            });\n\n            var distances;\n            if (distanceMatrix) {\n                // use the user specified distanceMatrix\n                distances = distanceMatrix;\n            } else {\n                // construct an n X n distance matrix based on shortest paths through graph (with respect to edge.length).\n                distances = (new cola.shortestpaths.Calculator(N, links, getSourceIndex, getTargetIndex, getLinkLength)).DistanceMatrix();\n\n                // G is a square matrix with G[i][j] = 1 iff there exists an edge between node i and node j\n                // otherwise 2. (\n                G = cola.Descent.createSquareMatrix(N, function () { return 2 });\n                links.forEach(function (e) {\n                    var u = getSourceIndex(e), v = getTargetIndex(e);\n                    G[u][v] = G[v][u] = 1;\n                });\n            }\n\n            var D = cola.Descent.createSquareMatrix(N, function (i, j) {\n                return distances[i][j];\n            });\n\n            if (rootGroup && typeof rootGroup.groups !== 'undefined') {\n                var i = n;\n                groups.forEach(function(g) {\n                    G[i][i + 1] = G[i + 1][i] = 1e-6;\n                    D[i][i + 1] = D[i + 1][i] = 0.1;\n                    x[i] = 0, y[i++] = 0;\n                    x[i] = 0, y[i++] = 0;\n                });\n            } else rootGroup = { leaves: nodes, groups: [] };\n\n            var curConstraints = constraints || [];\n            if (directedLinkConstraints) {\n                linkAccessor.getMinSeparation = directedLinkConstraints.getMinSeparation;\n                curConstraints = curConstraints.concat(cola.generateDirectedEdgeConstraints(n, links, directedLinkConstraints.axis, linkAccessor));\n            }\n            \n            var initialUnconstrainedIterations = arguments.length > 0 ? arguments[0] : 0;\n            var initialUserConstraintIterations = arguments.length > 1 ? arguments[1] : 0;\n            var initialAllConstraintsIterations = arguments.length > 2 ? arguments[2] : 0;\n            this.avoidOverlaps(false);\n            descent = new cola.Descent([x, y], D);\n\n            descent.locks.clear();\n            for (i = 0; i < n; ++i) {\n                o = nodes[i];\n                if (o.fixed) {\n                    o.px = o.x;\n                    o.py = o.y;\n                    var p = [o.x, o.y];\n                    descent.locks.add(i, p);\n                }\n            }\n            descent.threshold = threshold;\n\n            // apply initialIterations without user constraints or nonoverlap constraints\n            descent.run(initialUnconstrainedIterations);\n\n            // apply initialIterations with user constraints but no noverlap constraints\n            if (curConstraints.length > 0) descent.project = new cola.vpsc.Projection(nodes, groups, rootGroup, curConstraints).projectFunctions();\n            descent.run(initialUserConstraintIterations);\n\n            // subsequent iterations will apply all constraints\n            this.avoidOverlaps(ao);\n            if (ao) {\n                nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });\n                descent.project = new cola.vpsc.Projection(nodes, groups, rootGroup, curConstraints, true).projectFunctions();\n                nodes.forEach(function (v, i) { x[i] = v.x, y[i] = v.y; });\n            }\n\n            // allow not immediately connected nodes to relax apart (p-stress)\n            descent.G = G;\n            descent.run(initialAllConstraintsIterations);\n\n            links.forEach(function (l) {\n                if (typeof l.source == \"number\") l.source = nodes[l.source];\n                if (typeof l.target == \"number\") l.target = nodes[l.target];\n            });\n            nodes.forEach(function (v, i) {\n                v.x = x[i], v.y = y[i];\n            });\n\n            // recalculate nodes position for disconnected graphs\n            if (!distanceMatrix && handleDisconnected) {\n                cola.applyPacking(cola.separateGraphs(nodes, links), w, h, defaultNodeSize);\n\n                nodes.forEach(function (v, i) {\n                    descent.x[0][i] = v.x, descent.x[1][i] = v.y;\n                });\n            }\n            \n            return adaptor.resume();\n        };\n\n        adaptor.resume = function () {\n            return adaptor.alpha(.1);\n        };\n\n        adaptor.stop = function () {\n            return adaptor.alpha(0);\n        };\n\n        adaptor.prepareEdgeRouting = function (nodeMargin) {\n            visibilityGraph = new cola.geom.TangentVisibilityGraph(\n                    nodes.map(function (v) {\n                        return v.bounds.inflate(-nodeMargin).vertices();\n                    }));\n        }\n\n        adaptor.routeEdge = function(d, draw) {\n            var lineData = [];\n            //if (d.source.id === 10 && d.target.id === 11) {\n            //    debugger;\n            //}\n            var vg2 = new cola.geom.TangentVisibilityGraph(visibilityGraph.P, { V: visibilityGraph.V, E: visibilityGraph.E }),\n                port1 = { x: d.source.x, y: d.source.y },\n                port2 = { x: d.target.x, y: d.target.y },\n                start = vg2.addPoint(port1, d.source.id),\n                end = vg2.addPoint(port2, d.target.id);\n            vg2.addEdgeIfVisible(port1, port2, d.source.id, d.target.id);\n            if (typeof draw !== 'undefined') {\n                draw(vg2);\n            }\n            var sourceInd = function(e) { return e.source.id }, targetInd = function(e) { return e.target.id }, length = function(e) { return e.length() }, \n                spCalc = new cola.shortestpaths.Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length),\n                shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);\n            if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {\n                cola.vpsc.makeEdgeBetween(d, d.source.innerBounds, d.target.innerBounds, 5);\n                lineData = [{ x: d.sourceIntersection.x, y: d.sourceIntersection.y }, { x: d.arrowStart.x, y: d.arrowStart.y }];\n            } else {\n                var n = shortestPath.length - 2,\n                    p = vg2.V[shortestPath[n]].p,\n                    q = vg2.V[shortestPath[0]].p,\n                    lineData = [d.source.innerBounds.rayIntersection(p.x, p.y)];\n                for (var i = n; i >= 0; --i) \n                    lineData.push(vg2.V[shortestPath[i]].p);\n                lineData.push(cola.vpsc.makeEdgeTo(q, d.target.innerBounds, 5));\n            }\n            //lineData.forEach(function (v, i) {\n            //    if (i > 0) {\n            //        var u = lineData[i - 1];\n            //        nodes.forEach(function (node) {\n            //            if (node.id === getSourceIndex(d) || node.id === getTargetIndex(d)) return;\n            //            var ints = node.innerBounds.lineIntersections(u.x, u.y, v.x, v.y);\n            //            if (ints.length > 0) {\n            //                debugger;\n            //            }\n            //        })\n            //    }\n            //})\n            return lineData;\n        }\n\n        //The link source and target may be just a node index, or they may be references to nodes themselves.\n        function getSourceIndex(e) {\n            return typeof e.source === 'number' ? e.source : e.source.index;\n        }\n\n        //The link source and target may be just a node index, or they may be references to nodes themselves.\n        function getTargetIndex(e) {\n            return typeof e.target === 'number' ? e.target : e.target.index;\n        }\n        // Get a string ID for a given link.\n        adaptor.linkId = function (e) {\n            return getSourceIndex(e) + \"-\" + getTargetIndex(e);\n        }\n\n        return adaptor;\n    };\n\n    // The fixed property has three bits:\n    // Bit 1 can be set externally (e.g., d.fixed = true) and show persist.\n    // Bit 2 stores the dragging state, from mousedown to mouseup.\n    // Bit 3 stores the hover state, from mouseover to mouseout.\n    // Dragend is a special case: it also clears the hover state.\n\n    function colaDragstart(d) {\n        d.fixed |= 2; // set bit 2\n        d.px = d.x, d.py = d.y; // set velocity to zero\n    }\n\n    function colaDragend(d) {\n        d.fixed &= ~6; // unset bits 2 and 3\n        //d.fixed = 0;\n    }\n\n    function colaMouseover(d) {\n        d.fixed |= 4; // set bit 3\n        d.px = d.x, d.py = d.y; // set velocity to zero\n    }\n\n    function colaMouseout(d) {\n        d.fixed &= ~4; // unset bit 3\n    }\n    return cola;\n})(cola || (cola = {}));\n//Based on js_bintrees:\n//\n//https://github.com/vadimg/js_bintrees\n//\n//Copyright (C) 2011 by Vadim Graboys\n//\n//Permission is hereby granted, free of charge, to any person obtaining a copy\n//of this software and associated documentation files (the \"Software\"), to deal\n//in the Software without restriction, including without limitation the rights\n//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//copies of the Software, and to permit persons to whom the Software is\n//furnished to do so, subject to the following conditions:\n//\n//The above copyright notice and this permission notice shall be included in\n//all copies or substantial portions of the Software.\n//\n//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//THE SOFTWARE.\n\nRBTree = (function (window) {\nvar global = window;\nvar require = function(name) {\n    var fn = require.m[name];\n    if (fn.mod) {\n        return fn.mod.exports;\n    }\n\n    var mod = fn.mod = { exports: {} };\n    fn(mod, mod.exports);\n    return mod.exports;\n};\n\nrequire.m = {};\nrequire.m['./treebase'] = function(module, exports) {\n\nfunction TreeBase() {}\n\n// removes all nodes from the tree\nTreeBase.prototype.clear = function() {\n    this._root = null;\n    this.size = 0;\n};\n\n// returns node data if found, null otherwise\nTreeBase.prototype.find = function(data) {\n    var res = this._root;\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            return res.data;\n        }\n        else {\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function(data) {\n    var res = this._root;\n    var iter = this.iterator();\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            iter._cursor = res;\n            return iter;\n        }\n        else {\n            iter._ancestors.push(res);\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// Returns an interator to the tree node immediately before (or at) the element\nTreeBase.prototype.lowerBound = function(data) {\n    return this._bound(data, this._comparator);\n};\n\n// Returns an interator to the tree node immediately after (or at) the element\nTreeBase.prototype.upperBound = function(data) {\n    var cmp = this._comparator;\n\n    function reverse_cmp(a, b) {\n        return cmp(b, a);\n    }\n\n    return this._bound(data, reverse_cmp);\n};\n\n// returns null if tree is empty\nTreeBase.prototype.min = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.left !== null) {\n        res = res.left;\n    }\n\n    return res.data;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.max = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.right !== null) {\n        res = res.right;\n    }\n\n    return res.data;\n};\n\n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function() {\n    return new Iterator(this);\n};\n\n// calls cb on each node's data, in order\nTreeBase.prototype.each = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.next()) !== null) {\n        cb(data);\n    }\n};\n\n// calls cb on each node's data, in reverse order\nTreeBase.prototype.reach = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.prev()) !== null) {\n        cb(data);\n    }\n};\n\n// used for lowerBound and upperBound\nTreeBase.prototype._bound = function(data, cmp) {\n    var cur = this._root;\n    var iter = this.iterator();\n\n    while(cur !== null) {\n        var c = this._comparator(data, cur.data);\n        if(c === 0) {\n            iter._cursor = cur;\n            return iter;\n        }\n        iter._ancestors.push(cur);\n        cur = cur.get_child(c > 0);\n    }\n\n    for(var i=iter._ancestors.length - 1; i >= 0; --i) {\n        cur = iter._ancestors[i];\n        if(cmp(data, cur.data) > 0) {\n            iter._cursor = cur;\n            iter._ancestors.length = i;\n            return iter;\n        }\n    }\n\n    iter._ancestors.length = 0;\n    return iter;\n};\n\n\nfunction Iterator(tree) {\n    this._tree = tree;\n    this._ancestors = [];\n    this._cursor = null;\n}\n\nIterator.prototype.data = function() {\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._minNode(root);\n        }\n    }\n    else {\n        if(this._cursor.right === null) {\n            // no greater node in subtree, go up to parent\n            // if coming from a right child, continue up the stack\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.right === save);\n        }\n        else {\n            // get the next node from the subtree\n            this._ancestors.push(this._cursor);\n            this._minNode(this._cursor.right);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._maxNode(root);\n        }\n    }\n    else {\n        if(this._cursor.left === null) {\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.left === save);\n        }\n        else {\n            this._ancestors.push(this._cursor);\n            this._maxNode(this._cursor.left);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\nIterator.prototype._minNode = function(start) {\n    while(start.left !== null) {\n        this._ancestors.push(start);\n        start = start.left;\n    }\n    this._cursor = start;\n};\n\nIterator.prototype._maxNode = function(start) {\n    while(start.right !== null) {\n        this._ancestors.push(start);\n        start = start.right;\n    }\n    this._cursor = start;\n};\n\nmodule.exports = TreeBase;\n\n};\nrequire.m['__main__'] = function(module, exports) {\n\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n    this.red = true;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction RBTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nRBTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function(data) {\n    var ret = false;\n\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        ret = true;\n        this.size++;\n    }\n    else {\n        var head = new Node(undefined); // fake tree root\n\n        var dir = 0;\n        var last = 0;\n\n        // setup\n        var gp = null; // grandparent\n        var ggp = head; // grand-grand-parent\n        var p = null; // parent\n        var node = this._root;\n        ggp.right = this._root;\n\n        // search down\n        while(true) {\n            if(node === null) {\n                // insert new node at the bottom\n                node = new Node(data);\n                p.set_child(dir, node);\n                ret = true;\n                this.size++;\n            }\n            else if(is_red(node.left) && is_red(node.right)) {\n                // color flip\n                node.red = true;\n                node.left.red = false;\n                node.right.red = false;\n            }\n\n            // fix red violation\n            if(is_red(node) && is_red(p)) {\n                var dir2 = ggp.right === gp;\n\n                if(node === p.get_child(last)) {\n                    ggp.set_child(dir2, single_rotate(gp, !last));\n                }\n                else {\n                    ggp.set_child(dir2, double_rotate(gp, !last));\n                }\n            }\n\n            var cmp = this._comparator(node.data, data);\n\n            // stop if found\n            if(cmp === 0) {\n                break;\n            }\n\n            last = dir;\n            dir = cmp < 0;\n\n            // update helpers\n            if(gp !== null) {\n                ggp = gp;\n            }\n            gp = p;\n            p = node;\n            node = node.get_child(dir);\n        }\n\n        // update root\n        this._root = head.right;\n    }\n\n    // make root black\n    this._root.red = false;\n\n    return ret;\n};\n\n// returns true if removed, false if not found\nRBTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var gp = null; // grand parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        var last = dir;\n\n        // update helpers\n        gp = p;\n        p = node;\n        node = node.get_child(dir);\n\n        var cmp = this._comparator(data, node.data);\n\n        dir = cmp > 0;\n\n        // save found node\n        if(cmp === 0) {\n            found = node;\n        }\n\n        // push the red node down\n        if(!is_red(node) && !is_red(node.get_child(dir))) {\n            if(is_red(node.get_child(!dir))) {\n                var sr = single_rotate(node, dir);\n                p.set_child(last, sr);\n                p = sr;\n            }\n            else if(!is_red(node.get_child(!dir))) {\n                var sibling = p.get_child(!last);\n                if(sibling !== null) {\n                    if(!is_red(sibling.get_child(!last)) && !is_red(sibling.get_child(last))) {\n                        // color flip\n                        p.red = false;\n                        sibling.red = true;\n                        node.red = true;\n                    }\n                    else {\n                        var dir2 = gp.right === p;\n\n                        if(is_red(sibling.get_child(last))) {\n                            gp.set_child(dir2, double_rotate(p, last));\n                        }\n                        else if(is_red(sibling.get_child(!last))) {\n                            gp.set_child(dir2, single_rotate(p, last));\n                        }\n\n                        // ensure correct coloring\n                        var gpc = gp.get_child(dir2);\n                        gpc.red = true;\n                        node.red = true;\n                        gpc.left.red = false;\n                        gpc.right.red = false;\n                    }\n                }\n            }\n        }\n    }\n\n    // replace and remove if found\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n        this.size--;\n    }\n\n    // update root and make it black\n    this._root = head.right;\n    if(this._root !== null) {\n        this._root.red = false;\n    }\n\n    return found !== null;\n};\n\nfunction is_red(node) {\n    return node !== null && node.red;\n}\n\nfunction single_rotate(root, dir) {\n    var save = root.get_child(!dir);\n\n    root.set_child(!dir, save.get_child(dir));\n    save.set_child(dir, root);\n\n    root.red = true;\n    save.red = false;\n\n    return save;\n}\n\nfunction double_rotate(root, dir) {\n    root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n    return single_rotate(root, dir);\n}\n\nmodule.exports = RBTree;\n};\nreturn require('__main__');\n})(window);\n\n\nvar cola;\n(function (cola) {\n    var applyPacking = {}\n    applyPacking.PADDING = 10;\n    applyPacking.GOLDEN_SECTION = (1 + Math.sqrt(5)) / 2;\n    applyPacking.FLOAT_EPSILON = 0.0001;\n    applyPacking.MAX_INERATIONS = 100;\n\n    // assign x, y to nodes while using box packing algorithm for disconnected graphs\n    cola.applyPacking = function (graphs, w, h, node_size, desired_ratio){\n\n        var init_x = 0,\n            init_y = 0,\n\n            svg_width = w,\n            svg_height = h,\n\n            desired_ratio = typeof desired_ratio !== 'undefined' ? desired_ratio : 1,\n            node_size = typeof node_size !== 'undefined' ? node_size : 0,\n\n            real_width = 0,\n            real_height = 0,\n            min_width = 0,\n\n            global_bottom = 0,\n            line = [];\n    \n        if (graphs.length == 0)\n            return;\n\n        /// that would take care of single nodes problem\n        // graphs.forEach(function (g) {\n        //     if (g.array.length == 1) {\n        //         g.array[0].x = 0;\n        //         g.array[0].y = 0;\n        //     }\n        // });\n\n        calculate_bb(graphs);\n        apply(graphs);\n        put_nodes_to_right_positions(graphs);\n\n        // get bounding boxes for all separate graphs\n        function calculate_bb(graphs){\n\n            graphs.forEach(function(g) { \n                calculate_single_bb(g)\n            });\n\n            function calculate_single_bb(graph){\n                var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE,\n                 max_x = 0, max_y = 0;\n\n                graph.array.forEach(function(v){\n                    var w = typeof v.width !== 'undefined' ? v.width : node_size;\n                    var h = typeof v.height !== 'undefined' ? v.height : node_size;\n                    w /= 2;\n                    h /= 2;\n                    max_x = Math.max(v.x + w, max_x);\n                    min_x = Math.min(v.x - w, min_x);\n                    max_y = Math.max(v.y + h, max_y);\n                    min_y = Math.min(v.y - h, min_y);\n                });\n\n                graph.width = max_x - min_x;\n                graph.height = max_y - min_y;\n            }\n        }\n\n        function plot(data, left, right, opt_x, opt_y) {\n                    // plot the cost function\n            var plot_svg = d3.select(\"body\").append(\"svg\")\n                .attr(\"width\", function(){return 2 * (right - left);})\n                .attr(\"height\", 200);\n\n\n            var x = d3.time.scale().range([0, 2 * (right - left)]);\n\n            var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n            plot_svg.append(\"g\").attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, 199)\")\n                .call(xAxis);\n\n            var lastX = 0;\n            var lastY = 0;\n            var value = 0;\n            for (var r = left; r < right; r += 1){\n                value = step(data, r);\n                // value = 1;\n\n                plot_svg.append(\"line\").attr(\"x1\", 2 * (lastX - left))\n                    .attr(\"y1\", 200 - 30 * lastY)\n                    .attr(\"x2\", 2 * r - 2 * left)\n                    .attr(\"y2\", 200 - 30 * value)\n                    .style(\"stroke\", \"rgb(6,120,155)\");\n\n                lastX = r;\n                lastY = value;\n            }\n\n            plot_svg.append(\"circle\").attr(\"cx\", 2 * opt_x - 2 * left).attr(\"cy\", 200 - 30 * opt_y)\n                .attr(\"r\", 5).style('fill', \"rgba(0,0,0,0.5)\");\n            \n        }\n\n        // actuall assigning of position to nodes\n        function put_nodes_to_right_positions(graphs){\n            graphs.forEach(function(g){\n                // calculate current graph center:\n                var center = {x: 0, y: 0};\n                \n                g.array.forEach(function(node){\n                    center.x += node.x;\n                    center.y += node.y;\n                });\n                \n                center.x /= g.array.length;\n                center.y /= g.array.length;\n\n                // calculate current top left corner:\n                var corner = { x: center.x - g.width/2, y: center.y - g.height/2 };\n                var offset = { x: g.x - corner.x, y: g.y - corner.y };\n\n                // put nodes:\n                g.array.forEach(function(node){\n                    node.x = node.x + offset.x + svg_width/2 - real_width/2;\n                    node.y = node.y + offset.y + svg_height/2 - real_height/2;\n                });\n            });\n        }\n\n        // starts box packing algorithm\n        // desired ratio is 1 by default\n        function apply(data, desired_ratio){\n            var curr_best_f = Number.POSITIVE_INFINITY;\n            var curr_best = 0;\n            data.sort(function (a, b) { return b.height - a.height; });\n\n            min_width = data.reduce(function(a, b) {\n                return a.width < b.width ? a.width : b.width;\n            });\n\n            var left = x1 = min_width;\n            var right = x2 = get_entire_width(data);\n            var iterationCounter = 0;\n            \n            var f_x1 = Number.MAX_VALUE;\n            var f_x2 = Number.MAX_VALUE;\n            var flag = -1; // determines which among f_x1 and f_x2 to recompute\n\n\n            var dx = Number.MAX_VALUE;\n            var df = Number.MAX_VALUE;\n\n            while (( dx > min_width) || df > applyPacking.FLOAT_EPSILON ) {\n\n                if (flag != 1) {\n                    var x1 = right - (right - left) / applyPacking.GOLDEN_SECTION;\n                    var f_x1 = step(data, x1);\n                } \n                if (flag != 0) {\n                    var x2 = left + (right - left) / applyPacking.GOLDEN_SECTION; \n                    var f_x2 = step(data, x2);\n                }\n\n                dx = Math.abs(x1 - x2);\n                df = Math.abs(f_x1 - f_x2);\n\n                if (f_x1 < curr_best_f) {\n                    curr_best_f = f_x1;\n                    curr_best = x1;\n                }\n\n                if (f_x2 < curr_best_f) {\n                    curr_best_f = f_x2;\n                    curr_best = x2;\n                }\n\n                if (f_x1 > f_x2) {\n                    left = x1;\n                    x1 = x2;\n                    f_x1 = f_x2;\n                    flag = 1;\n                } else {\n                    right = x2;\n                    x2 = x1;\n                    f_x2 = f_x1;\n                    flag = 0;\n                }\n\n                if (iterationCounter++ > 100) {\n                    break;\n                }  \n            }\n            // plot(data, min_width, get_entire_width(data), curr_best, curr_best_f);\n            step(data, curr_best);\n        }\n\n        // one iteration of the optimization method\n        // (gives a proper, but not necessarily optimal packing)\n        function step(data, max_width){\n            line = [];\n            real_width = 0;\n            real_height = 0;\n            global_bottom = init_y;\n\n            for (var i = 0; i < data.length; i++){\n                var o = data[i];\n                put_rect(o, max_width);\n            }\n\n            return Math.abs(get_real_ratio() - desired_ratio);\n        }\n\n        // looking for a position to one box \n        function put_rect(rect, max_width){\n            \n\n            var parent = undefined;\n\n            for (var i = 0; i < line.length; i++){\n                if ((line[i].space_left >= rect.height) && (line[i].x + line[i].width + rect.width + applyPacking.PADDING - max_width) <= applyPacking.FLOAT_EPSILON){\n                    parent = line[i];\n                    break;\n                }\n            }\n\n            line.push(rect);\n\n            if (parent !== undefined){\n                rect.x = parent.x + parent.width + applyPacking.PADDING;\n                rect.y = parent.bottom;\n                rect.space_left = rect.height;\n                rect.bottom = rect.y;\n                parent.space_left -= rect.height + applyPacking.PADDING;\n                parent.bottom += rect.height + applyPacking.PADDING;\n            } else {\n                rect.y = global_bottom;\n                global_bottom += rect.height + applyPacking.PADDING;\n                rect.x = init_x;\n                rect.bottom = rect.y;\n                rect.space_left = rect.height;\n            }\n\n            if (rect.y + rect.height - real_height > -applyPacking.FLOAT_EPSILON) real_height = rect.y + rect.height - init_y;\n            if (rect.x + rect.width - real_width > -applyPacking.FLOAT_EPSILON) real_width = rect.x + rect.width - init_x;\n        };\n\n        function get_entire_width(data){\n            var width = 0;\n            data.forEach(function (d) {return width += d.width + applyPacking.PADDING;});\n            return width;\n        }\n\n        function get_real_ratio(){\n            return (real_width / real_height);\n        }\n    }\n\n    // seraration of disconnected graphs\n    // returns an array of {}\n    cola.separateGraphs = function(nodes, links){\n        var marks = {};\n        var ways = {};\n        graphs = [];\n        var clusters = 0;\n\n        for (var i = 0; i < links.length; i++){\n            var link = links[i];\n            var n1 = link.source;\n            var n2 = link.target;\n            if (ways[n1.index]) \n                ways[n1.index].push(n2);\n            else\n                ways[n1.index] = [n2];\n            \n            if (ways[n2.index]) \n                ways[n2.index].push(n1);\n            else\n                ways[n2.index] = [n1];\n        }\n\n        for (var i = 0; i < nodes.length; i++){\n            var node = nodes[i];\n            if (marks[node.index]) continue;\n            explore_node(node, true);\n        }\n\n        function explore_node(n, is_new){\n            if (marks[n.index] !== undefined) return;\n            if (is_new) {\n                clusters++;\n                graphs.push({array:[]});\n            }\n            marks[n.index] = clusters;\n            graphs[clusters - 1].array.push(n);\n            var adjacent = ways[n.index];\n            if (!adjacent) return;\n        \n            for (var j = 0; j < adjacent.length; j++){\n                explore_node(adjacent[j], false);\n            }\n        }\n    \n        return graphs;\n    }\n    return cola;\n})(cola || (cola = {}))\n","/*!\n * This file is part of Cytoscape.js 2.4.9.\n *\n * Cytoscape.js is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * Cytoscape.js is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with\n * Cytoscape.js. If not, see <http://www.gnu.org/licenses/>.\n */\n\n// this is put as a global var in the browser\n// or it's just a global to this module if commonjs\n\nvar cytoscape;\n\n(function(window){ 'use strict';\n\n  // the object iteself is a function that init's an instance of cytoscape\n\n  var $$ = cytoscape = function(){ // jshint ignore:line\n    return cytoscape.init.apply(cytoscape, arguments);\n  };\n\n  $$.version = '2.4.9';\n\n  // allow functional access to cytoscape.js\n  // e.g. var cyto = $.cytoscape({ selector: \"#foo\", ... });\n  //      var nodes = cyto.nodes();\n  $$.init = function( options ){\n\n    // if no options specified, use default\n    if( options === undefined ){\n      options = {};\n    }\n\n    // create instance\n    if( $$.is.plainObject( options ) ){\n      return new $$.Core( options );\n    }\n\n    // allow for registration of extensions\n    // e.g. $.cytoscape('renderer', 'svg', SvgRenderer);\n    // e.g. $.cytoscape('renderer', 'svg', 'nodeshape', 'ellipse', SvgEllipseNodeShape);\n    // e.g. $.cytoscape('core', 'doSomething', function(){ /* doSomething code */ });\n    // e.g. $.cytoscape('collection', 'doSomething', function(){ /* doSomething code */ });\n    else if( $$.is.string( options ) ) {\n      return $$.extension.apply($$.extension, arguments);\n    }\n  };\n\n  // define the function namespace here, since it has members in many places\n  $$.fn = {};\n\n  if( typeof module !== 'undefined' && module.exports ){ // expose as a commonjs module\n    module.exports = cytoscape;\n  }\n\n  if( typeof define !== 'undefined' && define.amd ){ // expose as an amd/requirejs module\n    define('cytoscape', function(){\n      return cytoscape;\n    });\n  }\n\n  // make sure we always register in the window just in case (e.g. w/ derbyjs)\n  if( window ){\n    window.cytoscape = cytoscape;\n  }\n\n})( typeof window === 'undefined' ? null : window );\n\n// extra set to `this` is necessary for meteor\nthis.cytoscape = cytoscape;\n\n// internal, minimal Promise impl s.t. apis can return promises in old envs\n// based on thenable (http://github.com/rse/thenable)\n\n// NB: you must use `new $$.Promise`, because you may have native promises that don't autonew for you\n\n;(function($$){ 'use strict';\n\n  /*  promise states [Promises/A+ 2.1]  */\n  var STATE_PENDING   = 0;                                         /*  [Promises/A+ 2.1.1]  */\n  var STATE_FULFILLED = 1;                                         /*  [Promises/A+ 2.1.2]  */\n  var STATE_REJECTED  = 2;                                         /*  [Promises/A+ 2.1.3]  */\n\n  /*  promise object constructor  */\n  var api = function (executor) {\n    /*  optionally support non-constructor/plain-function call  */\n    if (!(this instanceof api))\n      return new api(executor);\n\n    /*  initialize object  */\n    this.id           = \"Thenable/1.0.7\";\n    this.state        = STATE_PENDING; /*  initial state  */\n    this.fulfillValue = undefined;     /*  initial value  */     /*  [Promises/A+ 1.3, 2.1.2.2]  */\n    this.rejectReason = undefined;     /*  initial reason */     /*  [Promises/A+ 1.5, 2.1.3.2]  */\n    this.onFulfilled  = [];            /*  initial handlers  */\n    this.onRejected   = [];            /*  initial handlers  */\n\n    /*  provide optional information-hiding proxy  */\n    this.proxy = {\n      then: this.then.bind(this)\n    };\n\n    /*  support optional executor function  */\n    if (typeof executor === \"function\")\n      executor.call(this, this.fulfill.bind(this), this.reject.bind(this));\n  };\n\n  /*  promise API methods  */\n  api.prototype = {\n    /*  promise resolving methods  */\n    fulfill: function (value) { return deliver(this, STATE_FULFILLED, \"fulfillValue\", value); },\n    reject:  function (value) { return deliver(this, STATE_REJECTED,  \"rejectReason\", value); },\n\n    /*  \"The then Method\" [Promises/A+ 1.1, 1.2, 2.2]  */\n    then: function (onFulfilled, onRejected) {\n      var curr = this;\n      var next = new api();                                    /*  [Promises/A+ 2.2.7]  */\n      curr.onFulfilled.push(\n        resolver(onFulfilled, next, \"fulfill\"));             /*  [Promises/A+ 2.2.2/2.2.6]  */\n      curr.onRejected.push(\n        resolver(onRejected,  next, \"reject\" ));             /*  [Promises/A+ 2.2.3/2.2.6]  */\n      execute(curr);\n      return next.proxy;                                       /*  [Promises/A+ 2.2.7, 3.3]  */\n    }\n  };\n\n  /*  deliver an action  */\n  var deliver = function (curr, state, name, value) {\n    if (curr.state === STATE_PENDING) {\n      curr.state = state;                                      /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */\n      curr[name] = value;                                      /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */\n      execute(curr);\n    }\n    return curr;\n  };\n\n  /*  execute all handlers  */\n  var execute = function (curr) {\n    if (curr.state === STATE_FULFILLED)\n      execute_handlers(curr, \"onFulfilled\", curr.fulfillValue);\n    else if (curr.state === STATE_REJECTED)\n      execute_handlers(curr, \"onRejected\",  curr.rejectReason);\n  };\n\n  /*  execute particular set of handlers  */\n  var execute_handlers = function (curr, name, value) {\n    /* global process: true */\n    /* global setImmediate: true */\n    /* global setTimeout: true */\n\n    /*  short-circuit processing  */\n    if (curr[name].length === 0)\n      return;\n\n    /*  iterate over all handlers, exactly once  */\n    var handlers = curr[name];\n    curr[name] = [];                                             /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */\n    var func = function () {\n      for (var i = 0; i < handlers.length; i++)\n        handlers[i](value);                                  /*  [Promises/A+ 2.2.5]  */\n    };\n\n    /*  execute procedure asynchronously  */                     /*  [Promises/A+ 2.2.4, 3.1]  */\n    if (typeof process === \"object\" && typeof process.nextTick === \"function\")\n      process.nextTick(func);\n    else if (typeof setImmediate === \"function\")\n      setImmediate(func);\n    else\n      setTimeout(func, 0);\n  };\n\n  /*  generate a resolver function  */\n  var resolver = function (cb, next, method) {\n    return function (value) {\n      if (typeof cb !== \"function\")                            /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */\n        next[method].call(next, value);                      /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */\n      else {\n        var result;\n        try { result = cb(value); }                          /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */\n        catch (e) {\n          next.reject(e);                                  /*  [Promises/A+ 2.2.7.2]  */\n          return;\n        }\n        resolve(next, result);                               /*  [Promises/A+ 2.2.7.1]  */\n      }\n    };\n  };\n\n  /*  \"Promise Resolution Procedure\"  */                           /*  [Promises/A+ 2.3]  */\n  var resolve = function (promise, x) {\n    /*  sanity check arguments  */                               /*  [Promises/A+ 2.3.1]  */\n    if (promise === x || promise.proxy === x) {\n      promise.reject(new TypeError(\"cannot resolve promise with itself\"));\n      return;\n    }\n\n    /*  surgically check for a \"then\" method\n      (mainly to just call the \"getter\" of \"then\" only once)  */\n    var then;\n    if ((typeof x === \"object\" && x !== null) || typeof x === \"function\") {\n      try { then = x.then; }                                   /*  [Promises/A+ 2.3.3.1, 3.5]  */\n      catch (e) {\n        promise.reject(e);                                   /*  [Promises/A+ 2.3.3.2]  */\n        return;\n      }\n    }\n\n    /*  handle own Thenables    [Promises/A+ 2.3.2]\n      and similar \"thenables\" [Promises/A+ 2.3.3]  */\n    if (typeof then === \"function\") {\n      var resolved = false;\n      try {\n        /*  call retrieved \"then\" method */                  /*  [Promises/A+ 2.3.3.3]  */\n        then.call(x,\n          /*  resolvePromise  */                           /*  [Promises/A+ 2.3.3.3.1]  */\n          function (y) {\n            if (resolved) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */\n            if (y === x)                                 /*  [Promises/A+ 3.6]  */\n              promise.reject(new TypeError(\"circular thenable chain\"));\n            else\n              resolve(promise, y);\n          },\n\n          /*  rejectPromise  */                            /*  [Promises/A+ 2.3.3.3.2]  */\n          function (r) {\n            if (resolved) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */\n            promise.reject(r);\n          }\n        );\n      }\n      catch (e) {\n        if (!resolved)                                       /*  [Promises/A+ 2.3.3.3.3]  */\n          promise.reject(e);                               /*  [Promises/A+ 2.3.3.3.4]  */\n      }\n      return;\n    }\n\n    /*  handle other values  */\n    promise.fulfill(x);                                          /*  [Promises/A+ 2.3.4, 2.3.3.4]  */\n  };\n\n  // use native promises where possible\n  $$.Promise = typeof Promise === 'undefined' ? api : Promise;\n\n  // so we always have Promise.all()\n  $$.Promise.all = $$.Promise.all || function( ps ){\n    return new $$.Promise(function( resolveAll, rejectAll ){\n      var vals = new Array( ps.length );\n      var doneCount = 0;\n\n      var fulfill = function( i, val ){\n        vals[i] = val;\n        doneCount++;\n\n        if( doneCount === ps.length ){\n          resolveAll( vals );\n        }\n      };\n\n      for( var i = 0; i < ps.length; i++ ){\n        (function( i ){\n          var p = ps[i];\n          var isPromise = p.then != null;\n\n          if( isPromise ){\n            p.then(function( val ){\n              fulfill( i, val );\n            }, function( err ){\n              rejectAll( err );\n            });\n          } else {\n            var val = p;\n            fulfill( i, val );\n          }\n        })( i );\n      }\n\n    });\n  };\n\n})( cytoscape );\n\n// type testing utility functions\n\n;(function($$, window){ 'use strict';\n\n  var typeofstr = typeof '';\n  var typeofobj = typeof {};\n  var typeoffn = typeof function(){};\n\n  $$.is = {\n    defined: function(obj){\n      return obj != null; // not undefined or null\n    },\n\n    string: function(obj){\n      return obj != null && typeof obj == typeofstr;\n    },\n\n    fn: function(obj){\n      return obj != null && typeof obj === typeoffn;\n    },\n\n    array: function(obj){\n      return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;\n    },\n\n    plainObject: function(obj){\n      return obj != null && typeof obj === typeofobj && !$$.is.array(obj) && obj.constructor === Object;\n    },\n\n    object: function(obj){\n      return obj != null && typeof obj === typeofobj;\n    },\n\n    number: function(obj){\n      return obj != null && typeof obj === typeof 1 && !isNaN(obj);\n    },\n\n    integer: function( obj ){\n      return $$.is.number(obj) && Math.floor(obj) === obj;\n    },\n\n    color: function(obj){\n      return obj != null && typeof obj === typeof '' && $.Color(obj).toString() !== '';\n    },\n\n    bool: function(obj){\n      return obj != null && typeof obj === typeof true;\n    },\n\n    elementOrCollection: function(obj){\n      return $$.is.element(obj) || $$.is.collection(obj);\n    },\n\n    element: function(obj){\n      return obj instanceof $$.Element && obj._private.single;\n    },\n\n    collection: function(obj){\n      return obj instanceof $$.Collection && !obj._private.single;\n    },\n\n    core: function(obj){\n      return obj instanceof $$.Core;\n    },\n\n    style: function(obj){\n      return obj instanceof $$.Style;\n    },\n\n    stylesheet: function(obj){\n      return obj instanceof $$.Stylesheet;\n    },\n\n    event: function(obj){\n      return obj instanceof $$.Event;\n    },\n\n    thread: function(obj){\n      return obj instanceof $$.Thread;\n    },\n\n    fabric: function(obj){\n      return obj instanceof $$.Fabric;\n    },\n\n    emptyString: function(obj){\n      if( !obj ){ // null is empty\n        return true;\n      } else if( $$.is.string(obj) ){\n        if( obj === '' || obj.match(/^\\s+$/) ){\n          return true; // empty string is empty\n        }\n      }\n\n      return false; // otherwise, we don't know what we've got\n    },\n\n    nonemptyString: function(obj){\n      if( obj && $$.is.string(obj) && obj !== '' && !obj.match(/^\\s+$/) ){\n        return true;\n      }\n\n      return false;\n    },\n\n    domElement: function(obj){\n      if( typeof HTMLElement === 'undefined' ){\n        return false; // we're not in a browser so it doesn't matter\n      } else {\n        return obj instanceof HTMLElement;\n      }\n    },\n\n    boundingBox: function(obj){\n      return $$.is.plainObject(obj) &&\n        $$.is.number(obj.x1) && $$.is.number(obj.x2) &&\n        $$.is.number(obj.y1) && $$.is.number(obj.y2)\n      ;\n    },\n\n    promise: function(obj){\n      return $$.is.object(obj) && $$.is.fn(obj.then);\n    },\n\n    touch: function(){\n      return window && ( ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch );\n    },\n\n    gecko: function(){\n      return typeof InstallTrigger !== 'undefined' || ('MozAppearance' in document.documentElement.style);\n    },\n\n    webkit: function(){\n      return typeof webkitURL !== 'undefined' || ('WebkitAppearance' in document.documentElement.style);\n    },\n\n    chromium: function(){\n      return typeof chrome !== 'undefined';\n    },\n\n    khtml: function(){\n      return navigator.vendor.match(/kde/i); // TODO probably a better way to detect this...\n    },\n\n    khtmlEtc: function(){\n      return $$.is.khtml() || $$.is.webkit() || $$.is.chromium();\n    },\n\n    trident: function(){\n       return typeof ActiveXObject !== 'undefined' || /*@cc_on!@*/false;\n    },\n\n    windows: function(){\n      return typeof navigator !== 'undefined' && navigator.appVersion.match(/Win/i);\n    },\n\n    mac: function(){\n      return typeof navigator !== 'undefined' && navigator.appVersion.match(/Mac/i);\n    },\n\n    linux: function(){\n      return typeof navigator !== 'undefined' && navigator.appVersion.match(/Linux/i);\n    },\n\n    unix: function(){\n      return typeof navigator !== 'undefined' && navigator.appVersion.match(/X11/i);\n    }\n  };\n\n})( cytoscape, typeof window === 'undefined' ? null : window );\n\n;(function($$, window){ 'use strict';\n\n  // utility functions only for internal use\n\n  $$.util = {\n\n    // the jquery extend() function\n    // NB: modified to use $$.is etc since we can't use jquery functions\n    extend: function() {\n      var options, name, src, copy, copyIsArray, clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n      // Handle a deep copy situation\n      if ( typeof target === 'boolean' ) {\n        deep = target;\n        target = arguments[1] || {};\n        // skip the boolean and the target\n        i = 2;\n      }\n\n      // Handle case when target is a string or something (possible in deep copy)\n      if ( typeof target !== 'object' && !$$.is.fn(target) ) {\n        target = {};\n      }\n\n      // extend jQuery itself if only one argument is passed\n      if ( length === i ) {\n        target = this;\n        --i;\n      }\n\n      for ( ; i < length; i++ ) {\n        // Only deal with non-null/undefined values\n        if ( (options = arguments[ i ]) != null ) {\n          // Extend the base object\n          for ( name in options ) {\n            src = target[ name ];\n            copy = options[ name ];\n\n            // Prevent never-ending loop\n            if ( target === copy ) {\n              continue;\n            }\n\n            // Recurse if we're merging plain objects or arrays\n            if ( deep && copy && ( $$.is.plainObject(copy) || (copyIsArray = $$.is.array(copy)) ) ) {\n              if ( copyIsArray ) {\n                copyIsArray = false;\n                clone = src && $$.is.array(src) ? src : [];\n\n              } else {\n                clone = src && $$.is.plainObject(src) ? src : {};\n              }\n\n              // Never move original objects, clone them\n              target[ name ] = $$.util.extend( deep, clone, copy );\n\n            // Don't bring in undefined values\n            } else if ( copy !== undefined ) {\n              target[ name ] = copy;\n            }\n          }\n        }\n      }\n\n      // Return the modified object\n      return target;\n    },\n\n    // require that pulls in module from commonjs, amd, or window (falling back until found)\n    require: function( name, callback, options ){\n      var ret;\n      options = $$.util.extend({\n        msgIfNotFound: true\n      }, options);\n\n      var done = false;\n      var fulfil = function( ret ){\n        done = true;\n        callback( ret );\n      };\n\n      var checkWindow = function( next ){\n        if( window ){ // detected browser/window env\n          ret = window[ name ];\n        }\n\n        if( ret !== undefined ){ fulfil(ret); }\n        if( next ){ next(); }\n      };\n      var onCheckWindowDone = function(){\n        if( !done ){\n          checkCommonJs( onCheckCommonJsDone );\n        }\n      };\n\n      var checkCommonJs = function( next ){\n        if( typeof module !== 'undefined' && module.exports && require ){ // detected commonjs env\n          try {\n            ret = require( name ); // regular require\n          } catch( err ){}\n        }\n\n        if( ret !== undefined ){ fulfil(ret); }\n        if( next ){ next(); }\n      };\n      var onCheckCommonJsDone = function(){\n        if( !done ){\n          checkAmd( onCheckAmdDone );\n        }\n      };\n\n      var checkAmd = function( next ){\n        if( typeof define !== 'undefined' && define.amd && require ){ // detected amd env w/ defined module\n          require([ name ], function( nameImpl ){\n            ret = nameImpl;\n\n            if( ret !== undefined ){ fulfil(ret); }\n            if( next ){ next(); }\n          }, function( err ){\n            if( next ){ next(); }\n          });\n        }\n      };\n      var onCheckAmdDone = function(){\n        if( !done && options.msgIfNotFound ){\n          $$.util.error('Cytoscape.js tried to pull in dependency `' + name + '` but no module (i.e. CommonJS, AMD, or window) was found');\n        }\n      };\n\n      // kick off 1st check: window\n      checkWindow( onCheckWindowDone );\n\n    },\n\n    // multiple requires in one callback\n    requires: function( names, callback ){\n      var impls = [];\n      var gotImpl = [];\n\n      var checkDone = function(){\n        for( var i = 0; i < names.length; i++ ){ // check have all impls\n          if( !gotImpl[i] ){ return; }\n        }\n\n        // otherwise, all got all impls => done\n        callback.apply( callback, impls );\n      };\n\n      for( var i = 0; i < names.length; i++ ){ (function(){ // w/scope\n        var name = names[i];\n        var index = i;\n\n        $$.util.require(name, function(impl){\n          impls[index] = impl;\n          gotImpl[index] = true;\n\n          checkDone();\n        });\n      })(); }\n    },\n\n    // ported lodash throttle function\n    throttle: function(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (options === false) {\n        leading = false;\n      } else if ($$.is.plainObject(options)) {\n        leading = 'leading' in options ? options.leading : leading;\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      options = options || {};\n      options.leading = leading;\n      options.maxWait = wait;\n      options.trailing = trailing;\n\n      return $$.util.debounce(func, wait, options);\n    },\n\n    now: function(){\n      return +new Date();\n    },\n\n    // ported lodash debounce function\n    debounce: function(func, wait, options) {\n      var args,\n          maxTimeoutId,\n          result,\n          stamp,\n          thisArg,\n          timeoutId,\n          trailingCall,\n          lastCalled = 0,\n          maxWait = false,\n          trailing = true;\n\n      if (!$$.is.fn(func)) {\n        return;\n      }\n      wait = Math.max(0, wait) || 0;\n      if (options === true) {\n        var leading = true;\n        trailing = false;\n      } else if ($$.is.plainObject(options)) {\n        leading = options.leading;\n        maxWait = 'maxWait' in options && (Math.max(wait, options.maxWait) || 0);\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      var delayed = function() {\n        var remaining = wait - ($$.util.now() - stamp);\n        if (remaining <= 0) {\n          if (maxTimeoutId) {\n            clearTimeout(maxTimeoutId);\n          }\n          var isCalled = trailingCall;\n          maxTimeoutId = timeoutId = trailingCall = undefined;\n          if (isCalled) {\n            lastCalled = $$.util.now();\n            result = func.apply(thisArg, args);\n            if (!timeoutId && !maxTimeoutId) {\n              args = thisArg = null;\n            }\n          }\n        } else {\n          timeoutId = setTimeout(delayed, remaining);\n        }\n      };\n\n      var maxDelayed = function() {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n        if (trailing || (maxWait !== wait)) {\n          lastCalled = $$.util.now();\n          result = func.apply(thisArg, args);\n          if (!timeoutId && !maxTimeoutId) {\n            args = thisArg = null;\n          }\n        }\n      };\n\n      return function() {\n        args = arguments;\n        stamp = $$.util.now();\n        thisArg = this;\n        trailingCall = trailing && (timeoutId || !leading);\n\n        if (maxWait === false) {\n          var leadingCall = leading && !timeoutId;\n        } else {\n          if (!maxTimeoutId && !leading) {\n            lastCalled = stamp;\n          }\n          var remaining = maxWait - (stamp - lastCalled),\n              isCalled = remaining <= 0;\n\n          if (isCalled) {\n            if (maxTimeoutId) {\n              maxTimeoutId = clearTimeout(maxTimeoutId);\n            }\n            lastCalled = stamp;\n            result = func.apply(thisArg, args);\n          }\n          else if (!maxTimeoutId) {\n            maxTimeoutId = setTimeout(maxDelayed, remaining);\n          }\n        }\n        if (isCalled && timeoutId) {\n          timeoutId = clearTimeout(timeoutId);\n        }\n        else if (!timeoutId && wait !== maxWait) {\n          timeoutId = setTimeout(delayed, wait);\n        }\n        if (leadingCall) {\n          isCalled = true;\n          result = func.apply(thisArg, args);\n        }\n        if (isCalled && !timeoutId && !maxTimeoutId) {\n          args = thisArg = null;\n        }\n        return result;\n      };\n    },\n\n    error: function( msg ){\n      if( console ){\n        if( console.error ){\n          console.error.apply( console, arguments );\n        } else if( console.log ){\n          console.log.apply( console, arguments );\n        } else {\n          throw msg;\n        }\n      } else {\n        throw msg;\n      }\n    },\n\n    clone: function( obj ){\n      var target = {};\n      for (var i in obj) {\n        //if( obj.hasOwnProperty(i) ){ // TODO is this hasOwnProperty() call necessary for our use?\n          target[i] = obj[i];\n        //}\n      }\n      return target;\n    },\n\n    // gets a shallow copy of the argument\n    copy: function( obj ){\n      if( obj == null ){\n        return obj;\n      } if( $$.is.array(obj) ){\n        return obj.slice();\n      } else if( $$.is.plainObject(obj) ){\n        return $$.util.clone( obj );\n      } else {\n        return obj;\n      }\n    },\n\n    // makes a full bb (x1, y1, x2, y2, w, h) from implicit params\n    makeBoundingBox: function( bb ){\n      if( bb.x1 != null && bb.y1 != null ){\n        if( bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1 ){\n          return {\n            x1: bb.x1,\n            y1: bb.y1,\n            x2: bb.x2,\n            y2: bb.y2,\n            w: bb.x2 - bb.x1,\n            h: bb.y2 - bb.y1\n          };\n        } else if( bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0 ){\n          return {\n            x1: bb.x1,\n            y1: bb.y1,\n            x2: bb.x1 + bb.w,\n            y2: bb.y1 + bb.h,\n            w: bb.w,\n            h: bb.h\n          };\n        }\n      }\n    },\n\n    // has anything been set in the map\n    mapEmpty: function( map ){\n      var empty = true;\n\n      if( map != null ){\n        for(var i in map){ // jshint ignore:line\n          empty = false;\n          break;\n        }\n      }\n\n      return empty;\n    },\n\n    // pushes to the array at the end of a map (map may not be built)\n    pushMap: function( options ){\n      var array = $$.util.getMap(options);\n\n      if( array == null ){ // if empty, put initial array\n        $$.util.setMap( $.extend({}, options, {\n          value: [ options.value ]\n        }) );\n      } else {\n        array.push( options.value );\n      }\n    },\n\n    // sets the value in a map (map may not be built)\n    setMap: function( options ){\n      var obj = options.map;\n      var key;\n      var keys = options.keys;\n      var l = keys.length;\n\n      for(var i = 0; i < l; i++){\n        var key = keys[i];\n\n        if( $$.is.plainObject( key ) ){\n          $$.util.error('Tried to set map with object key');\n        }\n\n        if( i < keys.length - 1 ){\n\n          // extend the map if necessary\n          if( obj[key] == null ){\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        } else {\n          // set the value\n          obj[key] = options.value;\n        }\n      }\n    },\n\n    // gets the value in a map even if it's not built in places\n    getMap: function( options ){\n      var obj = options.map;\n      var keys = options.keys;\n      var l = keys.length;\n\n      for(var i = 0; i < l; i++){\n        var key = keys[i];\n\n        if( $$.is.plainObject( key ) ){\n          $$.util.error('Tried to get map with object key');\n        }\n\n        obj = obj[key];\n\n        if( obj == null ){\n          return obj;\n        }\n      }\n\n      return obj;\n    },\n\n    // deletes the entry in the map\n    deleteMap: function( options ){\n      var obj = options.map;\n      var keys = options.keys;\n      var l = keys.length;\n      var keepChildren = options.keepChildren;\n\n      for(var i = 0; i < l; i++){\n        var key = keys[i];\n\n        if( $$.is.plainObject( key ) ){\n          $$.util.error('Tried to delete map with object key');\n        }\n\n        var lastKey = i === options.keys.length - 1;\n        if( lastKey ){\n\n          if( keepChildren ){ // then only delete child fields not in keepChildren\n            for( var child in obj ){\n              if( !keepChildren[child] ){\n                obj[child] = undefined;\n              }\n            }\n          } else {\n            obj[key] = undefined;\n          }\n\n        } else {\n          obj = obj[key];\n        }\n      }\n    },\n\n    capitalize: function(str){\n      if( $$.is.emptyString(str) ){\n        return str;\n      }\n\n      return str.charAt(0).toUpperCase() + str.substring(1);\n    },\n\n    // strip spaces from beginning of string and end of string\n    trim: function( str ){\n      var first, last;\n\n      // find first non-space char\n      for( first = 0; first < str.length && str[first] === ' '; first++ ){}\n\n      // find last non-space char\n      for( last = str.length - 1; last > first && str[last] === ' '; last-- ){}\n\n      return str.substring(first, last + 1);\n    },\n\n    // get [r, g, b] from #abc or #aabbcc\n    hex2tuple: function( hex ){\n      if( !(hex.length === 4 || hex.length === 7) || hex[0] !== \"#\" ){ return; }\n\n      var shortHex = hex.length === 4;\n      var r, g, b;\n      var base = 16;\n\n      if( shortHex ){\n        r = parseInt( hex[1] + hex[1], base );\n        g = parseInt( hex[2] + hex[2], base );\n        b = parseInt( hex[3] + hex[3], base );\n      } else {\n        r = parseInt( hex[1] + hex[2], base );\n        g = parseInt( hex[3] + hex[4], base );\n        b = parseInt( hex[5] + hex[6], base );\n      }\n\n      return [r, g, b];\n    },\n\n    // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)\n    hsl2tuple: function( hsl ){\n      var ret;\n      var h, s, l, a, r, g, b;\n      function hue2rgb(p, q, t){\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n      }\n\n      var m = new RegExp(\"^\" + $$.util.regex.hsla + \"$\").exec(hsl);\n      if( m ){\n\n        // get hue\n        h = parseInt( m[1] );\n        if( h < 0 ){\n          h = ( 360 - (-1*h % 360) ) % 360;\n        } else if( h > 360 ){\n          h = h % 360;\n        }\n        h /= 360; // normalise on [0, 1]\n\n        s = parseFloat( m[2] );\n        if( s < 0 || s > 100 ){ return; } // saturation is [0, 100]\n        s = s/100; // normalise on [0, 1]\n\n        l = parseFloat( m[3] );\n        if( l < 0 || l > 100 ){ return; } // lightness is [0, 100]\n        l = l/100; // normalise on [0, 1]\n\n        a = m[4];\n        if( a !== undefined ){\n          a = parseFloat( a );\n\n          if( a < 0 || a > 1 ){ return; } // alpha is [0, 1]\n        }\n\n        // now, convert to rgb\n        // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n        if( s === 0 ){\n          r = g = b = Math.round(l * 255); // achromatic\n        } else {\n          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n          var p = 2 * l - q;\n          r = Math.round( 255 * hue2rgb(p, q, h + 1/3) );\n          g = Math.round( 255 * hue2rgb(p, q, h) );\n          b = Math.round( 255 * hue2rgb(p, q, h - 1/3) );\n        }\n\n        ret = [r, g, b, a];\n      }\n\n      return ret;\n    },\n\n    // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)\n    rgb2tuple: function( rgb ){\n      var ret;\n\n      var m = new RegExp(\"^\" + $$.util.regex.rgba + \"$\").exec(rgb);\n      if( m ){\n        ret = [];\n\n        var isPct = [];\n        for( var i = 1; i <= 3; i++ ){\n          var channel = m[i];\n\n          if( channel[ channel.length - 1 ] === \"%\" ){\n            isPct[i] = true;\n          }\n          channel = parseFloat( channel );\n\n          if( isPct[i] ){\n            channel = channel/100 * 255; // normalise to [0, 255]\n          }\n\n          if( channel < 0 || channel > 255 ){ return; } // invalid channel value\n\n          ret.push( Math.floor(channel) );\n        }\n\n        var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];\n        var allArePct = isPct[1] && isPct[2] && isPct[3];\n        if( atLeastOneIsPct && !allArePct ){ return; } // must all be percent values if one is\n\n        var alpha = m[4];\n        if( alpha !== undefined ){\n          alpha = parseFloat( alpha );\n\n          if( alpha < 0 || alpha > 1 ){ return; } // invalid alpha value\n\n          ret.push( alpha );\n        }\n      }\n\n      return ret;\n    },\n\n    colorname2tuple: function( color ){\n      return $$.util.colors[ color.toLowerCase() ];\n    },\n\n    color2tuple: function( color ){\n      return ( $$.is.array(color) ? color : null )\n        || $$.util.colorname2tuple(color)\n        || $$.util.hex2tuple(color)\n        || $$.util.rgb2tuple(color)\n        || $$.util.hsl2tuple(color);\n    },\n\n    tuple2hex: function( tuple ){\n      var r = tuple[0];\n      var g = tuple[1];\n      var b = tuple[2];\n\n      function ch2hex( ch ){\n        var hex = ch.toString(16);\n\n        if( hex.length === 1 ){\n          hex = '0' + hex;\n        }\n\n        return hex;\n      }\n\n      return '#' + ch2hex(r) + ch2hex(g) + ch2hex(b);\n    },\n\n    colors: {\n      // special colour names\n      transparent:      [0,0,0,0], // NB alpha === 0\n\n      // regular colours\n      aliceblue:        [240,248,255],\n      antiquewhite:      [250,235,215],\n      aqua:          [0,255,255],\n      aquamarine:        [127,255,212],\n      azure:          [240,255,255],\n      beige:          [245,245,220],\n      bisque:          [255,228,196],\n      black:          [0,0,0],\n      blanchedalmond:      [255,235,205],\n      blue:          [0,0,255],\n      blueviolet:        [138,43,226],\n      brown:          [165,42,42],\n      burlywood:        [222,184,135],\n      cadetblue:        [95,158,160],\n      chartreuse:        [127,255,0],\n      chocolate:        [210,105,30],\n      coral:          [255,127,80],\n      cornflowerblue:      [100,149,237],\n      cornsilk:        [255,248,220],\n      crimson:        [220,20,60],\n      cyan:          [0,255,255],\n      darkblue:        [0,0,139],\n      darkcyan:        [0,139,139],\n      darkgoldenrod:      [184,134,11],\n      darkgray:        [169,169,169],\n      darkgreen:        [0,100,0],\n      darkgrey:        [169,169,169],\n      darkkhaki:        [189,183,107],\n      darkmagenta:      [139,0,139],\n      darkolivegreen:      [85,107,47],\n      darkorange:        [255,140,0],\n      darkorchid:        [153,50,204],\n      darkred:        [139,0,0],\n      darksalmon:        [233,150,122],\n      darkseagreen:      [143,188,143],\n      darkslateblue:      [72,61,139],\n      darkslategray:      [47,79,79],\n      darkslategrey:      [47,79,79],\n      darkturquoise:      [0,206,209],\n      darkviolet:        [148,0,211],\n      deeppink:        [255,20,147],\n      deepskyblue:      [0,191,255],\n      dimgray:        [105,105,105],\n      dimgrey:        [105,105,105],\n      dodgerblue:        [30,144,255],\n      firebrick:        [178,34,34],\n      floralwhite:      [255,250,240],\n      forestgreen:      [34,139,34],\n      fuchsia:        [255,0,255],\n      gainsboro:        [220,220,220],\n      ghostwhite:        [248,248,255],\n      gold:          [255,215,0],\n      goldenrod:        [218,165,32],\n      gray:          [128,128,128],\n      grey:          [128,128,128],\n      green:          [0,128,0],\n      greenyellow:      [173,255,47],\n      honeydew:        [240,255,240],\n      hotpink:        [255,105,180],\n      indianred:        [205,92,92],\n      indigo:          [75,0,130],\n      ivory:          [255,255,240],\n      khaki:          [240,230,140],\n      lavender:        [230,230,250],\n      lavenderblush:      [255,240,245],\n      lawngreen:        [124,252,0],\n      lemonchiffon:      [255,250,205],\n      lightblue:        [173,216,230],\n      lightcoral:        [240,128,128],\n      lightcyan:        [224,255,255],\n      lightgoldenrodyellow:  [250,250,210],\n      lightgray:        [211,211,211],\n      lightgreen:        [144,238,144],\n      lightgrey:        [211,211,211],\n      lightpink:        [255,182,193],\n      lightsalmon:      [255,160,122],\n      lightseagreen:      [32,178,170],\n      lightskyblue:      [135,206,250],\n      lightslategray:      [119,136,153],\n      lightslategrey:      [119,136,153],\n      lightsteelblue:      [176,196,222],\n      lightyellow:      [255,255,224],\n      lime:          [0,255,0],\n      limegreen:        [50,205,50],\n      linen:          [250,240,230],\n      magenta:        [255,0,255],\n      maroon:          [128,0,0],\n      mediumaquamarine:    [102,205,170],\n      mediumblue:        [0,0,205],\n      mediumorchid:      [186,85,211],\n      mediumpurple:      [147,112,219],\n      mediumseagreen:      [60,179,113],\n      mediumslateblue:    [123,104,238],\n      mediumspringgreen:    [0,250,154],\n      mediumturquoise:    [72,209,204],\n      mediumvioletred:    [199,21,133],\n      midnightblue:      [25,25,112],\n      mintcream:        [245,255,250],\n      mistyrose:        [255,228,225],\n      moccasin:        [255,228,181],\n      navajowhite:      [255,222,173],\n      navy:          [0,0,128],\n      oldlace:        [253,245,230],\n      olive:          [128,128,0],\n      olivedrab:        [107,142,35],\n      orange:          [255,165,0],\n      orangered:        [255,69,0],\n      orchid:          [218,112,214],\n      palegoldenrod:      [238,232,170],\n      palegreen:        [152,251,152],\n      paleturquoise:      [175,238,238],\n      palevioletred:      [219,112,147],\n      papayawhip:        [255,239,213],\n      peachpuff:        [255,218,185],\n      peru:          [205,133,63],\n      pink:          [255,192,203],\n      plum:          [221,160,221],\n      powderblue:        [176,224,230],\n      purple:          [128,0,128],\n      red:          [255,0,0],\n      rosybrown:        [188,143,143],\n      royalblue:        [65,105,225],\n      saddlebrown:      [139,69,19],\n      salmon:          [250,128,114],\n      sandybrown:        [244,164,96],\n      seagreen:        [46,139,87],\n      seashell:        [255,245,238],\n      sienna:          [160,82,45],\n      silver:          [192,192,192],\n      skyblue:        [135,206,235],\n      slateblue:        [106,90,205],\n      slategray:        [112,128,144],\n      slategrey:        [112,128,144],\n      snow:          [255,250,250],\n      springgreen:      [0,255,127],\n      steelblue:        [70,130,180],\n      tan:          [210,180,140],\n      teal:          [0,128,128],\n      thistle:        [216,191,216],\n      tomato:          [255,99,71],\n      turquoise:        [64,224,208],\n      violet:          [238,130,238],\n      wheat:          [245,222,179],\n      white:          [255,255,255],\n      whitesmoke:        [245,245,245],\n      yellow:          [255,255,0],\n      yellowgreen:      [154,205,50]\n    },\n\n    memoize: function( fn, keyFn ){\n      var self = this;\n      var cache = {};\n\n      if( !keyFn ){\n        keyFn = function(){\n          if( arguments.length === 1 ){\n            return arguments[0];\n          }\n\n          var args = [];\n\n          for( var i = 0; i < arguments.length; i++ ){\n            args.push( arguments[i] );\n          }\n\n          return args.join('$');\n        };\n      }\n\n      return function memoizedFn(){\n        var args = arguments;\n        var ret;\n        var k = keyFn.apply( self, args );\n\n        if( !(ret = cache[k]) ){\n          ret = cache[k] = fn.apply( self, args );\n        }\n\n        return ret;\n      };\n    }\n\n  };\n\n  $$.util.camel2dash = $$.util.memoize( function( str ){\n    var ret = [];\n\n    for( var i = 0; i < str.length; i++ ){\n      var ch = str[i];\n      var chLowerCase = ch.toLowerCase();\n      var isUpperCase = ch !== chLowerCase;\n\n      if( isUpperCase ){\n        ret.push( '-' );\n        ret.push( chLowerCase );\n      } else {\n        ret.push( ch );\n      }\n    }\n\n    var noUpperCases = ret.length === str.length;\n    if( noUpperCases ){ return str; } // cheaper than .join()\n\n    return ret.join('');\n  } );\n\n  $$.util.dash2camel = $$.util.memoize( function( str ){\n    var ret = [];\n    var nextIsUpper = false;\n\n    for( var i = 0; i < str.length; i++ ){\n      var ch = str[i];\n      var isDash = ch === '-';\n\n      if( isDash ){\n        nextIsUpper = true;\n      } else {\n        if( nextIsUpper ){\n          ret.push( ch.toUpperCase() );\n        } else {\n          ret.push( ch );\n        }\n\n        nextIsUpper = false;\n      }\n    }\n\n    return ret.join('');\n  } );\n\n  $$.util.regex = {};\n\n  $$.util.regex.number = \"(?:[-+]?(?:(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[Ee][+-]?\\\\d+)?))\";\n\n  $$.util.regex.rgba = \"rgb[a]?\\\\((\"+ $$.util.regex.number +\"[%]?)\\\\s*,\\\\s*(\"+ $$.util.regex.number +\"[%]?)\\\\s*,\\\\s*(\"+ $$.util.regex.number +\"[%]?)(?:\\\\s*,\\\\s*(\"+ $$.util.regex.number +\"))?\\\\)\";\n  $$.util.regex.rgbaNoBackRefs = \"rgb[a]?\\\\((?:\"+ $$.util.regex.number +\"[%]?)\\\\s*,\\\\s*(?:\"+ $$.util.regex.number +\"[%]?)\\\\s*,\\\\s*(?:\"+ $$.util.regex.number +\"[%]?)(?:\\\\s*,\\\\s*(?:\"+ $$.util.regex.number +\"))?\\\\)\";\n\n  $$.util.regex.hsla = \"hsl[a]?\\\\((\"+ $$.util.regex.number +\")\\\\s*,\\\\s*(\"+ $$.util.regex.number +\"[%])\\\\s*,\\\\s*(\"+ $$.util.regex.number +\"[%])(?:\\\\s*,\\\\s*(\"+ $$.util.regex.number +\"))?\\\\)\";\n  $$.util.regex.hslaNoBackRefs = \"hsl[a]?\\\\((?:\"+ $$.util.regex.number +\")\\\\s*,\\\\s*(?:\"+ $$.util.regex.number +\"[%])\\\\s*,\\\\s*(?:\"+ $$.util.regex.number +\"[%])(?:\\\\s*,\\\\s*(?:\"+ $$.util.regex.number +\"))?\\\\)\";\n\n  $$.util.regex.hex3 = \"\\\\#[0-9a-fA-F]{3}\";\n  $$.util.regex.hex6 = \"\\\\#[0-9a-fA-F]{6}\";\n\n  var raf = !window ? null : ( window.requestAnimationFrame || window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame || window.msRequestAnimationFrame );\n\n  raf = raf || function(fn){ if(fn){ setTimeout(fn, 1000/60); } };\n\n  $$.util.requestAnimationFrame = function(fn){\n    raf( fn );\n  };\n\n})( cytoscape, typeof window === 'undefined' ? null : window  );\n\n;(function($$){ 'use strict';\n\n  $$.math = {};\n\n  $$.math.signum = function(x){\n    if( x > 0 ){\n      return 1;\n    } else if( x < 0 ){\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n\n  $$.math.distance = function( p1, p2 ){\n    var dx = p2.x - p1.x;\n    var dy = p2.y - p1.y;\n\n    return Math.sqrt( dx*dx + dy*dy );\n  };\n\n  // from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves\n  $$.math.qbezierAt = function(p0, p1, p2, t){\n    return (1 - t)*(1 - t)*p0 + 2*(1 - t)*t*p1 + t*t*p2;\n  };\n\n  $$.math.qbezierPtAt = function(p0, p1, p2, t){\n    return {\n      x: $$.math.qbezierAt( p0.x, p1.x, p2.x, t ),\n      y: $$.math.qbezierAt( p0.y, p1.y, p2.y, t )\n    };\n  };\n\n  $$.math.boundingBoxesIntersect = function( bb1, bb2 ){\n    // case: one bb to right of other\n    if( bb1.x1 > bb2.x2 ){ return false; }\n    if( bb2.x1 > bb1.x2 ){ return false; }\n\n    // case: one bb to left of other\n    if( bb1.x2 < bb2.x1 ){ return false; }\n    if( bb2.x2 < bb1.x1 ){ return false; }\n\n    // case: one bb above other\n    if( bb1.y2 < bb2.y1 ){ return false; }\n    if( bb2.y2 < bb1.y1 ){ return false; }\n\n    // case: one bb below other\n    if( bb1.y1 > bb2.y2 ){ return false; }\n    if( bb2.y1 > bb1.y2 ){ return false; }\n\n    // otherwise, must have some overlap\n    return true;\n  };\n\n  $$.math.inBoundingBox = function( bb, x, y ){\n    return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;\n  };\n\n  $$.math.pointInBoundingBox = function( bb, pt ){\n    return this.inBoundingBox( bb, pt.x, pt.y );\n  };\n\n  $$.math.roundRectangleIntersectLine = function(\n    x, y, nodeX, nodeY, width, height, padding) {\n\n    var cornerRadius = this.getRoundRectangleRadius(width, height);\n\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n\n    // Check intersections with straight line segments\n    var straightLineIntersections;\n\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth + cornerRadius - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth - cornerRadius + padding;\n      var topEndY = topStartY;\n\n      straightLineIntersections = this.finiteLinesIntersect(\n        x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight + cornerRadius - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n\n      straightLineIntersections = this.finiteLinesIntersect(\n        x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Bottom segment, left to right\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n\n      straightLineIntersections = this.finiteLinesIntersect(\n        x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight + cornerRadius - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n\n      straightLineIntersections = this.finiteLinesIntersect(\n        x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Check intersections with arc segments\n    var arcIntersections;\n\n    // Top Left\n    {\n      var topLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var topLeftCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = this.intersectLineCircle(\n        x, y, nodeX, nodeY,\n        topLeftCenterX, topLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0\n        && arcIntersections[0] <= topLeftCenterX\n        && arcIntersections[1] <= topLeftCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n\n    // Top Right\n    {\n      var topRightCenterX = nodeX + halfWidth - cornerRadius;\n      var topRightCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = this.intersectLineCircle(\n        x, y, nodeX, nodeY,\n        topRightCenterX, topRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0\n        && arcIntersections[0] >= topRightCenterX\n        && arcIntersections[1] <= topRightCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n\n    // Bottom Right\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = this.intersectLineCircle(\n        x, y, nodeX, nodeY,\n        bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0\n        && arcIntersections[0] >= bottomRightCenterX\n        && arcIntersections[1] >= bottomRightCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n\n    // Bottom Left\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = this.intersectLineCircle(\n        x, y, nodeX, nodeY,\n        bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0\n        && arcIntersections[0] <= bottomLeftCenterX\n        && arcIntersections[1] >= bottomLeftCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n\n    return []; // if nothing\n  };\n\n  $$.math.roundRectangleIntersectBox = function(\n    boxX1, boxY1, boxX2, boxY2, width, height, centerX, centerY, padding) {\n\n    // We have the following shpae\n\n    //    _____\n    //  _|     |_\n    // |         |\n    // |_       _|\n    //   |_____|\n    //\n    // With a quarter circle at each corner.\n\n    var cornerRadius = this.getRoundRectangleRadius(width, height);\n\n    var hBoxTopLeftX = centerX - width / 2 - padding;\n    var hBoxTopLeftY = centerY - height / 2 + cornerRadius - padding;\n    var hBoxBottomRightX = centerX + width / 2 + padding;\n    var hBoxBottomRightY = centerY + height / 2 - cornerRadius + padding;\n\n    var vBoxTopLeftX = centerX - width / 2 + cornerRadius - padding;\n    var vBoxTopLeftY = centerY - height / 2 - padding;\n    var vBoxBottomRightX = centerX + width / 2 - cornerRadius + padding;\n    var vBoxBottomRightY = centerY + height / 2 + padding;\n\n    // Check if the box is out of bounds\n    var boxMinX = Math.min(boxX1, boxX2);\n    var boxMaxX = Math.max(boxX1, boxX2);\n    var boxMinY = Math.min(boxY1, boxY2);\n    var boxMaxY = Math.max(boxY1, boxY2);\n\n    if (boxMaxX < hBoxTopLeftX) {\n      return false;\n    } else if (boxMinX > hBoxBottomRightX) {\n      return false;\n    }\n\n    if (boxMaxY < vBoxTopLeftY) {\n      return false;\n    } else if (boxMinY > vBoxBottomRightY) {\n      return false;\n    }\n\n    // Check if an hBox point is in given box\n    if (hBoxTopLeftX >= boxMinX && hBoxTopLeftX <= boxMaxX\n        && hBoxTopLeftY >= boxMinY && hBoxTopLeftY <= boxMaxY) {\n      return true;\n    }\n\n    if (hBoxBottomRightX >= boxMinX && hBoxBottomRightX <= boxMaxX\n        && hBoxTopLeftY >= boxMinY && hBoxTopLeftY <= boxMaxY) {\n      return true;\n    }\n\n    if (hBoxBottomRightX >= boxMinX && hBoxBottomRightX <= boxMaxX\n        && hBoxBottomRightY >= boxMinY && hBoxBottomRightY <= boxMaxY) {\n      return true;\n    }\n\n    if (hBoxTopLeftX >= boxMinX && hBoxTopLeftX <= boxMaxX\n        && hBoxBottomRightY >= boxMinY && hBoxBottomRightY <= boxMaxY) {\n      return true;\n    }\n\n    // Check if a given point box is in the hBox\n    if (boxMinX >= hBoxTopLeftX && boxMinX <= hBoxBottomRightX\n      && boxMinY >= hBoxTopLeftY && boxMinY <= hBoxBottomRightY) {\n      return true;\n    }\n\n    if (boxMaxX >= hBoxTopLeftX && boxMaxX <= hBoxBottomRightX\n      && boxMinY >= hBoxTopLeftY && boxMinY <= hBoxBottomRightY) {\n      return true;\n    }\n\n    if (boxMaxX >= hBoxTopLeftX && boxMaxX <= hBoxBottomRightX\n      && boxMaxY >= hBoxTopLeftY && boxMaxY <= hBoxBottomRightY) {\n      return true;\n    }\n\n    if (boxMinX >= hBoxTopLeftX && boxMinX <= hBoxBottomRightX\n      && boxMaxY >= hBoxTopLeftY && boxMaxY <= hBoxBottomRightY) {\n      return true;\n    }\n\n    // Check if an vBox point is in given box\n    if (vBoxTopLeftX >= boxMinX && vBoxTopLeftX <= boxMaxX\n        && vBoxTopLeftY >= boxMinY && vBoxTopLeftY <= boxMaxY) {\n      return true;\n    }\n\n    if (vBoxBottomRightX >= boxMinX && vBoxBottomRightX <= boxMaxX\n        && vBoxTopLeftY >= boxMinY && vBoxTopLeftY <= boxMaxY) {\n      return true;\n    }\n\n    if (vBoxBottomRightX >= boxMinX && vBoxBottomRightX <= boxMaxX\n        && vBoxBottomRightY >= boxMinY && vBoxBottomRightY <= boxMaxY) {\n      return true;\n    }\n\n    if (vBoxTopLeftX >= boxMinX && vBoxTopLeftX <= boxMaxX\n        && vBoxBottomRightY >= boxMinY && vBoxBottomRightY <= boxMaxY) {\n      return true;\n    }\n\n    // Check if a given point box is in the vBox\n    if (boxMinX >= vBoxTopLeftX && boxMinX <= vBoxBottomRightX\n      && boxMinY >= vBoxTopLeftY && boxMinY <= vBoxBottomRightY) {\n      return true;\n    }\n\n    if (boxMaxX >= vBoxTopLeftX && boxMaxX <= vBoxBottomRightX\n      && boxMinY >= vBoxTopLeftY && boxMinY <= vBoxBottomRightY) {\n      return true;\n    }\n\n    if (boxMaxX >= vBoxTopLeftX && boxMaxX <= vBoxBottomRightX\n      && boxMaxY >= vBoxTopLeftY && boxMaxY <= vBoxBottomRightY) {\n      return true;\n    }\n\n    if (boxMinX >= vBoxTopLeftX && boxMinX <= vBoxBottomRightX\n      && boxMaxY >= vBoxTopLeftY && boxMaxY <= vBoxBottomRightY) {\n      return true;\n    }\n\n    // Lastly, check if one of the ellipses coincide with the box\n\n    if (this.boxIntersectEllipse(boxMinX, boxMinY, boxMaxX, boxMaxY, padding,\n        cornerRadius * 2, cornerRadius * 2, vBoxTopLeftX + padding, hBoxTopLeftY + padding)) {\n      return true;\n    }\n\n    if (this.boxIntersectEllipse(boxMinX, boxMinY, boxMaxX, boxMaxY, padding,\n        cornerRadius * 2, cornerRadius * 2, vBoxBottomRightX - padding, hBoxTopLeftY + padding)) {\n      return true;\n    }\n\n    if (this.boxIntersectEllipse(boxMinX, boxMinY, boxMaxX, boxMaxY, padding,\n        cornerRadius * 2, cornerRadius * 2, vBoxBottomRightX - padding, hBoxBottomRightY - padding)) {\n      return true;\n    }\n\n    if (this.boxIntersectEllipse(boxMinX, boxMinY, boxMaxX, boxMaxY, padding,\n        cornerRadius * 2, cornerRadius * 2, vBoxTopLeftX + padding, hBoxBottomRightY - padding)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  // @O Approximate collision functions\n  $$.math.checkInBoundingCircle = function(\n    x, y, farthestPointSqDistance, padding, width, height, centerX, centerY) {\n\n    x = (x - centerX) / (width + padding);\n    y = (y - centerY) / (height + padding);\n\n    return (x * x + y * y) <= farthestPointSqDistance;\n  };\n\n  $$.math.boxInBezierVicinity = function(\n    x1box, y1box, x2box, y2box, x1, y1, x2, y2, x3, y3, tolerance) {\n\n    // Return values:\n    // 0 - curve is not in box\n    // 1 - curve may be in box; needs precise check\n    // 2 - curve is in box\n\n    // midpoint\n    var midX = 0.25 * x1 + 0.5 * x2 + 0.25 * x3;\n    var midY = 0.25 * y1 + 0.5 * y2 + 0.25 * y3;\n\n    var boxMinX = Math.min(x1box, x2box) - tolerance;\n    var boxMinY = Math.min(y1box, y2box) - tolerance;\n    var boxMaxX = Math.max(x1box, x2box) + tolerance;\n    var boxMaxY = Math.max(y1box, y2box) + tolerance;\n\n    if (x1 >= boxMinX && x1 <= boxMaxX && y1 >= boxMinY && y1 <= boxMaxY) { // (x1, y1) in box\n      return 1;\n    } else if (x3 >= boxMinX && x3 <= boxMaxX && y3 >= boxMinY && y3 <= boxMaxY) { // (x3, y3) in box\n      return 1;\n    } else if (midX >= boxMinX && midX <= boxMaxX && midY >= boxMinY && midY <= boxMaxY) { // (midX, midY) in box\n      return 1;\n    } else if (x2 >= boxMinX && x2 <= boxMaxX && y2 >= boxMinY && y2 <= boxMaxY) { // ctrl pt in box\n      return 1;\n    }\n\n    var curveMinX = Math.min(x1, midX, x3);\n    var curveMinY = Math.min(y1, midY, y3);\n    var curveMaxX = Math.max(x1, midX, x3);\n    var curveMaxY = Math.max(y1, midY, y3);\n\n    /*\n    console.log(curveMinX + \", \" + curveMinY + \", \" + curveMaxX\n      + \", \" + curveMaxY);\n    if (curveMinX == undefined) {\n      console.log(\"undefined curveMinX: \" + x1 + \", \" + x2 + \", \" + x3);\n    }\n    */\n\n    if (curveMinX > boxMaxX\n      || curveMaxX < boxMinX\n      || curveMinY > boxMaxY\n      || curveMaxY < boxMinY) {\n\n      return 0;\n    }\n\n    return 1;\n  };\n\n  $$.math.checkBezierInBox = function(\n    x1box, y1box, x2box, y2box, x1, y1, x2, y2, x3, y3, tolerance) {\n\n    function sampleInBox(t){\n      var x = $$.math.qbezierAt(x1, x2, x3, t);\n      var y = $$.math.qbezierAt(y1, y2, y3, t);\n\n      return x1box <= x && x <= x2box\n        && y1box <= y && y <= y2box\n      ;\n    }\n\n    for( var t = 0; t <= 1; t += 0.25 ){\n      if( !sampleInBox(t) ){\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  $$.math.checkStraightEdgeInBox = function(\n    x1box, y1box, x2box, y2box, x1, y1, x2, y2, tolerance) {\n\n    return x1box <= x1 && x1 <= x2box\n      && x1box <= x2 && x2 <= x2box\n      && y1box <= y1 && y1 <= y2box\n      && y1box <= y2 && y2 <= y2box\n    ;\n  };\n\n  $$.math.checkStraightEdgeCrossesBox = function(\n    x1box, y1box, x2box, y2box, x1, y1, x2, y2, tolerance) {\n\n   //console.log(arguments);\n\n    var boxMinX = Math.min(x1box, x2box) - tolerance;\n    var boxMinY = Math.min(y1box, y2box) - tolerance;\n    var boxMaxX = Math.max(x1box, x2box) + tolerance;\n    var boxMaxY = Math.max(y1box, y2box) + tolerance;\n\n    // Check left + right bounds\n    var aX = x2 - x1;\n    var bX = x1;\n    var yValue;\n\n    // Top and bottom\n    var aY = y2 - y1;\n    var bY = y1;\n    var xValue;\n\n    if (Math.abs(aX) < 0.0001) {\n      return (x1 >= boxMinX && x1 <= boxMaxX\n        && Math.min(y1, y2) <= boxMinY\n        && Math.max(y1, y2) >= boxMaxY);\n    }\n\n    var tLeft = (boxMinX - bX) / aX;\n    if (tLeft > 0 && tLeft <= 1) {\n      yValue = aY * tLeft + bY;\n      if (yValue >= boxMinY && yValue <= boxMaxY) {\n        return true;\n      }\n    }\n\n    var tRight = (boxMaxX - bX) / aX;\n    if (tRight > 0 && tRight <= 1) {\n      yValue = aY * tRight + bY;\n      if (yValue >= boxMinY && yValue <= boxMaxY) {\n        return true;\n      }\n    }\n\n    var tTop = (boxMinY - bY) / aY;\n    if (tTop > 0 && tTop <= 1) {\n      xValue = aX * tTop + bX;\n      if (xValue >= boxMinX && xValue <= boxMaxX) {\n        return true;\n      }\n    }\n\n    var tBottom = (boxMaxY - bY) / aY;\n    if (tBottom > 0 && tBottom <= 1) {\n      xValue = aX * tBottom + bX;\n      if (xValue >= boxMinX && xValue <= boxMaxX) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  $$.math.checkBezierCrossesBox = function(\n    x1box, y1box, x2box, y2box, x1, y1, x2, y2, x3, y3, tolerance) {\n\n    var boxMinX = Math.min(x1box, x2box) - tolerance;\n    var boxMinY = Math.min(y1box, y2box) - tolerance;\n    var boxMaxX = Math.max(x1box, x2box) + tolerance;\n    var boxMaxY = Math.max(y1box, y2box) + tolerance;\n\n    if (x1 >= boxMinX && x1 <= boxMaxX && y1 >= boxMinY && y1 <= boxMaxY) {\n      return true;\n    } else if (x3 >= boxMinX && x3 <= boxMaxX && y3 >= boxMinY && y3 <= boxMaxY) {\n      return true;\n    }\n\n    var aX = x1 - 2 * x2 + x3;\n    var bX = -2 * x1 + 2 * x2;\n    var cX = x1;\n\n    var xIntervals = [];\n\n    if (Math.abs(aX) < 0.0001) {\n      var leftParam = (boxMinX - x1) / bX;\n      var rightParam = (boxMaxX - x1) / bX;\n\n      xIntervals.push(leftParam, rightParam);\n    } else {\n      // Find when x coordinate of the curve crosses the left side of the box\n      var discriminantX1 = bX * bX - 4 * aX * (cX - boxMinX);\n      var tX1, tX2;\n      if (discriminantX1 > 0) {\n        var sqrt = Math.sqrt(discriminantX1);\n        tX1 = (-bX + sqrt) / (2 * aX);\n        tX2 = (-bX - sqrt) / (2 * aX);\n\n        xIntervals.push(tX1, tX2);\n      }\n\n      var discriminantX2 = bX * bX - 4 * aX * (cX - boxMaxX);\n      var tX3, tX4;\n      if (discriminantX2 > 0) {\n        var sqrt = Math.sqrt(discriminantX2);\n        tX3 = (-bX + sqrt) / (2 * aX);\n        tX4 = (-bX - sqrt) / (2 * aX);\n\n        xIntervals.push(tX3, tX4);\n      }\n    }\n\n    xIntervals.sort(function(a, b) { return a - b; });\n\n    var aY = y1 - 2 * y2 + y3;\n    var bY = -2 * y1 + 2 * y2;\n    var cY = y1;\n\n    var yIntervals = [];\n\n    if (Math.abs(aY) < 0.0001) {\n      var topParam = (boxMinY - y1) / bY;\n      var bottomParam = (boxMaxY - y1) / bY;\n\n      yIntervals.push(topParam, bottomParam);\n    } else {\n      var discriminantY1 = bY * bY - 4 * aY * (cY - boxMinY);\n\n      var tY1, tY2;\n      if (discriminantY1 > 0) {\n        var sqrt = Math.sqrt(discriminantY1);\n        tY1 = (-bY + sqrt) / (2 * aY);\n        tY2 = (-bY - sqrt) / (2 * aY);\n\n        yIntervals.push(tY1, tY2);\n      }\n\n      var discriminantY2 = bY * bY - 4 * aY * (cY - boxMaxY);\n\n      var tY3, tY4;\n      if (discriminantY2 > 0) {\n        var sqrt = Math.sqrt(discriminantY2);\n        tY3 = (-bY + sqrt) / (2 * aY);\n        tY4 = (-bY - sqrt) / (2 * aY);\n\n        yIntervals.push(tY3, tY4);\n      }\n    }\n\n    yIntervals.sort(function(a, b) { return a - b; });\n\n    for (var index = 0; index < xIntervals.length; index += 2) {\n      for (var yIndex = 1; yIndex < yIntervals.length; yIndex += 2) {\n\n        // Check if there exists values for the Bezier curve\n        // parameter between 0 and 1 where both the curve's\n        // x and y coordinates are within the bounds specified by the box\n        if (xIntervals[index] < yIntervals[yIndex]\n          && yIntervals[yIndex] >= 0.0\n          && xIntervals[index] <= 1.0\n          && xIntervals[index + 1] > yIntervals[yIndex - 1]\n          && yIntervals[yIndex - 1] <= 1.0\n          && xIntervals[index + 1] >= 0.0) {\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  $$.math.inLineVicinity = function(x, y, lx1, ly1, lx2, ly2, tolerance){\n    var t = tolerance;\n\n    var x1 = Math.min(lx1, lx2);\n    var x2 = Math.max(lx1, lx2);\n    var y1 = Math.min(ly1, ly2);\n    var y2 = Math.max(ly1, ly2);\n\n    return x1 - t <= x && x <= x2 + t\n      && y1 - t <= y && y <= y2 + t;\n  };\n\n  $$.math.inBezierVicinity = function(\n    x, y, x1, y1, x2, y2, x3, y3, toleranceSquared) {\n\n    var bb = {\n      x1: Math.min( x1, x3, x2 ),\n      x2: Math.max( x1, x3, x2 ),\n      y1: Math.min( y1, y3, y2 ),\n      y2: Math.max( y1, y3, y2 )\n    };\n\n    // if outside the rough bounding box for the bezier, then it can't be a hit\n    if( x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2 ){\n      // console.log('bezier out of rough bb')\n      return false;\n    } else {\n      // console.log('do more expensive check');\n      return true;\n    }\n\n  };\n\n  $$.math.solveCubic = function(a, b, c, d, result) {\n\n    // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where\n    // r is the real component, i is the imaginary component\n\n    // An implementation of the Cardano method from the year 1545\n    // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots\n\n    b /= a;\n    c /= a;\n    d /= a;\n\n    var discriminant, q, r, dum1, s, t, term1, r13;\n\n    q = (3.0 * c - (b * b)) / 9.0;\n    r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));\n    r /= 54.0;\n\n    discriminant = q * q * q + r * r;\n    result[1] = 0;\n    term1 = (b / 3.0);\n\n    if (discriminant > 0) {\n      s = r + Math.sqrt(discriminant);\n      s = ((s < 0) ? -Math.pow(-s, (1.0 / 3.0)) : Math.pow(s, (1.0 / 3.0)));\n      t = r - Math.sqrt(discriminant);\n      t = ((t < 0) ? -Math.pow(-t, (1.0 / 3.0)) : Math.pow(t, (1.0 / 3.0)));\n      result[0] = -term1 + s + t;\n      term1 += (s + t) / 2.0;\n      result[4] = result[2] = -term1;\n      term1 = Math.sqrt(3.0) * (-t + s) / 2;\n      result[3] = term1;\n      result[5] = -term1;\n      return;\n    }\n\n    result[5] = result[3] = 0;\n\n    if (discriminant === 0) {\n      r13 = ((r < 0) ? -Math.pow(-r, (1.0 / 3.0)) : Math.pow(r, (1.0 / 3.0)));\n      result[0] = -term1 + 2.0 * r13;\n      result[4] = result[2] = -(r13 + term1);\n      return;\n    }\n\n    q = -q;\n    dum1 = q * q * q;\n    dum1 = Math.acos(r / Math.sqrt(dum1));\n    r13 = 2.0 * Math.sqrt(q);\n    result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);\n    result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);\n    result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);\n\n    return;\n  };\n\n  $$.math.sqDistanceToQuadraticBezier = function(\n    x, y, x1, y1, x2, y2, x3, y3) {\n\n    // Find minimum distance by using the minimum of the distance\n    // function between the given point and the curve\n\n    // This gives the coefficients of the resulting cubic equation\n    // whose roots tell us where a possible minimum is\n    // (Coefficients are divided by 4)\n\n    var a = 1.0 * x1*x1 - 4*x1*x2 + 2*x1*x3 + 4*x2*x2 - 4*x2*x3 + x3*x3\n      + y1*y1 - 4*y1*y2 + 2*y1*y3 + 4*y2*y2 - 4*y2*y3 + y3*y3;\n\n    var b = 1.0 * 9*x1*x2 - 3*x1*x1 - 3*x1*x3 - 6*x2*x2 + 3*x2*x3\n      + 9*y1*y2 - 3*y1*y1 - 3*y1*y3 - 6*y2*y2 + 3*y2*y3;\n\n    var c = 1.0 * 3*x1*x1 - 6*x1*x2 + x1*x3 - x1*x + 2*x2*x2 + 2*x2*x - x3*x\n      + 3*y1*y1 - 6*y1*y2 + y1*y3 - y1*y + 2*y2*y2 + 2*y2*y - y3*y;\n\n    var d = 1.0 * x1*x2 - x1*x1 + x1*x - x2*x\n      + y1*y2 - y1*y1 + y1*y - y2*y;\n\n    // debug(\"coefficients: \" + a / a + \", \" + b / a + \", \" + c / a + \", \" + d / a);\n\n    var roots = [];\n\n    // Use the cubic solving algorithm\n    this.solveCubic(a, b, c, d, roots);\n\n    var zeroThreshold = 0.0000001;\n\n    var params = [];\n\n    for (var index = 0; index < 6; index += 2) {\n      if (Math.abs(roots[index + 1]) < zeroThreshold\n          && roots[index] >= 0\n          && roots[index] <= 1.0) {\n        params.push(roots[index]);\n      }\n    }\n\n    params.push(1.0);\n    params.push(0.0);\n\n    var minDistanceSquared = -1;\n    var closestParam;\n\n    var curX, curY, distSquared;\n    for (var i = 0; i < params.length; i++) {\n      curX = Math.pow(1.0 - params[i], 2.0) * x1\n        + 2.0 * (1 - params[i]) * params[i] * x2\n        + params[i] * params[i] * x3;\n\n      curY = Math.pow(1 - params[i], 2.0) * y1\n        + 2 * (1.0 - params[i]) * params[i] * y2\n        + params[i] * params[i] * y3;\n\n      distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2);\n      // debug('distance for param ' + params[i] + \": \" + Math.sqrt(distSquared));\n      if (minDistanceSquared >= 0) {\n        if (distSquared < minDistanceSquared) {\n          minDistanceSquared = distSquared;\n          closestParam = params[i];\n        }\n      } else {\n        minDistanceSquared = distSquared;\n        closestParam = params[i];\n      }\n    }\n\n    /*\n    debugStats.clickX = x;\n    debugStats.clickY = y;\n\n    debugStats.closestX = Math.pow(1.0 - closestParam, 2.0) * x1\n        + 2.0 * (1.0 - closestParam) * closestParam * x2\n        + closestParam * closestParam * x3;\n\n    debugStats.closestY = Math.pow(1.0 - closestParam, 2.0) * y1\n        + 2.0 * (1.0 - closestParam) * closestParam * y2\n        + closestParam * closestParam * y3;\n    */\n\n    // debug(\"given: \"\n    //   + \"( \" + x + \", \" + y + \"), \"\n    //   + \"( \" + x1 + \", \" + y1 + \"), \"\n    //   + \"( \" + x2 + \", \" + y2 + \"), \"\n    //   + \"( \" + x3 + \", \" + y3 + \")\");\n\n\n    // debug(\"roots: \" + roots);\n    // debug(\"params: \" + params);\n    // debug(\"closest param: \" + closestParam);\n    return minDistanceSquared;\n  };\n\n  $$.math.sqDistanceToFiniteLine = function(x, y, x1, y1, x2, y2) {\n    var offset = [x - x1, y - y1];\n    var line = [x2 - x1, y2 - y1];\n\n    var lineSq = line[0] * line[0] + line[1] * line[1];\n    var hypSq = offset[0] * offset[0] + offset[1] * offset[1];\n\n    var dotProduct = offset[0] * line[0] + offset[1] * line[1];\n    var adjSq = dotProduct * dotProduct / lineSq;\n\n    if (dotProduct < 0) {\n      return hypSq;\n    }\n\n    if (adjSq > lineSq) {\n      return (x - x2) * (x - x2) + (y - y2) * (y - y2);\n    }\n\n    return hypSq - adjSq;\n  };\n\n  $$.math.pointInsidePolygon = function(\n    x, y, basePoints, centerX, centerY, width, height, direction, padding) {\n\n    //var direction = arguments[6];\n    var transformedPoints = new Array(basePoints.length);\n\n    // Gives negative angle\n    var angle = Math.asin(direction[1] / (Math.sqrt(direction[0] * direction[0]\n      + direction[1] * direction[1])));\n\n    if (direction[0] < 0) {\n      angle = angle + Math.PI / 2;\n    } else {\n      angle = -angle - Math.PI / 2;\n    }\n\n    var cos = Math.cos(-angle);\n    var sin = Math.sin(-angle);\n\n//    console.log(\"base: \" + basePoints);\n    for (var i = 0; i < transformedPoints.length / 2; i++) {\n      transformedPoints[i * 2] =\n        width / 2 * (basePoints[i * 2] * cos\n          - basePoints[i * 2 + 1] * sin);\n\n      transformedPoints[i * 2 + 1] =\n        height / 2 * (basePoints[i * 2 + 1] * cos\n          + basePoints[i * 2] * sin);\n\n      transformedPoints[i * 2] += centerX;\n      transformedPoints[i * 2 + 1] += centerY;\n    }\n\n    var points;\n\n    if (padding > 0) {\n      var expandedLineSet = this.expandPolygon(\n        transformedPoints,\n        -padding);\n\n      points = this.joinLines(expandedLineSet);\n    } else {\n      points = transformedPoints;\n    }\n\n    var x1, y1, x2, y2;\n    var y3;\n\n    // Intersect with vertical line through (x, y)\n    var up = 0;\n    var down = 0;\n    for (var i = 0; i < points.length / 2; i++) {\n\n      x1 = points[i * 2];\n      y1 = points[i * 2 + 1];\n\n      if (i + 1 < points.length / 2) {\n        x2 = points[(i + 1) * 2];\n        y2 = points[(i + 1) * 2 + 1];\n      } else {\n        x2 = points[(i + 1 - points.length / 2) * 2];\n        y2 = points[(i + 1 - points.length / 2) * 2 + 1];\n      }\n\n//*      console.log(\"line from (\" + x1 + \", \" + y1 + \") to (\" + x2 + \", \" + y2 + \")\");\n\n//&      console.log(x1, x, x2);\n\n      if (x1 == x && x2 == x) {\n\n      } else if ((x1 >= x && x >= x2)\n        || (x1 <= x && x <= x2)) {\n\n        y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;\n\n        if (y3 > y) {\n          up++;\n        }\n\n        if (y3 < y) {\n          down++;\n        }\n\n//*        console.log(y3, y);\n\n      } else {\n//*        console.log('22');\n        continue;\n      }\n\n    }\n\n//*    console.log(\"up: \" + up + \", down: \" + down);\n\n    if (up % 2 === 0) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  $$.math.joinLines = function(lineSet) {\n\n    var vertices = new Array(lineSet.length / 2);\n\n    var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;\n    var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;\n\n    for (var i = 0; i < lineSet.length / 4; i++) {\n      currentLineStartX = lineSet[i * 4];\n      currentLineStartY = lineSet[i * 4 + 1];\n      currentLineEndX = lineSet[i * 4 + 2];\n      currentLineEndY = lineSet[i * 4 + 3];\n\n      if (i < lineSet.length / 4 - 1) {\n        nextLineStartX = lineSet[(i + 1) * 4];\n        nextLineStartY = lineSet[(i + 1) * 4 + 1];\n        nextLineEndX = lineSet[(i + 1) * 4 + 2];\n        nextLineEndY = lineSet[(i + 1) * 4 + 3];\n      } else {\n        nextLineStartX = lineSet[0];\n        nextLineStartY = lineSet[1];\n        nextLineEndX = lineSet[2];\n        nextLineEndY = lineSet[3];\n      }\n\n      var intersection = this.finiteLinesIntersect(\n        currentLineStartX, currentLineStartY,\n        currentLineEndX, currentLineEndY,\n        nextLineStartX, nextLineStartY,\n        nextLineEndX, nextLineEndY,\n        true);\n\n      vertices[i * 2] = intersection[0];\n      vertices[i * 2 + 1] = intersection[1];\n    }\n\n    return vertices;\n  };\n\n  $$.math.expandPolygon = function(points, pad) {\n\n    var expandedLineSet = new Array(points.length * 2);\n\n    var currentPointX, currentPointY, nextPointX, nextPointY;\n\n    for (var i = 0; i < points.length / 2; i++) {\n      currentPointX = points[i * 2];\n      currentPointY = points[i * 2 + 1];\n\n      if (i < points.length / 2 - 1) {\n        nextPointX = points[(i + 1) * 2];\n        nextPointY = points[(i + 1) * 2 + 1];\n      } else {\n        nextPointX = points[0];\n        nextPointY = points[1];\n      }\n\n      // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]\n\n      // Assume CCW polygon winding\n\n      var offsetX = (nextPointY - currentPointY);\n      var offsetY = -(nextPointX - currentPointX);\n\n      // Normalize\n      var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);\n      var normalizedOffsetX = offsetX / offsetLength;\n      var normalizedOffsetY = offsetY / offsetLength;\n\n      expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;\n      expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;\n      expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;\n      expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;\n    }\n\n    return expandedLineSet;\n  };\n\n  $$.math.intersectLineEllipse = function(\n    x, y, centerX, centerY, ellipseWradius, ellipseHradius) {\n\n    var dispX = centerX - x;\n    var dispY = centerY - y;\n\n    dispX /= ellipseWradius;\n    dispY /= ellipseHradius;\n\n    var len = Math.sqrt(dispX * dispX + dispY * dispY);\n\n    var newLength = len - 1;\n\n    if (newLength < 0) {\n      return [];\n    }\n\n    var lenProportion = newLength / len;\n\n    return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];\n  };\n\n  $$.math.dotProduct = function(\n    vec1, vec2) {\n\n    if (vec1.length != 2 || vec2.length != 2) {\n      throw 'dot product: arguments are not vectors';\n    }\n\n    return (vec1[0] * vec2[0] + vec1[1] * vec2[1]);\n  };\n\n  // Returns intersections of increasing distance from line's start point\n  $$.math.intersectLineCircle = function(\n    x1, y1, x2, y2, centerX, centerY, radius) {\n\n    // Calculate d, direction vector of line\n    var d = [x2 - x1, y2 - y1]; // Direction vector of line\n    var c = [centerX, centerY]; // Center of circle\n    var f = [x1 - centerX, y1 - centerY];\n\n    var a = d[0] * d[0] + d[1] * d[1];\n    var b = 2 * (f[0] * d[0] + f[1] * d[1]);\n    var c = (f[0] * f[0] + f[1] * f[1]) - radius * radius ;\n\n    var discriminant = b*b-4*a*c;\n\n    if (discriminant < 0) {\n      return [];\n    }\n\n    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n\n    var tMin = Math.min(t1, t2);\n    var tMax = Math.max(t1, t2);\n    var inRangeParams = [];\n\n    if (tMin >= 0 && tMin <= 1) {\n      inRangeParams.push(tMin);\n    }\n\n    if (tMax >= 0 && tMax <= 1) {\n      inRangeParams.push(tMax);\n    }\n\n    if (inRangeParams.length === 0) {\n      return [];\n    }\n\n    var nearIntersectionX = inRangeParams[0] * d[0] + x1;\n    var nearIntersectionY = inRangeParams[0] * d[1] + y1;\n\n    if (inRangeParams.length > 1) {\n\n      if (inRangeParams[0] == inRangeParams[1]) {\n        return [nearIntersectionX, nearIntersectionY];\n      } else {\n\n        var farIntersectionX = inRangeParams[1] * d[0] + x1;\n        var farIntersectionY = inRangeParams[1] * d[1] + y1;\n\n        return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];\n      }\n\n    } else {\n      return [nearIntersectionX, nearIntersectionY];\n    }\n\n  };\n\n  $$.math.findCircleNearPoint = function(centerX, centerY,\n    radius, farX, farY) {\n\n    var displacementX = farX - centerX;\n    var displacementY = farY - centerY;\n    var distance = Math.sqrt(displacementX * displacementX\n      + displacementY * displacementY);\n\n    var unitDisplacementX = displacementX / distance;\n    var unitDisplacementY = displacementY / distance;\n\n    return [centerX + unitDisplacementX * radius,\n      centerY + unitDisplacementY * radius];\n  };\n\n  $$.math.findMaxSqDistanceToOrigin = function(points) {\n    var maxSqDistance = 0.000001;\n    var sqDistance;\n\n    for (var i = 0; i < points.length / 2; i++) {\n\n      sqDistance = points[i * 2] * points[i * 2]\n        + points[i * 2 + 1] * points[i * 2 + 1];\n\n      if (sqDistance > maxSqDistance) {\n        maxSqDistance = sqDistance;\n      }\n    }\n\n    return maxSqDistance;\n  };\n\n  $$.math.finiteLinesIntersect = function(\n    x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {\n\n    var ua_t = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n    var ub_t = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n    var u_b = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n\n    if (u_b !== 0) {\n      var ua = ua_t / u_b;\n      var ub = ub_t / u_b;\n\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n        return [x1 + ua * (x2 - x1), y1 + ua * (y2 - y1)];\n\n      } else {\n        if (!infiniteLines) {\n          return [];\n        } else {\n          return [x1 + ua * (x2 - x1), y1 + ua * (y2 - y1)];\n        }\n      }\n    } else {\n      if (ua_t === 0 || ub_t === 0) {\n\n        // Parallel, coincident lines. Check if overlap\n\n        // Check endpoint of second line\n        if ([x1, x2, x4].sort()[1] === x4) {\n          return [x4, y4];\n        }\n\n        // Check start point of second line\n        if ([x1, x2, x3].sort()[1] === x3) {\n          return [x3, y3];\n        }\n\n        // Endpoint of first line\n        if ([x3, x4, x2].sort()[1] === x2) {\n          return [x2, y2];\n        }\n\n        return [];\n      } else {\n\n        // Parallel, non-coincident\n        return [];\n      }\n    }\n  };\n\n  // (boxMinX, boxMinY, boxMaxX, boxMaxY, padding,\n  //      cornerRadius * 2, cornerRadius * 2, vBoxTopLeftX + padding, hBoxTopLeftY + padding)) {\n\n  $$.math.boxIntersectEllipse = function(\n    x1, y1, x2, y2, padding, width, height, centerX, centerY) {\n\n    if (x2 < x1) {\n      var oldX1 = x1;\n      x1 = x2;\n      x2 = oldX1;\n    }\n\n    if (y2 < y1) {\n      var oldY1 = y1;\n      y1 = y2;\n      y2 = oldY1;\n    }\n\n    // 4 ortho extreme points\n    var west = [centerX - width / 2 - padding, centerY];\n    var east = [centerX + width / 2 + padding, centerY];\n    var north = [centerX, centerY - height / 2 - padding];\n    var south = [centerX, centerY + height / 2 + padding];\n\n    // out of bounds: return false\n    if (x2 < west[0]) {\n      return false;\n    }\n\n    if (x1 > east[0]) {\n      return false;\n    }\n\n    if (y1 > south[1]) {\n      return false;\n    }\n\n    if (y2 < north[1]) {\n      return false;\n    }\n\n    // 1 of 4 ortho extreme points in box: return true\n    if (x1 <= east[0] && east[0] <= x2\n        && y1 <= east[1] && east[1] <= y2) {\n      return true;\n    }\n\n    if (x1 <= west[0] && west[0] <= x2\n        && y1 <= west[1] && west[1] <= y2) {\n      return true;\n    }\n\n    if (x1 <= north[0] && north[0] <= x2\n        && y1 <= north[1] && north[1] <= y2) {\n      return true;\n    }\n\n    if (x1 <= south[0] && south[0] <= x2\n        && y1 <= south[1] && south[1] <= y2) {\n      return true;\n    }\n\n    // box corner in ellipse: return true\n    x1 = (x1 - centerX) / (width / 2 + padding);\n    x2 = (x2 - centerX) / (width / 2 + padding);\n\n    y1 = (y1 - centerY) / (height / 2 + padding);\n    y2 = (y2 - centerY) / (height / 2 + padding);\n\n    if (x1 * x1 + y1 * y1 <= 1) {\n      return true;\n    }\n\n    if (x2 * x2 + y1 * y1 <= 1) {\n      return true;\n    }\n\n    if (x2 * x2 + y2 * y2 <= 1) {\n      return true;\n    }\n\n    if (x1 * x1 + y2 * y2 <= 1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  $$.math.boxIntersectPolygon = function(\n    x1, y1, x2, y2, basePoints, width, height, centerX, centerY, direction, padding) {\n\n//    console.log(arguments);\n\n    if (x2 < x1) {\n      var oldX1 = x1;\n      x1 = x2;\n      x2 = oldX1;\n    }\n\n    if (y2 < y1) {\n      var oldY1 = y1;\n      y1 = y2;\n      y2 = oldY1;\n    }\n\n    var transformedPoints = new Array(basePoints.length);\n\n    // Gives negative of angle\n    var angle = Math.asin(direction[1] / (Math.sqrt(direction[0] * direction[0]\n      + direction[1] * direction[1])));\n\n    if (direction[0] < 0) {\n      angle = angle + Math.PI / 2;\n    } else {\n      angle = -angle - Math.PI / 2;\n    }\n\n    var cos = Math.cos(-angle);\n    var sin = Math.sin(-angle);\n\n    for (var i = 0; i < transformedPoints.length / 2; i++) {\n      transformedPoints[i * 2] =\n        width / 2 * (basePoints[i * 2] * cos\n          - basePoints[i * 2 + 1] * sin);\n\n      transformedPoints[i * 2 + 1] =\n        height / 2 * (basePoints[i * 2 + 1] * cos\n          + basePoints[i * 2] * sin);\n\n      transformedPoints[i * 2] += centerX;\n      transformedPoints[i * 2 + 1] += centerY;\n    }\n\n    // Assume transformedPoints.length > 0, and check if intersection is possible\n    var minTransformedX = transformedPoints[0];\n    var maxTransformedX = transformedPoints[0];\n    var minTransformedY = transformedPoints[1];\n    var maxTransformedY = transformedPoints[1];\n\n    for (var i = 1; i < transformedPoints.length / 2; i++) {\n      if (transformedPoints[i * 2] > maxTransformedX) {\n        maxTransformedX = transformedPoints[i * 2];\n      }\n\n      if (transformedPoints[i * 2] < minTransformedX) {\n        minTransformedX = transformedPoints[i * 2];\n      }\n\n      if (transformedPoints[i * 2 + 1] > maxTransformedY) {\n        maxTransformedY = transformedPoints[i * 2 + 1];\n      }\n\n      if (transformedPoints[i * 2 + 1] < minTransformedY) {\n        minTransformedY = transformedPoints[i * 2 + 1];\n      }\n    }\n\n    if (x2 < minTransformedX - padding) {\n      return false;\n    }\n\n    if (x1 > maxTransformedX + padding) {\n      return false;\n    }\n\n    if (y2 < minTransformedY - padding) {\n      return false;\n    }\n\n    if (y1 > maxTransformedY + padding) {\n      return false;\n    }\n\n    // Continue checking with padding-corrected points\n    var points;\n\n    if (padding > 0) {\n      var expandedLineSet = $$.math.expandPolygon(\n        transformedPoints,\n        -padding);\n\n      points = $$.math.joinLines(expandedLineSet);\n    } else {\n      points = transformedPoints;\n    }\n\n    // Check if a point is in box\n    for (var i = 0; i < transformedPoints.length / 2; i++) {\n      if (x1 <= transformedPoints[i * 2]\n          && transformedPoints[i * 2] <= x2) {\n\n        if (y1 <= transformedPoints[i * 2 + 1]\n            && transformedPoints[i * 2 + 1] <= y2) {\n\n          return true;\n        }\n      }\n    }\n\n\n    // Check for intersections with the selection box\n    for (var i = 0; i < points.length / 2; i++) {\n\n      var currentX = points[i * 2];\n      var currentY = points[i * 2 + 1];\n      var nextX;\n      var nextY;\n\n      if (i < points.length / 2 - 1) {\n        nextX = points[(i + 1) * 2];\n        nextY = points[(i + 1) * 2 + 1];\n      } else {\n        nextX = points[0];\n        nextY = points[1];\n      }\n\n      // Intersection with top of selection box\n      if ($$.math.finiteLinesIntersect(currentX, currentY, nextX, nextY, x1, y1, x2, y1, false).length > 0) {\n        return true;\n      }\n\n      // Intersection with bottom of selection box\n      if ($$.math.finiteLinesIntersect(currentX, currentY, nextX, nextY, x1, y2, x2, y2, false).length > 0) {\n        return true;\n      }\n\n      // Intersection with left side of selection box\n      if ($$.math.finiteLinesIntersect(currentX, currentY, nextX, nextY, x1, y1, x1, y2, false).length > 0) {\n        return true;\n      }\n\n      // Intersection with right side of selection box\n      if ($$.math.finiteLinesIntersect(currentX, currentY, nextX, nextY, x2, y1, x2, y2, false).length > 0) {\n        return true;\n      }\n    }\n\n    /*\n    // Check if box corner in the polygon\n    if ($$.math.pointInsidePolygon(\n      x1, y1, points, 0, 0, 1, 1, 0, direction)) {\n\n      return true;\n    } else if ($$.math.pointInsidePolygon(\n      x1, y2, points, 0, 0, 1, 1, 0, direction)) {\n\n      return true;\n    } else if ($$.math.pointInsidePolygon(\n      x2, y2, points, 0, 0, 1, 1, 0, direction)) {\n\n      return true;\n    } else if ($$.math.pointInsidePolygon(\n      x2, y1, points, 0, 0, 1, 1, 0, direction)) {\n\n      return true;\n    }\n    */\n    return false;\n  };\n\n  $$.math.polygonIntersectLine = function(\n    x, y, basePoints, centerX, centerY, width, height, padding) {\n\n    var intersections = [];\n    var intersection;\n\n    var transformedPoints = new Array(basePoints.length);\n\n    for (var i = 0; i < transformedPoints.length / 2; i++) {\n      transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;\n      transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;\n    }\n\n    var points;\n\n    if (padding > 0) {\n      var expandedLineSet = $$.math.expandPolygon(\n        transformedPoints,\n        -padding);\n\n      points = $$.math.joinLines(expandedLineSet);\n    } else {\n      points = transformedPoints;\n    }\n    // var points = transformedPoints;\n\n    var currentX, currentY, nextX, nextY;\n\n    for (var i = 0; i < points.length / 2; i++) {\n\n      currentX = points[i * 2];\n      currentY = points[i * 2 + 1];\n\n      if (i < points.length / 2 - 1) {\n        nextX = points[(i + 1) * 2];\n        nextY = points[(i + 1) * 2 + 1];\n      } else {\n        nextX = points[0];\n        nextY = points[1];\n      }\n\n      intersection = this.finiteLinesIntersect(\n        x, y, centerX, centerY,\n        currentX, currentY,\n        nextX, nextY);\n\n      if (intersection.length !== 0) {\n        intersections.push(intersection[0], intersection[1]);\n      }\n    }\n\n    return intersections;\n  };\n\n  $$.math.shortenIntersection = function(\n    intersection, offset, amount) {\n\n    var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];\n\n    var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);\n\n    var lenRatio = (length - amount) / length;\n\n    if (lenRatio < 0) {\n      lenRatio = 0.00001;\n    }\n\n    return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];\n  };\n\n  $$.math.generateUnitNgonPointsFitToSquare = function(sides, rotationRadians) {\n    var points = $$.math.generateUnitNgonPoints(sides, rotationRadians);\n    points = $$.math.fitPolygonToSquare(points);\n\n    return points;\n  };\n\n  $$.math.fitPolygonToSquare = function(points){\n    var x, y;\n    var sides = points.length/2;\n    var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n\n    for (var i = 0; i < sides; i++) {\n      x = points[2 * i];\n      y = points[2 * i + 1];\n\n      minX = Math.min( minX, x );\n      maxX = Math.max( maxX, x );\n      minY = Math.min( minY, y );\n      maxY = Math.max( maxY, y );\n    }\n\n    // stretch factors\n    var sx = 2 / (maxX - minX);\n    var sy = 2 / (maxY - minY);\n\n    for (var i = 0; i < sides; i++){\n      x = points[2 * i] = points[2 * i] * sx;\n      y = points[2 * i + 1] = points[2 * i + 1] * sy;\n\n      minX = Math.min( minX, x );\n      maxX = Math.max( maxX, x );\n      minY = Math.min( minY, y );\n      maxY = Math.max( maxY, y );\n    }\n\n    if( minY < -1 ){\n      for (var i = 0; i < sides; i++){\n        y = points[2 * i + 1] = points[2 * i + 1] + (-1 -minY);\n      }\n    }\n\n    return points;\n  };\n\n  $$.math.generateUnitNgonPoints = function(sides, rotationRadians) {\n\n    var increment = 1.0 / sides * 2 * Math.PI;\n    var startAngle = sides % 2 === 0 ?\n      Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;\n//    console.log(nodeShapes['square']);\n    startAngle += rotationRadians;\n\n    var points = new Array(sides * 2);\n\n    var currentAngle, x, y;\n    for (var i = 0; i < sides; i++) {\n      currentAngle = i * increment + startAngle;\n\n      x = points[2 * i] = Math.cos(currentAngle);// * (1 + i/2);\n      y = points[2 * i + 1] = Math.sin(-currentAngle);//  * (1 + i/2);\n    }\n\n    return points;\n  };\n\n  $$.math.getRoundRectangleRadius = function(width, height) {\n\n    // Set the default radius, unless half of width or height is smaller than default\n    return Math.min(width / 4, height / 4, 8);\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // registered extensions to cytoscape, indexed by name\n  var extensions = {};\n  $$.extensions = extensions;\n\n  // registered modules for extensions, indexed by name\n  var modules = {};\n  $$.modules = modules;\n\n  function setExtension(type, name, registrant){\n    var impl = {};\n    impl[name] = registrant;\n\n    switch( type ){\n    case 'core':\n    case 'collection':\n      $$.fn[type]( impl );\n    }\n\n    // fill in missing layout functions in the prototype\n    if( type === 'layout' ){\n      var layoutProto = registrant.prototype;\n      var optLayoutFns = [];\n\n      for( var i = 0; i < optLayoutFns.length; i++ ){\n        var fnName = optLayoutFns[i];\n\n        layoutProto[fnName] = layoutProto[fnName] || function(){ return this; };\n      }\n\n      // either .start() or .run() is defined, so autogen the other\n      if( layoutProto.start && !layoutProto.run ){\n        layoutProto.run = function(){ this.start(); return this; };\n      } else if( !layoutProto.start && layoutProto.run ){\n        layoutProto.start = function(){ this.run(); return this; };\n      }\n\n      if( !layoutProto.stop ){\n        layoutProto.stop = function(){\n          var opts = this.options;\n\n          if( opts && opts.animate ){\n            opts.eles.stop();\n          }\n\n          return this;\n        };\n      }\n\n      layoutProto.on = $$.define.on({ layout: true });\n      layoutProto.one = $$.define.on({ layout: true, unbindSelfOnTrigger: true });\n      layoutProto.once = $$.define.on({ layout: true, unbindAllBindersOnTrigger: true });\n      layoutProto.off = $$.define.off({ layout: true });\n      layoutProto.trigger = $$.define.trigger({ layout: true });\n\n      $$.define.eventAliasesOn( layoutProto );\n    }\n\n    return $$.util.setMap({\n      map: extensions,\n      keys: [ type, name ],\n      value: registrant\n    });\n  }\n\n  function getExtension(type, name){\n    return $$.util.getMap({\n      map: extensions,\n      keys: [ type, name ]\n    });\n  }\n\n  function setModule(type, name, moduleType, moduleName, registrant){\n    return $$.util.setMap({\n      map: modules,\n      keys: [ type, name, moduleType, moduleName ],\n      value: registrant\n    });\n  }\n\n  function getModule(type, name, moduleType, moduleName){\n    return $$.util.getMap({\n      map: modules,\n      keys: [ type, name, moduleType, moduleName ]\n    });\n  }\n\n  $$.extension = function(){\n    // e.g. $$.extension('renderer', 'svg')\n    if( arguments.length == 2 ){\n      return getExtension.apply(this, arguments);\n    }\n\n    // e.g. $$.extension('renderer', 'svg', { ... })\n    else if( arguments.length == 3 ){\n      return setExtension.apply(this, arguments);\n    }\n\n    // e.g. $$.extension('renderer', 'svg', 'nodeShape', 'ellipse')\n    else if( arguments.length == 4 ){\n      return getModule.apply(this, arguments);\n    }\n\n    // e.g. $$.extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })\n    else if( arguments.length == 5 ){\n      return setModule.apply(this, arguments);\n    }\n\n    else {\n      $$.util.error('Invalid extension access syntax');\n    }\n\n  };\n\n})( cytoscape );\n\n;(function($, $$){ 'use strict';\n\n  var cyReg = function( $ele ){\n    var d = $ele[0]._cyreg = $ele[0]._cyreg || {};\n\n    return d;\n  };\n\n  $$.registerJquery = function( $ ){\n    if( !$ ){ return; } // no jquery => don't need this\n\n    if( $.fn.cytoscape ){ return; } // already registered\n\n    // allow calls on a jQuery selector by proxying calls to $.cytoscape\n    // e.g. $(\"#foo\").cytoscape(options) => $.cytoscape(options) on #foo\n    $.fn.cytoscape = function(opts){\n      var $this = $(this);\n\n      // get object\n      if( opts === 'get' ){\n        return cyReg( $this ).cy;\n      }\n\n      // bind to ready\n      else if( $$.is.fn(opts) ){\n\n        var ready = opts;\n        var cy = cyReg( $this ).cy;\n\n        if( cy && cy.isReady() ){ // already ready so just trigger now\n          cy.trigger('ready', [], ready);\n\n        } else { // not yet ready, so add to readies list\n          var data = cyReg( $this );\n          var readies = data.readies = data.readies || [];\n\n          readies.push( ready );\n        }\n\n      }\n\n      // proxy to create instance\n      else if( $$.is.plainObject(opts) ){\n        return $this.each(function(){\n          var options = $.extend({}, opts, {\n            container: $(this)[0]\n          });\n\n          cytoscape(options);\n        });\n      }\n    };\n\n    // allow access to the global cytoscape object under jquery for legacy reasons\n    $.cytoscape = cytoscape;\n\n    // use short alias (cy) if not already defined\n    if( $.fn.cy == null && $.cy == null ){\n      $.fn.cy = $.fn.cytoscape;\n      $.cy = $.cytoscape;\n    }\n  };\n\n  $$.registerJquery( $ ); // try to register with global jquery for convenience\n\n})(typeof jQuery !== 'undefined' ? jQuery : null , cytoscape);\n\n;(function($$){ 'use strict';\n\n  // shamelessly taken from jQuery\n  // https://github.com/jquery/jquery/blob/master/src/event.js\n\n  $$.Event = function( src, props ) {\n    // Allow instantiation without the 'new' keyword\n    if ( !(this instanceof $$.Event) ) {\n      return new $$.Event( src, props );\n    }\n\n    // Event object\n    if ( src && src.type ) {\n      this.originalEvent = src;\n      this.type = src.type;\n\n      // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n      this.isDefaultPrevented = ( src.defaultPrevented ) ? returnTrue : returnFalse;\n\n    // Event type\n    } else {\n      this.type = src;\n    }\n\n    // Put explicitly provided properties onto the event object\n    if ( props ) {\n      // $$.util.extend( this, props );\n\n      // more efficient to manually copy fields we use\n      this.type = props.type !== undefined ? props.type : this.type;\n      this.cy = props.cy;\n      this.cyTarget = props.cyTarget;\n      this.cyPosition = props.cyPosition;\n      this.cyRenderedPosition = props.cyRenderedPosition;\n      this.namespace = props.namespace;\n      this.layout = props.layout;\n      this.data = props.data;\n      this.message = props.message;\n    }\n\n    // Create a timestamp if incoming event doesn't have one\n    this.timeStamp = src && src.timeStamp || +new Date();\n  };\n\n  function returnFalse() {\n    return false;\n  }\n  function returnTrue() {\n    return true;\n  }\n\n  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n  $$.Event.prototype = {\n    preventDefault: function() {\n      this.isDefaultPrevented = returnTrue;\n\n      var e = this.originalEvent;\n      if ( !e ) {\n        return;\n      }\n\n      // if preventDefault exists run it on the original event\n      if ( e.preventDefault ) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function() {\n      this.isPropagationStopped = returnTrue;\n\n      var e = this.originalEvent;\n      if ( !e ) {\n        return;\n      }\n      // if stopPropagation exists run it on the original event\n      if ( e.stopPropagation ) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function() {\n      this.isImmediatePropagationStopped = returnTrue;\n      this.stopPropagation();\n    },\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse\n  };\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // use this module to cherry pick functions into your prototype\n  // (useful for functions shared between the core and collections, for example)\n\n  // e.g.\n  // $$.fn.collection({\n  //   foo: $$.define.foo({ /* params... */ })\n  // });\n\n  $$.define = {\n\n    // access data field\n    data: function( params ){\n      var defaults = {\n        field: 'data',\n        bindingEvent: 'data',\n        allowBinding: false,\n        allowSetting: false,\n        allowGetting: false,\n        settingEvent: 'data',\n        settingTriggersEvent: false,\n        triggerFnName: 'trigger',\n        immutableKeys: {}, // key => true if immutable\n        updateStyle: false,\n        onSet: function( self ){},\n        canSet: function( self ){ return true; }\n      };\n      params = $$.util.extend({}, defaults, params);\n\n      return function dataImpl( name, value ){\n        var p = params;\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n        var single = selfIsArrayLike ? self[0] : self;\n\n        // .data('foo', ...)\n        if( $$.is.string(name) ){ // set or get property\n\n          // .data('foo')\n          if( p.allowGetting && value === undefined ){ // get\n\n            var ret;\n            if( single ){\n              ret = single._private[ p.field ][ name ];\n            }\n            return ret;\n\n          // .data('foo', 'bar')\n          } else if( p.allowSetting && value !== undefined ) { // set\n            var valid = !p.immutableKeys[name];\n            if( valid ){\n              for( var i = 0, l = all.length; i < l; i++ ){\n                if( p.canSet( all[i] ) ){\n                  all[i]._private[ p.field ][ name ] = value;\n                }\n              }\n\n              // update mappers if asked\n              if( p.updateStyle ){ self.updateStyle(); }\n\n              // call onSet callback\n              p.onSet( self );\n\n              if( p.settingTriggersEvent ){\n                self[ p.triggerFnName ]( p.settingEvent );\n              }\n            }\n          }\n\n        // .data({ 'foo': 'bar' })\n        } else if( p.allowSetting && $$.is.plainObject(name) ){ // extend\n          var obj = name;\n          var k, v;\n\n          for( k in obj ){\n            v = obj[ k ];\n\n            var valid = !p.immutableKeys[k];\n            if( valid ){\n              for( var i = 0, l = all.length; i < l; i++ ){\n                if( p.canSet( all[i] ) ){\n                  all[i]._private[ p.field ][ k ] = v;\n                }\n              }\n            }\n          }\n\n          // update mappers if asked\n          if( p.updateStyle ){ self.updateStyle(); }\n\n          // call onSet callback\n          p.onSet( self );\n\n          if( p.settingTriggersEvent ){\n            self[ p.triggerFnName ]( p.settingEvent );\n          }\n\n        // .data(function(){ ... })\n        } else if( p.allowBinding && $$.is.fn(name) ){ // bind to event\n          var fn = name;\n          self.bind( p.bindingEvent, fn );\n\n        // .data()\n        } else if( p.allowGetting && name === undefined ){ // get whole object\n          var ret;\n          if( single ){\n            ret = single._private[ p.field ];\n          }\n          return ret;\n        }\n\n        return self; // maintain chainability\n      }; // function\n    }, // data\n\n    // remove data field\n    removeData: function( params ){\n      var defaults = {\n        field: 'data',\n        event: 'data',\n        triggerFnName: 'trigger',\n        triggerEvent: false,\n        immutableKeys: {} // key => true if immutable\n      };\n      params = $$.util.extend({}, defaults, params);\n\n      return function removeDataImpl( names ){\n        var p = params;\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n\n        // .removeData('foo bar')\n        if( $$.is.string(names) ){ // then get the list of keys, and delete them\n          var keys = names.split(/\\s+/);\n          var l = keys.length;\n\n          for( var i = 0; i < l; i++ ){ // delete each non-empty key\n            var key = keys[i];\n            if( $$.is.emptyString(key) ){ continue; }\n\n            var valid = !p.immutableKeys[ key ]; // not valid if immutable\n            if( valid ){\n              for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){\n                all[ i_a ]._private[ p.field ][ key ] = undefined;\n              }\n            }\n          }\n\n          if( p.triggerEvent ){\n            self[ p.triggerFnName ]( p.event );\n          }\n\n        // .removeData()\n        } else if( names === undefined ){ // then delete all keys\n\n          for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){\n            var _privateFields = all[ i_a ]._private[ p.field ];\n\n            for( var key in _privateFields ){\n              var validKeyToDelete = !p.immutableKeys[ key ];\n\n              if( validKeyToDelete ){\n                _privateFields[ key ] = undefined;\n              }\n            }\n          }\n\n          if( p.triggerEvent ){\n            self[ p.triggerFnName ]( p.event );\n          }\n        }\n\n        return self; // maintain chaining\n      }; // function\n    }, // removeData\n\n    // event function reusable stuff\n    event: {\n      regex: /(\\w+)(\\.\\w+)?/, // regex for matching event strings (e.g. \"click.namespace\")\n      optionalTypeRegex: /(\\w+)?(\\.\\w+)?/,\n      falseCallback: function(){ return false; }\n    },\n\n    // event binding\n    on: function( params ){\n      var defaults = {\n        unbindSelfOnTrigger: false,\n        unbindAllBindersOnTrigger: false\n      };\n      params = $$.util.extend({}, defaults, params);\n\n      return function onImpl(events, selector, data, callback){\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n        var eventsIsString = $$.is.string(events);\n        var p = params;\n\n        if( $$.is.plainObject(selector) ){ // selector is actually data\n          callback = data;\n          data = selector;\n          selector = undefined;\n        } else if( $$.is.fn(selector) || selector === false ){ // selector is actually callback\n          callback = selector;\n          data = undefined;\n          selector = undefined;\n        }\n\n        if( $$.is.fn(data) || data === false ){ // data is actually callback\n          callback = data;\n          data = undefined;\n        }\n\n        // if there isn't a callback, we can't really do anything\n        // (can't speak for mapped events arg version)\n        if( !($$.is.fn(callback) || callback === false) && eventsIsString ){\n          return self; // maintain chaining\n        }\n\n        if( eventsIsString ){ // then convert to map\n          var map = {};\n          map[ events ] = callback;\n          events = map;\n        }\n\n        for( var evts in events ){\n          callback = events[evts];\n          if( callback === false ){\n            callback = $$.define.event.falseCallback;\n          }\n\n          if( !$$.is.fn(callback) ){ continue; }\n\n          evts = evts.split(/\\s+/);\n          for( var i = 0; i < evts.length; i++ ){\n            var evt = evts[i];\n            if( $$.is.emptyString(evt) ){ continue; }\n\n            var match = evt.match( $$.define.event.regex ); // type[.namespace]\n\n            if( match ){\n              var type = match[1];\n              var namespace = match[2] ? match[2] : undefined;\n\n              var listener = {\n                callback: callback, // callback to run\n                data: data, // extra data in eventObj.data\n                delegated: selector ? true : false, // whether the evt is delegated\n                selector: selector, // the selector to match for delegated events\n                selObj: new $$.Selector(selector), // cached selector object to save rebuilding\n                type: type, // the event type (e.g. 'click')\n                namespace: namespace, // the event namespace (e.g. \".foo\")\n                unbindSelfOnTrigger: p.unbindSelfOnTrigger,\n                unbindAllBindersOnTrigger: p.unbindAllBindersOnTrigger,\n                binders: all // who bound together\n              };\n\n              for( var j = 0; j < all.length; j++ ){\n                var _p = all[j]._private;\n\n                _p.listeners = _p.listeners || [];\n                _p.listeners.push( listener );\n              }\n            }\n          } // for events array\n        } // for events map\n\n        return self; // maintain chaining\n      }; // function\n    }, // on\n\n    eventAliasesOn: function( proto ){\n      var p = proto;\n\n      p.addListener = p.listen = p.bind = p.on;\n      p.removeListener = p.unlisten = p.unbind = p.off;\n      p.emit = p.trigger;\n\n      // this is just a wrapper alias of .on()\n      p.pon = p.promiseOn = function( events, selector ){\n        var self = this;\n        var args = Array.prototype.slice.call( arguments, 0 );\n\n        return new $$.Promise(function( resolve, reject ){\n          var callback = function( e ){\n            self.off.apply( self, offArgs );\n\n            resolve( e );\n          };\n\n          var onArgs = args.concat([ callback ]);\n          var offArgs = onArgs.concat([]);\n\n          self.on.apply( self, onArgs );\n        });\n      };\n    },\n\n    off: function offImpl( params ){\n      var defaults = {\n      };\n      params = $$.util.extend({}, defaults, params);\n\n      return function(events, selector, callback){\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n        var eventsIsString = $$.is.string(events);\n\n        if( arguments.length === 0 ){ // then unbind all\n\n          for( var i = 0; i < all.length; i++ ){\n            all[i]._private.listeners = [];\n          }\n\n          return self; // maintain chaining\n        }\n\n        if( $$.is.fn(selector) || selector === false ){ // selector is actually callback\n          callback = selector;\n          selector = undefined;\n        }\n\n        if( eventsIsString ){ // then convert to map\n          var map = {};\n          map[ events ] = callback;\n          events = map;\n        }\n\n        for( var evts in events ){\n          callback = events[evts];\n\n          if( callback === false ){\n            callback = $$.define.event.falseCallback;\n          }\n\n          evts = evts.split(/\\s+/);\n          for( var h = 0; h < evts.length; h++ ){\n            var evt = evts[h];\n            if( $$.is.emptyString(evt) ){ continue; }\n\n            var match = evt.match( $$.define.event.optionalTypeRegex ); // [type][.namespace]\n            if( match ){\n              var type = match[1] ? match[1] : undefined;\n              var namespace = match[2] ? match[2] : undefined;\n\n              for( var i = 0; i < all.length; i++ ){ //\n                var listeners = all[i]._private.listeners = all[i]._private.listeners || [];\n\n                for( var j = 0; j < listeners.length; j++ ){\n                  var listener = listeners[j];\n                  var nsMatches = !namespace || namespace === listener.namespace;\n                  var typeMatches = !type || listener.type === type;\n                  var cbMatches = !callback || callback === listener.callback;\n                  var listenerMatches = nsMatches && typeMatches && cbMatches;\n\n                  // delete listener if it matches\n                  if( listenerMatches ){\n                    listeners.splice(j, 1);\n                    j--;\n                  }\n                } // for listeners\n              } // for all\n            } // if match\n          } // for events array\n\n        } // for events map\n\n        return self; // maintain chaining\n      }; // function\n    }, // off\n\n    trigger: function( params ){\n      var defaults = {};\n      params = $$.util.extend({}, defaults, params);\n\n      return function triggerImpl(events, extraParams, fnToTrigger){\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n        var eventsIsString = $$.is.string(events);\n        var eventsIsObject = $$.is.plainObject(events);\n        var eventsIsEvent = $$.is.event(events);\n        var cy = this._private.cy || ( $$.is.core(this) ? this : null );\n        var hasCompounds = cy ? cy.hasCompoundNodes() : false;\n\n        if( eventsIsString ){ // then make a plain event object for each event name\n          var evts = events.split(/\\s+/);\n          events = [];\n\n          for( var i = 0; i < evts.length; i++ ){\n            var evt = evts[i];\n            if( $$.is.emptyString(evt) ){ continue; }\n\n            var match = evt.match( $$.define.event.regex ); // type[.namespace]\n            var type = match[1];\n            var namespace = match[2] ? match[2] : undefined;\n\n            events.push( {\n              type: type,\n              namespace: namespace\n            } );\n          }\n        } else if( eventsIsObject ){ // put in length 1 array\n          var eventArgObj = events;\n\n          events = [ eventArgObj ];\n        }\n\n        if( extraParams ){\n          if( !$$.is.array(extraParams) ){ // make sure extra params are in an array if specified\n            extraParams = [ extraParams ];\n          }\n        } else { // otherwise, we've got nothing\n          extraParams = [];\n        }\n\n        for( var i = 0; i < events.length; i++ ){ // trigger each event in order\n          var evtObj = events[i];\n\n          for( var j = 0; j < all.length; j++ ){ // for each\n            var triggerer = all[j];\n            var listeners = triggerer._private.listeners = triggerer._private.listeners || [];\n            var triggererIsElement = $$.is.element(triggerer);\n            var bubbleUp = triggererIsElement || params.layout;\n\n            // create the event for this element from the event object\n            var evt;\n\n            if( eventsIsEvent ){ // then just get the object\n              evt = evtObj;\n\n              evt.cyTarget = evt.cyTarget || triggerer;\n              evt.cy = evt.cy || cy;\n\n            } else { // then we have to make one\n              evt = new $$.Event( evtObj, {\n                cyTarget: triggerer,\n                cy: cy,\n                namespace: evtObj.namespace\n              } );\n            }\n\n            // if a layout was specified, then put it in the typed event\n            if( evtObj.layout ){\n              evt.layout = evtObj.layout;\n            }\n\n            // if triggered by layout, put in event\n            if( params.layout ){\n              evt.layout = triggerer;\n            }\n\n            // create a rendered position based on the passed position\n            if( evt.cyPosition ){\n              var pos = evt.cyPosition;\n              var zoom = cy.zoom();\n              var pan = cy.pan();\n\n              evt.cyRenderedPosition = {\n                x: pos.x * zoom + pan.x,\n                y: pos.y * zoom + pan.y\n              };\n            }\n\n            if( fnToTrigger ){ // then override the listeners list with just the one we specified\n              listeners = [{\n                namespace: evt.namespace,\n                type: evt.type,\n                callback: fnToTrigger\n              }];\n            }\n\n            for( var k = 0; k < listeners.length; k++ ){ // check each listener\n              var lis = listeners[k];\n              var nsMatches = !lis.namespace || lis.namespace === evt.namespace;\n              var typeMatches = lis.type === evt.type;\n              var targetMatches = lis.delegated ? ( triggerer !== evt.cyTarget && $$.is.element(evt.cyTarget) && lis.selObj.matches(evt.cyTarget) ) : (true); // we're not going to validate the hierarchy; that's too expensive\n              var listenerMatches = nsMatches && typeMatches && targetMatches;\n\n              if( listenerMatches ){ // then trigger it\n                var args = [ evt ];\n                args = args.concat( extraParams ); // add extra params to args list\n\n                if( lis.data ){ // add on data plugged into binding\n                  evt.data = lis.data;\n                } else { // or clear it in case the event obj is reused\n                  evt.data = undefined;\n                }\n\n                if( lis.unbindSelfOnTrigger || lis.unbindAllBindersOnTrigger ){ // then remove listener\n                  listeners.splice(k, 1);\n                  k--;\n                }\n\n                if( lis.unbindAllBindersOnTrigger ){ // then delete the listener for all binders\n                  var binders = lis.binders;\n                  for( var l = 0; l < binders.length; l++ ){\n                    var binder = binders[l];\n                    if( !binder || binder === triggerer ){ continue; } // already handled triggerer or we can't handle it\n\n                    var binderListeners = binder._private.listeners;\n                    for( var m = 0; m < binderListeners.length; m++ ){\n                      var binderListener = binderListeners[m];\n\n                      if( binderListener === lis ){ // delete listener from list\n                        binderListeners.splice(m, 1);\n                        m--;\n                      }\n                    }\n                  }\n                }\n\n                // run the callback\n                var context = lis.delegated ? evt.cyTarget : triggerer;\n                var ret = lis.callback.apply( context, args );\n\n                if( ret === false || evt.isPropagationStopped() ){\n                  // then don't bubble\n                  bubbleUp = false;\n\n                  if( ret === false ){\n                    // returning false is a shorthand for stopping propagation and preventing the def. action\n                    evt.stopPropagation();\n                    evt.preventDefault();\n                  }\n                }\n              } // if listener matches\n            } // for each listener\n\n            // bubble up event for elements\n            if( bubbleUp ){\n              var parent = hasCompounds ? triggerer._private.parent : null;\n              var hasParent = parent != null && parent.length !== 0;\n\n              if( hasParent ){ // then bubble up to parent\n                parent = parent[0];\n                parent.trigger(evt);\n              } else { // otherwise, bubble up to the core\n                cy.trigger(evt);\n              }\n            }\n\n          } // for each of all\n        } // for each event\n\n        return self; // maintain chaining\n      }; // function\n    }, // trigger\n\n\n    animated: function( fnParams ){\n      var defaults = {};\n      fnParams = $$.util.extend({}, defaults, fnParams);\n\n      return function animatedImpl(){\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n        var cy = this._private.cy || this;\n\n        if( !cy.styleEnabled() ){ return false; }\n\n        var ele = all[0];\n\n        if( ele ){\n          return ele._private.animation.current.length > 0;\n        }\n      };\n    }, // animated\n\n    clearQueue: function( fnParams ){\n      var defaults = {};\n      fnParams = $$.util.extend({}, defaults, fnParams);\n\n      return function clearQueueImpl(){\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n        var cy = this._private.cy || this;\n\n        if( !cy.styleEnabled() ){ return this; }\n\n        for( var i = 0; i < all.length; i++ ){\n          var ele = all[i];\n          ele._private.animation.queue = [];\n        }\n\n        return this;\n      };\n    }, // clearQueue\n\n    delay: function( fnParams ){\n      var defaults = {};\n      fnParams = $$.util.extend({}, defaults, fnParams);\n\n      return function delayImpl( time, complete ){\n        var cy = this._private.cy || this;\n\n        if( !cy.styleEnabled() ){ return this; }\n\n        this.animate({\n          delay: time\n        }, {\n          duration: time,\n          complete: complete\n        });\n\n        return this;\n      };\n    }, // delay\n\n    animate: function( fnParams ){\n      var defaults = {};\n      fnParams = $$.util.extend({}, defaults, fnParams);\n\n      return function animateImpl( properties, params ){\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n        var cy = this._private.cy || this;\n        var isCore = !selfIsArrayLike;\n        var isEles = !isCore;\n\n        if( !cy.styleEnabled() ){ return this; }\n\n        var callTime = +new Date();\n        var style = cy.style();\n        var q;\n\n        if( params === undefined ){\n          params = {};\n        }\n\n        if( params.duration === undefined ){\n          params.duration = 400;\n        }\n\n        switch( params.duration ){\n        case 'slow':\n          params.duration = 600;\n          break;\n        case 'fast':\n          params.duration = 200;\n          break;\n        }\n\n        var propertiesEmpty = true;\n        if( properties ){ for( var i in properties ){\n          propertiesEmpty = false;\n          break;\n        } }\n\n        if( propertiesEmpty ){\n          return this; // nothing to animate\n        }\n        \n        if( isEles ){\n          properties.style = style.getPropsList( properties.style || properties.css );\n          \n          properties.css = undefined;\n        }\n\n        if( properties.renderedPosition && isEles ){\n          var rpos = properties.renderedPosition;\n          var pan = cy.pan();\n          var zoom = cy.zoom();\n\n          properties.position = {\n            x: ( rpos.x - pan.x ) /zoom,\n            y: ( rpos.y - pan.y ) /zoom\n          };\n        }\n\n        // override pan w/ panBy if set\n        if( properties.panBy && isCore ){\n          var panBy = properties.panBy;\n          var cyPan = cy.pan();\n\n          properties.pan = {\n            x: cyPan.x + panBy.x,\n            y: cyPan.y + panBy.y\n          };\n        }\n\n        // override pan w/ center if set\n        var center = properties.center || properties.centre;\n        if( center && isCore ){\n          var centerPan = cy.getCenterPan( center.eles, properties.zoom );\n\n          if( centerPan ){\n            properties.pan = centerPan;\n          }\n        }\n\n        // override pan & zoom w/ fit if set\n        if( properties.fit && isCore ){\n          var fit = properties.fit;\n          var fitVp = cy.getFitViewport( fit.eles || fit.boundingBox, fit.padding );\n\n          if( fitVp ){\n            properties.pan = fitVp.pan; //{ x: fitVp.pan.x, y: fitVp.pan.y };\n            properties.zoom = fitVp.zoom;\n          }\n        }\n\n        for( var i = 0; i < all.length; i++ ){\n          var ele = all[i];\n\n          if( ele.animated() && (params.queue === undefined || params.queue) ){\n            q = ele._private.animation.queue;\n          } else {\n            q = ele._private.animation.current;\n          }\n\n          q.push({\n            properties: properties,\n            duration: params.duration,\n            params: params,\n            callTime: callTime\n          });\n        }\n\n        if( isEles ){\n          cy.addToAnimationPool( this );\n        }\n\n        return this; // chaining\n      };\n    }, // animate\n\n    stop: function( fnParams ){\n      var defaults = {};\n      fnParams = $$.util.extend({}, defaults, fnParams);\n\n      return function stopImpl( clearQueue, jumpToEnd ){\n        var self = this;\n        var selfIsArrayLike = self.length !== undefined;\n        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n        var cy = this._private.cy || this;\n\n        if( !cy.styleEnabled() ){ return this; }\n\n        for( var i = 0; i < all.length; i++ ){\n          var ele = all[i];\n          var anis = ele._private.animation.current;\n\n          for( var j = 0; j < anis.length; j++ ){\n            var animation = anis[j];\n            if( jumpToEnd ){\n              // next iteration of the animation loop, the animation\n              // will go straight to the end and be removed\n              animation.duration = 0;\n            }\n          }\n\n          // clear the queue of future animations\n          if( clearQueue ){\n            ele._private.animation.queue = [];\n          }\n\n          if( !jumpToEnd ){\n            ele._private.animation.current = [];\n          }\n        }\n\n        // we have to notify (the animation loop doesn't do it for us on `stop`)\n        cy.notify({\n          collection: this,\n          type: 'draw'\n        });\n\n        return this;\n      };\n    } // stop\n\n  }; // define\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.selector = function(map, options){\n    for( var name in map ){\n      var fn = map[name];\n      $$.Selector.prototype[ name ] = fn;\n    }\n  };\n\n  $$.Selector = function(onlyThisGroup, selector){\n\n    if( !(this instanceof $$.Selector) ){\n      return new $$.Selector(onlyThisGroup, selector);\n    }\n\n    if( selector === undefined && onlyThisGroup !== undefined ){\n      selector = onlyThisGroup;\n      onlyThisGroup = undefined;\n    }\n\n    var self = this;\n\n    self._private = {\n      selectorText: null,\n      invalid: true\n    };\n\n    if( !selector || ( $$.is.string(selector) && selector.match(/^\\s*$/) ) ){\n\n      if( onlyThisGroup == null ){\n        // ignore\n        self.length = 0;\n      } else {\n        self[0] = newQuery();\n        self[0].group = onlyThisGroup;\n        self.length = 1;\n      }\n\n    } else if( $$.is.element( selector ) ){\n      var collection = new $$.Collection(self.cy(), [ selector ]);\n\n      self[0] = newQuery();\n      self[0].collection = collection;\n      self.length = 1;\n\n    } else if( $$.is.collection( selector ) ){\n      self[0] = newQuery();\n      self[0].collection = selector;\n      self.length = 1;\n\n    } else if( $$.is.fn( selector ) ) {\n      self[0] = newQuery();\n      self[0].filter = selector;\n      self.length = 1;\n\n    } else if( $$.is.string( selector ) ){\n\n      // the current subject in the query\n      var currentSubject = null;\n\n      // storage for parsed queries\n      var newQuery = function(){\n        return {\n          classes: [],\n          colonSelectors: [],\n          data: [],\n          group: null,\n          ids: [],\n          meta: [],\n\n          // fake selectors\n          collection: null, // a collection to match against\n          filter: null, // filter function\n\n          // these are defined in the upward direction rather than down (e.g. child)\n          // because we need to go up in Selector.filter()\n          parent: null, // parent query obj\n          ancestor: null, // ancestor query obj\n          subject: null, // defines subject in compound query (subject query obj; points to self if subject)\n\n          // use these only when subject has been defined\n          child: null,\n          descendant: null\n        };\n      };\n\n      // tokens in the query language\n      var tokens = {\n        metaChar: '[\\\\!\\\\\"\\\\#\\\\$\\\\%\\\\&\\\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\.\\\\/\\\\:\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\[\\\\]\\\\^\\\\`\\\\{\\\\|\\\\}\\\\~]', // chars we need to escape in var names, etc\n        comparatorOp: '=|\\\\!=|>|>=|<|<=|\\\\$=|\\\\^=|\\\\*=', // binary comparison op (used in data selectors)\n        boolOp: '\\\\?|\\\\!|\\\\^', // boolean (unary) operators (used in data selectors)\n        string: '\"(?:\\\\\\\\\"|[^\"])+\"' + '|' + \"'(?:\\\\\\\\'|[^'])+'\", // string literals (used in data selectors) -- doublequotes | singlequotes\n        number: $$.util.regex.number, // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123\n        meta: 'degree|indegree|outdegree', // allowed metadata fields (i.e. allowed functions to use from $$.Collection)\n        separator: '\\\\s*,\\\\s*', // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass\n        descendant: '\\\\s+',\n        child: '\\\\s+>\\\\s+',\n        subject: '\\\\$'\n      };\n      tokens.variable = '(?:[\\\\w-]|(?:\\\\\\\\'+ tokens.metaChar +'))+'; // a variable name\n      tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number\n      tokens.className = tokens.variable; // a class name (follows variable conventions)\n      tokens.id = tokens.variable; // an element id (follows variable conventions)\n\n      // when a token like a variable has escaped meta characters, we need to clean the backslashes out\n      // so that values get compared properly in Selector.filter()\n      var cleanMetaChars = function(str){\n        return str.replace(new RegExp('\\\\\\\\(' + tokens.metaChar + ')', 'g'), function(match, $1, offset, original){\n          return $1;\n        });\n      };\n\n      // add @ variants to comparatorOp\n      var ops = tokens.comparatorOp.split('|');\n      for( var i = 0; i < ops.length; i++ ){\n        var op = ops[i];\n        tokens.comparatorOp += '|@' + op;\n      }\n\n      // add ! variants to comparatorOp\n      var ops = tokens.comparatorOp.split('|');\n      for( var i = 0; i < ops.length; i++ ){\n        var op = ops[i];\n\n        if( op.indexOf('!') >= 0 ){ continue; } // skip ops that explicitly contain !\n        if( op === '=' ){ continue; } // skip = b/c != is explicitly defined\n\n        tokens.comparatorOp += '|\\\\!' + op;\n      }\n\n      // NOTE: add new expression syntax here to have it recognised by the parser;\n      // - a query contains all adjacent (i.e. no separator in between) expressions;\n      // - the current query is stored in self[i] --- you can use the reference to `this` in the populate function;\n      // - you need to check the query objects in Selector.filter() for it actually filter properly, but that's pretty straight forward\n      // - when you add something here, also add to Selector.toString()\n      var exprs = [\n        {\n          name: 'group',\n          query: true,\n          regex: '(node|edge|\\\\*)',\n          populate: function( group ){\n            this.group = group == \"*\" ? group : group + 's';\n          }\n        },\n\n        {\n          name: 'state',\n          query: true,\n          // NB: if one colon selector is a substring of another from its start, place the longer one first\n          // e.g. :foobar|:foo\n          regex: '(:selected|:unselected|:locked|:unlocked|:visible|:hidden|:transparent|:grabbed|:free|:removed|:inside|:grabbable|:ungrabbable|:animated|:unanimated|:selectable|:unselectable|:orphan|:nonorphan|:parent|:child|:loop|:simple|:active|:inactive|:touch|:backgrounding|:nonbackgrounding)',\n          populate: function( state ){\n            this.colonSelectors.push( state );\n          }\n        },\n\n        {\n          name: 'id',\n          query: true,\n          regex: '\\\\#('+ tokens.id +')',\n          populate: function( id ){\n            this.ids.push( cleanMetaChars(id) );\n          }\n        },\n\n        {\n          name: 'className',\n          query: true,\n          regex: '\\\\.('+ tokens.className +')',\n          populate: function( className ){\n            this.classes.push( cleanMetaChars(className) );\n          }\n        },\n\n        {\n          name: 'dataExists',\n          query: true,\n          regex: '\\\\[\\\\s*('+ tokens.variable +')\\\\s*\\\\]',\n          populate: function( variable ){\n            this.data.push({\n              field: cleanMetaChars(variable)\n            });\n          }\n        },\n\n        {\n          name: 'dataCompare',\n          query: true,\n          regex: '\\\\[\\\\s*('+ tokens.variable +')\\\\s*('+ tokens.comparatorOp +')\\\\s*('+ tokens.value +')\\\\s*\\\\]',\n          populate: function( variable, comparatorOp, value ){\n            var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;\n\n            if( valueIsString ){\n              value = value.substring(1, value.length - 1);\n            } else {\n              value = parseFloat(value);\n            }\n\n            this.data.push({\n              field: cleanMetaChars(variable),\n              operator: comparatorOp,\n              value: value\n            });\n          }\n        },\n\n        {\n          name: 'dataBool',\n          query: true,\n          regex: '\\\\[\\\\s*('+ tokens.boolOp +')\\\\s*('+ tokens.variable +')\\\\s*\\\\]',\n          populate: function( boolOp, variable ){\n            this.data.push({\n              field: cleanMetaChars(variable),\n              operator: boolOp\n            });\n          }\n        },\n\n        {\n          name: 'metaCompare',\n          query: true,\n          regex: '\\\\[\\\\[\\\\s*('+ tokens.meta +')\\\\s*('+ tokens.comparatorOp +')\\\\s*('+ tokens.number +')\\\\s*\\\\]\\\\]',\n          populate: function( meta, comparatorOp, number ){\n            this.meta.push({\n              field: cleanMetaChars(meta),\n              operator: comparatorOp,\n              value: parseFloat(number)\n            });\n          }\n        },\n\n        {\n          name: 'nextQuery',\n          separator: true,\n          regex: tokens.separator,\n          populate: function(){\n            // go on to next query\n            self[++i] = newQuery();\n            currentSubject = null;\n          }\n        },\n\n        {\n          name: 'child',\n          separator: true,\n          regex: tokens.child,\n          populate: function(){\n            // this query is the parent of the following query\n            var childQuery = newQuery();\n            childQuery.parent = this;\n            childQuery.subject = currentSubject;\n\n            // we're now populating the child query with expressions that follow\n            self[i] = childQuery;\n          }\n        },\n\n        {\n          name: 'descendant',\n          separator: true,\n          regex: tokens.descendant,\n          populate: function(){\n            // this query is the ancestor of the following query\n            var descendantQuery = newQuery();\n            descendantQuery.ancestor = this;\n            descendantQuery.subject = currentSubject;\n\n            // we're now populating the descendant query with expressions that follow\n            self[i] = descendantQuery;\n          }\n        },\n\n        {\n          name: 'subject',\n          modifier: true,\n          regex: tokens.subject,\n          populate: function(){\n            if( currentSubject != null && this.subject != this ){\n              $$.util.error('Redefinition of subject in selector `' + selector + '`');\n              return false;\n            }\n\n            currentSubject = this;\n            this.subject = this;\n          }\n\n        }\n      ];\n\n      self._private.selectorText = selector;\n      var remaining = selector;\n      var i = 0;\n\n      // of all the expressions, find the first match in the remaining text\n      var consumeExpr = function( expectation ){\n        var expr;\n        var match;\n        var name;\n\n        for( var j = 0; j < exprs.length; j++ ){\n          var e = exprs[j];\n          var n = e.name;\n\n          // ignore this expression if it doesn't meet the expectation function\n          if( $$.is.fn( expectation ) && !expectation(n, e) ){ continue; }\n\n          var m = remaining.match(new RegExp( '^' + e.regex ));\n\n          if( m != null ){\n            match = m;\n            expr = e;\n            name = n;\n\n            var consumed = m[0];\n            remaining = remaining.substring( consumed.length );\n\n            break; // we've consumed one expr, so we can return now\n          }\n        }\n\n        return {\n          expr: expr,\n          match: match,\n          name: name\n        };\n      };\n\n      // consume all leading whitespace\n      var consumeWhitespace = function(){\n        var match = remaining.match(/^\\s+/);\n\n        if( match ){\n          var consumed = match[0];\n          remaining = remaining.substring( consumed.length );\n        }\n      };\n\n      self[0] = newQuery(); // get started\n\n      consumeWhitespace(); // get rid of leading whitespace\n      for(;;){\n        var check = consumeExpr();\n\n        if( check.expr == null ){\n          $$.util.error('The selector `'+ selector +'`is invalid');\n          return;\n        } else {\n          var args = [];\n          for(var j = 1; j < check.match.length; j++){\n            args.push( check.match[j] );\n          }\n\n          // let the token populate the selector object (i.e. in self[i])\n          var ret = check.expr.populate.apply( self[i], args );\n\n          if( ret === false ){ return; } // exit if population failed\n        }\n\n        // we're done when there's nothing left to parse\n        if( remaining.match(/^\\s*$/) ){\n          break;\n        }\n      }\n\n      self.length = i + 1;\n\n      // adjust references for subject\n      for(var j = 0; j < self.length; j++){\n        var query = self[j];\n\n        if( query.subject != null ){\n          // go up the tree until we reach the subject\n          for(;;){\n            if( query.subject == query ){ break; } // done if subject is self\n\n            if( query.parent != null ){ // swap parent/child reference\n              var parent = query.parent;\n              var child = query;\n\n              child.parent = null;\n              parent.child = child;\n\n              query = parent; // go up the tree\n            } else if( query.ancestor != null ){ // swap ancestor/descendant\n              var ancestor = query.ancestor;\n              var descendant = query;\n\n              descendant.ancestor = null;\n              ancestor.descendant = descendant;\n\n              query = ancestor; // go up the tree\n            } else {\n              $$.util.error('When adjusting references for the selector `'+ query +'`, neither parent nor ancestor was found');\n              break;\n            }\n          } // for\n\n          self[j] = query.subject; // subject should be the root query\n        } // if\n      } // for\n\n      // make sure for each query that the subject group matches the implicit group if any\n      if( onlyThisGroup != null ){\n        for(var j = 0; j < self.length; j++){\n          if( self[j].group != null && self[j].group != onlyThisGroup ){\n            $$.util.error('Group `'+ self[j].group +'` conflicts with implicit group `'+ onlyThisGroup +'` in selector `'+ selector +'`');\n            return;\n          }\n\n          self[j].group = onlyThisGroup; // set to implicit group\n        }\n      }\n\n    } else {\n      $$.util.error('A selector must be created from a string; found ' + selector);\n      return;\n    }\n\n    self._private.invalid = false;\n\n  };\n\n  $$.selfn = $$.Selector.prototype;\n\n  $$.selfn.size = function(){\n    return this.length;\n  };\n\n  $$.selfn.eq = function(i){\n    return this[i];\n  };\n\n  // get elements from the core and then filter them\n  $$.selfn.find = function(){\n    // TODO impl if we decide to use a DB for storing elements\n  };\n\n  var queryMatches = function(query, element){\n    // check group\n    if( query.group != null && query.group != '*' && query.group != element._private.group ){\n      return false;\n    }\n\n    var cy = element.cy();\n\n    // check colon selectors\n    var allColonSelectorsMatch = true;\n    for(var k = 0; k < query.colonSelectors.length; k++){\n      var sel = query.colonSelectors[k];\n\n      switch(sel){\n      case ':selected':\n        allColonSelectorsMatch = element.selected();\n        break;\n      case ':unselected':\n        allColonSelectorsMatch = !element.selected();\n        break;\n      case ':selectable':\n        allColonSelectorsMatch = element.selectable();\n        break;\n      case ':unselectable':\n        allColonSelectorsMatch = !element.selectable();\n        break;\n      case ':locked':\n        allColonSelectorsMatch = element.locked();\n        break;\n      case ':unlocked':\n        allColonSelectorsMatch = !element.locked();\n        break;\n      case ':visible':\n        allColonSelectorsMatch = element.visible();\n        break;\n      case ':hidden':\n        allColonSelectorsMatch = !element.visible();\n        break;\n      case ':transparent':\n        allColonSelectorsMatch = element.transparent();\n        break;\n      case ':grabbed':\n        allColonSelectorsMatch = element.grabbed();\n        break;\n      case ':free':\n        allColonSelectorsMatch = !element.grabbed();\n        break;\n      case ':removed':\n        allColonSelectorsMatch = element.removed();\n        break;\n      case ':inside':\n        allColonSelectorsMatch = !element.removed();\n        break;\n      case ':grabbable':\n        allColonSelectorsMatch = element.grabbable();\n        break;\n      case ':ungrabbable':\n        allColonSelectorsMatch = !element.grabbable();\n        break;\n      case ':animated':\n        allColonSelectorsMatch = element.animated();\n        break;\n      case ':unanimated':\n        allColonSelectorsMatch = !element.animated();\n        break;\n      case ':parent':\n        allColonSelectorsMatch = element.isNode() && element.children().nonempty();\n        break;\n      case ':child':\n      case ':nonorphan':\n        allColonSelectorsMatch = element.isNode() && element.parent().nonempty();\n        break;\n      case ':orphan':\n        allColonSelectorsMatch = element.isNode() && element.parent().empty();\n        break;\n      case ':loop':\n        allColonSelectorsMatch = element.isEdge() && element.data('source') === element.data('target');\n        break;\n      case ':simple':\n        allColonSelectorsMatch = element.isEdge() && element.data('source') !== element.data('target');\n        break;\n      case ':active':\n        allColonSelectorsMatch = element.active();\n        break;\n      case ':inactive':\n        allColonSelectorsMatch = !element.active();\n        break;\n      case ':touch':\n        allColonSelectorsMatch = $$.is.touch();\n        break;\n      case ':backgrounding':\n        allColonSelectorsMatch = element.backgrounding();\n        break;\n      case ':nonbackgrounding':\n        allColonSelectorsMatch = !element.backgrounding();\n        break;\n      }\n\n      if( !allColonSelectorsMatch ) break;\n    }\n    if( !allColonSelectorsMatch ) return false;\n\n    // check id\n    var allIdsMatch = true;\n    for(var k = 0; k < query.ids.length; k++){\n      var id = query.ids[k];\n      var actualId = element._private.data.id;\n\n      allIdsMatch = allIdsMatch && (id == actualId);\n\n      if( !allIdsMatch ) break;\n    }\n    if( !allIdsMatch ) return false;\n\n    // check classes\n    var allClassesMatch = true;\n    for(var k = 0; k < query.classes.length; k++){\n      var cls = query.classes[k];\n\n      allClassesMatch = allClassesMatch && element.hasClass(cls);\n\n      if( !allClassesMatch ) break;\n    }\n    if( !allClassesMatch ) return false;\n\n    // generic checking for data/metadata\n    var operandsMatch = function(params){\n      var allDataMatches = true;\n      for(var k = 0; k < query[params.name].length; k++){\n        var data = query[params.name][k];\n        var operator = data.operator;\n        var value = data.value;\n        var field = data.field;\n        var matches;\n\n        if( operator != null && value != null ){\n\n          var fieldVal = params.fieldValue(field);\n          var fieldStr = !$$.is.string(fieldVal) && !$$.is.number(fieldVal) ? '' : '' + fieldVal;\n          var valStr = '' + value;\n\n          var caseInsensitive = false;\n          if( operator.indexOf('@') >= 0 ){\n            fieldStr = fieldStr.toLowerCase();\n            valStr = valStr.toLowerCase();\n\n            operator = operator.replace('@', '');\n            caseInsensitive = true;\n          }\n\n          var notExpr = false;\n          var handledNotExpr = false;\n          if( operator.indexOf('!') >= 0 ){\n            operator = operator.replace('!', '');\n            notExpr = true;\n          }\n\n          // if we're doing a case insensitive comparison, then we're using a STRING comparison\n          // even if we're comparing numbers\n          if( caseInsensitive ){\n            value = valStr.toLowerCase();\n            fieldVal = fieldStr.toLowerCase();\n          }\n\n          switch(operator){\n          case '*=':\n            matches = fieldStr.search(valStr) >= 0;\n            break;\n          case '$=':\n            matches = new RegExp(valStr + '$').exec(fieldStr) != null;\n            break;\n          case '^=':\n            matches = new RegExp('^' + valStr).exec(fieldStr) != null;\n            break;\n          case '=':\n            matches = fieldVal === value;\n            break;\n          case '!=':\n            matches = fieldVal !== value;\n            break;\n          case '>':\n            matches = !notExpr ? fieldVal > value : fieldVal <= value;\n            handledNotExpr = true;\n            break;\n          case '>=':\n            matches = !notExpr ? fieldVal >= value : fieldVal < value;\n            handledNotExpr = true;\n            break;\n          case '<':\n            matches = !notExpr ? fieldVal < value : fieldVal >= value;\n            handledNotExpr = true;\n            break;\n          case '<=':\n            matches = !notExpr ? fieldVal <= value : fieldVal > value;\n            handledNotExpr = true;\n            break;\n          default:\n            matches = false;\n            break;\n\n          }\n        } else if( operator != null ){\n          switch(operator){\n          case '?':\n            matches = params.fieldTruthy(field);\n            break;\n          case '!':\n            matches = !params.fieldTruthy(field);\n            break;\n          case '^':\n            matches = params.fieldUndefined(field);\n            break;\n          }\n        } else {\n          matches = !params.fieldUndefined(field);\n        }\n\n        if( notExpr && !handledNotExpr ){\n          matches = !matches;\n          handledNotExpr = true;\n        }\n\n        if( !matches ){\n          allDataMatches = false;\n          break;\n        }\n      } // for\n\n      return allDataMatches;\n    }; // operandsMatch\n\n    // check data matches\n    var allDataMatches = operandsMatch({\n      name: 'data',\n      fieldValue: function(field){\n        return element._private.data[field];\n      },\n      fieldRef: function(field){\n        return 'element._private.data.' + field;\n      },\n      fieldUndefined: function(field){\n        return element._private.data[field] === undefined;\n      },\n      fieldTruthy: function(field){\n        if( element._private.data[field] ){\n          return true;\n        }\n        return false;\n      }\n    });\n\n    if( !allDataMatches ){\n      return false;\n    }\n\n    // check metadata matches\n    var allMetaMatches = operandsMatch({\n      name: 'meta',\n      fieldValue: function(field){\n        return element[field]();\n      },\n      fieldRef: function(field){\n        return 'element.' + field + '()';\n      },\n      fieldUndefined: function(field){\n        return element[field]() == null;\n      },\n      fieldTruthy: function(field){\n        if( element[field]() ){\n          return true;\n        }\n        return false;\n      }\n    });\n\n    if( !allMetaMatches ){\n      return false;\n    }\n\n    // check collection\n    if( query.collection != null ){\n      var matchesAny = query.collection._private.ids[ element.id() ] != null;\n\n      if( !matchesAny ){\n        return false;\n      }\n    }\n\n    // check filter function\n    if( query.filter != null && element.collection().filter( query.filter ).size() === 0 ){\n      return false;\n    }\n\n\n    // check parent/child relations\n    var confirmRelations = function( query, elements ){\n      if( query != null ){\n        var matches = false;\n\n        if( !cy.hasCompoundNodes() ){\n          return false;\n        }\n\n        elements = elements(); // make elements functional so we save cycles if query == null\n\n        // query must match for at least one element (may be recursive)\n        for(var i = 0; i < elements.length; i++){\n          if( queryMatches( query, elements[i] ) ){\n            matches = true;\n            break;\n          }\n        }\n\n        return matches;\n      } else {\n        return true;\n      }\n    };\n\n    if (! confirmRelations(query.parent, function(){\n      return element.parent();\n    }) ){ return false; }\n\n    if (! confirmRelations(query.ancestor, function(){\n      return element.parents();\n    }) ){ return false; }\n\n    if (! confirmRelations(query.child, function(){\n      return element.children();\n    }) ){ return false; }\n\n    if (! confirmRelations(query.descendant, function(){\n      return element.descendants();\n    }) ){ return false; }\n\n    // we've reached the end, so we've matched everything for this query\n    return true;\n  }; // queryMatches\n\n  // filter an existing collection\n  $$.selfn.filter = function(collection){\n    var self = this;\n    var cy = collection.cy();\n\n    // don't bother trying if it's invalid\n    if( self._private.invalid ){\n      return new $$.Collection( cy );\n    }\n\n    var selectorFunction = function(i, element){\n      for(var j = 0; j < self.length; j++){\n        var query = self[j];\n\n        if( queryMatches(query, element) ){\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    if( self._private.selectorText == null ){\n      selectorFunction = function(){ return true; };\n    }\n\n    var filteredCollection = collection.filter( selectorFunction );\n\n    return filteredCollection;\n  }; // filter\n\n  // does selector match a single element?\n  $$.selfn.matches = function(ele){\n    var self = this;\n\n    // don't bother trying if it's invalid\n    if( self._private.invalid ){\n      return false;\n    }\n\n    for(var j = 0; j < self.length; j++){\n      var query = self[j];\n\n      if( queryMatches(query, ele) ){\n        return true;\n      }\n    }\n\n    return false;\n  }; // filter\n\n  // ith query to string\n  $$.selfn.toString = $$.selfn.selector = function(){\n\n    var str = '';\n\n    var clean = function(obj, isValue){\n      if( $$.is.string(obj) ){\n        return isValue ? '\"' + obj + '\"' : obj;\n      }\n      return '';\n    };\n\n    var queryToString = function(query){\n      var str = '';\n\n      if( query.subject === query ){\n        str += '$';\n      }\n\n      var group = clean(query.group);\n      str += group.substring(0, group.length - 1);\n\n      for(var j = 0; j < query.data.length; j++){\n        var data = query.data[j];\n\n        if( data.value ){\n          str += '[' + data.field + clean(data.operator) + clean(data.value, true) + ']';\n        } else {\n          str += '[' + clean(data.operator) + data.field + ']';\n        }\n      }\n\n      for(var j = 0; j < query.meta.length; j++){\n        var meta = query.meta[j];\n        str += '[[' + meta.field + clean(meta.operator) + clean(meta.value, true) + ']]';\n      }\n\n      for(var j = 0; j < query.colonSelectors.length; j++){\n        var sel = query.colonSelectors[i];\n        str += sel;\n      }\n\n      for(var j = 0; j < query.ids.length; j++){\n        var sel = '#' + query.ids[i];\n        str += sel;\n      }\n\n      for(var j = 0; j < query.classes.length; j++){\n        var sel = '.' + query.classes[i];\n        str += sel;\n      }\n\n      if( query.parent != null ){\n        str = queryToString( query.parent ) + ' > ' + str;\n      }\n\n      if( query.ancestor != null ){\n        str = queryToString( query.ancestor ) + ' ' + str;\n      }\n\n      if( query.child != null ){\n        str += ' > ' + queryToString( query.child );\n      }\n\n      if( query.descendant != null ){\n        str += ' ' + queryToString( query.descendant );\n      }\n\n      return str;\n    };\n\n    for(var i = 0; i < this.length; i++){\n      var query = this[i];\n\n      str += queryToString( query );\n\n      if( this.length > 1 && i < this.length - 1 ){\n        str += ', ';\n      }\n    }\n\n    return str;\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.Style = function( cy ){\n\n    if( !(this instanceof $$.Style) ){\n      return new $$.Style(cy);\n    }\n\n    if( !$$.is.core(cy) ){\n      $$.util.error('A style must have a core reference');\n      return;\n    }\n\n    this._private = {\n      cy: cy,\n      coreStyle: {},\n      newStyle: true\n    };\n\n    this.length = 0;\n\n    this.addDefaultStylesheet();\n  };\n\n  // nice-to-have aliases\n  $$.style = $$.Style;\n  $$.styfn = $$.Style.prototype;\n\n  // define functions in the Style prototype\n  $$.fn.style = function( fnMap, options ){\n    for( var fnName in fnMap ){\n      var fn = fnMap[ fnName ];\n      $$.Style.prototype = fn;\n    }\n  };\n\n  (function(){\n    var number = $$.util.regex.number;\n    var rgba = $$.util.regex.rgbaNoBackRefs;\n    var hsla = $$.util.regex.hslaNoBackRefs;\n    var hex3 = $$.util.regex.hex3;\n    var hex6 = $$.util.regex.hex6;\n    var data = function( prefix ){ return '^' + prefix + '\\\\s*\\\\(\\\\s*([\\\\w\\\\.]+)\\\\s*\\\\)$'; };\n    var mapData = function( prefix ){ return '^' + prefix + '\\\\s*\\\\(([\\\\w\\\\.]+)\\\\s*\\\\,\\\\s*(' + number + ')\\\\s*\\\\,\\\\s*(' + number + ')\\\\s*,\\\\s*(' + number + '|\\\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6 + ')\\\\s*\\\\,\\\\s*(' + number + '|\\\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6 + ')\\\\)$'; };\n\n    // each visual style property has a type and needs to be validated according to it\n    $$.style.types = {\n      time: { number: true, min: 0, units: 's|ms', implicitUnits: 'ms' },\n      percent: { number: true, min: 0, max: 100, units: '%' },\n      zeroOneNumber: { number: true, min: 0, max: 1, unitless: true },\n      nOneOneNumber: { number: true, min: -1, max: 1, unitless: true },\n      nonNegativeInt: { number: true, min: 0, integer: true, unitless: true },\n      position: { enums: ['parent', 'origin'] },\n      autoSize: { number: true, min: 0, enums: ['auto'] },\n      number: { number: true },\n      size: { number: true, min: 0 },\n      bgSize: { number: true, min: 0, allowPercent: true },\n      bgWH: { number: true, min: 0, allowPercent: true, enums: ['auto'] },\n      bgPos: { number: true, allowPercent: true },\n      bgRepeat: { enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'] },\n      bgFit: { enums: ['none', 'contain', 'cover'] },\n      bgClip: { enums: ['none', 'node'] },\n      color: { color: true },\n      lineStyle: { enums: ['solid', 'dotted', 'dashed'] },\n      borderStyle: { enums: ['solid', 'dotted', 'dashed', 'double'] },\n      curveStyle: { enums: ['bezier', 'unbundled-bezier', 'haystack'] },\n      fontFamily: { regex: '^([\\\\w- \\\\\"]+(?:\\\\s*,\\\\s*[\\\\w- \\\\\"]+)*)$' },\n      fontVariant: { enums: ['small-caps', 'normal'] },\n      fontStyle: { enums: ['italic', 'normal', 'oblique'] },\n      fontWeight: { enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900] },\n      textDecoration: { enums: ['none', 'underline', 'overline', 'line-through'] },\n      textTransform: { enums: ['none', 'uppercase', 'lowercase'] },\n      textWrap: { enums: ['none', 'wrap'] },\n      textBackgroundShape: { enums: ['rectangle', 'roundrectangle']},\n      nodeShape: { enums: ['rectangle', 'roundrectangle', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'heptagon', 'octagon', 'star', 'diamond', 'vee', 'rhomboid'] },\n      compoundIncludeLabels: { enums: ['include', 'exclude'] },\n      arrowShape: { enums: ['tee', 'triangle', 'triangle-tee', 'triangle-backcurve', 'half-triangle-overshot', 'square', 'circle', 'diamond', 'none'] },\n      arrowFill: { enums: ['filled', 'hollow'] },\n      display: { enums: ['element', 'none'] },\n      visibility: { enums: ['hidden', 'visible'] },\n      valign: { enums: ['top', 'center', 'bottom'] },\n      halign: { enums: ['left', 'center', 'right'] },\n      text: { string: true },\n      data: { mapping: true, regex: data('data') },\n      layoutData: { mapping: true, regex: data('layoutData') },\n      scratch: { mapping: true, regex: data('scratch') },\n      mapData: { mapping: true, regex: mapData('mapData') },\n      mapLayoutData: { mapping: true, regex: mapData('mapLayoutData') },\n      mapScratch: { mapping: true, regex: mapData('mapScratch') },\n      fn: { mapping: true, fn: true },\n      url: { regex: '^url\\\\s*\\\\(\\\\s*([^\\\\s]+)\\\\s*\\\\s*\\\\)|none|(.+)$' },\n      propList: { propList: true },\n      angle: { number: true, units: 'deg|rad' },\n      textRotation: { enums: ['none', 'autorotate'] }\n    };\n\n    // define visual style properties\n    var t = $$.style.types;\n    var props = $$.style.properties = [\n      // labels\n      { name: 'text-valign', type: t.valign },\n      { name: 'text-halign', type: t.halign },\n      { name: 'color', type: t.color },\n      { name: 'content', type: t.text },\n      { name: 'text-outline-color', type: t.color },\n      { name: 'text-outline-width', type: t.size },\n      { name: 'text-outline-opacity', type: t.zeroOneNumber },\n      { name: 'text-opacity', type: t.zeroOneNumber },\n      { name: 'text-background-color', type: t.color },\n      { name: 'text-background-opacity', type: t.zeroOneNumber },\n      { name: 'text-border-opacity', type: t.zeroOneNumber },\n      { name: 'text-border-color', type: t.color },\n      { name: 'text-border-width', type: t.size },\n      { name: 'text-border-style', type: t.borderStyle },\n      { name: 'text-background-shape', type: t.textBackgroundShape},\n      // { name: 'text-decoration', type: t.textDecoration }, // not supported in canvas\n      { name: 'text-transform', type: t.textTransform },\n      { name: 'text-wrap', type: t.textWrap },\n      { name: 'text-max-width', type: t.size },\n\n      // { name: 'text-rotation', type: t.angle }, // TODO disabled b/c rotation breaks bounding boxes\n      { name: 'font-family', type: t.fontFamily },\n      { name: 'font-style', type: t.fontStyle },\n      // { name: 'font-variant', type: t.fontVariant }, // not useful\n      { name: 'font-weight', type: t.fontWeight },\n      { name: 'font-size', type: t.size },\n      { name: 'min-zoomed-font-size', type: t.size },\n      { name: 'edge-text-rotation', type: t.textRotation },\n\n      // visibility\n      { name: 'display', type: t.display },\n      { name: 'visibility', type: t.visibility },\n      { name: 'opacity', type: t.zeroOneNumber },\n      { name: 'z-index', type: t.nonNegativeInt },\n\n      // overlays\n      { name: 'overlay-padding', type: t.size },\n      { name: 'overlay-color', type: t.color },\n      { name: 'overlay-opacity', type: t.zeroOneNumber },\n\n      // shadows\n      { name: 'shadow-blur', type: t.size },\n      { name: 'shadow-color', type: t.color },\n      { name: 'shadow-opacity', type: t.zeroOneNumber },\n      { name: 'shadow-offset-x', type: t.number },\n      { name: 'shadow-offset-y', type: t.number },\n\n      // label shadows\n      { name: 'text-shadow-blur', type: t.size },\n      { name: 'text-shadow-color', type: t.color },\n      { name: 'text-shadow-opacity', type: t.zeroOneNumber },\n      { name: 'text-shadow-offset-x', type: t.number },\n      { name: 'text-shadow-offset-y', type: t.number },\n\n      // transition anis\n      { name: 'transition-property', type: t.propList },\n      { name: 'transition-duration', type: t.time },\n      { name: 'transition-delay', type: t.time },\n\n      // node body\n      { name: 'height', type: t.autoSize },\n      { name: 'width', type: t.autoSize },\n      { name: 'shape', type: t.nodeShape },\n      { name: 'background-color', type: t.color },\n      { name: 'background-opacity', type: t.zeroOneNumber },\n      { name: 'background-blacken', type: t.nOneOneNumber },\n\n      // node border\n      { name: 'border-color', type: t.color },\n      { name: 'border-opacity', type: t.zeroOneNumber },\n      { name: 'border-width', type: t.size },\n      { name: 'border-style', type: t.borderStyle },\n\n      // node background images\n      { name: 'background-image', type: t.url },\n      { name: 'background-image-opacity', type: t.zeroOneNumber },\n      { name: 'background-position-x', type: t.bgPos },\n      { name: 'background-position-y', type: t.bgPos },\n      { name: 'background-repeat', type: t.bgRepeat },\n      { name: 'background-fit', type: t.bgFit },\n      { name: 'background-clip', type: t.bgClip },\n      { name: 'background-width', type: t.bgWH },\n      { name: 'background-height', type: t.bgWH },\n\n      // compound props\n      { name: 'padding-left', type: t.size },\n      { name: 'padding-right', type: t.size },\n      { name: 'padding-top', type: t.size },\n      { name: 'padding-bottom', type: t.size },\n      { name: 'position', type: t.position },\n      { name: 'compound-sizing-wrt-labels', type: t.compoundIncludeLabels },\n\n      // edge line\n      { name: 'line-style', type: t.lineStyle },\n      { name: 'line-color', type: t.color },\n      { name: 'control-point-step-size', type: t.size },\n      { name: 'control-point-distance', type: t.number },\n      { name: 'control-point-weight', type: t.zeroOneNumber },\n      { name: 'curve-style', type: t.curveStyle },\n      { name: 'haystack-radius', type: t.zeroOneNumber },\n\n      // edge arrows\n      { name: 'source-arrow-shape', type: t.arrowShape },\n      { name: 'target-arrow-shape', type: t.arrowShape },\n      { name: 'mid-source-arrow-shape', type: t.arrowShape },\n      { name: 'mid-target-arrow-shape', type: t.arrowShape },\n      { name: 'source-arrow-color', type: t.color },\n      { name: 'target-arrow-color', type: t.color },\n      { name: 'mid-source-arrow-color', type: t.color },\n      { name: 'mid-target-arrow-color', type: t.color },\n      { name: 'source-arrow-fill', type: t.arrowFill },\n      { name: 'target-arrow-fill', type: t.arrowFill },\n      { name: 'mid-source-arrow-fill', type: t.arrowFill },\n      { name: 'mid-target-arrow-fill', type: t.arrowFill },\n\n      // these are just for the core\n      { name: 'selection-box-color', type: t.color },\n      { name: 'selection-box-opacity', type: t.zeroOneNumber },\n      { name: 'selection-box-border-color', type: t.color },\n      { name: 'selection-box-border-width', type: t.size },\n      { name: 'active-bg-color', type: t.color },\n      { name: 'active-bg-opacity', type: t.zeroOneNumber },\n      { name: 'active-bg-size', type: t.size },\n      { name: 'outside-texture-bg-color', type: t.color },\n      { name: 'outside-texture-bg-opacity', type: t.zeroOneNumber }\n    ];\n\n    // pie backgrounds for nodes\n    $$.style.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)\n    props.push({ name: 'pie-size', type: t.bgSize });\n    for( var i = 1; i <= $$.style.pieBackgroundN; i++ ){\n      props.push({ name: 'pie-'+i+'-background-color', type: t.color });\n      props.push({ name: 'pie-'+i+'-background-size', type: t.percent });\n      props.push({ name: 'pie-'+i+'-background-opacity', type: t.zeroOneNumber });\n    }\n\n    // allow access of properties by name ( e.g. $$.style.properties.height )\n    for( var i = 0; i < props.length; i++ ){\n      var prop = props[i];\n\n      props[ prop.name ] = prop; // allow lookup by name\n    }\n  })();\n\n  // adds the default stylesheet to the current style\n  $$.styfn.addDefaultStylesheet = function(){\n    // to be nice, we build font related style properties from the core container\n    // so that cytoscape matches the style of its container by default\n    //\n    // unfortunately, this doesn't seem work consistently and can grab the default stylesheet values\n    // instead of the developer's values so let's just make it explicit for the dev for now\n    //\n    // delaying the read of these val's is not an opt'n: that would delay init'l load time\n    var fontFamily = 'Helvetica' || this.containerPropertyAsString('font-family') || 'sans-serif';\n    var fontStyle = 'normal' || this.containerPropertyAsString('font-style') || 'normal';\n    // var fontVariant = 'normal' || this.containerPropertyAsString('font-variant') || 'normal';\n    var fontWeight = 'normal' || this.containerPropertyAsString('font-weight') || 'normal';\n    var color = '#000' || this.containerPropertyAsString('color') || '#000';\n    var textTransform = 'none' || this.containerPropertyAsString('text-transform') || 'none';\n    var fontSize = 16 || this.containerPropertyAsString('font-size') || 16;\n    var textMaxWidth = 9999 || this.containerPropertyAsString('text-max-width') || 9999;\n\n    // fill the style with the default stylesheet\n    this\n      .selector('node, edge') // common properties\n        .css({\n          'text-valign': 'top',\n          'text-halign': 'center',\n          'color': color,\n          'text-outline-color': '#000',\n          'text-outline-width': 0,\n          'text-outline-opacity': 1,\n          'text-opacity': 1,\n          'text-decoration': 'none',\n          'text-transform': textTransform,\n          'text-wrap': 'none',\n          'text-max-width': textMaxWidth,\n          'text-background-color': '#000',\n          'text-background-opacity': 0,\n          'text-border-opacity': 0,\n          'text-border-width': 0,\n          'text-border-style': 'solid',\n          'text-border-color':'#000',\n          'text-background-shape':'rectangle',\n          'font-family': fontFamily,\n          'font-style': fontStyle,\n          // 'font-variant': fontVariant,\n          'font-weight': fontWeight,\n          'font-size': fontSize,\n          'min-zoomed-font-size': 0,\n          'edge-text-rotation': 'none',\n          'visibility': 'visible',\n          'display': 'element',\n          'opacity': 1,\n          'z-index': 0,\n          'content': '',\n          'overlay-opacity': 0,\n          'overlay-color': '#000',\n          'overlay-padding': 10,\n          'shadow-opacity': 0,\n          'shadow-color': '#000',\n          'shadow-blur': 10,\n          'shadow-offset-x': 0,\n          'shadow-offset-y': 0,\n          'text-shadow-opacity': 0,\n          'text-shadow-color': '#000',\n          'text-shadow-blur': 5,\n          'text-shadow-offset-x': 0,\n          'text-shadow-offset-y': 0,\n          'transition-property': 'none',\n          'transition-duration': 0,\n          'transition-delay': 0,\n\n          // node props\n          'background-blacken': 0,\n          'background-color': '#888',\n          'background-opacity': 1,\n          'background-image': 'none',\n          'background-image-opacity': 1,\n          'background-position-x': '50%',\n          'background-position-y': '50%',\n          'background-repeat': 'no-repeat',\n          'background-fit': 'none',\n          'background-clip': 'node',\n          'background-width': 'auto',\n          'background-height': 'auto',\n          'border-color': '#000',\n          'border-opacity': 1,\n          'border-width': 0,\n          'border-style': 'solid',\n          'height': 30,\n          'width': 30,\n          'shape': 'ellipse',\n\n          // compound props\n          'padding-top': 0,\n          'padding-bottom': 0,\n          'padding-left': 0,\n          'padding-right': 0,\n          'position': 'origin',\n          'compound-sizing-wrt-labels': 'include',\n\n\n          // node pie bg\n          'pie-size': '100%',\n          'pie-1-background-color': 'black',\n          'pie-2-background-color': 'black',\n          'pie-3-background-color': 'black',\n          'pie-4-background-color': 'black',\n          'pie-5-background-color': 'black',\n          'pie-6-background-color': 'black',\n          'pie-7-background-color': 'black',\n          'pie-8-background-color': 'black',\n          'pie-9-background-color': 'black',\n          'pie-10-background-color': 'black',\n          'pie-11-background-color': 'black',\n          'pie-12-background-color': 'black',\n          'pie-13-background-color': 'black',\n          'pie-14-background-color': 'black',\n          'pie-15-background-color': 'black',\n          'pie-16-background-color': 'black',\n          'pie-1-background-size': '0%',\n          'pie-2-background-size': '0%',\n          'pie-3-background-size': '0%',\n          'pie-4-background-size': '0%',\n          'pie-5-background-size': '0%',\n          'pie-6-background-size': '0%',\n          'pie-7-background-size': '0%',\n          'pie-8-background-size': '0%',\n          'pie-9-background-size': '0%',\n          'pie-10-background-size': '0%',\n          'pie-11-background-size': '0%',\n          'pie-12-background-size': '0%',\n          'pie-13-background-size': '0%',\n          'pie-14-background-size': '0%',\n          'pie-15-background-size': '0%',\n          'pie-16-background-size': '0%',\n          'pie-1-background-opacity': 1,\n          'pie-2-background-opacity': 1,\n          'pie-3-background-opacity': 1,\n          'pie-4-background-opacity': 1,\n          'pie-5-background-opacity': 1,\n          'pie-6-background-opacity': 1,\n          'pie-7-background-opacity': 1,\n          'pie-8-background-opacity': 1,\n          'pie-9-background-opacity': 1,\n          'pie-10-background-opacity': 1,\n          'pie-11-background-opacity': 1,\n          'pie-12-background-opacity': 1,\n          'pie-13-background-opacity': 1,\n          'pie-14-background-opacity': 1,\n          'pie-15-background-opacity': 1,\n          'pie-16-background-opacity': 1,\n\n          // edge props\n          'source-arrow-shape': 'none',\n          'mid-source-arrow-shape': 'none',\n          'target-arrow-shape': 'none',\n          'mid-target-arrow-shape': 'none',\n          'source-arrow-color': '#ddd',\n          'mid-source-arrow-color': '#ddd',\n          'target-arrow-color': '#ddd',\n          'mid-target-arrow-color': '#ddd',\n          'source-arrow-fill': 'filled',\n          'mid-source-arrow-fill': 'filled',\n          'target-arrow-fill': 'filled',\n          'mid-target-arrow-fill': 'filled',\n          'line-style': 'solid',\n          'line-color': '#ddd',\n          'control-point-step-size': 40,\n          'control-point-weight': 0.5,\n          'curve-style': 'bezier',\n          'haystack-radius': 0.8\n        })\n      .selector('$node > node') // compound (parent) node properties\n        .css({\n          'width': 'auto',\n          'height': 'auto',\n          'shape': 'rectangle',\n          'background-opacity': 0.5,\n          'padding-top': 10,\n          'padding-right': 10,\n          'padding-left': 10,\n          'padding-bottom': 10\n        })\n      .selector('edge') // just edge properties\n        .css({\n          'width': 1\n        })\n      .selector(':active')\n        .css({\n          'overlay-color': 'black',\n          'overlay-padding': 10,\n          'overlay-opacity': 0.25\n        })\n      .selector('core') // just core properties\n        .css({\n          'selection-box-color': '#ddd',\n          'selection-box-opacity': 0.65,\n          'selection-box-border-color': '#aaa',\n          'selection-box-border-width': 1,\n          'active-bg-color': 'black',\n          'active-bg-opacity': 0.15,\n          'active-bg-size': 30,\n          'outside-texture-bg-color': '#000',\n          'outside-texture-bg-opacity': 0.125\n        })\n    ;\n\n    this.defaultLength = this.length;\n  };\n\n  // remove all contexts\n  $$.styfn.clear = function(){\n    for( var i = 0; i < this.length; i++ ){\n      this[i] = undefined;\n    }\n    this.length = 0;\n    this._private.newStyle = true;\n\n    return this; // chaining\n  };\n\n  $$.styfn.resetToDefault = function(){\n    this.clear();\n    this.addDefaultStylesheet();\n\n    return this;\n  };\n\n  // builds a style object for the 'core' selector\n  $$.styfn.core = function(){\n    return this._private.coreStyle;\n  };\n\n  // a caching layer for property parsing\n  $$.styfn.parse = function( name, value, propIsBypass, propIsFlat ){\n    var argHash = [ name, value, propIsBypass, propIsFlat ].join('$');\n    var propCache = this.propCache = this.propCache || {};\n    var ret;\n\n    if( !(ret = propCache[argHash]) ){\n      ret = propCache[argHash] = this.parseImpl( name, value, propIsBypass, propIsFlat );\n    }\n\n    // always need a copy since props are mutated later in their lifecycles\n    return $$.util.copy( ret );\n  };\n\n  // parse a property; return null on invalid; return parsed property otherwise\n  // fields :\n  // - name : the name of the property\n  // - value : the parsed, native-typed value of the property\n  // - strValue : a string value that represents the property value in valid css\n  // - bypass : true iff the property is a bypass property\n  $$.styfn.parseImpl = function( name, value, propIsBypass, propIsFlat ){\n\n    name = $$.util.camel2dash( name ); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')\n    var property = $$.style.properties[ name ];\n    var passedValue = value;\n    var types = $$.style.types;\n\n    if( !property ){ return null; } // return null on property of unknown name\n    if( value === undefined || value === null ){ return null; } // can't assign null\n\n    var valueIsString = $$.is.string(value);\n    if( valueIsString ){ // trim the value to make parsing easier\n      value = $$.util.trim( value );\n    }\n\n    var type = property.type;\n    if( !type ){ return null; } // no type, no luck\n\n    // check if bypass is null or empty string (i.e. indication to delete bypass property)\n    if( propIsBypass && (value === '' || value === null) ){\n      return {\n        name: name,\n        value: value,\n        bypass: true,\n        deleteBypass: true\n      };\n    }\n\n    var hasPie = name.match(/pie-(\\d+)-background-size/);\n\n    // check if value is a function used as a mapper\n    if( $$.is.fn(value) ){\n      return {\n        name: name,\n        value: value,\n        strValue: 'fn',\n        mapped: types.fn,\n        bypass: propIsBypass,\n        hasPie: hasPie\n      };\n    }\n\n    // check if value is mapped\n    var data, mapData, layoutData, mapLayoutData, scratch, mapScratch;\n    if( !valueIsString || propIsFlat ){\n      // then don't bother to do the expensive regex checks\n\n    } else if(\n      ( data = new RegExp( types.data.regex ).exec( value ) ) ||\n      ( layoutData = new RegExp( types.layoutData.regex ).exec( value ) ) ||\n      ( scratch = new RegExp( types.scratch.regex ).exec( value ) )\n    ){\n      if( propIsBypass ){ return false; } // mappers not allowed in bypass\n\n      var mapped;\n      if( data ){\n        mapped = types.data;\n      } else if( layoutData ){\n        mapped = types.layoutData;\n      } else {\n        mapped = types.scratch;\n      }\n\n      data = data || layoutData || scratch;\n\n      return {\n        name: name,\n        value: data,\n        strValue: '' + value,\n        mapped: mapped,\n        field: data[1],\n        bypass: propIsBypass,\n        hasPie: hasPie\n      };\n\n    } else if(\n      ( mapData = new RegExp( types.mapData.regex ).exec( value ) ) ||\n      ( mapLayoutData = new RegExp( types.mapLayoutData.regex ).exec( value ) ) ||\n      ( mapScratch = new RegExp( types.mapScratch.regex ).exec( value ) )\n    ){\n      if( propIsBypass ){ return false; } // mappers not allowed in bypass\n\n      var mapped;\n      if( mapData ){\n        mapped = types.mapData;\n      } else if( mapLayoutData ){\n        mapped = types.mapLayoutData;\n      } else {\n        mapped = types.mapScratch;\n      }\n\n      mapData = mapData || mapLayoutData || mapScratch;\n\n      // we can map only if the type is a colour or a number\n      if( !(type.color || type.number) ){ return false; }\n\n      var valueMin = this.parse( name, mapData[4]); // parse to validate\n      if( !valueMin || valueMin.mapped ){ return false; } // can't be invalid or mapped\n\n      var valueMax = this.parse( name, mapData[5]); // parse to validate\n      if( !valueMax || valueMax.mapped ){ return false; } // can't be invalid or mapped\n\n      // check if valueMin and valueMax are the same\n      if( valueMin.value === valueMax.value ){\n        return false; // can't make much of a mapper without a range\n\n      } else if( type.color ){\n        var c1 = valueMin.value;\n        var c2 = valueMax.value;\n\n        var same = c1[0] === c2[0] // red\n          && c1[1] === c2[1] // green\n          && c1[2] === c2[2] // blue\n          && ( // optional alpha\n            c1[3] === c2[3] // same alpha outright\n            || (\n              (c1[3] == null || c1[3] === 1) // full opacity for colour 1?\n              &&\n              (c2[3] == null || c2[3] === 1) // full opacity for colour 2?\n            )\n          )\n        ;\n\n        if( same ){ return false; } // can't make a mapper without a range\n      }\n\n      return {\n        name: name,\n        value: mapData,\n        strValue: '' + value,\n        mapped: mapped,\n        field: mapData[1],\n        fieldMin: parseFloat( mapData[2] ), // min & max are numeric\n        fieldMax: parseFloat( mapData[3] ),\n        valueMin: valueMin.value,\n        valueMax: valueMax.value,\n        bypass: propIsBypass,\n        hasPie: hasPie\n      };\n    }\n\n    // check the type and return the appropriate object\n    if( type.number ){\n      var units;\n      var implicitUnits = 'px'; // not set => px\n\n      if( type.units ){ // use specified units if set\n        units = type.units;\n      }\n\n      if( type.implicitUnits ){\n        implicitUnits = type.implicitUnits;\n      }\n\n      if( !type.unitless ){\n        if( valueIsString ){\n          var unitsRegex = 'px|em' + (type.allowPercent ? '|\\\\%' : '');\n          if( units ){ unitsRegex = units; } // only allow explicit units if so set\n          var match = value.match( '^(' + $$.util.regex.number + ')(' + unitsRegex + ')?' + '$' );\n\n          if( match ){\n            value = match[1];\n            units = match[2] || implicitUnits;\n          }\n\n        } else if( !units || type.implicitUnits ) {\n          units = implicitUnits; // implicitly px if unspecified\n        }\n      }\n\n      value = parseFloat( value );\n\n      // if not a number and enums not allowed, then the value is invalid\n      if( isNaN(value) && type.enums === undefined ){\n        return null;\n      }\n\n      // check if this number type also accepts special keywords in place of numbers\n      // (i.e. `left`, `auto`, etc)\n      if( isNaN(value) && type.enums !== undefined ){\n        value = passedValue;\n\n        for( var i = 0; i < type.enums.length; i++ ){\n          var en = type.enums[i];\n\n          if( en === value ){\n            return {\n              name: name,\n              value: value,\n              strValue: '' + value,\n              bypass: propIsBypass\n            };\n          }\n        }\n\n        return null; // failed on enum after failing on number\n      }\n\n      // check if value must be an integer\n      if( type.integer && !$$.is.integer(value) ){\n        return null;\n      }\n\n      // check value is within range\n      if( (type.min !== undefined && value < type.min)\n      || (type.max !== undefined && value > type.max)\n      ){\n        return null;\n      }\n\n      var ret = {\n        name: name,\n        value: value,\n        strValue: '' + value + (units ? units : ''),\n        units: units,\n        bypass: propIsBypass,\n        hasPie: hasPie && value != null && value !== 0 && value !== ''\n      };\n\n      // normalise value in pixels\n      if( type.unitless || (units !== 'px' && units !== 'em') ){\n        // then pxValue does not apply\n      } else {\n        ret.pxValue = ( units === 'px' || !units ? (value) : (this.getEmSizeInPixels() * value) );\n      }\n\n      // normalise value in ms\n      if( units === 'ms' || units === 's' ){\n        ret.msValue = units === 'ms' ? value : 1000 * value;\n      }\n\n      return ret;\n\n    } else if( type.propList ) {\n\n      var props = [];\n      var propsStr = '' + value;\n\n      if( propsStr === 'none' ){\n        // leave empty\n\n      } else { // go over each prop\n\n        var propsSplit = propsStr.split(',');\n        for( var i = 0; i < propsSplit.length; i++ ){\n          var propName = $$.util.trim( propsSplit[i] );\n\n          if( $$.style.properties[propName] ){\n            props.push( propName );\n          }\n        }\n\n        if( props.length === 0 ){ return null; }\n\n      }\n\n      return {\n        name: name,\n        value: props,\n        strValue: props.length === 0 ? 'none' : props.join(', '),\n        bypass: propIsBypass\n      };\n\n    } else if( type.color ){\n      var tuple = $$.util.color2tuple( value );\n\n      if( !tuple ){ return null; }\n\n      return {\n        name: name,\n        value: tuple,\n        strValue: '' + value,\n        bypass: propIsBypass\n      };\n\n    } else if( type.enums ){\n      for( var i = 0; i < type.enums.length; i++ ){\n        var en = type.enums[i];\n\n        if( en === value ){\n          return {\n            name: name,\n            value: value,\n            strValue: '' + value,\n            bypass: propIsBypass\n          };\n        }\n      }\n\n      return null;\n\n    } else if( type.regex ){\n      var regex = new RegExp( type.regex ); // make a regex from the type\n      var m = regex.exec( value );\n\n      if( m ){ // regex matches\n        return {\n          name: name,\n          value: m,\n          strValue: '' + value,\n          bypass: propIsBypass\n        };\n      } else { // regex doesn't match\n        return null; // didn't match the regex so the value is bogus\n      }\n\n    } else if( type.string ){\n      // just return\n      return {\n        name: name,\n        value: value,\n        strValue: '' + value,\n        bypass: propIsBypass\n      };\n\n    } else {\n      return null; // not a type we can handle\n    }\n\n  };\n\n  // create a new context from the specified selector string and switch to that context\n  $$.styfn.selector = function( selectorStr ){\n    // 'core' is a special case and does not need a selector\n    var selector = selectorStr === 'core' ? null : new $$.Selector( selectorStr );\n\n    var i = this.length++; // new context means new index\n    this[i] = {\n      selector: selector,\n      properties: [],\n      mappedProperties: [],\n      index: i\n    };\n\n    return this; // chaining\n  };\n\n  // add one or many css rules to the current context\n  $$.styfn.css = function(){\n    var args = arguments;\n\n    switch( args.length ){\n    case 1:\n      var map = args[0];\n\n      for( var i = 0; i < $$.style.properties.length; i++ ){\n        var prop = $$.style.properties[i];\n        var mapVal = map[ prop.name ];\n\n        if( mapVal === undefined ){\n          mapVal = map[ $$.util.dash2camel(prop.name) ];\n        }\n\n        if( mapVal !== undefined ){\n          this.cssRule( prop.name, mapVal );\n        }\n      }\n\n      break;\n\n    case 2:\n      this.cssRule( args[0], args[1] );\n      break;\n\n    default:\n      break; // do nothing if args are invalid\n    }\n\n    return this; // chaining\n  };\n  $$.styfn.style = $$.styfn.css;\n\n  // add a single css rule to the current context\n  $$.styfn.cssRule = function( name, value ){\n    // name-value pair\n    var property = this.parse( name, value );\n\n    // add property to current context if valid\n    if( property ){\n      var i = this.length - 1;\n      this[i].properties.push( property );\n      this[i].properties[ property.name ] = property; // allow access by name as well\n\n      if( property.hasPie ){\n        this._private.hasPie = true;\n      }\n\n      if( property.mapped ){\n        this[i].mappedProperties.push( property );\n      }\n\n      // add to core style if necessary\n      var currentSelectorIsCore = !this[i].selector;\n      if( currentSelectorIsCore ){\n        this._private.coreStyle[ property.name ] = property;\n      }\n    }\n\n    return this; // chaining\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // (potentially expensive calculation)\n  // apply the style to the element based on\n  // - its bypass\n  // - what selectors match it\n  $$.styfn.apply = function( eles ){\n    var self = this;\n\n    if( self._private.newStyle ){ // clear style caches\n      this._private.contextStyles = {};\n      this._private.propDiffs = {};\n    }\n\n    for( var ie = 0; ie < eles.length; ie++ ){\n      var ele = eles[ie];\n      var cxtMeta = self.getContextMeta( ele );\n      var cxtStyle = self.getContextStyle( cxtMeta );\n      var app = self.applyContextStyle( cxtMeta, cxtStyle, ele );\n\n      self.updateTransitions( ele, app.diffProps );\n      self.updateStyleHints( ele );\n\n    } // for elements\n\n    self._private.newStyle = false;\n  };\n\n  $$.styfn.getPropertiesDiff = function( oldCxtKey, newCxtKey ){\n    var self = this;\n    var cache = self._private.propDiffs = self._private.propDiffs || {};\n    var dualCxtKey = oldCxtKey + '-' + newCxtKey;\n    var cachedVal = cache[dualCxtKey];\n\n    if( cachedVal ){\n      return cachedVal;\n    }\n\n    var diffProps = [];\n    var addedProp = {};\n\n    for( var i = 0; i < self.length; i++ ){\n      var cxt = self[i];\n      var oldHasCxt = oldCxtKey[i] === 't';\n      var newHasCxt = newCxtKey[i] === 't';\n      var cxtHasDiffed = oldHasCxt !== newHasCxt;\n      var cxtHasMappedProps = cxt.mappedProperties.length > 0;\n\n      if( cxtHasDiffed || cxtHasMappedProps ){\n        var props;\n\n        if( cxtHasDiffed && cxtHasMappedProps ){\n          props = cxt.properties; // suffices b/c mappedProperties is a subset of properties\n        } else if( cxtHasDiffed ){\n          props = cxt.properties; // need to check them all\n        } else if( cxtHasMappedProps ){\n          props = cxt.mappedProperties; // only need to check mapped\n        }\n\n        for( var j = 0; j < props.length; j++ ){\n          var prop = props[j];\n          var name = prop.name;\n\n          // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter\n          // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result\n          // is cached)\n          var laterCxtOverrides = false;\n          for( var k = i + 1; k < self.length; k++ ){\n            var laterCxt = self[k];\n            var hasLaterCxt = newCxtKey[k] === 't';\n\n            if( !hasLaterCxt ){ continue; } // can't override unless the context is active\n\n            laterCxtOverrides = laterCxt.properties[ prop.name ] != null;\n\n            if( laterCxtOverrides ){ break; } // exit early as long as one later context overrides\n          }\n\n          if( !addedProp[name] && !laterCxtOverrides ){\n            addedProp[name] = true;\n            diffProps.push( name );\n          }\n        } // for props\n      } // if\n\n    } // for contexts\n\n    cache[ dualCxtKey ] = diffProps;\n    return diffProps;\n  };\n\n  $$.styfn.getContextMeta = function( ele ){\n    var self = this;\n    var cxtKey = '';\n    var diffProps;\n    var prevKey = ele._private.styleCxtKey || '';\n\n    if( self._private.newStyle ){\n      prevKey = ''; // since we need to apply all style if a fresh stylesheet\n    }\n\n    // get the cxt key\n    for( var i = 0; i < self.length; i++ ){\n      var context = self[i];\n      var contextSelectorMatches = context.selector && context.selector.matches( ele ); // NB: context.selector may be null for 'core'\n\n      if( contextSelectorMatches ){\n        cxtKey += 't';\n      } else {\n        cxtKey += 'f';\n      }\n    } // for context\n\n    diffProps = self.getPropertiesDiff( prevKey, cxtKey );\n\n    ele._private.styleCxtKey = cxtKey;\n\n    return {\n      key: cxtKey,\n      diffPropNames: diffProps\n    };\n  };\n\n  // gets a computed ele style object based on matched contexts\n  $$.styfn.getContextStyle = function( cxtMeta ){\n    var cxtKey = cxtMeta.key;\n    var self = this;\n    var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};\n\n    // if already computed style, returned cached copy\n    if( cxtStyles[cxtKey] ){ return cxtStyles[cxtKey]; }\n\n    var style = {\n      _private: {\n        key: cxtKey\n      }\n    };\n\n    for( var i = 0; i < self.length; i++ ){\n      var cxt = self[i];\n      var hasCxt = cxtKey[i] === 't';\n\n      if( !hasCxt ){ continue; }\n\n      for( var j = 0; j < cxt.properties.length; j++ ){\n        var prop = cxt.properties[j];\n        var styProp = style[ prop.name ] = prop;\n\n        styProp.context = cxt;\n      }\n    }\n\n    cxtStyles[cxtKey] = style;\n    return style;\n  };\n\n  $$.styfn.applyContextStyle = function( cxtMeta, cxtStyle, ele ){\n    var self = this;\n    var diffProps = cxtMeta.diffPropNames;\n    var retDiffProps = {};\n\n    for( var i = 0; i < diffProps.length; i++ ){\n      var diffPropName = diffProps[i];\n      var cxtProp = cxtStyle[ diffPropName ];\n      var eleProp = ele._private.style[ diffPropName ];\n\n      // save cycles when the context prop doesn't need to be applied\n      if( !cxtProp || eleProp === cxtProp ){ continue; }\n\n      var retDiffProp = retDiffProps[ diffPropName ] = {\n        prev: eleProp\n      };\n\n      self.applyParsedProperty( ele, cxtProp );\n\n      retDiffProp.next = ele._private.style[ diffPropName ];\n\n      if( retDiffProp.next && retDiffProp.next.bypass ){\n        retDiffProp.next = retDiffProp.next.bypassed;\n      }\n    }\n\n    return {\n      diffProps: retDiffProps\n    };\n  };\n\n  $$.styfn.updateStyleHints = function(ele){\n    var _p = ele._private;\n    var self = this;\n    var style = _p.style;\n\n    // set whether has pie or not; for greater efficiency\n    var hasPie = false;\n    if( _p.group === 'nodes' && self._private.hasPie ){\n      for( var i = 1; i <= $$.style.pieBackgroundN; i++ ){ // 1..N\n        var size = _p.style['pie-' + i + '-background-size'].value;\n\n        if( size > 0 ){\n          hasPie = true;\n          break;\n        }\n      }\n    }\n\n    _p.hasPie = hasPie;\n\n    var transform = style['text-transform'].strValue;\n    var content = style['content'].strValue;\n    var fStyle = style['font-style'].strValue;\n    var size = style['font-size'].pxValue + 'px';\n    var family = style['font-family'].strValue;\n    // var variant = style['font-variant'].strValue;\n    var weight = style['font-weight'].strValue;\n    var valign = style['text-valign'].strValue;\n    var halign = style['text-valign'].strValue;\n    var oWidth = style['text-outline-width'].pxValue;\n    var wrap = style['text-wrap'].strValue;\n    var wrapW = style['text-max-width'].pxValue;\n    _p.labelKey = fStyle +'$'+ size +'$'+ family +'$'+ weight +'$'+ content +'$'+ transform +'$'+ valign +'$'+ halign +'$'+ oWidth + '$' + wrap + '$' + wrapW;\n    _p.fontKey = fStyle +'$'+ weight +'$'+ size +'$'+ family;\n\n    var width = style['width'].pxValue;\n    var height = style['height'].pxValue;\n    var borderW = style['border-width'].pxValue;\n    _p.boundingBoxKey = width +'$'+ height +'$'+ borderW;\n\n    if( ele._private.group === 'edges' ){\n      var cpss = style['control-point-step-size'].pxValue;\n      var cpd = style['control-point-distance'] ? style['control-point-distance'].pxValue : undefined;\n      var cpw = style['control-point-weight'].value;\n      var curve = style['curve-style'].strValue;\n\n      _p.boundingBoxKey += '$'+ cpss +'$'+ cpd +'$'+ cpw +'$'+ curve;\n    }\n\n    _p.styleKey = Date.now(); // probably safe to use applied time and much faster\n    // for( var i = 0; i < $$.style.properties.length; i++ ){\n    //   var prop = $$.style.properties[i];\n    //   var eleProp = _p.style[ prop.name ];\n    //   var val = eleProp && eleProp.strValue ? eleProp.strValue : 'undefined';\n\n    //   _p.styleKey += '$' + val;\n    // }\n  };\n\n  // apply a property to the style (for internal use)\n  // returns whether application was successful\n  //\n  // now, this function flattens the property, and here's how:\n  //\n  // for parsedProp:{ bypass: true, deleteBypass: true }\n  // no property is generated, instead the bypass property in the\n  // element's style is replaced by what's pointed to by the `bypassed`\n  // field in the bypass property (i.e. restoring the property the\n  // bypass was overriding)\n  //\n  // for parsedProp:{ mapped: truthy }\n  // the generated flattenedProp:{ mapping: prop }\n  //\n  // for parsedProp:{ bypass: true }\n  // the generated flattenedProp:{ bypassed: parsedProp }\n  $$.styfn.applyParsedProperty = function( ele, parsedProp ){\n    var prop = parsedProp;\n    var style = ele._private.style;\n    var fieldVal, flatProp;\n    var types = $$.style.types;\n    var type = $$.style.properties[ prop.name ].type;\n    var propIsBypass = prop.bypass;\n    var origProp = style[ prop.name ];\n    var origPropIsBypass = origProp && origProp.bypass;\n    var _p = ele._private;\n\n    // can't apply auto to width or height unless it's a parent node\n    if( (parsedProp.name === 'height' || parsedProp.name === 'width') && ele.isNode() ){\n      if( parsedProp.value === 'auto' && !ele.isParent() ){\n        return false;\n      } else if( parsedProp.value !== 'auto' && ele.isParent() ){\n        prop = parsedProp = this.parse( parsedProp.name, 'auto', propIsBypass );\n      }\n    }\n\n    // check if we need to delete the current bypass\n    if( propIsBypass && prop.deleteBypass ){ // then this property is just here to indicate we need to delete\n      var currentProp = style[ prop.name ];\n\n      // can only delete if the current prop is a bypass and it points to the property it was overriding\n      if( !currentProp ){\n        return true; // property is already not defined\n      } else if( currentProp.bypass && currentProp.bypassed ){ // then replace the bypass property with the original\n\n        // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)\n        style[ prop.name ] = currentProp.bypassed;\n        return true;\n\n      } else {\n        return false; // we're unsuccessful deleting the bypass\n      }\n    }\n\n    var printMappingErr = function(){\n      $$.util.error('Do not assign mappings to elements without corresponding data (e.g. ele `'+ ele.id() +'` for property `'+ prop.name +'` with data field `'+ prop.field +'`); try a `['+ prop.field +']` selector to limit scope to elements with `'+ prop.field +'` defined');\n    };\n\n    // put the property in the style objects\n    switch( prop.mapped ){ // flatten the property if mapped\n    case types.mapData:\n    case types.mapLayoutData:\n    case types.mapScratch:\n\n      var isLayout = prop.mapped === types.mapLayoutData;\n      var isScratch = prop.mapped === types.mapScratch;\n\n      // flatten the field (e.g. data.foo.bar)\n      var fields = prop.field.split(\".\");\n      var fieldVal;\n\n      if( isScratch || isLayout ){\n        fieldVal = _p.scratch;\n      } else {\n        fieldVal = _p.data;\n      }\n\n      for( var i = 0; i < fields.length && fieldVal; i++ ){\n        var field = fields[i];\n        fieldVal = fieldVal[ field ];\n      }\n\n      var percent;\n      if( !$$.is.number(fieldVal) ){ // then keep the mapping but assume 0% for now\n        percent = 0;\n      } else {\n        percent = (fieldVal - prop.fieldMin) / (prop.fieldMax - prop.fieldMin);\n      }\n\n      // make sure to bound percent value\n      if( percent < 0 ){\n        percent = 0;\n      } else if( percent > 1 ){\n        percent = 1;\n      }\n\n      if( type.color ){\n        var r1 = prop.valueMin[0];\n        var r2 = prop.valueMax[0];\n        var g1 = prop.valueMin[1];\n        var g2 = prop.valueMax[1];\n        var b1 = prop.valueMin[2];\n        var b2 = prop.valueMax[2];\n        var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];\n        var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];\n\n        var clr = [\n          Math.round( r1 + (r2 - r1)*percent ),\n          Math.round( g1 + (g2 - g1)*percent ),\n          Math.round( b1 + (b2 - b1)*percent ),\n          Math.round( a1 + (a2 - a1)*percent )\n        ];\n\n        flatProp = { // colours are simple, so just create the flat property instead of expensive string parsing\n          bypass: prop.bypass, // we're a bypass if the mapping property is a bypass\n          name: prop.name,\n          value: clr,\n          strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'\n        };\n\n      } else if( type.number ){\n        var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;\n        flatProp = this.parse( prop.name, calcValue, prop.bypass, true );\n\n      } else {\n        return false; // can only map to colours and numbers\n      }\n\n      if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself\n        flatProp = this.parse( prop.name, origProp.strValue, prop.bypass, true );\n      }\n\n      if( !flatProp ){ printMappingErr(); }\n      flatProp.mapping = prop; // keep a reference to the mapping\n      prop = flatProp; // the flattened (mapped) property is the one we want\n\n      break;\n\n    // direct mapping\n    case types.data:\n    case types.layoutData:\n    case types.scratch:\n      var isLayout = prop.mapped === types.layoutData;\n      var isScratch = prop.mapped === types.scratch;\n\n      // flatten the field (e.g. data.foo.bar)\n      var fields = prop.field.split(\".\");\n      var fieldVal;\n\n      if( isScratch || isLayout ){\n        fieldVal = _p.scratch;\n      } else {\n        fieldVal = _p.data;\n      }\n\n      if( fieldVal ){ for( var i = 0; i < fields.length; i++ ){\n        var field = fields[i];\n        fieldVal = fieldVal[ field ];\n      } }\n\n      flatProp = this.parse( prop.name, fieldVal, prop.bypass, true );\n\n      if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself\n        var flatPropVal = origProp ? origProp.strValue : '';\n\n        flatProp = this.parse( prop.name, flatPropVal, prop.bypass, true );\n      }\n\n      if( !flatProp ){ printMappingErr(); }\n      flatProp.mapping = prop; // keep a reference to the mapping\n      prop = flatProp; // the flattened (mapped) property is the one we want\n\n      break;\n\n    case types.fn:\n      var fn = prop.value;\n      var fnRetVal = fn( ele );\n\n      flatProp = this.parse( prop.name, fnRetVal, prop.bypass, true );\n      flatProp.mapping = prop; // keep a reference to the mapping\n      prop = flatProp; // the flattened (mapped) property is the one we want\n\n      break;\n\n    case undefined:\n      break; // just set the property\n\n    default:\n      return false; // not a valid mapping\n    }\n\n    // if the property is a bypass property, then link the resultant property to the original one\n    if( propIsBypass ){\n      if( origPropIsBypass ){ // then this bypass overrides the existing one\n        prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass\n      } else { // then link the orig prop to the new bypass\n        prop.bypassed = origProp;\n      }\n\n      style[ prop.name ] = prop; // and set\n\n    } else { // prop is not bypass\n      if( origPropIsBypass ){ // then keep the orig prop (since it's a bypass) and link to the new prop\n        origProp.bypassed = prop;\n      } else { // then just replace the old prop with the new one\n        style[ prop.name ] = prop;\n      }\n    }\n\n    return true;\n  };\n\n  // updates the visual style for all elements (useful for manual style modification after init)\n  $$.styfn.update = function(){\n    var cy = this._private.cy;\n    var eles = cy.elements();\n\n    eles.updateStyle();\n  };\n\n  // just update the functional properties (i.e. mappings) in the elements'\n  // styles (less expensive than recalculation)\n  $$.styfn.updateMappers = function( eles ){\n    for( var i = 0; i < eles.length; i++ ){ // for each ele\n      var ele = eles[i];\n      var style = ele._private.style;\n\n      for( var j = 0; j < $$.style.properties.length; j++ ){ // for each prop\n        var prop = $$.style.properties[j];\n        var propInStyle = style[ prop.name ];\n\n        if( propInStyle && propInStyle.mapping ){\n          var mapping = propInStyle.mapping;\n          this.applyParsedProperty( ele, mapping ); // reapply the mapping property\n        }\n      }\n\n      this.updateStyleHints( ele );\n    }\n  };\n\n  // diffProps : { name => { prev, next } }\n  $$.styfn.updateTransitions = function( ele, diffProps, isBypass ){\n    var self = this;\n    var style = ele._private.style;\n\n    var props = style['transition-property'].value;\n    var duration = style['transition-duration'].msValue;\n    var delay = style['transition-delay'].msValue;\n    var css = {};\n\n    if( props.length > 0 && duration > 0 ){\n\n      // build up the style to animate towards\n      var anyPrev = false;\n      for( var i = 0; i < props.length; i++ ){\n        var prop = props[i];\n        var styProp = style[ prop ];\n        var diffProp = diffProps[ prop ];\n\n        if( !diffProp ){ continue; }\n\n        var prevProp = diffProp.prev;\n        var fromProp = prevProp;\n        var toProp = diffProp.next != null ? diffProp.next : styProp;\n        var diff = false;\n        var initVal;\n        var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)\n\n        if( !fromProp ){ continue; }\n\n        // consider px values\n        if( $$.is.number( fromProp.pxValue ) && $$.is.number( toProp.pxValue ) ){\n          diff = toProp.pxValue - fromProp.pxValue; // nonzero is truthy\n          initVal = fromProp.pxValue + initDt * diff;\n\n        // consider numerical values\n        } else if( $$.is.number( fromProp.value ) && $$.is.number( toProp.value ) ){\n          diff = toProp.value - fromProp.value; // nonzero is truthy\n          initVal = fromProp.value + initDt * diff;\n\n        // consider colour values\n        } else if( $$.is.array( fromProp.value ) && $$.is.array( toProp.value ) ){\n          diff = fromProp.value[0] !== toProp.value[0]\n            || fromProp.value[1] !== toProp.value[1]\n            || fromProp.value[2] !== toProp.value[2]\n          ;\n\n          initVal = fromProp.strValue;\n        }\n\n        // the previous value is good for an animation only if it's different\n        if( diff ){\n          css[ prop ] = toProp.strValue; // to val\n          this.applyBypass( ele, prop, initVal ); // from val\n          anyPrev = true;\n        }\n\n      } // end if props allow ani\n\n      // can't transition if there's nothing previous to transition from\n      if( !anyPrev ){ return; }\n\n      ele._private.transitioning = true;\n\n      ele.stop();\n\n      if( delay > 0 ){\n        ele.delay( delay );\n      }\n\n      ele.animate({\n        css: css\n      }, {\n        duration: duration,\n        queue: false,\n        complete: function(){\n          if( !isBypass ){\n            self.removeBypasses( ele, props );\n          }\n\n          ele._private.transitioning = false;\n        }\n      });\n\n    } else if( ele._private.transitioning ){\n      ele.stop();\n\n      this.removeBypasses( ele, props );\n\n      ele._private.transitioning = false;\n    }\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // bypasses are applied to an existing style on an element, and just tacked on temporarily\n  // returns true iff application was successful for at least 1 specified property\n  $$.styfn.applyBypass = function( eles, name, value, updateTransitions ){\n    var props = [];\n    var isBypass = true;\n\n    // put all the properties (can specify one or many) in an array after parsing them\n    if( name === \"*\" || name === \"**\" ){ // apply to all property names\n\n      if( value !== undefined ){\n        for( var i = 0; i < $$.style.properties.length; i++ ){\n          var prop = $$.style.properties[i];\n          var name = prop.name;\n\n          var parsedProp = this.parse(name, value, true);\n\n          if( parsedProp ){\n            props.push( parsedProp );\n          }\n        }\n      }\n\n    } else if( $$.is.string(name) ){ // then parse the single property\n      var parsedProp = this.parse(name, value, true);\n\n      if( parsedProp ){\n        props.push( parsedProp );\n      }\n    } else if( $$.is.plainObject(name) ){ // then parse each property\n      var specifiedProps = name;\n      updateTransitions = value;\n\n      for( var i = 0; i < $$.style.properties.length; i++ ){\n        var prop = $$.style.properties[i];\n        var name = prop.name;\n        var value = specifiedProps[ name ];\n\n        if( value === undefined ){ // try camel case name too\n          value = specifiedProps[ $$.util.dash2camel(name) ];\n        }\n\n        if( value !== undefined ){\n          var parsedProp = this.parse(name, value, true);\n\n          if( parsedProp ){\n            props.push( parsedProp );\n          }\n        }\n      }\n    } else { // can't do anything without well defined properties\n      return false;\n    }\n\n    // we've failed if there are no valid properties\n    if( props.length === 0 ){ return false; }\n\n    // now, apply the bypass properties on the elements\n    var ret = false; // return true if at least one succesful bypass applied\n    for( var i = 0; i < eles.length; i++ ){ // for each ele\n      var ele = eles[i];\n      var style = ele._private.style;\n      var diffProps = {};\n      var diffProp;\n\n      for( var j = 0; j < props.length; j++ ){ // for each prop\n        var prop = props[j];\n\n        if( updateTransitions ){\n          var prevProp = style[ prop.name ];\n          diffProp = diffProps[ prop.name ] = { prev: prevProp };\n        }\n\n        ret = this.applyParsedProperty( ele, prop ) || ret;\n\n        if( updateTransitions ){\n          diffProp.next = style[ prop.name ];\n        }\n\n      } // for props\n\n      if( updateTransitions ){\n        this.updateTransitions( ele, diffProps, isBypass );\n      }\n    } // for eles\n\n    return ret;\n  };\n\n  // only useful in specific cases like animation\n  $$.styfn.overrideBypass = function( eles, name, value ){\n    name = $$.util.camel2dash(name);\n\n    for( var i = 0; i < eles.length; i++ ){\n      var ele = eles[i];\n      var prop = ele._private.style[ name ];\n      var isColor = $$.style.properties[ name ].type.color;\n\n      if( !prop.bypass ){ // need a bypass if one doesn't exist\n        this.applyBypass( ele, name, value );\n        continue;\n      }\n\n      prop.value = value;\n\n      if( prop.pxValue != null ){\n        prop.pxValue = value;\n      }\n\n      if( isColor ){\n        prop.strValue = 'rgb(' + prop.value.join(',') + ')';\n      } else {\n        prop.strValue = '' + value;\n      }\n    }\n  };\n\n  $$.styfn.removeAllBypasses = function( eles, updateTransitions ){\n    var isBypass = true;\n\n    for( var j = 0; j < eles.length; j++ ){\n      var ele = eles[j];\n      var diffProps = {};\n      var style = ele._private.style;\n\n      for( var i = 0; i < $$.style.properties.length; i++ ){\n        var prop = $$.style.properties[i];\n        var name = prop.name;\n        var value = ''; // empty => remove bypass\n        var parsedProp = this.parse(name, value, true);\n        var prevProp = style[ prop.name ];\n        var diffProp = diffProps[ prop.name ] = { prev: prevProp };\n\n        this.applyParsedProperty(ele, parsedProp);\n\n        diffProp.next = style[ prop.name ];\n      } // for props\n\n      if( updateTransitions ){\n        this.updateTransitions( ele, diffProps, isBypass );\n      }\n    } // for eles\n  };\n\n  $$.styfn.removeBypasses = function( eles, props, updateTransitions ){\n    var isBypass = true;\n\n    for( var j = 0; j < eles.length; j++ ){\n      var ele = eles[j];\n      var diffProps = {};\n      var style = ele._private.style;\n\n      for( var i = 0; i < props.length; i++ ){\n        var name = props[i];\n        var prop = $$.style.properties[ name ];\n        var value = ''; // empty => remove bypass\n        var parsedProp = this.parse(name, value, true);\n        var prevProp = style[ prop.name ];\n        var diffProp = diffProps[ prop.name ] = { prev: prevProp };\n\n        this.applyParsedProperty(ele, parsedProp);\n\n        diffProp.next = style[ prop.name ];\n      } // for props\n\n      if( updateTransitions ){\n        this.updateTransitions( ele, diffProps, isBypass );\n      }\n    } // for eles\n  };\n\n})( cytoscape );\n\n;(function($$, window){ 'use strict';\n\n  // gets what an em size corresponds to in pixels relative to a dom element\n  $$.styfn.getEmSizeInPixels = function(){\n    var cy = this._private.cy;\n    var domElement = cy.container();\n\n    if( window && domElement && window.getComputedStyle ){\n      var pxAsStr = window.getComputedStyle(domElement).getPropertyValue('font-size');\n      var px = parseFloat( pxAsStr );\n      return px;\n    } else {\n      return 1; // in case we're running outside of the browser\n    }\n  };\n\n  // gets css property from the core container\n  $$.styfn.containerCss = function( propName ){\n    var cy = this._private.cy;\n    var domElement = cy.container();\n\n    if( window && domElement && window.getComputedStyle ){\n      return window.getComputedStyle(domElement).getPropertyValue( propName );\n    }\n  };\n\n  $$.styfn.containerProperty = function( propName ){\n    var propStr = this.containerCss( propName );\n    var prop = this.parse( propName, propStr );\n    return prop;\n  };\n\n  $$.styfn.containerPropertyAsString = function( propName ){\n    var prop = this.containerProperty( propName );\n\n    if( prop ){\n      return prop.strValue;\n    }\n  };\n\n})( cytoscape, typeof window === 'undefined' ? null : window );\n\n;(function($$){ 'use strict';\n\n  // gets the rendered style for an element\n  $$.styfn.getRenderedStyle = function( ele ){\n    var ele = ele[0]; // insure it's an element\n\n    if( ele ){\n      var rstyle = {};\n      var style = ele._private.style;\n      var cy = this._private.cy;\n      var zoom = cy.zoom();\n\n      for( var i = 0; i < $$.style.properties.length; i++ ){\n        var prop = $$.style.properties[i];\n        var styleProp = style[ prop.name ];\n\n        if( styleProp ){\n          var val = styleProp.unitless ? styleProp.strValue : (styleProp.pxValue * zoom) + 'px';\n          rstyle[ prop.name ] = val;\n          rstyle[ $$.util.dash2camel(prop.name) ] = val;\n        }\n      }\n\n      return rstyle;\n    }\n  };\n\n  // gets the raw style for an element\n  $$.styfn.getRawStyle = function( ele ){\n    var ele = ele[0]; // insure it's an element\n\n    if( ele ){\n      var rstyle = {};\n      var style = ele._private.style;\n\n      for( var i = 0; i < $$.style.properties.length; i++ ){\n        var prop = $$.style.properties[i];\n        var styleProp = style[ prop.name ];\n\n        if( styleProp ){\n          rstyle[ prop.name ] = styleProp.strValue;\n          rstyle[ $$.util.dash2camel(prop.name) ] = styleProp.strValue;\n        }\n      }\n\n      return rstyle;\n    }\n  };\n\n  // gets the value style for an element (useful for things like animations)\n  $$.styfn.getValueStyle = function( ele ){\n    var rstyle = {};\n    var style;\n    var isEle = $$.is.element(ele);\n\n    if( isEle ){\n      style = ele._private.style;\n    } else {\n      style = ele; // just passed the style itself\n    }\n\n    if( style ){\n      for( var i = 0; i < $$.style.properties.length; i++ ){\n        var prop = $$.style.properties[i];\n        var styleProp = style[ prop.name ] || style[ $$.util.dash2camel(prop.name) ];\n\n        if( styleProp !== undefined ){ // then make a prop of it\n          if( $$.is.plainObject( styleProp ) ){\n            styleProp = this.parse( prop.name, styleProp.strValue );\n          } else {\n            styleProp = this.parse( prop.name, styleProp );\n          }\n        }\n\n        if( styleProp ){\n          rstyle[ prop.name ] = styleProp;\n          rstyle[ $$.util.dash2camel(prop.name) ] = styleProp;\n        }\n      }\n    }\n\n    return rstyle;\n  };\n\n  $$.styfn.getPropsList = function( propsObj ){\n    var rstyle = [];\n    var style = propsObj;\n    var props = $$.style.properties;\n\n    if( style ){\n      for( var name in style ){\n        var val = style[name];\n        var prop = props[name] || props[ $$.util.camel2dash(name) ];\n        var styleProp = this.parse( prop.name, val );\n\n        rstyle.push( styleProp );\n      }\n    }\n\n    return rstyle;\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.style.applyFromJson = function( style, json ){\n    for( var i = 0; i < json.length; i++ ){\n      var context = json[i];\n      var selector = context.selector;\n      var props = context.style || context.css;\n\n      style.selector( selector ); // apply selector\n\n      for( var name in props ){\n        var value = props[name];\n\n        style.css( name, value ); // apply property\n      }\n    }\n\n    return style;\n  };\n\n  // static function\n  $$.style.fromJson = function( cy, json ){\n    var style = new $$.Style(cy);\n\n    $$.style.applyFromJson( style, json );\n\n    return style;\n  };\n\n  // accessible cy.style() function\n  $$.styfn.fromJson = function( json ){\n    var style = this;\n\n    style.resetToDefault();\n\n    $$.style.applyFromJson( style, json );\n\n    return style;\n  };\n\n  // get json from cy.style() api\n  $$.styfn.json = function(){\n    var json = [];\n\n    for( var i = this.defaultLength; i < this.length; i++ ){\n      var cxt = this[i];\n      var selector = cxt.selector;\n      var props = cxt.properties;\n      var css = {};\n\n      for( var j = 0; j < props.length; j++ ){\n        var prop = props[j];\n        css[ prop.name ] = prop.strValue;\n      }\n\n      json.push({\n        selector: !selector ? 'core' : selector.toString(),\n        style: css\n      });\n    }\n\n    return json;\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.style.applyFromString = function( style, string ){\n    var remaining = '' + string;\n    var selAndBlockStr;\n    var blockRem;\n    var propAndValStr;\n\n    // remove comments from the style string\n    remaining = remaining.replace(/[/][*](\\s|.)+?[*][/]/g, '');\n\n    function removeSelAndBlockFromRemaining(){\n      // remove the parsed selector and block from the remaining text to parse\n      if( remaining.length > selAndBlockStr.length ){\n        remaining = remaining.substr( selAndBlockStr.length );\n      } else {\n        remaining = '';\n      }\n    }\n\n    function removePropAndValFromRem(){\n      // remove the parsed property and value from the remaining block text to parse\n      if( blockRem.length > propAndValStr.length ){\n        blockRem = blockRem.substr( propAndValStr.length );\n      } else {\n        blockRem = '';\n      }\n    }\n\n    while(true){\n      var nothingLeftToParse = remaining.match(/^\\s*$/);\n      if( nothingLeftToParse ){ break; }\n\n      var selAndBlock = remaining.match(/^\\s*((?:.|\\s)+?)\\s*\\{((?:.|\\s)+?)\\}/);\n\n      if( !selAndBlock ){\n        $$.util.error('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);\n        break;\n      }\n\n      selAndBlockStr = selAndBlock[0];\n\n      // parse the selector\n      var selectorStr = selAndBlock[1];\n      if( selectorStr !== 'core' ){\n        var selector = new $$.Selector( selectorStr );\n        if( selector._private.invalid ){\n          $$.util.error('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr);\n\n          // skip this selector and block\n          removeSelAndBlockFromRemaining();\n          continue;\n        }\n      }\n\n      // parse the block of properties and values\n      var blockStr = selAndBlock[2];\n      var invalidBlock = false;\n      blockRem = blockStr;\n      var props = [];\n\n      while(true){\n        var nothingLeftToParse = blockRem.match(/^\\s*$/);\n        if( nothingLeftToParse ){ break; }\n\n        var propAndVal = blockRem.match(/^\\s*(.+?)\\s*:\\s*(.+?)\\s*;/);\n\n        if( !propAndVal ){\n          $$.util.error('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);\n          invalidBlock = true;\n          break;\n        }\n\n        propAndValStr = propAndVal[0];\n        var propStr = propAndVal[1];\n        var valStr = propAndVal[2];\n\n        var prop = $$.style.properties[ propStr ];\n        if( !prop ){\n          $$.util.error('Skipping property: Invalid property name in: ' + propAndValStr);\n\n          // skip this property in the block\n          removePropAndValFromRem();\n          continue;\n        }\n\n        var parsedProp = style.parse( propStr, valStr );\n\n        if( !parsedProp ){\n          $$.util.error('Skipping property: Invalid property definition in: ' + propAndValStr);\n\n          // skip this property in the block\n          removePropAndValFromRem();\n          continue;\n        }\n\n        props.push({\n          name: propStr,\n          val: valStr\n        });\n        removePropAndValFromRem();\n      }\n\n      if( invalidBlock ){\n        removeSelAndBlockFromRemaining();\n        break;\n      }\n\n      // put the parsed block in the style\n      style.selector( selectorStr );\n      for( var i = 0; i < props.length; i++ ){\n        var prop = props[i];\n        style.css( prop.name, prop.val );\n      }\n\n      removeSelAndBlockFromRemaining();\n    }\n\n    return style;\n  };\n\n  $$.style.fromString = function( cy, string ){\n    var style = new $$.Style(cy);\n\n    $$.style.applyFromString( style, string );\n\n    return style;\n  };\n\n  $$.styfn.fromString = function( string ){\n    var style = this;\n\n    style.resetToDefault();\n\n    $$.style.applyFromString( style, string );\n\n    return style;\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // a dummy stylesheet object that doesn't need a reference to the core\n  // (useful for init)\n  $$.stylesheet = $$.Stylesheet = function(){\n    if( !(this instanceof $$.Stylesheet) ){\n      return new $$.Stylesheet();\n    }\n\n    this.length = 0;\n  };\n\n  $$.sheetfn = $$.Stylesheet.prototype;\n\n  // just store the selector to be parsed later\n  $$.sheetfn.selector = function( selector ){\n    var i = this.length++;\n\n    this[i] = {\n      selector: selector,\n      properties: []\n    };\n\n    return this; // chaining\n  };\n\n  // just store the property to be parsed later\n  $$.sheetfn.css = function( name, value ){\n    var i = this.length - 1;\n\n    if( $$.is.string(name) ){\n      this[i].properties.push({\n        name: name,\n        value: value\n      });\n    } else if( $$.is.plainObject(name) ){\n      var map = name;\n\n      for( var j = 0; j < $$.style.properties.length; j++ ){\n        var prop = $$.style.properties[j];\n        var mapVal = map[ prop.name ];\n\n        if( mapVal === undefined ){ // also try camel case name\n          mapVal = map[ $$.util.dash2camel(prop.name) ];\n        }\n\n        if( mapVal !== undefined ){\n          var name = prop.name;\n          var value = mapVal;\n\n          this[i].properties.push({\n            name: name,\n            value: value\n          });\n        }\n      }\n    }\n\n    return this; // chaining\n  };\n\n  $$.sheetfn.style = $$.sheetfn.css;\n\n  // generate a real style object from the dummy stylesheet\n  $$.sheetfn.generateStyle = function( cy ){\n    var style = new $$.Style(cy);\n\n    for( var i = 0; i < this.length; i++ ){\n      var context = this[i];\n      var selector = context.selector;\n      var props = context.properties;\n\n      style.selector(selector); // apply selector\n\n      for( var j = 0; j < props.length; j++ ){\n        var prop = props[j];\n\n        style.css( prop.name, prop.value ); // apply property\n      }\n    }\n\n    return style;\n  };\n\n})( cytoscape );\n\n// cross-env thread/worker\n// NB : uses (heavyweight) processes on nodejs so best not to create too many threads\n\n;(function($$, window){ 'use strict';\n\n  $$.Thread = function( fn ){\n    if( !(this instanceof $$.Thread) ){\n      return new $$.Thread( fn );\n    }\n\n    this._private = {\n      requires: [],\n      files: [],\n      queue: null,\n      pass: []\n    };\n\n    if( fn ){\n      this.run( fn );\n    }\n\n  };\n\n  $$.thread = $$.Thread;\n  $$.thdfn = $$.Thread.prototype; // short alias\n\n  $$.fn.thread = function( fnMap, options ){\n    for( var name in fnMap ){\n      var fn = fnMap[name];\n      $$.Thread.prototype[ name ] = fn;\n    }\n  };\n\n  var stringifyFieldVal = function( val ){\n    var valStr = $$.is.fn( val ) ? val.toString() : 'JSON.parse(\"' + JSON.stringify(val) + '\")';\n\n    return valStr;\n  };\n\n  // allows for requires with prototypes and subobjs etc\n  var fnAsRequire = function( fn ){\n    var req;\n    var fnName;\n\n    if( $$.is.object(fn) && fn.fn ){ // manual fn\n      req = fnAs( fn.fn, fn.name );\n      fnName = fn.name;\n      fn = fn.fn;\n    } else if( $$.is.fn(fn) ){ // auto fn\n      req = fn.toString();\n      fnName = fn.name;\n    } else if( $$.is.string(fn) ){ // stringified fn\n      req = fn;\n    } else if( $$.is.object(fn) ){ // plain object\n      if( fn.proto ){\n        req = '';\n      } else {\n        req = fn.name + ' = {};';\n      }\n\n      fnName = fn.name;\n      fn = fn.obj;\n    }\n\n    req += '\\n';\n\n    var protoreq = function( val, subname ){\n      if( val.prototype ){\n        var protoNonempty = false;\n        for( var prop in val.prototype ){ protoNonempty = true; break; }\n\n        if( protoNonempty ){\n          req += fnAsRequire( {\n            name: subname,\n            obj: val,\n            proto: true\n          }, val );\n        }\n      }\n    };\n\n    // pull in prototype\n    if( fn.prototype && fnName != null ){\n\n      for( var name in fn.prototype ){\n        var protoStr = '';\n\n        var val = fn.prototype[ name ];\n        var valStr = stringifyFieldVal( val );\n        var subname = fnName + '.prototype.' + name;\n\n        protoStr += subname + ' = ' + valStr + ';\\n';\n\n        if( protoStr ){\n          req += protoStr;\n        }\n\n        protoreq( val, subname ); // subobject with prototype\n      }\n\n    }\n\n    // pull in properties for obj/fns\n    if( !$$.is.string(fn) ){ for( var name in fn ){\n      var propsStr = '';\n\n      if( fn.hasOwnProperty(name) ){\n        var val = fn[ name ];\n        var valStr = stringifyFieldVal( val );\n        var subname = fnName + '[\"' + name + '\"]';\n\n        propsStr += subname + ' = ' + valStr + ';\\n';\n      }\n\n      if( propsStr ){\n        req += propsStr;\n      }\n\n      protoreq( val, subname ); // subobject with prototype\n    } }\n\n    return req;\n  };\n\n  var isPathStr = function( str ){\n    return $$.is.string(str) && str.match(/\\.js$/);\n  };\n\n  $$.fn.thread({\n\n    require: function( fn, as ){\n      if( isPathStr(fn) ){\n        this._private.files.push( fn );\n\n        return this;\n      }\n\n      if( as ){\n        if( $$.is.fn(fn) ){\n          // disabled b/c doesn't work with forced names on functions w/ prototypes\n          //fn = fnAs( fn, as );\n\n          as = as || fn.name;\n\n          fn = { name: as, fn: fn };\n        } else {\n          fn = { name: as, obj: fn };\n        }\n      }\n\n      this._private.requires.push( fn );\n\n      return this; // chaining\n    },\n\n    pass: function( data ){\n      this._private.pass.push( data );\n\n      return this; // chaining\n    },\n\n    run: function( fn, pass ){ // fn used like main()\n      var self = this;\n      var _p = this._private;\n      pass = pass || _p.pass.shift();\n\n      if( _p.stopped ){\n        $$.util.error('Attempted to run a stopped thread!  Start a new thread or do not stop the existing thread and reuse it.');\n        return;\n      }\n\n      if( _p.running ){\n        return _p.queue = _p.queue.then(function(){ // inductive step\n          return self.run( fn, pass );\n        });\n      }\n\n      var useWW = window != null;\n      var useNode = typeof module !== 'undefined';\n\n      self.trigger('run');\n\n      var runP = new $$.Promise(function( resolve, reject ){\n\n        _p.running = true;\n\n        var threadTechAlreadyExists = _p.ran;\n\n        var fnImplStr = $$.is.string( fn ) ? fn : fn.toString();\n\n        // worker code to exec\n        var fnStr = '\\n' + ( _p.requires.map(function( r ){\n          return fnAsRequire( r );\n        }) ).concat( _p.files.map(function( f ){\n          if( useWW ){\n            var wwifyFile = function( file ){\n              if( file.match(/^\\.\\//) || file.match(/^\\.\\./) ){\n                return window.location.origin + window.location.pathname + file;\n              } else if( file.match(/^\\//) ){\n                return window.location.origin + '/' + file;\n              }\n              return file;\n            };\n\n            return 'importScripts(\"' + wwifyFile(f) + '\");';\n          } else if( useNode ) {\n            return 'eval( require(\"fs\").readFileSync(\"' + f + '\", { encoding: \"utf8\" }) );';\n          }\n        }) ).concat([\n          '( function(){',\n            'var ret = (' + fnImplStr + ')(' + JSON.stringify(pass) + ');',\n            'if( ret !== undefined ){ resolve(ret); }', // assume if ran fn returns defined value (incl. null), that we want to resolve to it\n          '} )()\\n'\n        ]).join('\\n');\n\n        // because we've now consumed the requires, empty the list so we don't dupe on next run()\n        _p.requires = [];\n        _p.files = [];\n\n        if( useWW ){\n          var fnBlob, fnUrl;\n\n          // add normalised thread api functions\n          if( !threadTechAlreadyExists ){\n            var fnPre = fnStr + '';\n\n            fnStr = [\n              'function broadcast(m){ return message(m); };', // alias\n              'function message(m){ postMessage(m); };',\n              'function listen(fn){',\n              '  self.addEventListener(\"message\", function(m){ ',\n              '    if( typeof m === \"object\" && (m.data.$$eval || m.data === \"$$start\") ){',\n              '    } else { ',\n              '      fn( m.data );',\n              '    }',\n              '  });',\n              '};',\n              'self.addEventListener(\"message\", function(m){  if( m.data.$$eval ){ eval( m.data.$$eval ); }  });',\n              'function resolve(v){ postMessage({ $$resolve: v }); };',\n              'function reject(v){ postMessage({ $$reject: v }); };'\n            ].join('\\n');\n\n            fnStr += fnPre;\n\n            fnBlob = new Blob([ fnStr ], {\n              type: 'application/javascript'\n            });\n            fnUrl = window.URL.createObjectURL( fnBlob );\n          }\n          // create webworker and let it exec the serialised code\n          var ww = _p.webworker = _p.webworker || new Worker( fnUrl );\n\n          if( threadTechAlreadyExists ){ // then just exec new run() code\n            ww.postMessage({\n              $$eval: fnStr\n            });\n          }\n\n          // worker messages => events\n          var cb;\n          ww.addEventListener('message', cb = function( m ){\n            var isObject = $$.is.object(m) && $$.is.object( m.data );\n\n            if( isObject && ('$$resolve' in m.data) ){\n              ww.removeEventListener('message', cb); // done listening b/c resolve()\n\n              resolve( m.data.$$resolve );\n            } else if( isObject && ('$$reject' in m.data) ){\n              ww.removeEventListener('message', cb); // done listening b/c reject()\n\n              reject( m.data.$$reject );\n            } else {\n              self.trigger( new $$.Event(m, { type: 'message', message: m.data }) );\n            }\n          }, false);\n\n          if( !threadTechAlreadyExists ){\n            ww.postMessage('$$start'); // start up the worker\n          }\n\n        } else if( useNode ){\n          // create a new process\n          var path = require('path');\n          var child_process = require('child_process');\n          var child = _p.child = _p.child || child_process.fork( path.join(__dirname, 'thread-node-fork') );\n\n          // child process messages => events\n          var cb;\n          child.on('message', cb = function( m ){\n            if( $$.is.object(m) && ('$$resolve' in m) ){\n              child.removeListener('message', cb); // done listening b/c resolve()\n\n              resolve( m.$$resolve );\n            } else if( $$.is.object(m) && ('$$reject' in m) ){\n              child.removeListener('message', cb); // done listening b/c reject()\n\n              reject( m.$$reject );\n            } else {\n              self.trigger( new $$.Event({}, { type: 'message', message: m }) );\n            }\n          });\n\n          // ask the child process to eval the worker code\n          child.send({\n            $$eval: fnStr\n          });\n        } else {\n          $$.error('Tried to create thread but no underlying tech found!');\n          // TODO fallback on main JS thread?\n        }\n\n      }).then(function( v ){\n        _p.running = false;\n        _p.ran = true;\n\n        self.trigger('ran');\n\n        return v;\n      });\n\n      if( _p.queue == null ){\n        _p.queue = runP; // i.e. first step of inductive promise chain (for queue)\n      }\n\n      return runP;\n    },\n\n    // send the thread a message\n    message: function( m ){\n      var _p = this._private;\n\n      if( _p.webworker ){\n        _p.webworker.postMessage( m );\n      }\n\n      if( _p.child ){\n        _p.child.send( m );\n      }\n\n      return this; // chaining\n    },\n\n    stop: function(){\n      var _p = this._private;\n\n      if( _p.webworker ){\n        _p.webworker.terminate();\n      }\n\n      if( _p.child ){\n        _p.child.kill();\n      }\n\n      _p.stopped = true;\n\n      return this.trigger('stop'); // chaining\n    },\n\n    stopped: function(){\n      return this._private.stopped;\n    }\n\n  });\n\n  var fnAs = function( fn, name ){\n    var fnStr = fn.toString();\n    fnStr = fnStr.replace(/function.*\\(/, 'function ' + name + '(');\n\n    return fnStr;\n  };\n\n  var defineFnal = function( opts ){\n    opts = opts || {};\n\n    return function fnalImpl( fn, arg1 ){\n      var fnStr = fnAs( fn, '_$_$_' + opts.name );\n\n      this.require( fnStr );\n\n      return this.run( [\n        'function( data ){',\n        '  var origResolve = resolve;',\n        '  var res = [];',\n        '  ',\n        '  resolve = function( val ){',\n        '    res.push( val );',\n        '  };',\n        '  ',\n        '  var ret = data.' + opts.name + '( _$_$_' + opts.name + ( arguments.length > 1 ? ', ' + JSON.stringify(arg1) : '' ) + ' );',\n        '  ',\n        '  resolve = origResolve;',\n        '  resolve( res.length > 0 ? res : ret );',\n        '}'\n      ].join('\\n') );\n    };\n  };\n\n  $$.fn.thread({\n    reduce: defineFnal({ name: 'reduce' }),\n\n    reduceRight: defineFnal({ name: 'reduceRight' }),\n\n    map: defineFnal({ name: 'map' })\n  });\n\n  // aliases\n  var fn = $$.thdfn;\n  fn.promise = fn.run;\n  fn.terminate = fn.halt = fn.stop;\n  fn.include = fn.require;\n\n  // higher level alias (in case you like the worker metaphor)\n  $$.worker = $$.Worker = $$.Thread;\n\n  // pull in event apis\n  $$.fn.thread({\n    on: $$.define.on(),\n    one: $$.define.on({ unbindSelfOnTrigger: true }),\n    off: $$.define.off(),\n    trigger: $$.define.trigger()\n  });\n\n  $$.define.eventAliasesOn( $$.thdfn );\n\n})( cytoscape, typeof window === 'undefined' ? null : window );\n\n;(function($$, window){ 'use strict';\n\n  $$.Fabric = function( N ){\n    if( !(this instanceof $$.Fabric) ){\n      return new $$.Fabric( N );\n    }\n\n    this._private = {\n      pass: []\n    };\n\n    var defN = 4;\n\n    if( $$.is.number(N) ){\n      // then use the specified number of threads\n    } if( typeof navigator !== 'undefined' && navigator.hardwareConcurrency != null ){\n      N = navigator.hardwareConcurrency;\n    } else if( typeof module !== 'undefined' ){\n      N = require('os').cpus().length;\n    } else { // TODO could use an estimation here but would the additional expense be worth it?\n      N = defN;\n    }\n\n    for( var i = 0; i < N; i++ ){\n      this[i] = $$.Thread();\n    }\n\n    this.length = N;\n  };\n\n  $$.fabric = $$.Fabric;\n  $$.fabfn = $$.Fabric.prototype; // short alias\n\n  $$.fn.fabric = function( fnMap, options ){\n    for( var name in fnMap ){\n      var fn = fnMap[name];\n      $$.Fabric.prototype[ name ] = fn;\n    }\n  };\n\n  $$.fn.fabric({\n\n    // require fn in all threads\n    require: function( fn, as ){\n      for( var i = 0; i < this.length; i++ ){\n        var thread = this[i];\n\n        thread.require( fn, as );\n      }\n\n      return this;\n    },\n\n    // get a random thread\n    random: function(){\n      var i = Math.round( (this.length - 1) * Math.random() );\n      var thread = this[i];\n\n      return thread;\n    },\n\n    // run on random thread\n    run: function( fn ){\n      var pass = this._private.pass.shift();\n\n      return this.random().pass( pass ).run( fn );\n    },\n\n    // sends a random thread a message\n    message: function( m ){\n      return this.random().message( m );\n    },\n\n    // send all threads a message\n    broadcast: function( m ){\n      for( var i = 0; i < this.length; i++ ){\n        var thread = this[i];\n\n        thread.message( m );\n      }\n\n      return this; // chaining\n    },\n\n    // stop all threads\n    stop: function(){\n      for( var i = 0; i < this.length; i++ ){\n        var thread = this[i];\n\n        thread.stop();\n      }\n\n      return this; // chaining\n    },\n\n    // pass data to be used with .spread() etc.\n    pass: function( data ){\n      var pass = this._private.pass;\n\n      if( $$.is.array(data) ){\n        pass.push( data );\n      } else {\n        $$.util.error('Only arrays or collections may be used with fabric.pass()');\n      }\n\n      return this; // chaining\n    },\n\n    spreadSize: function(){\n      var subsize =  Math.ceil( this._private.pass[0].length / this.length );\n\n      subsize = Math.max( 1, subsize ); // don't pass less than one ele to each thread\n\n      return subsize;\n    },\n\n    // split the data into slices to spread the data equally among threads\n    spread: function( fn ){\n      var self = this;\n      var _p = self._private;\n      var subsize = self.spreadSize(); // number of pass eles to handle in each thread\n      var pass = _p.pass.shift().concat([]); // keep a copy\n      var runPs = [];\n\n      for( var i = 0; i < this.length; i++ ){\n        var thread = this[i];\n        var slice = pass.splice( 0, subsize );\n\n        var runP = thread.pass( slice ).run( fn );\n\n        runPs.push( runP );\n\n        var doneEarly = pass.length === 0;\n        if( doneEarly ){ break; }\n      }\n\n      return $$.Promise.all( runPs ).then(function( thens ){\n        var postpass = [];\n        var p = 0;\n\n        // fill postpass with the total result joined from all threads\n        for( var i = 0; i < thens.length; i++ ){\n          var then = thens[i]; // array result from thread i\n\n          for( var j = 0; j < then.length; j++ ){\n            var t = then[j]; // array element\n\n            postpass[ p++ ] = t;\n          }\n        }\n\n        return postpass;\n      });\n    },\n\n    // parallel version of array.map()\n    map: function( fn ){\n      var self = this;\n\n      self.require( fn, '_$_$_fabmap' );\n\n      return self.spread(function( split ){\n        var mapped = [];\n        var origResolve = resolve;\n\n        resolve = function( val ){\n          mapped.push( val );\n        };\n\n        for( var i = 0; i < split.length; i++ ){\n          var oldLen = mapped.length;\n          var ret = _$_$_fabmap( split[i] );\n          var nothingInsdByResolve = oldLen === mapped.length;\n\n          if( nothingInsdByResolve ){\n            mapped.push( ret );\n          }\n        }\n\n        resolve = origResolve;\n\n        return mapped;\n      });\n\n    },\n\n    // parallel version of array.filter()\n    filter: function( fn ){\n      var _p = this._private;\n      var pass = _p.pass[0];\n\n      return this.map( fn ).then(function( include ){\n        var ret = [];\n\n        for( var i = 0; i < pass.length; i++ ){\n          var datum = pass[i];\n          var incDatum = include[i];\n\n          if( incDatum ){\n            ret.push( datum );\n          }\n        }\n\n        return ret;\n      });\n    },\n\n    // sorts the passed array using a divide and conquer strategy\n    sort: function( cmp ){\n      var self = this;\n      var P = this._private.pass[0].length;\n      var subsize = this.spreadSize();\n\n      cmp = cmp || function( a, b ){ // default comparison function\n        if( a < b ){\n          return -1;\n        } else if( a > b ){\n          return 1;\n        }\n\n        return 0;\n      };\n\n      self.require( cmp, '_$_$_cmp' );\n\n      return self.spread(function( split ){ // sort each split normally\n        var sortedSplit = split.sort( _$_$_cmp );\n        resolve( sortedSplit );\n\n      }).then(function( joined ){\n        // do all the merging in the main thread to minimise data transfer\n\n        // TODO could do merging in separate threads but would incur add'l cost of data transfer\n        // for each level of the merge\n\n        var merge = function( i, j, max ){\n          // don't overflow array\n          j = Math.min( j, P );\n          max = Math.min( max, P );\n\n          // left and right sides of merge\n          var l = i;\n          var r = j;\n\n          var sorted = [];\n\n          for( var k = l; k < max; k++ ){\n\n            var eleI = joined[i];\n            var eleJ = joined[j];\n\n            if( i < r && ( j >= max || cmp(eleI, eleJ) <= 0 ) ){\n              sorted.push( eleI );\n              i++;\n            } else {\n              sorted.push( eleJ );\n              j++;\n            }\n\n          }\n\n          // in the array proper, put the sorted values\n          for( var k = 0; k < sorted.length; k++ ){ // kth sorted item\n            var index = l + k;\n\n            joined[ index ] = sorted[k];\n          }\n        };\n\n        for( var splitL = subsize; splitL < P; splitL *= 2 ){ // merge until array is \"split\" as 1\n\n          for( var i = 0; i < P; i += 2*splitL ){\n            merge( i, i + splitL, i + 2*splitL );\n          }\n\n        }\n\n        return joined;\n      });\n    }\n\n\n  });\n\n  var defineRandomPasser = function( opts ){\n    opts = opts || {};\n\n    return function( fn, arg1 ){\n      var pass = this._private.pass.shift();\n\n      return this.random().pass( pass )[ opts.threadFn ]( fn, arg1 );\n    };\n  };\n\n  $$.fn.fabric({\n    randomMap: defineRandomPasser({ threadFn: 'map' }),\n\n    reduce: defineRandomPasser({ threadFn: 'reduce' }),\n\n    reduceRight: defineRandomPasser({ threadFn: 'reduceRight' })\n  });\n\n  // aliases\n  var fn = $$.fabfn;\n  fn.promise = fn.run;\n  fn.terminate = fn.halt = fn.stop;\n  fn.include = fn.require;\n\n  // pull in event apis\n  $$.fn.fabric({\n    on: $$.define.on(),\n    one: $$.define.on({ unbindSelfOnTrigger: true }),\n    off: $$.define.off(),\n    trigger: $$.define.trigger()\n  });\n\n  $$.define.eventAliasesOn( $$.fabfn );\n\n})( cytoscape, typeof window === 'undefined' ? null : window );\n\n;(function($$, window){ 'use strict';\n\n  var defaults = {\n  };\n\n  var origDefaults = $$.util.copy( defaults );\n\n  $$.defaults = function( opts ){\n    defaults = $$.util.extend({}, origDefaults, opts);\n  };\n\n  $$.fn.core = function( fnMap, options ){\n    for( var name in fnMap ){\n      var fn = fnMap[name];\n      $$.Core.prototype[ name ] = fn;\n    }\n  };\n\n  $$.Core = function( opts ){\n    if( !(this instanceof $$.Core) ){\n      return new $$.Core(opts);\n    }\n    var cy = this;\n\n    opts = $$.util.extend({}, defaults, opts);\n\n    var container = opts.container;\n    var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery\n    reg = reg || {};\n\n    if( reg && reg.cy ){\n      if( container ){\n        while( container.firstChild ){ // clean the container\n          container.removeChild( container.firstChild );\n        }\n      }\n\n      reg.cy.notify({ type: 'destroy' }); // destroy the renderer\n\n      reg = {}; // old instance => replace reg completely\n    }\n\n    var readies = reg.readies = reg.readies || [];\n\n    if( container ){ container._cyreg = reg; } // make sure container assoc'd reg points to this cy\n    reg.cy = cy;\n\n    var head = window !== undefined && container !== undefined && !opts.headless;\n    var options = opts;\n    options.layout = $$.util.extend( { name: head ? 'grid' : 'null' }, options.layout );\n    options.renderer = $$.util.extend( { name: head ? 'canvas' : 'null' }, options.renderer );\n\n    var defVal = function( def, val, altVal ){\n      if( val !== undefined ){\n        return val;\n      } else if( altVal !== undefined ){\n        return altVal;\n      } else {\n        return def;\n      }\n    };\n\n    var _p = this._private = {\n      container: options.container, // html dom ele container\n      ready: false, // whether ready has been triggered\n      initrender: false, // has initrender has been triggered\n      options: options, // cached options\n      elements: [], // array of elements\n      id2index: {}, // element id => index in elements array\n      listeners: [], // list of listeners\n      onRenders: [], // rendering listeners\n      aniEles: $$.Collection(this), // elements being animated\n      scratch: {}, // scratch object for core\n      layout: null,\n      renderer: null,\n      notificationsEnabled: true, // whether notifications are sent to the renderer\n      minZoom: 1e-50,\n      maxZoom: 1e50,\n      zoomingEnabled: defVal(true, options.zoomingEnabled),\n      userZoomingEnabled: defVal(true, options.userZoomingEnabled),\n      panningEnabled: defVal(true, options.panningEnabled),\n      userPanningEnabled: defVal(true, options.userPanningEnabled),\n      boxSelectionEnabled: defVal(false, options.boxSelectionEnabled),\n      autolock: defVal(false, options.autolock, options.autolockNodes),\n      autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),\n      autounselectify: defVal(false, options.autounselectify),\n      styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,\n      zoom: $$.is.number(options.zoom) ? options.zoom : 1,\n      pan: {\n        x: $$.is.plainObject(options.pan) && $$.is.number(options.pan.x) ? options.pan.x : 0,\n        y: $$.is.plainObject(options.pan) && $$.is.number(options.pan.y) ? options.pan.y : 0\n      },\n      animation: { // object for currently-running animations\n        current: [],\n        queue: []\n      },\n      hasCompoundNodes: false,\n      deferredExecQueue: []\n    };\n\n    // set selection type\n    var selType = options.selectionType;\n    if( selType === undefined || (selType !== 'additive' && selType !== 'single') ){\n      // then set default\n\n      _p.selectionType = 'single';\n    } else {\n      _p.selectionType = selType;\n    }\n\n    // init zoom bounds\n    if( $$.is.number(options.minZoom) && $$.is.number(options.maxZoom) && options.minZoom < options.maxZoom ){\n      _p.minZoom = options.minZoom;\n      _p.maxZoom = options.maxZoom;\n    } else if( $$.is.number(options.minZoom) && options.maxZoom === undefined ){\n      _p.minZoom = options.minZoom;\n    } else if( $$.is.number(options.maxZoom) && options.minZoom === undefined ){\n      _p.maxZoom = options.maxZoom;\n    }\n\n    var loadExtData = function( next ){\n      var anyIsPromise = false;\n\n      for( var i = 0; i < extData.length; i++ ){\n        var datum = extData[i];\n\n        if( $$.is.promise(datum) ){\n          anyIsPromise = true;\n          break;\n        }\n      }\n\n      if( anyIsPromise ){\n        return $$.Promise.all( extData ).then( next ); // load all data asynchronously, then exec rest of init\n      } else {\n        next( extData ); // exec synchronously for convenience\n      }\n    };\n\n    var extData = [ options.style, options.elements ];\n    loadExtData(function( thens ){\n      var initStyle = thens[0];\n      var initEles = thens[1];\n\n      // init style\n      if( _p.styleEnabled ){\n        cy.setStyle( initStyle );\n      }\n\n      // create the renderer\n      cy.initRenderer( $$.util.extend({\n        hideEdgesOnViewport: options.hideEdgesOnViewport,\n        hideLabelsOnViewport: options.hideLabelsOnViewport,\n        textureOnViewport: options.textureOnViewport,\n        wheelSensitivity: $$.is.number(options.wheelSensitivity) && options.wheelSensitivity > 0 ? options.wheelSensitivity : 1,\n        motionBlur: options.motionBlur === undefined ? true : options.motionBlur, // on by default\n        motionBlurOpacity: options.motionBlurOpacity === undefined ? 0.05 : options.motionBlurOpacity,\n        pixelRatio: $$.is.number(options.pixelRatio) && options.pixelRatio > 0 ? options.pixelRatio : (options.pixelRatio === 'auto' ? undefined : 1),\n        desktopTapThreshold: options.desktopTapThreshold === undefined ? 4 : options.desktopTapThreshold,\n        touchTapThreshold: options.touchTapThreshold === undefined ? 8 : options.touchTapThreshold\n      }, options.renderer) );\n\n      // trigger the passed function for the `initrender` event\n      if( options.initrender ){\n        cy.on('initrender', options.initrender);\n        cy.on('initrender', function(){\n          cy._private.initrender = true;\n        });\n      }\n\n      // initial load\n      cy.load(initEles, function(){ // onready\n        cy.startAnimationLoop();\n        cy._private.ready = true;\n\n        // if a ready callback is specified as an option, the bind it\n        if( $$.is.fn( options.ready ) ){\n          cy.on('ready', options.ready);\n        }\n\n        // bind all the ready handlers registered before creating this instance\n        for( var i = 0; i < readies.length; i++ ){\n          var fn = readies[i];\n          cy.on('ready', fn);\n        }\n        if( reg ){ reg.readies = []; } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc\n\n        cy.trigger('ready');\n      }, options.done);\n\n    });\n  };\n\n  $$.corefn = $$.Core.prototype; // short alias\n\n\n  $$.fn.core({\n    isReady: function(){\n      return this._private.ready;\n    },\n\n    ready: function( fn ){\n      if( this.isReady() ){\n        this.trigger('ready', [], fn); // just calls fn as though triggered via ready event\n      } else {\n        this.on('ready', fn);\n      }\n    },\n\n    initrender: function(){\n      return this._private.initrender;\n    },\n\n    destroy: function(){\n      this.notify({ type: 'destroy' }); // destroy the renderer\n\n      var domEle = this.container();\n      var parEle = domEle.parentNode;\n      if( parEle ){\n        try{\n          parEle.removeChild( domEle );\n        } catch(e){\n          // ie10 issue #1014\n        }\n      }\n\n      return this;\n    },\n\n    getElementById: function( id ){\n      var index = this._private.id2index[ id ];\n      if( index !== undefined ){\n        return this._private.elements[ index ];\n      }\n\n      // worst case, return an empty collection\n      return new $$.Collection( this );\n    },\n\n    selectionType: function(){\n      return this._private.selectionType;\n    },\n\n    hasCompoundNodes: function(){\n      return this._private.hasCompoundNodes;\n    },\n\n    styleEnabled: function(){\n      return this._private.styleEnabled;\n    },\n\n    addToPool: function( eles ){\n      var elements = this._private.elements;\n      var id2index = this._private.id2index;\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n\n        var id = ele._private.data.id;\n        var index = id2index[ id ];\n        var alreadyInPool = index !== undefined;\n\n        if( !alreadyInPool ){\n          index = elements.length;\n          elements.push( ele );\n          id2index[ id ] = index;\n          ele._private.index = index;\n        }\n      }\n\n      return this; // chaining\n    },\n\n    removeFromPool: function( eles ){\n      var elements = this._private.elements;\n      var id2index = this._private.id2index;\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n\n        var id = ele._private.data.id;\n        var index = id2index[ id ];\n        var inPool = index !== undefined;\n\n        if( inPool ){\n          this._private.id2index[ id ] = undefined;\n          elements.splice(index, 1);\n\n          // adjust the index of all elements past this index\n          for( var j = index; j < elements.length; j++ ){\n            var jid = elements[j]._private.data.id;\n            id2index[ jid ]--;\n            elements[j]._private.index--;\n          }\n        }\n      }\n    },\n\n    container: function(){\n      return this._private.container;\n    },\n\n    options: function(){\n      return $$.util.copy( this._private.options );\n    },\n\n    json: function(params){\n      var json = {};\n      var cy = this;\n\n      json.elements = {};\n      cy.elements().each(function(i, ele){\n        var group = ele.group();\n\n        if( !json.elements[group] ){\n          json.elements[group] = [];\n        }\n\n        json.elements[group].push( ele.json() );\n      });\n\n      if( this._private.styleEnabled ){\n        json.style = cy.style().json();\n      }\n\n      json.zoomingEnabled = cy._private.zoomingEnabled;\n      json.userZoomingEnabled = cy._private.userZoomingEnabled;\n      json.zoom = cy._private.zoom;\n      json.minZoom = cy._private.minZoom;\n      json.maxZoom = cy._private.maxZoom;\n      json.panningEnabled = cy._private.panningEnabled;\n      json.userPanningEnabled = cy._private.userPanningEnabled;\n      json.pan = cy._private.pan;\n      json.boxSelectionEnabled = cy._private.boxSelectionEnabled;\n      json.layout = cy._private.options.layout;\n      json.renderer = cy._private.options.renderer;\n      json.hideEdgesOnViewport = cy._private.options.hideEdgesOnViewport;\n      json.hideLabelsOnViewport = cy._private.options.hideLabelsOnViewport;\n      json.textureOnViewport = cy._private.options.textureOnViewport;\n      json.wheelSensitivity = cy._private.options.wheelSensitivity;\n      json.motionBlur = cy._private.options.motionBlur;\n\n      return json;\n    },\n\n    // defer execution until not busy and guarantee relative execution order of deferred functions\n    defer: function( fn ){\n      var cy = this;\n      var _p = cy._private;\n      var q = _p.deferredExecQueue;\n\n      q.push( fn );\n\n      if( !_p.deferredTimeout ){\n        _p.deferredTimeout = setTimeout(function(){\n          while( q.length > 0 ){\n            ( q.shift() )();\n          }\n\n          _p.deferredTimeout = null;\n        }, 0);\n      }\n    }\n\n  });\n\n})( cytoscape, typeof window === 'undefined' ? null : window );\n\n(function($$, window){ 'use strict';\n\n  function ready(f) {\n    var fn = ( document && (document.readyState === 'interactive' || document.readyState === 'complete') )  ? f : ready;\n\n    setTimeout(fn, 9, f);\n  }\n\n  $$.fn.core({\n    add: function(opts){\n\n      var elements;\n      var cy = this;\n\n      // add the elements\n      if( $$.is.elementOrCollection(opts) ){\n        var eles = opts;\n\n        if( eles._private.cy === cy ){ // same instance => just restore\n          elements = eles.restore();\n\n        } else { // otherwise, copy from json\n          var jsons = [];\n\n          for( var i = 0; i < eles.length; i++ ){\n            var ele = eles[i];\n            jsons.push( ele.json() );\n          }\n\n          elements = new $$.Collection( cy, jsons );\n        }\n      }\n\n      // specify an array of options\n      else if( $$.is.array(opts) ){\n        var jsons = opts;\n\n        elements = new $$.Collection(cy, jsons);\n      }\n\n      // specify via opts.nodes and opts.edges\n      else if( $$.is.plainObject(opts) && ($$.is.array(opts.nodes) || $$.is.array(opts.edges)) ){\n        var elesByGroup = opts;\n        var jsons = [];\n\n        var grs = ['nodes', 'edges'];\n        for( var i = 0, il = grs.length; i < il; i++ ){\n          var group = grs[i];\n          var elesArray = elesByGroup[group];\n\n          if( $$.is.array(elesArray) ){\n\n            for( var j = 0, jl = elesArray.length; j < jl; j++ ){\n              var json = elesArray[j];\n              json.group = group;\n\n              jsons.push( json );\n            }\n          }\n        }\n\n        elements = new $$.Collection(cy, jsons);\n      }\n\n      // specify options for one element\n      else {\n        var json = opts;\n        elements = (new $$.Element( cy, json )).collection();\n      }\n\n      return elements;\n    },\n\n    remove: function(collection){\n      if( $$.is.elementOrCollection(collection) ){\n        collection = collection;\n      } else if( $$.is.string(collection) ){\n        var selector = collection;\n        collection = this.$( selector );\n      }\n\n      return collection.remove();\n    },\n\n    load: function(elements, onload, ondone){\n      var cy = this;\n\n      cy.notifications(false);\n\n      // remove old elements\n      var oldEles = cy.elements();\n      if( oldEles.length > 0 ){\n        oldEles.remove();\n      }\n\n      if( elements != null ){\n        if( $$.is.plainObject(elements) || $$.is.array(elements) ){\n          cy.add( elements );\n        }\n      }\n\n      function callback(){\n        cy.one('layoutready', function(e){\n          cy.notifications(true);\n          cy.trigger(e); // we missed this event by turning notifications off, so pass it on\n\n          cy.notify({\n            type: 'load',\n            collection: cy.elements()\n          });\n\n          cy.one('load', onload);\n          cy.trigger('load');\n        }).one('layoutstop', function(){\n          cy.one('done', ondone);\n          cy.trigger('done');\n        });\n\n        var layoutOpts = $$.util.extend({}, cy._private.options.layout);\n        layoutOpts.eles = cy.$();\n\n        cy.layout( layoutOpts );\n\n      }\n\n      if( window ){\n        ready( callback );\n      } else {\n        callback();\n      }\n\n      return this;\n    }\n  });\n\n})( cytoscape, typeof window === 'undefined' ? null : window );\n\n;(function($$, window){ 'use strict';\n\n  $$.fn.core({\n\n    // pull in animation functions\n    animated: $$.define.animated(),\n    clearQueue: $$.define.clearQueue(),\n    delay: $$.define.delay(),\n    animate: $$.define.animate(),\n    stop: $$.define.stop(),\n\n    addToAnimationPool: function( eles ){\n      var cy = this;\n\n      if( !cy.styleEnabled() ){ return; } // save cycles when no style used\n\n      cy._private.aniEles.merge( eles );\n    },\n\n    startAnimationLoop: function(){\n      var cy = this;\n\n      if( !cy.styleEnabled() ){ return; } // save cycles when no style used\n\n      // don't execute the animation loop in headless environments\n      if( !window ){\n        return;\n      }\n\n      function globalAnimationStep(){\n        $$.util.requestAnimationFrame(function(now){\n          handleElements(now);\n          globalAnimationStep();\n        });\n      }\n\n      globalAnimationStep(); // first call\n\n      function handleElements(now){\n        now = +new Date();\n\n        var eles = cy._private.aniEles;\n        var doneEles = [];\n        var startedSomeAniThisTick = false;\n\n        function handleElement( ele, isCore ){\n          var current = ele._private.animation.current;\n          var queue = ele._private.animation.queue;\n          var ranAnis = false;\n\n          // if nothing currently animating, get something from the queue\n          if( current.length === 0 ){\n            var next = queue.length > 0 ? queue.shift() : null;\n\n            if( next ){\n              next.callTime = now; // was queued, so update call time\n              current.push( next );\n            }\n          }\n\n          // step and remove if done\n          var completes = [];\n          for(var i = current.length - 1; i >= 0; i--){\n            var ani = current[i];\n\n            // start if need be\n            if( !ani.started ){\n              startAnimation( ele, ani );\n              startedSomeAniThisTick = true;\n            }\n\n            step( ele, ani, now, isCore );\n\n            if( ani.done ){\n              completes.push( ani );\n\n              // remove current[i]\n              current.splice(i, 1);\n            }\n\n            ranAnis = true;\n          }\n\n          // call complete callbacks\n          for( var i = 0; i < completes.length; i++ ){\n            var ani = completes[i];\n            var complete = ani.params.complete;\n\n            if( $$.is.fn(complete) ){\n              complete.apply( ele, [ now ] );\n            }\n          }\n\n          if( !isCore && current.length === 0 && queue.length === 0 ){\n            doneEles.push( ele );\n          }\n\n          return ranAnis;\n        } // handleElements\n\n        // handle all eles\n        for( var e = 0; e < eles.length; e++ ){\n          var ele = eles[e];\n\n          handleElement( ele );\n        } // each element\n\n        var ranCoreAni = handleElement( cy, true );\n\n        // notify renderer\n        if( eles.length > 0 || ranCoreAni ){\n          var toNotify;\n\n          if( eles.length > 0 ){\n            var updatedEles = eles.updateCompoundBounds();\n            toNotify = updatedEles.length > 0 ? eles.add( updatedEles ) : eles;\n          }\n\n          cy.notify({\n            type: startedSomeAniThisTick ? 'style' : 'draw',\n            collection: toNotify\n          });\n        }\n\n        // remove elements from list of currently animating if its queues are empty\n        eles.unmerge( doneEles );\n\n      } // handleElements\n\n      function startAnimation( self, ani ){\n        var isCore = $$.is.core( self );\n        var isEles = !isCore;\n        var ele = self;\n        var style = cy._private.style;\n\n        if( isEles ){\n          var pos = ele._private.position;\n          var startPosition = {\n            x: pos.x,\n            y: pos.y\n          };\n          var startStyle = style.getValueStyle( ele );\n        }\n\n        if( isCore ){\n          var pan = cy._private.pan;\n          var startPan = {\n            x: pan.x,\n            y: pan.y\n          };\n\n          var startZoom = cy._private.zoom;\n        }\n\n        ani.started = true;\n        ani.startTime = Date.now();\n        ani.startPosition = startPosition;\n        ani.startStyle = startStyle;\n        ani.startPan = startPan;\n        ani.startZoom = startZoom;\n      }\n\n      function step( self, animation, now, isCore ){\n        var style = cy._private.style;\n        var properties = animation.properties;\n        var params = animation.params;\n        var startTime = animation.startTime;\n        var percent;\n        var isEles = !isCore;\n\n        if( animation.duration === 0 ){\n          percent = 1;\n        } else {\n          percent = Math.min(1, (now - startTime)/animation.duration);\n        }\n\n        if( percent < 0 ){\n          percent = 0;\n        } else if( percent > 1 ){\n          percent = 1;\n        }\n\n        if( properties.delay == null ){ // then update\n\n          var startPos = animation.startPosition;\n          var endPos = properties.position;\n          var pos = self._private.position;\n          if( endPos && isEles ){\n            if( valid( startPos.x, endPos.x ) ){\n              pos.x = ease( startPos.x, endPos.x, percent );\n            }\n\n            if( valid( startPos.y, endPos.y ) ){\n              pos.y = ease( startPos.y, endPos.y, percent );\n            }\n          }\n\n          var startPan = animation.startPan;\n          var endPan = properties.pan;\n          var pan = self._private.pan;\n          var animatingPan = endPan != null && isCore;\n          if( animatingPan ){\n            if( valid( startPan.x, endPan.x ) ){\n              pan.x = ease( startPan.x, endPan.x, percent );\n            }\n\n            if( valid( startPan.y, endPan.y ) ){\n              pan.y = ease( startPan.y, endPan.y, percent );\n            }\n\n            self.trigger('pan');\n          }\n\n          var startZoom = animation.startZoom;\n          var endZoom = properties.zoom;\n          var animatingZoom = endZoom != null && isCore;\n          if( animatingZoom ){\n            if( valid( startZoom, endZoom ) ){\n              self._private.zoom = ease( startZoom, endZoom, percent );\n            }\n\n            self.trigger('zoom');\n          }\n\n          if( animatingPan || animatingZoom ){\n            self.trigger('viewport');\n          }\n\n          var props = properties.style || properties.css;\n          if( props && isEles ){\n\n            for( var i = 0; i < props.length; i++ ){\n              var name = props[i].name;\n              var prop = props[i];\n              var end = prop;\n\n              var start = animation.startStyle[ name ];\n              var easedVal = ease( start, end, percent );\n\n              style.overrideBypass( self, name, easedVal );\n            } // for props\n\n          } // if\n\n        }\n\n        if( $$.is.fn(params.step) ){\n          params.step.apply( self, [ now ] );\n        }\n\n        if( percent >= 1 ){\n          animation.done = true;\n        }\n\n        return percent;\n      }\n\n      function valid(start, end){\n        if( start == null || end == null ){\n          return false;\n        }\n\n        if( $$.is.number(start) && $$.is.number(end) ){\n          return true;\n        } else if( (start) && (end) ){\n          return true;\n        }\n\n        return false;\n      }\n\n      function ease(startProp, endProp, percent){\n        if( percent < 0 ){\n          percent = 0;\n        } else if( percent > 1 ){\n          percent = 1;\n        }\n\n        var start, end;\n\n        if( startProp.pxValue != null || startProp.value != null ){\n          start = startProp.pxValue != null ? startProp.pxValue : startProp.value;\n        } else {\n          start = startProp;\n        }\n\n        if( endProp.pxValue != null || endProp.value != null ){\n          end = endProp.pxValue != null ? endProp.pxValue : endProp.value;\n        } else {\n          end = endProp;\n        }\n\n        if( $$.is.number(start) && $$.is.number(end) ){\n          return start + (end - start) * percent;\n\n        } else if( $$.is.number(start[0]) && $$.is.number(end[0]) ){ // then assume a colour\n          var c1 = start;\n          var c2 = end;\n\n          var ch = function(ch1, ch2){\n            var diff = ch2 - ch1;\n            var min = ch1;\n            return Math.round( percent * diff + min );\n          };\n\n          var r = ch( c1[0], c2[0] );\n          var g = ch( c1[1], c2[1] );\n          var b = ch( c1[2], c2[2] );\n\n          return [r, g, b];\n        }\n\n        return undefined;\n      }\n\n    }\n\n  });\n\n})( cytoscape, typeof window === 'undefined' ? null : window );\n\n;(function($$){ 'use strict';\n\n  $$.fn.core({\n    data: $$.define.data({\n      field: 'data',\n      bindingEvent: 'data',\n      allowBinding: true,\n      allowSetting: true,\n      settingEvent: 'data',\n      settingTriggersEvent: true,\n      triggerFnName: 'trigger',\n      allowGetting: true\n    }),\n\n    removeData: $$.define.removeData({\n      field: 'data',\n      event: 'data',\n      triggerFnName: 'trigger',\n      triggerEvent: true\n    }),\n\n    scratch: $$.define.data({\n      field: 'scratch',\n      allowBinding: false,\n      allowSetting: true,\n      settingTriggersEvent: false,\n      allowGetting: true\n    }),\n\n    removeScratch: $$.define.removeData({\n      field: 'scratch',\n      triggerEvent: false\n    })\n  });\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.core({\n    on: $$.define.on(), // .on( events [, selector] [, data], handler)\n    one: $$.define.on({ unbindSelfOnTrigger: true }),\n    once: $$.define.on({ unbindAllBindersOnTrigger: true }),\n    off: $$.define.off(), // .off( events [, selector] [, handler] )\n    trigger: $$.define.trigger() // .trigger( events [, extraParams] )\n  });\n\n  $$.define.eventAliasesOn( $$.corefn );\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.core({\n\n    png: function( options ){\n      var renderer = this._private.renderer;\n      options = options || {};\n\n      return renderer.png( options );\n    },\n\n    jpg: function( options ){\n      var renderer = this._private.renderer;\n      options = options || {};\n\n      options.bg = options.bg || '#fff';\n\n      return renderer.jpg( options );\n    }\n\n  });\n\n  $$.corefn.jpeg = $$.corefn.jpg;\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.core({\n\n    layout: function( params ){\n      var layout;\n\n      // always use a new layout w/ init opts; slightly different backwards compatibility\n      // but fixes layout reuse issues like dagre #819\n      if( params == null ){\n        params = $$.util.extend({}, this._private.options.layout);\n        params.eles = this.$();\n      }\n\n      layout = this.initLayout( params );\n      layout.run();\n\n      return this; // chaining\n    },\n\n    makeLayout: function( params ){\n      return this.initLayout( params );\n    },\n\n    initLayout: function( options ){\n      if( options == null ){\n        $$.util.error('Layout options must be specified to make a layout');\n        return;\n      }\n\n      if( options.name == null ){\n        $$.util.error('A `name` must be specified to make a layout');\n        return;\n      }\n\n      var name = options.name;\n      var LayoutProto = $$.extension('layout', name);\n\n      if( LayoutProto == null ){\n        $$.util.error('Can not apply layout: No such layout `' + name + '` found; did you include its JS file?');\n        return;\n      }\n\n      options.eles = options.eles != null ? options.eles : this.$();\n\n      if( $$.is.string( options.eles ) ){\n        options.eles = this.$( options.eles );\n      }\n\n      var layout = new LayoutProto( $$.util.extend({}, options, {\n        cy: this\n      }) );\n\n      // make sure layout has _private for use w/ std apis like .on()\n      if( !$$.is.plainObject(layout._private) ){\n        layout._private = {};\n      }\n\n      layout._private.cy = this;\n      layout._private.listeners = [];\n\n      return layout;\n    }\n\n  });\n\n  $$.corefn.createLayout = $$.corefn.makeLayout;\n\n})( cytoscape );\n\n(function($$){ 'use strict';\n\n  $$.fn.core({\n    notify: function( params ){\n      if( this._private.batchingNotify ){\n        var bEles = this._private.batchNotifyEles;\n        var bTypes = this._private.batchNotifyTypes;\n\n        if( params.collection ){ for( var i = 0; i < params.collection.length; i++ ){\n          var ele = params.collection[i];\n\n          if( !bEles.ids[ ele._private.id ] ){\n            bEles.push( ele );\n          }\n        } }\n\n        if( !bTypes.ids[ params.type ] ){\n          bTypes.push( params.type );\n        }\n\n        return; // notifications are disabled during batching\n      }\n\n      if( !this._private.notificationsEnabled ){ return; } // exit on disabled\n\n      var renderer = this.renderer();\n\n      renderer.notify(params);\n    },\n\n    notifications: function( bool ){\n      var p = this._private;\n\n      if( bool === undefined ){\n        return p.notificationsEnabled;\n      } else {\n        p.notificationsEnabled = bool ? true : false;\n      }\n    },\n\n    noNotifications: function( callback ){\n      this.notifications(false);\n      callback();\n      this.notifications(true);\n    },\n\n    startBatch: function(){\n      var _p = this._private;\n\n      _p.batchingStyle = _p.batchingNotify = true;\n      _p.batchStyleEles = [];\n      _p.batchNotifyEles = [];\n      _p.batchNotifyTypes = [];\n\n      _p.batchStyleEles.ids = {};\n      _p.batchNotifyEles.ids = {};\n      _p.batchNotifyTypes.ids = {};\n\n      return this;\n    },\n\n    endBatch: function(){\n      var _p = this._private;\n\n      // update style for dirty eles\n      _p.batchingStyle = false;\n      new $$.Collection(this, _p.batchStyleEles).updateStyle();\n\n      // notify the renderer of queued eles and event types\n      _p.batchingNotify = false;\n      this.notify({\n        type: _p.batchNotifyTypes,\n        collection: _p.batchNotifyEles\n      });\n\n      return this;\n    },\n\n    batch: function( callback ){\n      this.startBatch();\n      callback();\n      this.endBatch();\n\n      return this;\n    },\n\n    // for backwards compatibility\n    batchData: function( map ){\n      var cy = this;\n\n      return this.batch(function(){\n        for( var id in map ){\n          var data = map[id];\n          var ele = cy.getElementById( id );\n\n          ele.data( data );\n        }\n      });\n    }\n  });\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.core({\n\n    renderTo: function( context, zoom, pan, pxRatio ){\n      var r = this._private.renderer;\n\n      r.renderTo( context, zoom, pan, pxRatio );\n      return this;\n    },\n\n    renderer: function(){\n      return this._private.renderer;\n    },\n\n    forceRender: function(){\n      this.notify({\n        type: 'draw'\n      });\n\n      return this;\n    },\n\n    resize: function(){\n      this.notify({\n        type: 'resize'\n      });\n\n      this.trigger('resize');\n\n      return this;\n    },\n\n    initRenderer: function( options ){\n      var cy = this;\n\n      var RendererProto = $$.extension('renderer', options.name);\n      if( RendererProto == null ){\n        $$.util.error('Can not initialise: No such renderer `%s` found; did you include its JS file?', options.name);\n        return;\n      }\n\n      this._private.renderer = new RendererProto(\n        $$.util.extend({}, options, {\n          cy: cy,\n          style: cy._private.style\n        })\n      );\n\n    },\n\n    triggerOnRender: function(){\n      var cbs = this._private.onRenders;\n\n      for( var i = 0; i < cbs.length; i++ ){\n        var cb = cbs[i];\n\n        cb();\n      }\n\n      return this;\n    },\n\n    onRender: function( cb ){\n      this._private.onRenders.push( cb );\n\n      return this;\n    },\n\n    offRender: function( fn ){\n      var cbs = this._private.onRenders;\n\n      if( fn == null ){ // unbind all\n        this._private.onRenders = [];\n        return this;\n      }\n\n      for( var i = 0; i < cbs.length; i++ ){ // unbind specified\n        var cb = cbs[i];\n\n        if( fn === cb ){\n          cbs.splice( i, 1 );\n          break;\n        }\n      }\n\n      return this;\n    }\n\n  });\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.core({\n\n    // get a collection\n    // - empty collection on no args\n    // - collection of elements in the graph on selector arg\n    // - guarantee a returned collection when elements or collection specified\n    collection: function( eles ){\n\n      if( $$.is.string( eles ) ){\n        return this.$( eles );\n\n      } else if( $$.is.elementOrCollection( eles ) ){\n        return eles.collection();\n\n      } else if( $$.is.array( eles ) ){\n        return new $$.Collection( this, eles );\n      }\n\n      return new $$.Collection( this );\n    },\n\n    nodes: function( selector ){\n      var nodes = this.$(function(){\n        return this.isNode();\n      });\n\n      if( selector ){\n        return nodes.filter( selector );\n      }\n\n      return nodes;\n    },\n\n    edges: function( selector ){\n      var edges = this.$(function(){\n        return this.isEdge();\n      });\n\n      if( selector ){\n        return edges.filter( selector );\n      }\n\n      return edges;\n    },\n\n    // search the graph like jQuery\n    $: function( selector ){\n      var eles = new $$.Collection( this, this._private.elements );\n\n      if( selector ){\n        return eles.filter( selector );\n      }\n\n      return eles;\n    }\n\n  });\n\n  // aliases\n  $$.corefn.elements = $$.corefn.filter = $$.corefn.$;\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.core({\n\n    style: function( newStyle ){\n      if( newStyle ){\n        var s = this.setStyle( newStyle );\n\n        s.update();\n      }\n\n      return this._private.style;\n    },\n\n    setStyle: function( style ){\n      var _p = this._private;\n\n      if( $$.is.stylesheet(style) ){\n        _p.style = style.generateStyle(this);\n\n      } else if( $$.is.array(style) ) {\n        _p.style = $$.style.fromJson(this, style);\n\n      } else if( $$.is.string(style) ){\n        _p.style = $$.style.fromString(this, style);\n\n      } else {\n        _p.style = new $$.Style( this );\n      }\n\n      return _p.style;\n    }\n  });\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.core({\n\n    autolock: function(bool){\n      if( bool !== undefined ){\n        this._private.autolock = bool ? true : false;\n      } else {\n        return this._private.autolock;\n      }\n\n      return this; // chaining\n    },\n\n    autoungrabify: function(bool){\n      if( bool !== undefined ){\n        this._private.autoungrabify = bool ? true : false;\n      } else {\n        return this._private.autoungrabify;\n      }\n\n      return this; // chaining\n    },\n\n    autounselectify: function(bool){\n      if( bool !== undefined ){\n        this._private.autounselectify = bool ? true : false;\n      } else {\n        return this._private.autounselectify;\n      }\n\n      return this; // chaining\n    },\n\n    panningEnabled: function( bool ){\n      if( bool !== undefined ){\n        this._private.panningEnabled = bool ? true : false;\n      } else {\n        return this._private.panningEnabled;\n      }\n\n      return this; // chaining\n    },\n\n    userPanningEnabled: function( bool ){\n      if( bool !== undefined ){\n        this._private.userPanningEnabled = bool ? true : false;\n      } else {\n        return this._private.userPanningEnabled;\n      }\n\n      return this; // chaining\n    },\n\n    zoomingEnabled: function( bool ){\n      if( bool !== undefined ){\n        this._private.zoomingEnabled = bool ? true : false;\n      } else {\n        return this._private.zoomingEnabled;\n      }\n\n      return this; // chaining\n    },\n\n    userZoomingEnabled: function( bool ){\n      if( bool !== undefined ){\n        this._private.userZoomingEnabled = bool ? true : false;\n      } else {\n        return this._private.userZoomingEnabled;\n      }\n\n      return this; // chaining\n    },\n\n    boxSelectionEnabled: function( bool ){\n      if( bool !== undefined ){\n        this._private.boxSelectionEnabled = bool ? true : false;\n      } else {\n        return this._private.boxSelectionEnabled;\n      }\n\n      return this; // chaining\n    },\n\n    pan: function(){\n      var args = arguments;\n      var pan = this._private.pan;\n      var dim, val, dims, x, y;\n\n      switch( args.length ){\n      case 0: // .pan()\n        return pan;\n\n      case 1:\n\n        if( $$.is.string( args[0] ) ){ // .pan('x')\n          dim = args[0];\n          return pan[ dim ];\n\n        } else if( $$.is.plainObject( args[0] ) ) { // .pan({ x: 0, y: 100 })\n          if( !this._private.panningEnabled ){\n            return this;\n          }\n\n          dims = args[0];\n          x = dims.x;\n          y = dims.y;\n\n          if( $$.is.number(x) ){\n            pan.x = x;\n          }\n\n          if( $$.is.number(y) ){\n            pan.y = y;\n          }\n\n          this.trigger('pan viewport');\n        }\n        break;\n\n      case 2: // .pan('x', 100)\n        if( !this._private.panningEnabled ){\n          return this;\n        }\n\n        dim = args[0];\n        val = args[1];\n\n        if( (dim === 'x' || dim === 'y') && $$.is.number(val) ){\n          pan[dim] = val;\n        }\n\n        this.trigger('pan viewport');\n        break;\n\n      default:\n        break; // invalid\n      }\n\n      this.notify({ // notify the renderer that the viewport changed\n        type: 'viewport'\n      });\n\n      return this; // chaining\n    },\n\n    panBy: function(params){\n      var args = arguments;\n      var pan = this._private.pan;\n      var dim, val, dims, x, y;\n\n      if( !this._private.panningEnabled ){\n        return this;\n      }\n\n      switch( args.length ){\n      case 1:\n\n        if( $$.is.plainObject( args[0] ) ) { // .panBy({ x: 0, y: 100 })\n          dims = args[0];\n          x = dims.x;\n          y = dims.y;\n\n          if( $$.is.number(x) ){\n            pan.x += x;\n          }\n\n          if( $$.is.number(y) ){\n            pan.y += y;\n          }\n\n          this.trigger('pan viewport');\n        }\n        break;\n\n      case 2: // .panBy('x', 100)\n        dim = args[0];\n        val = args[1];\n\n        if( (dim === 'x' || dim === 'y') && $$.is.number(val) ){\n          pan[dim] += val;\n        }\n\n        this.trigger('pan viewport');\n        break;\n\n      default:\n        break; // invalid\n      }\n\n      this.notify({ // notify the renderer that the viewport changed\n        type: 'viewport'\n      });\n\n      return this; // chaining\n    },\n\n    fit: function( elements, padding ){\n      var viewportState = this.getFitViewport( elements, padding );\n\n      if( viewportState ){\n        var _p = this._private;\n        _p.zoom = viewportState.zoom;\n        _p.pan = viewportState.pan;\n\n        this.trigger('pan zoom viewport');\n\n        this.notify({ // notify the renderer that the viewport changed\n          type: 'viewport'\n        });\n      }\n\n      return this; // chaining\n    },\n\n    getFitViewport: function( elements, padding ){\n      if( $$.is.number(elements) && padding === undefined ){ // elements is optional\n        padding = elements;\n        elements = undefined;\n      }\n\n      if( !this._private.panningEnabled || !this._private.zoomingEnabled ){\n        return;\n      }\n\n      var bb;\n\n      if( $$.is.string(elements) ){\n        var sel = elements;\n        elements = this.$( sel );\n\n      } else if( $$.is.boundingBox(elements) ){ // assume bb\n        var bbe = elements;\n        bb = {\n          x1: bbe.x1,\n          y1: bbe.y1,\n          x2: bbe.x2,\n          y2: bbe.y2\n        };\n\n        bb.w = bb.x2 - bb.x1;\n        bb.h = bb.y2 - bb.y1;\n\n      } else if( !$$.is.elementOrCollection(elements) ){\n        elements = this.elements();\n      }\n\n      bb = bb || elements.boundingBox();\n\n      var w = this.width();\n      var h = this.height();\n      var zoom;\n      padding = $$.is.number(padding) ? padding : 0;\n\n      if( !isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) &&  bb.w > 0 && bb.h > 0 ){\n        zoom = Math.min( (w - 2*padding)/bb.w, (h - 2*padding)/bb.h );\n\n        // crop zoom\n        zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;\n        zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;\n\n        var pan = { // now pan to middle\n          x: (w - zoom*( bb.x1 + bb.x2 ))/2,\n          y: (h - zoom*( bb.y1 + bb.y2 ))/2\n        };\n\n        return {\n          zoom: zoom,\n          pan: pan\n        };\n      }\n\n      return;\n    },\n\n    minZoom: function( zoom ){\n      if( zoom === undefined ){\n        return this._private.minZoom;\n      } else if( $$.is.number(zoom) ){\n        this._private.minZoom = zoom;\n      }\n\n      return this;\n    },\n\n    maxZoom: function( zoom ){\n      if( zoom === undefined ){\n        return this._private.maxZoom;\n      } else if( $$.is.number(zoom) ){\n        this._private.maxZoom = zoom;\n      }\n\n      return this;\n    },\n\n    zoom: function( params ){\n      var pos; // in rendered px\n      var zoom;\n\n      if( params === undefined ){ // then get the zoom\n        return this._private.zoom;\n\n      } else if( $$.is.number(params) ){ // then set the zoom\n        zoom = params;\n\n      } else if( $$.is.plainObject(params) ){ // then zoom about a point\n        zoom = params.level;\n\n        if( params.position ){\n          var p = params.position;\n          var pan = this._private.pan;\n          var z = this._private.zoom;\n\n          pos = { // convert to rendered px\n            x: p.x * z + pan.x,\n            y: p.y * z + pan.y\n          };\n        } else if( params.renderedPosition ){\n          pos = params.renderedPosition;\n        }\n\n        if( pos && !this._private.panningEnabled ){\n          return this; // panning disabled\n        }\n      }\n\n      if( !this._private.zoomingEnabled ){\n        return this; // zooming disabled\n      }\n\n      if( !$$.is.number(zoom) || ( pos && (!$$.is.number(pos.x) || !$$.is.number(pos.y)) ) ){\n        return this; // can't zoom with invalid params\n      }\n\n      // crop zoom\n      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;\n      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;\n\n      if( pos ){ // set zoom about position\n        var pan1 = this._private.pan;\n        var zoom1 = this._private.zoom;\n        var zoom2 = zoom;\n\n        var pan2 = {\n          x: -zoom2/zoom1 * (pos.x - pan1.x) + pos.x,\n          y: -zoom2/zoom1 * (pos.y - pan1.y) + pos.y\n        };\n\n        this._private.zoom = zoom;\n        this._private.pan = pan2;\n\n        var posChanged = pan1.x !== pan2.x || pan1.y !== pan2.y;\n        this.trigger(' zoom ' + (posChanged ? ' pan ' : '') + ' viewport ' );\n\n      } else { // just set the zoom\n        this._private.zoom = zoom;\n        this.trigger('zoom viewport');\n      }\n\n      this.notify({ // notify the renderer that the viewport changed\n        type: 'viewport'\n      });\n\n      return this; // chaining\n    },\n\n    viewport: function( opts ){\n      var _p = this._private;\n      var zoomDefd = true;\n      var panDefd = true;\n      var events = []; // to trigger\n      var zoomFailed = false;\n      var panFailed = false;\n\n      if( !opts ){ return this; }\n      if( !$$.is.number(opts.zoom) ){ zoomDefd = false; }\n      if( !$$.is.plainObject(opts.pan) ){ panDefd = false; }\n      if( !zoomDefd && !panDefd ){ return this; }\n\n      if( zoomDefd ){\n        var z = opts.zoom;\n\n        if( z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled ){\n          zoomFailed = true;\n\n        } else {\n          _p.zoom = z;\n\n          events.push('zoom');\n        }\n      }\n\n      if( panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled ){\n        var p = opts.pan;\n\n        if( $$.is.number(p.x) ){\n          _p.pan.x = p.x;\n          panFailed = false;\n        }\n\n        if( $$.is.number(p.y) ){\n          _p.pan.y = p.y;\n          panFailed = false;\n        }\n\n        if( !panFailed ){\n          events.push('pan');\n        }\n      }\n\n      if( events.length > 0 ){\n        events.push('viewport');\n        this.trigger( events.join(' ') );\n\n        this.notify({\n          type: 'viewport'\n        });\n      }\n\n      return this; // chaining\n    },\n\n    center: function( elements ){\n      var pan = this.getCenterPan( elements );\n\n      if( pan ){\n        this._private.pan = pan;\n\n        this.trigger('pan viewport');\n\n        this.notify({ // notify the renderer that the viewport changed\n          type: 'viewport'\n        });\n      }\n\n      return this; // chaining\n    },\n\n    getCenterPan: function( elements, zoom ){\n      if( !this._private.panningEnabled ){\n        return;\n      }\n\n      if( $$.is.string(elements) ){\n        var selector = elements;\n        elements = this.elements( selector );\n      } else if( !$$.is.elementOrCollection(elements) ){\n        elements = this.elements();\n      }\n\n      var bb = elements.boundingBox();\n      var w = this.width();\n      var h = this.height();\n      zoom = zoom === undefined ? this._private.zoom : zoom;\n\n      var pan = { // middle\n        x: (w - zoom*( bb.x1 + bb.x2 ))/2,\n        y: (h - zoom*( bb.y1 + bb.y2 ))/2\n      };\n\n      return pan;\n    },\n\n    reset: function(){\n      if( !this._private.panningEnabled || !this._private.zoomingEnabled ){\n        return this;\n      }\n\n      this.viewport({\n        pan: { x: 0, y: 0 },\n        zoom: 1\n      });\n\n      return this; // chaining\n    },\n\n    width: function(){\n      var container = this._private.container;\n\n      if( container ){\n        return container.clientWidth;\n      }\n\n      return 1; // fallback if no container (not 0 b/c can be used for dividing etc)\n    },\n\n    height: function(){\n      var container = this._private.container;\n\n      if( container ){\n        return container.clientHeight;\n      }\n\n      return 1; // fallback if no container (not 0 b/c can be used for dividing etc)\n    },\n\n    extent: function(){\n      var pan = this._private.pan;\n      var zoom = this._private.zoom;\n      var rb = this.renderedExtent();\n\n      var b = {\n        x1: ( rb.x1 - pan.x )/zoom,\n        x2: ( rb.x2 - pan.x )/zoom,\n        y1: ( rb.y1 - pan.y )/zoom,\n        y2: ( rb.y2 - pan.y )/zoom,\n      };\n\n      b.w = b.x2 - b.x1;\n      b.h = b.y2 - b.y1;\n\n      return b;\n    },\n\n    renderedExtent: function(){\n      var width = this.width();\n      var height = this.height();\n\n      return {\n        x1: 0,\n        y1: 0,\n        x2: width,\n        y2: height,\n        w: width,\n        h: height\n      };\n    }\n  });\n\n  // aliases\n  $$.corefn.centre = $$.corefn.center;\n\n  // backwards compatibility\n  $$.corefn.autolockNodes = $$.corefn.autolock;\n  $$.corefn.autoungrabifyNodes = $$.corefn.autoungrabify;\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // Use this interface to define functions for collections/elements.\n  // This interface is good, because it forces you to think in terms\n  // of the collections case (more than 1 element), so we don't need\n  // notification blocking nonsense everywhere.\n  //\n  // Other collection-*.js files depend on this being defined first.\n  // It's a trade off: It simplifies the code for Collection and\n  // Element integration so much that it's worth it to create the\n  // JS dependency.\n  //\n  // Having this integration guarantees that we can call any\n  // collection function on an element and vice versa.\n\n  // e.g. $$.fn.collection({ someFunc: function(){ /* ... */ } })\n  $$.fn.collection = $$.fn.eles = function( fnMap, options ){\n    for( var name in fnMap ){\n      var fn = fnMap[name];\n\n      $$.Collection.prototype[ name ] = fn;\n    }\n  };\n\n  // factory for generating edge ids when no id is specified for a new element\n  var idFactory = {\n    prefix: {\n      nodes: 'n',\n      edges: 'e'\n    },\n    id: {\n      nodes: 0,\n      edges: 0\n    },\n    generate: function(cy, element, tryThisId){\n      var json = $$.is.element( element ) ? element._private : element;\n      var group = json.group;\n      var id = tryThisId != null ? tryThisId : this.prefix[group] + this.id[group];\n\n      if( cy.getElementById(id).empty() ){\n        this.id[group]++; // we've used the current id, so move it up\n      } else { // otherwise keep trying successive unused ids\n        while( !cy.getElementById(id).empty() ){\n          id = this.prefix[group] + ( ++this.id[group] );\n        }\n      }\n\n      return id;\n    }\n  };\n\n  // Element\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // represents a node or an edge\n  $$.Element = function(cy, params, restore){\n    if( !(this instanceof $$.Element) ){\n      return new $$.Element(cy, params, restore);\n    }\n\n    var self = this;\n    restore = (restore === undefined || restore ? true : false);\n\n    if( cy === undefined || params === undefined || !$$.is.core(cy) ){\n      $$.util.error('An element must have a core reference and parameters set');\n      return;\n    }\n\n    // validate group\n    if( params.group !== 'nodes' && params.group !== 'edges' ){\n      $$.util.error('An element must be of type `nodes` or `edges`; you specified `' + params.group + '`');\n      return;\n    }\n\n    // make the element array-like, just like a collection\n    this.length = 1;\n    this[0] = this;\n\n    // NOTE: when something is added here, add also to ele.json()\n    this._private = {\n      cy: cy,\n      single: true, // indicates this is an element\n      data: params.data || {}, // data object\n      position: params.position || {}, // (x, y) position pair\n      autoWidth: undefined, // width and height of nodes calculated by the renderer when set to special 'auto' value\n      autoHeight: undefined,\n      listeners: [], // array of bound listeners\n      group: params.group, // string; 'nodes' or 'edges'\n      style: {}, // properties as set by the style\n      rstyle: {}, // properties for style sent from the renderer to the core\n      styleCxts: [], // applied style contexts from the styler\n      removed: true, // whether it's inside the vis; true if removed (set true here since we call restore)\n      selected: params.selected ? true : false, // whether it's selected\n      selectable: params.selectable === undefined ? true : ( params.selectable ? true : false ), // whether it's selectable\n      locked: params.locked ? true : false, // whether the element is locked (cannot be moved)\n      grabbed: false, // whether the element is grabbed by the mouse; renderer sets this privately\n      grabbable: params.grabbable === undefined ? true : ( params.grabbable ? true : false ), // whether the element can be grabbed\n      active: false, // whether the element is active from user interaction\n      classes: {}, // map ( className => true )\n      animation: { // object for currently-running animations\n        current: [],\n        queue: []\n      },\n      rscratch: {}, // object in which the renderer can store information\n      scratch: params.scratch || {}, // scratch objects\n      edges: [], // array of connected edges\n      children: [] // array of children\n    };\n\n    // renderedPosition overrides if specified\n    if( params.renderedPosition ){\n      var rpos = params.renderedPosition;\n      var pan = cy.pan();\n      var zoom = cy.zoom();\n\n      this._private.position = {\n        x: (rpos.x - pan.x)/zoom,\n        y: (rpos.y - pan.y)/zoom\n      };\n    }\n\n    if( $$.is.string(params.classes) ){\n      var classes = params.classes.split(/\\s+/);\n      for( var i = 0, l = classes.length; i < l; i++ ){\n        var cls = classes[i];\n        if( !cls || cls === '' ){ continue; }\n\n        self._private.classes[cls] = true;\n      }\n    }\n\n    if( params.css ){\n      cy.style().applyBypass( this, params.css );\n    }\n\n    if( restore === undefined || restore ){\n      this.restore();\n    }\n\n  };\n\n\n  // Collection\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // represents a set of nodes, edges, or both together\n  $$.Collection = function(cy, elements, options){\n    if( !(this instanceof $$.Collection) ){\n      return new $$.Collection(cy, elements);\n    }\n\n    if( cy === undefined || !$$.is.core(cy) ){\n      $$.util.error('A collection must have a reference to the core');\n      return;\n    }\n\n    var ids = {};\n    var indexes = {};\n    var createdElements = false;\n\n    if( !elements ){\n      elements = [];\n    } else if( elements.length > 0 && $$.is.plainObject( elements[0] ) && !$$.is.element( elements[0] ) ){\n      createdElements = true;\n\n      // make elements from json and restore all at once later\n      var eles = [];\n      var elesIds = {};\n\n      for( var i = 0, l = elements.length; i < l; i++ ){\n        var json = elements[i];\n\n        if( json.data == null ){\n          json.data = {};\n        }\n\n        var data = json.data;\n\n        // make sure newly created elements have valid ids\n        if( data.id == null ){\n          data.id = idFactory.generate( cy, json );\n        } else if( cy.getElementById( data.id ).length !== 0 || elesIds[ data.id ] ){\n          continue; // can't create element if prior id already exists\n        }\n\n        var ele = new $$.Element( cy, json, false );\n        eles.push( ele );\n        elesIds[ data.id ] = true;\n      }\n\n      elements = eles;\n    }\n\n    this.length = 0;\n\n    for( var i = 0, l = elements.length; i < l; i++ ){\n      var element = elements[i];\n      if( !element ){  continue; }\n\n      var id = element._private.data.id;\n\n      if( !options || (options.unique && !ids[ id ] ) ){\n        ids[ id ] = element;\n        indexes[ id ] = this.length;\n\n        this[ this.length ] = element;\n        this.length++;\n      }\n    }\n\n    this._private = {\n      cy: cy,\n      ids: ids,\n      indexes: indexes\n    };\n\n    // restore the elements if we created them from json\n    if( createdElements ){\n      this.restore();\n    }\n  };\n\n\n  // Functions\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // keep the prototypes in sync (an element has the same functions as a collection)\n  // and use $$.elefn and $$.elesfn as shorthands to the prototypes\n  $$.elefn = $$.elesfn = $$.Element.prototype = $$.Collection.prototype;\n\n  $$.elesfn.cy = function(){\n    return this._private.cy;\n  };\n\n  $$.elesfn.element = function(){\n    return this[0];\n  };\n\n  $$.elesfn.collection = function(){\n    if( $$.is.collection(this) ){\n      return this;\n    } else { // an element\n      return new $$.Collection( this._private.cy, [this] );\n    }\n  };\n\n  $$.elesfn.unique = function(){\n    return new $$.Collection( this._private.cy, this, { unique: true } );\n  };\n\n  $$.elesfn.getElementById = function( id ){\n    var cy = this._private.cy;\n    var ele = this._private.ids[ id ];\n\n    return ele ? ele : $$.Collection(cy); // get ele or empty collection\n  };\n\n  $$.elesfn.json = function(){\n    var ele = this.element();\n    if( ele == null ){ return undefined; }\n\n    var p = ele._private;\n\n    var json = $$.util.copy({\n      data: p.data,\n      position: p.position,\n      group: p.group,\n      bypass: p.bypass,\n      removed: p.removed,\n      selected: p.selected,\n      selectable: p.selectable,\n      locked: p.locked,\n      grabbed: p.grabbed,\n      grabbable: p.grabbable,\n      classes: ''\n    });\n\n    var classes = [];\n    for( var cls in p.classes ){\n      if( p.classes[cls] ){\n        classes.push(cls);\n      }\n    }\n\n    for( var i = 0; i < classes.length; i++ ){\n      var cls = classes[i];\n      json.classes += cls + ( i < classes.length - 1 ? ' ' : '' );\n    }\n\n    return json;\n  };\n\n  $$.elesfn.jsons = function(){\n    var jsons = [];\n\n    for( var i = 0; i < this.length; i++ ){\n      var ele = this[i];\n      var json = ele.json();\n\n      jsons.push( json );\n    }\n\n    return jsons;\n  };\n\n  $$.elesfn.clone = function(){\n    var cy = this.cy();\n    var elesArr = [];\n\n    for( var i = 0; i < this.length; i++ ){\n      var ele = this[i];\n      var json = ele.json();\n      var clone = new $$.Element(cy, json, false); // NB no restore\n\n      elesArr.push( clone );\n    }\n\n    return new $$.Collection( cy, elesArr );\n  };\n  $$.elesfn.copy = $$.elesfn.clone;\n\n  $$.elesfn.restore = function( notifyRenderer ){\n    var self = this;\n    var restored = [];\n    var cy = self.cy();\n\n    if( notifyRenderer === undefined ){\n      notifyRenderer = true;\n    }\n\n    // create arrays of nodes and edges, since we need to\n    // restore the nodes first\n    var elements = [];\n    var nodes = [], edges = [];\n    var numNodes = 0;\n    var numEdges = 0;\n    for( var i = 0, l = self.length; i < l; i++ ){\n      var ele = self[i];\n\n      // keep nodes first in the array and edges after\n      if( ele.isNode() ){ // put to front of array if node\n        nodes.push( ele );\n        numNodes++;\n      } else { // put to end of array if edge\n        edges.push( ele );\n        numEdges++;\n      }\n    }\n\n    elements = nodes.concat( edges );\n\n    // now, restore each element\n    for( var i = 0, l = elements.length; i < l; i++ ){\n      var ele = elements[i];\n\n      if( !ele.removed() ){\n        // don't need to do anything\n        continue;\n      }\n\n      var _private = ele._private;\n      var data = _private.data;\n\n      // set id and validate\n      if( data.id === undefined ){\n        data.id = idFactory.generate( cy, ele );\n\n      } else if( $$.is.number(data.id) ){\n        data.id = '' + data.id; // now it's a string\n\n      } else if( $$.is.emptyString(data.id) || !$$.is.string(data.id) ){\n        $$.util.error('Can not create element with invalid string ID `' + data.id + '`');\n\n        // can't create element if it has empty string as id or non-string id\n        continue;\n      } else if( cy.getElementById( data.id ).length !== 0 ){\n        $$.util.error('Can not create second element with ID `' + data.id + '`');\n\n        // can't create element if one already has that id\n        continue;\n      }\n\n      var id = data.id; // id is finalised, now let's keep a ref\n\n      if( ele.isNode() ){ // extra checks for nodes\n        var node = ele;\n        var pos = _private.position;\n\n        // make sure we have a defined position\n        if( pos.x == null ){ pos.x = 0; }\n        if( pos.y == null ){ pos.y = 0; }\n      }\n\n      if( ele.isEdge() ){ // extra checks for edges\n\n        var edge = ele;\n        var fields = ['source', 'target'];\n        var fieldsLength = fields.length;\n        var badSourceOrTarget = false;\n        for(var j = 0; j < fieldsLength; j++){\n\n          var field = fields[j];\n          var val = data[field];\n\n          if( $$.is.number(val) ){\n            val = data[field] = '' + data[field]; // now string\n          }\n\n          if( val == null || val === '' ){\n            // can't create if source or target is not defined properly\n            $$.util.error('Can not create edge `' + id + '` with unspecified ' + field);\n            badSourceOrTarget = true;\n          } else if( cy.getElementById(val).empty() ){\n            // can't create edge if one of its nodes doesn't exist\n            $$.util.error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');\n            badSourceOrTarget = true;\n          }\n        }\n\n        if( badSourceOrTarget ){ continue; } // can't create this\n\n        var src = cy.getElementById( data.source );\n        var tgt = cy.getElementById( data.target );\n\n        src._private.edges.push( edge );\n        tgt._private.edges.push( edge );\n\n        edge._private.source = src;\n        edge._private.target = tgt;\n\n      } // if is edge\n\n      // create mock ids map for element so it can be used like collections\n      _private.ids = {};\n      _private.ids[ id ] = ele;\n\n      _private.removed = false;\n      cy.addToPool( ele );\n\n      restored.push( ele );\n    } // for each element\n\n    // do compound node sanity checks\n    for( var i = 0; i < numNodes; i++ ){ // each node\n      var node = elements[i];\n      var data = node._private.data;\n\n      if( $$.is.number(data.parent) ){ // then automake string\n        data.parent = '' + data.parent;\n      }\n\n      var parentId = data.parent;\n\n      var specifiedParent = parentId != null;\n\n      if( specifiedParent ){\n        var parent = cy.getElementById( parentId );\n\n        if( parent.empty() ){\n          // non-existant parent; just remove it\n          data.parent = undefined;\n        } else {\n          var selfAsParent = false;\n          var ancestor = parent;\n          while( !ancestor.empty() ){\n            if( node.same(ancestor) ){\n              // mark self as parent and remove from data\n              selfAsParent = true;\n              data.parent = undefined; // remove parent reference\n\n              // exit or we loop forever\n              break;\n            }\n\n            ancestor = ancestor.parent();\n          }\n\n          if( !selfAsParent ){\n            // connect with children\n            parent[0]._private.children.push( node );\n            node._private.parent = parent[0];\n\n            // let the core know we have a compound graph\n            cy._private.hasCompoundNodes = true;\n          }\n        } // else\n      } // if specified parent\n    } // for each node\n\n    restored = new $$.Collection( cy, restored );\n    if( restored.length > 0 ){\n\n      var toUpdateStyle = restored.add( restored.connectedNodes() ).add( restored.parent() );\n      toUpdateStyle.updateStyle( notifyRenderer );\n\n      if( notifyRenderer ){\n        restored.rtrigger('add');\n      } else {\n        restored.trigger('add');\n      }\n    }\n\n    return self; // chainability\n  };\n\n  $$.elesfn.removed = function(){\n    var ele = this[0];\n    return ele && ele._private.removed;\n  };\n\n  $$.elesfn.inside = function(){\n    var ele = this[0];\n    return ele && !ele._private.removed;\n  };\n\n  $$.elesfn.remove = function( notifyRenderer ){\n    var self = this;\n    var removed = [];\n    var elesToRemove = [];\n    var elesToRemoveIds = {};\n    var cy = self._private.cy;\n\n    if( notifyRenderer === undefined ){\n      notifyRenderer = true;\n    }\n\n    // add connected edges\n    function addConnectedEdges(node){\n      var edges = node._private.edges;\n      for( var i = 0; i < edges.length; i++ ){\n        add( edges[i] );\n      }\n    }\n\n\n    // add descendant nodes\n    function addChildren(node){\n      var children = node._private.children;\n\n      for( var i = 0; i < children.length; i++ ){\n        add( children[i] );\n      }\n    }\n\n    function add( ele ){\n      var alreadyAdded =  elesToRemoveIds[ ele.id() ];\n      if( alreadyAdded ){\n        return;\n      } else {\n        elesToRemoveIds[ ele.id() ] = true;\n      }\n\n      if( ele.isNode() ){\n        elesToRemove.push( ele ); // nodes are removed last\n\n        addConnectedEdges( ele );\n        addChildren( ele );\n      } else {\n        elesToRemove.unshift( ele ); // edges are removed first\n      }\n    }\n\n    // make the list of elements to remove\n    // (may be removing more than specified due to connected edges etc)\n\n    for( var i = 0, l = self.length; i < l; i++ ){\n      var ele = self[i];\n\n      add( ele );\n    }\n\n    function removeEdgeRef(node, edge){\n      var connectedEdges = node._private.edges;\n      for( var j = 0; j < connectedEdges.length; j++ ){\n        var connectedEdge = connectedEdges[j];\n\n        if( edge === connectedEdge ){\n          connectedEdges.splice( j, 1 );\n          break;\n        }\n      }\n    }\n\n    function removeChildRef(parent, ele){\n      ele = ele[0];\n      parent = parent[0];\n      var children = parent._private.children;\n\n      for( var j = 0; j < children.length; j++ ){\n        if( children[j][0] === ele[0] ){\n          children.splice(j, 1);\n          break;\n        }\n      }\n    }\n\n    for( var i = 0; i < elesToRemove.length; i++ ){\n      var ele = elesToRemove[i];\n\n      // mark as removed\n      ele._private.removed = true;\n\n      // remove from core pool\n      cy.removeFromPool( ele );\n\n      // add to list of removed elements\n      removed.push( ele );\n\n      if( ele.isEdge() ){ // remove references to this edge in its connected nodes\n        var src = ele.source()[0];\n        var tgt = ele.target()[0];\n\n        removeEdgeRef( src, ele );\n        removeEdgeRef( tgt, ele );\n\n      } else { // remove reference to parent\n        var parent = ele.parent();\n\n        if( parent.length !== 0 ){\n          removeChildRef(parent, ele);\n        }\n      }\n    }\n\n    // check to see if we have a compound graph or not\n    var elesStillInside = cy._private.elements;\n    cy._private.hasCompoundNodes = false;\n    for( var i = 0; i < elesStillInside.length; i++ ){\n      var ele = elesStillInside[i];\n\n      if( ele.isParent() ){\n        cy._private.hasCompoundNodes = true;\n        break;\n      }\n    }\n\n    var removedElements = new $$.Collection( this.cy(), removed );\n    if( removedElements.size() > 0 ){\n      // must manually notify since trigger won't do this automatically once removed\n\n      if( notifyRenderer ){\n        this.cy().notify({\n          type: 'remove',\n          collection: removedElements\n        });\n      }\n\n      removedElements.trigger('remove');\n    }\n\n    // check for empty remaining parent nodes\n    var checkedParentId = {};\n    for( var i = 0; i < elesToRemove.length; i++ ){\n      var ele = elesToRemove[i];\n      var isNode = ele._private.group === 'nodes';\n      var parentId = ele._private.data.parent;\n\n      if( isNode && parentId !== undefined && !checkedParentId[ parentId ] ){\n        checkedParentId[ parentId ] = true;\n        var parent = cy.getElementById( parentId );\n\n        if( parent && parent.length !== 0 && !parent._private.removed && parent.children().length === 0 ){\n          parent.updateStyle();\n        }\n      }\n    }\n\n    return this;\n  };\n\n  $$.elesfn.move = function( struct ){\n    var cy = this._private.cy;\n\n    if( struct.source !== undefined || struct.target !== undefined ){\n      var srcId = struct.source;\n      var tgtId = struct.target;\n      var srcExists = cy.getElementById( srcId ).length > 0;\n      var tgtExists = cy.getElementById( tgtId ).length > 0;\n\n      if( srcExists || tgtExists ){\n        var jsons = this.jsons();\n\n        this.remove();\n\n        for( var i = 0; i < jsons.length; i++ ){\n          var json = jsons[i];\n\n          if( json.group === 'edges' ){\n            if( srcExists ){ json.data.source = srcId; }\n            if( tgtExists ){ json.data.target = tgtId; }\n          }\n        }\n\n        return cy.add( jsons );\n      }\n\n    } else if( struct.parent !== undefined ){ // move node to new parent\n      var parentId = struct.parent;\n      var parentExists = parentId === null || cy.getElementById( parentId ).length > 0;\n\n      if( parentExists ){\n        var jsons = this.jsons();\n        var descs = this.descendants();\n        var descsEtc = descs.merge( descs.add(this).connectedEdges() );\n\n        this.remove(); // NB: also removes descendants and their connected edges\n\n        for( var i = 0; i < this.length; i++ ){\n          var json = jsons[i];\n\n          if( json.group === 'nodes' ){\n            json.data.parent = parentId === null ? undefined : parentId;\n          }\n        }\n      }\n\n      return cy.add( jsons ).merge( descsEtc.restore() );\n    }\n\n    return this; // if nothing done\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var is = $$.is;\n\n  var defineSearch = function( params ){\n    params = {\n      bfs: params.bfs || !params.dfs,\n      dfs: params.dfs || !params.bfs\n    };\n\n    // from pseudocode on wikipedia\n    return function searchFn( roots, fn, directed ){\n      var options;\n      var std;\n      var thisArg;\n      if( is.plainObject(roots) && !is.elementOrCollection(roots) ){\n        options = roots;\n        roots = options.roots;\n        fn = options.visit;\n        directed = options.directed;\n        std = options.std;\n        thisArg = options.thisArg;\n      }\n\n      directed = arguments.length === 2 && !is.fn(fn) ? fn : directed;\n      fn = is.fn(fn) ? fn : function(){};\n\n      var cy = this._private.cy;\n      var v = roots = is.string(roots) ? this.filter(roots) : roots;\n      var Q = [];\n      var connectedNodes = [];\n      var connectedBy = {};\n      var id2depth = {};\n      var V = {};\n      var j = 0;\n      var found;\n      var nodes = this.nodes();\n      var edges = this.edges();\n\n      // enqueue v\n      for( var i = 0; i < v.length; i++ ){\n        if( v[i].isNode() ){\n          Q.unshift( v[i] );\n\n          if( params.bfs ){\n            V[ v[i].id() ] = true;\n\n            connectedNodes.push( v[i] );\n          }\n\n          id2depth[ v[i].id() ] = 0;\n        }\n      }\n\n      while( Q.length !== 0 ){\n        var v = params.bfs ? Q.shift() : Q.pop();\n\n        if( params.dfs ){\n          if( V[ v.id() ] ){ continue; }\n\n          V[ v.id() ] = true;\n\n          connectedNodes.push( v );\n        }\n\n        var depth = id2depth[ v.id() ];\n        var prevEdge = connectedBy[ v.id() ];\n        var prevNode = prevEdge == null ? undefined : prevEdge.connectedNodes().not( v )[0];\n        var ret;\n\n        if( std ){\n          ret = fn.call(thisArg, v, prevEdge, prevNode, j++, depth);\n        } else {\n          ret = fn.call(v, j++, depth, v, prevEdge, prevNode);\n        }\n\n        if( ret === true ){\n          found = v;\n          break;\n        }\n\n        if( ret === false ){\n          break;\n        }\n\n        var vwEdges = v.connectedEdges(directed ? function(){ return this.data('source') === v.id(); } : undefined).intersect( edges );\n        for( var i = 0; i < vwEdges.length; i++ ){\n          var e = vwEdges[i];\n          var w = e.connectedNodes(function(){ return this.id() !== v.id(); }).intersect( nodes );\n\n          if( w.length !== 0 && !V[ w.id() ] ){\n            w = w[0];\n\n            Q.push( w );\n\n            if( params.bfs ){\n              V[ w.id() ] = true;\n\n              connectedNodes.push( w );\n            }\n\n            connectedBy[ w.id() ] = e;\n\n            id2depth[ w.id() ] = id2depth[ v.id() ] + 1;\n          }\n        }\n\n      }\n\n      var connectedEles = [];\n\n      for( var i = 0; i < connectedNodes.length; i++ ){\n        var node = connectedNodes[i];\n        var edge = connectedBy[ node.id() ];\n\n        if( edge ){\n          connectedEles.push( edge );\n        }\n\n        connectedEles.push( node );\n      }\n\n      return {\n        path: cy.collection( connectedEles, { unique: true } ),\n        found: cy.collection( found )\n      };\n    };\n  };\n\n  // search, spanning trees, etc\n  $$.fn.eles({\n\n    breadthFirstSearch: defineSearch({ bfs: true }),\n    depthFirstSearch: defineSearch({ dfs: true }),\n\n    // kruskal's algorithm (finds min spanning tree, assuming undirected graph)\n    // implemented from pseudocode from wikipedia\n    kruskal: function( weightFn ){\n      weightFn = $$.is.fn(weightFn) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)\n\n      function findSet(ele){\n        for( var i = 0; i < forest.length; i++ ){\n          var eles = forest[i];\n\n          if( eles.anySame(ele) ){\n            return {\n              eles: eles,\n              index: i\n            };\n          }\n        }\n      }\n\n      var A = new $$.Collection(this._private.cy, []);\n      var forest = [];\n      var nodes = this.nodes();\n\n      for( var i = 0; i < nodes.length; i++ ){\n        forest.push( nodes[i].collection() );\n      }\n\n      var edges = this.edges();\n      var S = edges.toArray().sort(function(a, b){\n        var weightA = weightFn.call(a, a);\n        var weightB = weightFn.call(b, b);\n\n        return weightA - weightB;\n      });\n\n      for(var i = 0; i < S.length; i++){\n        var edge = S[i];\n        var u = edge.source()[0];\n        var v = edge.target()[0];\n        var setU = findSet(u);\n        var setV = findSet(v);\n\n        if( setU.index !== setV.index ){\n          A = A.add( edge );\n\n          // combine forests for u and v\n          forest[ setU.index ] = setU.eles.add( setV.eles );\n          forest.splice( setV.index, 1 );\n        }\n      }\n\n      return nodes.add( A );\n\n    },\n\n    dijkstra: function( root, weightFn, directed ){\n      var options;\n      if( $$.is.plainObject(root) && !$$.is.elementOrCollection(root) ){\n        options = root;\n        root = options.root;\n        weightFn = options.weight;\n        directed = options.directed;\n      }\n\n      var cy = this._private.cy;\n      weightFn = $$.is.fn(weightFn) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)\n\n      var source = $$.is.string(root) ? this.filter(root)[0] : root[0];\n      var dist = {};\n      var prev = {};\n      var knownDist = {};\n\n      var edges = this.edges().filter(function(){ return !this.isLoop(); });\n      var nodes = this.nodes();\n      var Q = [];\n\n      for( var i = 0; i < nodes.length; i++ ){\n        dist[ nodes[i].id() ] = nodes[i].same( source ) ? 0 : Infinity;\n        Q.push( nodes[i] );\n      }\n\n      var valueFn = function(node) {\n        return dist[ node.id() ];\n      };\n\n      Q = new $$.Collection(cy, Q);\n\n      var heap = $$.Minheap(cy, Q, valueFn);\n\n      var distBetween = function(u, v){\n        var uvs = ( directed ? u.edgesTo(v) : u.edgesWith(v) ).intersect(edges);\n        var smallestDistance = Infinity;\n        var smallestEdge;\n\n        for( var i = 0; i < uvs.length; i++ ){\n          var edge = uvs[i];\n          var weight = weightFn.apply( edge, [edge] );\n\n          if( weight < smallestDistance || !smallestEdge ){\n            smallestDistance = weight;\n            smallestEdge = edge;\n          }\n        }\n\n        return {\n          edge: smallestEdge,\n          dist: smallestDistance\n        };\n      };\n\n      while(heap.size() > 0){\n        var smallestEl = heap.pop(),\n        smalletsDist = smallestEl.value,\n        uid = smallestEl.id,\n        u = cy.getElementById(uid);\n\n        knownDist[uid] = smalletsDist;\n\n        if( smalletsDist === Math.Infinite ){\n          break;\n        }\n\n        var neighbors = u.neighborhood().intersect(nodes);\n        for( var i = 0; i < neighbors.length; i++ ){\n          var v = neighbors[i];\n          var vid = v.id();\n          var vDist = distBetween(u, v);\n\n          var alt = smalletsDist + vDist.dist;\n\n          if( alt < heap.getValueById(vid) ){\n            heap.edit(vid, alt);\n            prev[ vid ] = {\n              node: u,\n              edge: vDist.edge\n            };\n          }\n        } // for\n      } // while\n\n      return {\n        distanceTo: function(node){\n          var target = $$.is.string(node) ? nodes.filter(node)[0] : node[0];\n\n          return knownDist[ target.id() ];\n        },\n\n        pathTo: function(node){\n          var target = $$.is.string(node) ? nodes.filter(node)[0] : node[0];\n          var S = [];\n          var u = target;\n\n          if( target.length > 0 ){\n            S.unshift( target );\n\n            while( prev[ u.id() ] ){\n              var p = prev[ u.id() ];\n\n              S.unshift( p.edge );\n              S.unshift( p.node );\n\n              u = p.node;\n            }\n          }\n\n          return new $$.Collection( cy, S );\n        }\n      };\n    }\n  });\n\n  // nice, short mathemathical alias\n  $$.elesfn.bfs = $$.elesfn.breadthFirstSearch;\n  $$.elesfn.dfs = $$.elesfn.depthFirstSearch;\n  $$.elesfn.stdBfs = $$.elesfn.stdBreadthFirstSearch;\n  $$.elesfn.stdDfs = $$.elesfn.stdDepthFirstSearch;\n\n})( cytoscape );\n\n;(function($$) {\n  'use strict';\n\n  // Additional graph analysis algorithms\n  $$.fn.eles({\n\n    // Implemented from pseudocode from wikipedia\n\n    // options => options object\n    //   root // starting node (either element or selector string)\n    //   weight: function( edge ){} // specifies weight to use for `edge`/`this`. If not present, it will be asumed a weight of 1 for all edges\n    //   heuristic: function( node ){} // specifies heuristic value for `node`/`this`\n    //   directed // default false\n    //   goal // target node (either element or selector string). Mandatory.\n\n    // retObj => returned object by function\n    //   found : true/false // whether a path from root to goal has been found\n    //   distance // Distance for the shortest path from root to goal\n    //   path // Array of ids of nodes in shortest path\n    aStar: function(options) {\n      options = options || {};\n\n      // var logDebug = function() {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Reconstructs the path from Start to End, acumulating the result in pathAcum\n      var reconstructPath = function(start, end, cameFromMap, pathAcum) {\n        // Base case\n        if (start == end) {\n          pathAcum.push( cy.getElementById(end) );\n          return pathAcum;\n        }\n\n        if (end in cameFromMap) {\n          // We know which node is before the last one\n          var previous = cameFromMap[end];\n          var previousEdge = cameFromEdge[end];\n\n          pathAcum.push( cy.getElementById(end) );\n          pathAcum.push( cy.getElementById(previousEdge) );\n\n\n          return reconstructPath(start,\n                       previous,\n                       cameFromMap,\n                       pathAcum);\n        }\n\n        // We should not reach here!\n        return undefined;\n      };\n\n      // Returns the index of the element in openSet which has minimum fScore\n      var findMin = function(openSet, fScore) {\n        if (openSet.length === 0) {\n          // Should never be the case\n          return undefined;\n        }\n        var minPos = 0;\n        var tempScore = fScore[openSet[0]];\n        for (var i = 1; i < openSet.length; i++) {\n          var s = fScore[openSet[i]];\n          if (s < tempScore) {\n            tempScore = s;\n            minPos = i;\n          }\n        }\n        return minPos;\n      };\n\n      // Parse options\n      // debug - optional\n      // if (options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n\n      // logDebug(\"Starting aStar...\");\n      var cy = this._private.cy;\n\n      // root - mandatory!\n      if (options != null && options.root != null) {\n        var source = $$.is.string(options.root) ?\n          // use it as a selector, e.g. \"#rootID\n          this.filter(options.root)[0] :\n          options.root[0];\n        // logDebug(\"Source node: %s\", source.id());\n      } else {\n        return undefined;\n      }\n\n      // goal - mandatory!\n      if (options.goal != null) {\n        var target = $$.is.string(options.goal) ?\n          // use it as a selector, e.g. \"#goalID\n          this.filter(options.goal)[0] :\n          options.goal[0];\n        // logDebug(\"Target node: %s\", target.id());\n      } else {\n        return undefined;\n      }\n\n      // Heuristic function - optional\n      if (options.heuristic != null && $$.is.fn(options.heuristic)) {\n        var heuristic = options.heuristic;\n      } else {\n        var heuristic = function(){ return 0; }; // use constant if unspecified\n        // $$.util.error(\"Missing required parameter (heuristic)! Aborting.\");\n        // return;\n      }\n\n      // Weight function - optional\n      if (options.weight != null && $$.is.fn(options.weight)) {\n        var weightFn = options.weight;\n      } else {\n        // If not specified, assume each edge has equal weight (1)\n        var weightFn = function(e) {return 1;};\n      }\n\n      // directed - optional\n      if (options.directed != null) {\n        var directed = options.directed;\n      } else {\n        var directed = false;\n      }\n\n      var closedSet = [];\n      var openSet = [source.id()];\n      var cameFrom = {};\n      var cameFromEdge = {};\n      var gScore = {};\n      var fScore = {};\n\n      gScore[source.id()] = 0;\n      fScore[source.id()] = heuristic(source);\n\n      var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });\n      var nodes = this.nodes();\n\n      // Counter\n      var steps = 0;\n\n      // Main loop\n      while (openSet.length > 0) {\n        var minPos = findMin(openSet, fScore);\n        var cMin = cy.getElementById( openSet[minPos] );\n        steps++;\n\n        // logDebug(\"\\nStep: %s\", steps);\n        // logDebug(\"Processing node: %s, fScore = %s\", cMin.id(), fScore[cMin.id()]);\n\n        // If we've found our goal, then we are done\n        if (cMin.id() == target.id()) {\n          // logDebug(\"Found goal node!\");\n          var rPath = reconstructPath(source.id(), target.id(), cameFrom, []);\n          rPath.reverse();\n          // logDebug(\"Path: %s\", rPath);\n          return {\n            found : true,\n            distance : gScore[cMin.id()],\n            path : new $$.Collection(cy, rPath),\n            steps : steps\n          };\n        }\n\n        // Add cMin to processed nodes\n        closedSet.push(cMin.id());\n        // Remove cMin from boundary nodes\n        openSet.splice(minPos, 1);\n        // logDebug(\"Added node to closedSet, removed from openSet.\");\n        // logDebug(\"Processing neighbors...\");\n\n        // Update scores for neighbors of cMin\n        // Take into account if graph is directed or not\n        var vwEdges = cMin.connectedEdges();\n        if( directed ){ vwEdges = vwEdges.stdFilter(function(ele){ return ele.data('source') === cMin.id(); }); }\n        vwEdges = vwEdges.intersect(edges);\n\n        for (var i = 0; i < vwEdges.length; i++) {\n          var e = vwEdges[i];\n          var w = e.connectedNodes().stdFilter(function(n){ return n.id() !== cMin.id(); }).intersect(nodes);\n\n          // logDebug(\"   processing neighbor: %s\", w.id());\n          // if node is in closedSet, ignore it\n          if (closedSet.indexOf(w.id()) != -1) {\n            // logDebug(\"   already in closedSet, ignoring it.\");\n            continue;\n          }\n\n          // New tentative score for node w\n          var tempScore = gScore[cMin.id()] + weightFn.apply(e, [e]);\n          // logDebug(\"   tentative gScore: %d\", tempScore);\n\n          // Update gScore for node w if:\n          //   w not present in openSet\n          // OR\n          //   tentative gScore is less than previous value\n\n          // w not in openSet\n          if (openSet.indexOf(w.id()) == -1) {\n            gScore[w.id()] = tempScore;\n            fScore[w.id()] = tempScore + heuristic(w);\n            openSet.push(w.id()); // Add node to openSet\n            cameFrom[w.id()] = cMin.id();\n            cameFromEdge[w.id()] = e.id();\n            // logDebug(\"   not in openSet, adding it. \");\n            // logDebug(\"   fScore(%s) = %s\", w.id(), tempScore);\n            continue;\n          }\n          // w already in openSet, but with greater gScore\n          if (tempScore < gScore[w.id()]) {\n            gScore[w.id()] = tempScore;\n            fScore[w.id()] = tempScore + heuristic(w);\n            cameFrom[w.id()] = cMin.id();\n            // logDebug(\"   better score, replacing gScore. \");\n            // logDebug(\"   fScore(%s) = %s\", w.id(), tempScore);\n          }\n\n        } // End of neighbors update\n\n      } // End of main loop\n\n      // If we've reached here, then we've not reached our goal\n      // logDebug(\"Reached end of computation without finding our goal\");\n      return {\n        found : false,\n        distance : undefined,\n        path : undefined,\n        steps : steps\n      };\n    }, // aStar()\n\n\n    // Implemented from pseudocode from wikipedia\n    // options => options object\n    //   weight: function( edge ){} // specifies weight to use for `edge`/`this`. If not present, it will be asumed a weight of 1 for all edges\n    //   directed // default false\n    // retObj => returned object by function\n    //   pathTo : function(fromId, toId) // Returns the shortest path from node with ID \"fromID\" to node with ID \"toId\", as an array of node IDs\n    //   distanceTo: function(fromId, toId) // Returns the distance of the shortest path from node with ID \"fromID\" to node with ID \"toId\"\n    floydWarshall: function(options) {\n      options = options || {};\n\n      // var logDebug = function() {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Parse options\n      // debug - optional\n      // if (options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n      // logDebug(\"Starting floydWarshall...\");\n\n      var cy = this._private.cy;\n\n      // Weight function - optional\n      if (options.weight != null && $$.is.fn(options.weight)) {\n        var weightFn = options.weight;\n      } else {\n        // If not specified, assume each edge has equal weight (1)\n        var weightFn = function(e) {return 1;};\n      }\n\n      // directed - optional\n      if (options.directed != null) {\n        var directed = options.directed;\n      } else {\n        var directed = false;\n      }\n\n      var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });\n      var nodes = this.nodes();\n      var numNodes = nodes.length;\n\n      // mapping: node id -> position in nodes array\n      var id2position = {};\n      for (var i = 0; i < numNodes; i++) {\n        id2position[nodes[i].id()] = i;\n      }\n\n      // Initialize distance matrix\n      var dist = [];\n      for (var i = 0; i < numNodes; i++) {\n        var newRow = new Array(numNodes);\n        for (var j = 0; j < numNodes; j++) {\n          if (i == j) {\n            newRow[j] = 0;\n          } else {\n            newRow[j] = Infinity;\n          }\n        }\n        dist.push(newRow);\n      }\n\n      // Initialize matrix used for path reconstruction\n      // Initialize distance matrix\n      var next = [];\n      var edgeNext = [];\n\n      var initMatrix = function(next){\n        for (var i = 0; i < numNodes; i++) {\n          var newRow = new Array(numNodes);\n          for (var j = 0; j < numNodes; j++) {\n            newRow[j] = undefined;\n          }\n          next.push(newRow);\n        }\n      };\n\n      initMatrix(next);\n      initMatrix(edgeNext);\n\n      // Process edges\n      for (var i = 0; i < edges.length ; i++) {\n        var sourceIndex = id2position[edges[i].source().id()];\n        var targetIndex = id2position[edges[i].target().id()];\n        var weight = weightFn.apply(edges[i], [edges[i]]);\n\n        // Check if already process another edge between same 2 nodes\n        if (dist[sourceIndex][targetIndex] > weight) {\n          dist[sourceIndex][targetIndex] = weight;\n          next[sourceIndex][targetIndex] = targetIndex;\n          edgeNext[sourceIndex][targetIndex] = edges[i];\n        }\n      }\n\n      // If undirected graph, process 'reversed' edges\n      if (!directed) {\n        for (var i = 0; i < edges.length ; i++) {\n          var sourceIndex = id2position[edges[i].target().id()];\n          var targetIndex = id2position[edges[i].source().id()];\n          var weight = weightFn.apply(edges[i], [edges[i]]);\n\n          // Check if already process another edge between same 2 nodes\n          if (dist[sourceIndex][targetIndex] > weight) {\n            dist[sourceIndex][targetIndex] = weight;\n            next[sourceIndex][targetIndex] = targetIndex;\n            edgeNext[sourceIndex][targetIndex] = edges[i];\n          }\n        }\n      }\n\n      // Main loop\n      for (var k = 0; k < numNodes; k++) {\n        for (var i = 0; i < numNodes; i++) {\n          for (var j = 0; j < numNodes; j++) {\n            if (dist[i][k] + dist[k][j] < dist[i][j]) {\n              dist[i][j] = dist[i][k] + dist[k][j];\n              next[i][j] = next[i][k];\n            }\n          }\n        }\n      }\n\n      // Build result object\n      var position2id = [];\n      for (var i = 0; i < numNodes; i++) {\n        position2id.push(nodes[i].id());\n      }\n\n      var res = {\n        distance: function(from, to) {\n          if ($$.is.string(from)) {\n            // from is a selector string\n            var fromId = (cy.filter(from)[0]).id();\n          } else {\n            // from is a node\n            var fromId = from.id();\n          }\n\n          if ($$.is.string(to)) {\n            // to is a selector string\n            var toId = (cy.filter(to)[0]).id();\n          } else {\n            // to is a node\n            var toId = to.id();\n          }\n\n          return dist[id2position[fromId]][id2position[toId]];\n        },\n\n        path: function(from, to) {\n          var reconstructPathAux = function(from, to, next, position2id, edgeNext) {\n            if (from === to) {\n              return cy.getElementById( position2id[from] );\n            }\n            if (next[from][to] === undefined) {\n              return undefined;\n            }\n\n            var path = [ cy.getElementById(position2id[from]) ];\n            var prev = from;\n            while (from !== to) {\n              prev = from;\n              from = next[from][to];\n\n              var edge = edgeNext[prev][from];\n              path.push( edge );\n\n              path.push( cy.getElementById(position2id[from]) );\n            }\n            return path;\n          };\n\n          if ($$.is.string(from)) {\n            // from is a selector string\n            var fromId = (cy.filter(from)[0]).id();\n          } else {\n            // from is a node\n            var fromId = from.id();\n          }\n\n          if ($$.is.string(to)) {\n            // to is a selector string\n            var toId = (cy.filter(to)[0]).id();\n          } else {\n            // to is a node\n            var toId = to.id();\n          }\n\n          var pathArr = reconstructPathAux(id2position[fromId],\n                        id2position[toId],\n                        next,\n                        position2id,\n                        edgeNext);\n\n          return new $$.Collection( cy, pathArr );\n        },\n      };\n\n      return res;\n\n    }, // floydWarshall\n\n\n    // Implemented from pseudocode from wikipedia\n    // options => options object\n    //   root: starting node (either element or selector string)\n    //   weight: function( edge ){} // specifies weight to use for `edge`/`this`. If not present, it will be asumed a weight of 1 for all edges\n    //   directed // default false\n    // retObj => returned object by function\n    //   pathTo : function(toId) // Returns the shortest path from root node to node with ID \"toId\", as an array of node IDs\n    //   distanceTo: function(toId) // Returns the distance of the shortest path from root node to node with ID \"toId\"\n    //   hasNegativeWeightCycle: true/false (if true, pathTo and distanceTo will be undefined)\n    bellmanFord: function(options) {\n      options = options || {};\n\n      // var logDebug = function() {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Parse options\n      // debug - optional\n      // if (options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n      // logDebug(\"Starting bellmanFord...\");\n\n      // Weight function - optional\n      if (options.weight != null && $$.is.fn(options.weight)) {\n        var weightFn = options.weight;\n      } else {\n        // If not specified, assume each edge has equal weight (1)\n        var weightFn = function(e) {return 1;};\n      }\n\n      // directed - optional\n      if (options.directed != null) {\n        var directed = options.directed;\n      } else {\n        var directed = false;\n      }\n\n      // root - mandatory!\n      if (options.root != null) {\n        if ($$.is.string(options.root)) {\n          // use it as a selector, e.g. \"#rootID\n          var source = this.filter(options.root)[0];\n        } else {\n          var source = options.root[0];\n        }\n        // logDebug(\"Source node: %s\", source.id());\n      } else {\n        $$.util.error(\"options.root required\");\n        return undefined;\n      }\n\n      var cy = this._private.cy;\n      var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });\n      var nodes = this.nodes();\n      var numNodes = nodes.length;\n\n      // mapping: node id -> position in nodes array\n      var id2position = {};\n      for (var i = 0; i < numNodes; i++) {\n        id2position[nodes[i].id()] = i;\n      }\n\n      // Initializations\n      var cost = [];\n      var predecessor = [];\n      var predEdge = [];\n\n      for (var i = 0; i < numNodes; i++) {\n        if (nodes[i].id() === source.id()) {\n          cost[i] = 0;\n        } else {\n          cost[i] = Infinity;\n        }\n        predecessor[i] = undefined;\n      }\n\n      // Edges relaxation\n      var flag = false;\n      for (var i = 1; i < numNodes; i++) {\n        flag = false;\n        for (var e = 0; e < edges.length; e++) {\n          var sourceIndex = id2position[edges[e].source().id()];\n          var targetIndex = id2position[edges[e].target().id()];\n          var weight = weightFn.apply(edges[e], [edges[e]]);\n\n          var temp = cost[sourceIndex] + weight;\n          if (temp < cost[targetIndex]) {\n            cost[targetIndex] = temp;\n            predecessor[targetIndex] = sourceIndex;\n            predEdge[targetIndex] = edges[e];\n            flag = true;\n          }\n\n          // If undirected graph, we need to take into account the 'reverse' edge\n          if (!directed) {\n            var temp = cost[targetIndex] + weight;\n            if (temp < cost[sourceIndex]) {\n              cost[sourceIndex] = temp;\n              predecessor[sourceIndex] = targetIndex;\n              predEdge[sourceIndex] = edges[e];\n              flag = true;\n            }\n          }\n        }\n\n        if (!flag) {\n          break;\n        }\n      }\n\n      if (flag) {\n        // Check for negative weight cycles\n        for (var e = 0; e < edges.length; e++) {\n          var sourceIndex = id2position[edges[e].source().id()];\n          var targetIndex = id2position[edges[e].target().id()];\n          var weight = weightFn.apply(edges[e], [edges[e]]);\n\n          if (cost[sourceIndex] + weight < cost[targetIndex]) {\n            $$.util.error(\"Error: graph contains a negative weigth cycle!\");\n            return { pathTo: undefined,\n                 distanceTo: undefined,\n                 hasNegativeWeightCycle: true};\n          }\n        }\n      }\n\n      // Build result object\n      var position2id = [];\n      for (var i = 0; i < numNodes; i++) {\n        position2id.push(nodes[i].id());\n      }\n\n\n      var res = {\n        distanceTo : function(to) {\n          if ($$.is.string(to)) {\n            // to is a selector string\n            var toId = (cy.filter(to)[0]).id();\n          } else {\n            // to is a node\n            var toId = to.id();\n          }\n\n          return cost[id2position[toId]];\n        },\n\n        pathTo : function(to) {\n\n          var reconstructPathAux = function(predecessor, fromPos, toPos, position2id, acumPath, predEdge) {\n            for(;;){\n              // Add toId to path\n              acumPath.push( cy.getElementById(position2id[toPos]) );\n              acumPath.push( predEdge[toPos] );\n\n              if (fromPos === toPos) {\n                // reached starting node\n                return acumPath;\n              }\n\n              // If no path exists, discart acumulated path and return undefined\n              var predPos = predecessor[toPos];\n              if (typeof predPos === \"undefined\") {\n                return undefined;\n              }\n\n              toPos = predPos;\n            }\n\n          };\n\n          if ($$.is.string(to)) {\n            // to is a selector string\n            var toId = (cy.filter(to)[0]).id();\n          } else {\n            // to is a node\n            var toId = to.id();\n          }\n          var path = [];\n\n          // This returns a reversed path\n          var res =  reconstructPathAux(predecessor,\n                        id2position[source.id()],\n                        id2position[toId],\n                        position2id,\n                        path,\n                        predEdge);\n\n          // Get it in the correct order and return it\n          if (res != null) {\n            res.reverse();\n          }\n\n          return new $$.Collection(cy, res);\n        },\n\n        hasNegativeWeightCycle: false\n      };\n\n      return res;\n\n    }, // bellmanFord\n\n\n    // Computes the minimum cut of an undirected graph\n    // Returns the correct answer with high probability\n    // options => options object\n    //\n    // retObj => returned object by function\n    //   cut : list of IDs of edges in the cut,\n    //   partition1: list of IDs of nodes in one partition\n    //   partition2: list of IDs of nodes in the other partition\n    kargerStein: function(options) {\n      options = options || {};\n\n      // var logDebug = function() {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Function which colapses 2 (meta) nodes into one\n      // Updates the remaining edge lists\n      // Receives as a paramater the edge which causes the collapse\n      var colapse = function(edgeIndex, nodeMap, remainingEdges) {\n        var edgeInfo = remainingEdges[edgeIndex];\n        var sourceIn = edgeInfo[1];\n        var targetIn = edgeInfo[2];\n        var partition1 = nodeMap[sourceIn];\n        var partition2 = nodeMap[targetIn];\n\n        // Delete all edges between partition1 and partition2\n        var newEdges = remainingEdges.filter(function(edge) {\n          if (nodeMap[edge[1]] === partition1 && nodeMap[edge[2]] === partition2) {\n            return false;\n          }\n          if (nodeMap[edge[1]] === partition2 && nodeMap[edge[2]] === partition1) {\n            return false;\n          }\n          return true;\n        });\n\n        // All edges pointing to partition2 should now point to partition1\n        for (var i = 0; i < newEdges.length; i++) {\n          var edge = newEdges[i];\n          if (edge[1] === partition2) { // Check source\n            newEdges[i] = edge.slice(0);\n            newEdges[i][1] = partition1;\n          } else if (edge[2] === partition2) { // Check target\n            newEdges[i] = edge.slice(0);\n            newEdges[i][2] = partition1;\n          }\n        }\n\n        // Move all nodes from partition2 to partition1\n        for (var i = 0; i < nodeMap.length; i++) {\n          if (nodeMap[i] === partition2) {\n            nodeMap[i] = partition1;\n          }\n        }\n\n        return newEdges;\n      };\n\n\n      // Contracts a graph until we reach a certain number of meta nodes\n      var contractUntil = function(metaNodeMap,\n                     remainingEdges,\n                     size,\n                     sizeLimit) {\n        // Stop condition\n        if (size <= sizeLimit) {\n          return remainingEdges;\n        }\n\n        // Choose an edge randomly\n        var edgeIndex = Math.floor((Math.random() * remainingEdges.length));\n\n        // Colapse graph based on edge\n        var newEdges = colapse(edgeIndex, metaNodeMap, remainingEdges);\n\n        return contractUntil(metaNodeMap,\n                   newEdges,\n                   size - 1,\n                   sizeLimit);\n      };\n\n\n      // Parse options\n      // debug - optional\n      // if (options != null && options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n      // logDebug(\"Starting kargerStein...\");\n\n      var cy = this._private.cy;\n      var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });\n      var nodes = this.nodes();\n      var numNodes = nodes.length;\n      var numEdges = edges.length;\n      var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));\n      var stopSize = Math.floor(numNodes / Math.sqrt(2));\n\n      if (numNodes < 2) {\n        $$.util.error(\"At least 2 nodes are required for KargerSteing algorithm!\");\n        return undefined;\n      }\n\n      // Create numerical identifiers for each node\n      // mapping: node id -> position in nodes array\n      // for reverse mapping, simply use nodes array\n      var id2position = {};\n      for (var i = 0; i < numNodes; i++) {\n        id2position[nodes[i].id()] = i;\n      }\n\n      // Now store edge destination as indexes\n      // Format for each edge (edge index, source node index, target node index)\n      var edgeIndexes = [];\n      for (var i = 0; i < numEdges; i++) {\n        var e = edges[i];\n        edgeIndexes.push([i, id2position[e.source().id()], id2position[e.target().id()]]);\n      }\n\n      // We will store the best cut found here\n      var minCutSize = Infinity;\n      var minCut;\n\n      // Initial meta node partition\n      var originalMetaNode = [];\n      for (var i = 0; i < numNodes; i++) {\n        originalMetaNode.push(i);\n      }\n\n      // Main loop\n      for (var iter = 0; iter <= numIter; iter++) {\n        // Create new meta node partition\n        var metaNodeMap = originalMetaNode.slice(0);\n\n        // Contract until stop point (stopSize nodes)\n        var edgesState = contractUntil(metaNodeMap, edgeIndexes, numNodes, stopSize);\n\n        // Create a copy of the colapsed nodes state\n        var metaNodeMap2 = metaNodeMap.slice(0);\n\n        // Run 2 iterations starting in the stop state\n        var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);\n        var res2 = contractUntil(metaNodeMap2, edgesState, stopSize, 2);\n\n        // Is any of the 2 results the best cut so far?\n        if (res1.length <= res2.length && res1.length < minCutSize) {\n          minCutSize = res1.length;\n          minCut = [res1, metaNodeMap];\n        } else if (res2.length <= res1.length && res2.length < minCutSize) {\n          minCutSize = res2.length;\n          minCut = [res2, metaNodeMap2];\n        }\n      } // end of main loop\n\n\n      // Construct result\n      var resEdges = (minCut[0]).map(function(e){ return edges[e[0]]; });\n      var partition1 = [];\n      var partition2 = [];\n\n      // traverse metaNodeMap for best cut\n      var witnessNodePartition = minCut[1][0];\n      for (var i = 0; i < minCut[1].length; i++) {\n        var partitionId = minCut[1][i];\n        if (partitionId === witnessNodePartition) {\n          partition1.push(nodes[i]);\n        } else {\n          partition2.push(nodes[i]);\n        }\n      }\n\n      var ret = {\n        cut: new $$.Collection(cy, resEdges),\n        partition1: new $$.Collection(cy, partition1),\n        partition2: new $$.Collection(cy, partition2)\n      };\n\n      return ret;\n    },\n\n\n    //\n    // options => options object\n    //   dampingFactor: optional\n    //   precision: optional\n    //   iterations : optional\n    // retObj => returned object by function\n    //  rank : function that returns the pageRank of a given node (object or selector string)\n    pageRank: function(options) {\n      options = options || {};\n\n      var normalizeVector = function(vector) {\n        var length = vector.length;\n\n        // First, get sum of all elements\n        var total = 0;\n        for (var i = 0; i < length; i++) {\n          total += vector[i];\n        }\n\n        // Now, divide each by the sum of all elements\n        for (var i = 0; i < length; i++) {\n          vector[i] = vector[i] / total;\n        }\n      };\n\n      // var logDebug = function() {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Parse options\n      // debug - optional\n      // if (options != null &&\n      //   options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n      // logDebug(\"Starting pageRank...\");\n\n      // dampingFactor - optional\n      if (options != null &&\n        options.dampingFactor != null) {\n        var dampingFactor = options.dampingFactor;\n      } else {\n        var dampingFactor = 0.8; // Default damping factor\n      }\n\n      // desired precision - optional\n      if (options != null &&\n        options.precision != null) {\n        var epsilon = options.precision;\n      } else {\n        var epsilon = 0.000001; // Default precision\n      }\n\n      // Max number of iterations - optional\n      if (options != null &&\n        options.iterations != null) {\n        var numIter = options.iterations;\n      } else {\n        var numIter = 200; // Default number of iterations\n      }\n\n      // Weight function - optional\n      if (options != null &&\n        options.weight != null &&\n        $$.is.fn(options.weight)) {\n        var weightFn = options.weight;\n      } else {\n        // If not specified, assume each edge has equal weight (1)\n        var weightFn = function(e) {return 1;};\n      }\n\n      var cy = this._private.cy;\n      var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });\n      var nodes = this.nodes();\n      var numNodes = nodes.length;\n      var numEdges = edges.length;\n\n      // Create numerical identifiers for each node\n      // mapping: node id -> position in nodes array\n      // for reverse mapping, simply use nodes array\n      var id2position = {};\n      for (var i = 0; i < numNodes; i++) {\n        id2position[nodes[i].id()] = i;\n      }\n\n      // Construct transposed adjacency matrix\n      // First lets have a zeroed matrix of the right size\n      // We'll also keep track of the sum of each column\n      var matrix = [];\n      var columnSum = [];\n      var additionalProb = (1 - dampingFactor) / numNodes;\n\n      // Create null matric\n      for (var i = 0; i < numNodes; i++) {\n        var newRow = [];\n        for (var j = 0; j < numNodes; j++) {\n          newRow.push(0.0);\n        }\n        matrix.push(newRow);\n        columnSum.push(0.0);\n      }\n\n      // Now, process edges\n      for (var i = 0; i < numEdges; i++) {\n        var edge = edges[i];\n        var s = id2position[edge.source().id()];\n        var t = id2position[edge.target().id()];\n        var w = weightFn.apply(edge, [edge]);\n\n        // Update matrix\n        matrix[t][s] += w;\n\n        // Update column sum\n        columnSum[s] += w;\n      }\n\n      // Add additional probability based on damping factor\n      // Also, take into account columns that have sum = 0\n      var p = 1.0 / numNodes + additionalProb; // Shorthand\n      // Traverse matrix, column by column\n      for (var j = 0; j < numNodes; j++) {\n        if (columnSum[j] === 0) {\n          // No 'links' out from node jth, assume equal probability for each possible node\n          for (var i = 0; i < numNodes; i++) {\n            matrix[i][j] = p;\n          }\n        } else {\n          // Node jth has outgoing link, compute normalized probabilities\n          for (var i = 0; i < numNodes; i++) {\n            matrix[i][j] = matrix[i][j] / columnSum[j] + additionalProb;\n          }\n        }\n      }\n\n      // Compute dominant eigenvector using power method\n      var eigenvector = [];\n      var nullVector = [];\n      var previous;\n\n      // Start with a vector of all 1's\n      // Also, initialize a null vector which will be used as shorthand\n      for (var i = 0; i < numNodes; i++) {\n        eigenvector.push(1.0);\n        nullVector.push(0.0);\n      }\n\n      for (var iter = 0; iter < numIter; iter++) {\n        // New array with all 0's\n        var temp = nullVector.slice(0);\n\n        // Multiply matrix with previous result\n        for (var i = 0; i < numNodes; i++) {\n          for (var j = 0; j < numNodes; j++) {\n            temp[i] += matrix[i][j] * eigenvector[j];\n          }\n        }\n\n        normalizeVector(temp);\n        previous = eigenvector;\n        eigenvector = temp;\n\n        var diff = 0;\n        // Compute difference (squared module) of both vectors\n        for (var i = 0; i < numNodes; i++) {\n          diff += Math.pow(previous[i] - eigenvector[i], 2);\n        }\n\n        // If difference is less than the desired threshold, stop iterating\n        if (diff < epsilon) {\n          // logDebug(\"Stoped at iteration %s\", iter);\n          break;\n        }\n      }\n\n      // logDebug(\"Result:\\n\" + eigenvector);\n\n      // Construct result\n      var res = {\n        rank : function(node) {\n          if ($$.is.string(node)) {\n            // is a selector string\n            var nodeId = (cy.filter(node)[0]).id();\n          } else {\n            // is a node object\n            var nodeId = node.id();\n          }\n          return eigenvector[id2position[nodeId]];\n        }\n      };\n\n\n      return res;\n    }, // pageRank\n\n\n    // options => options object\n    //   weight: function( edge ){} // specifies weight to use for `edge`/`this`. If not present, it will be asumed a weight of 1 for all edges\n    //   directed // default false\n    // retObj => returned object by function\n    // if directed\n    //   indegree : function(node) // Returns the normalized indegree of the given node\n    //   outdegree: function(node) // Returns the normalized outdegree of the given node\n    // if undirected\n    //   degree : function(node) // Returns the normalized degree of the given node\n    degreeCentralityNormalized: function (options) {\n      options = options || {};\n\n      // var logDebug = function () {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Parse options\n      // debug - optional\n      // if (options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n\n      // directed - optional\n      if (options.directed != null) {\n        var directed = options.directed;\n      } else {\n        var directed = false;\n      }\n\n      // logDebug(\"Starting degree centrality...\");\n      var nodes = this.nodes();\n      var numNodes = nodes.length;\n\n      if (!directed) {\n        var degrees = {};\n        var maxDegree = 0;\n\n        for (var i = 0; i < numNodes; i++) {\n          var node = nodes[i];\n          // add current node to the current options object and call degreeCentrality\n          var currDegree = this.degreeCentrality($$.util.extend({}, options, {root: node}));\n          if (maxDegree < currDegree.degree)\n            maxDegree = currDegree.degree;\n\n          degrees[node.id()] = currDegree.degree;\n        }\n\n        return {\n          degree: function (node) {\n            if ($$.is.string(node)) {\n              // from is a selector string\n              var node = (cy.filter(node)[0]).id();\n            } else {\n              // from is a node\n              var node = node.id();\n            }\n\n            return degrees[node] / maxDegree;\n          }\n        };\n      } else {\n        var indegrees = {};\n        var outdegrees = {};\n        var maxIndegree = 0;\n        var maxOutdegree = 0;\n\n        for (var i = 0; i < numNodes; i++) {\n          var node = nodes[i];\n          // add current node to the current options object and call degreeCentrality\n          var currDegree = this.degreeCentrality($$.util.extend({}, options, {root: node}));\n\n          if (maxIndegree < currDegree.indegree)\n            maxIndegree = currDegree.indegree;\n\n          if (maxOutdegree < currDegree.outdegree)\n            maxOutdegree = currDegree.outdegree;\n\n          indegrees[node.id()] = currDegree.indegree;\n          outdegrees[node.id()] = currDegree.outdegree;\n        }\n\n        return {\n          indegree: function (node) {\n            if ($$.is.string(node)) {\n              // from is a selector string\n              var node = (cy.filter(node)[0]).id();\n            } else {\n              // from is a node\n              var node = node.id();\n            }\n\n            return indegrees[node] / maxIndegree;\n          },\n          outdegree: function (node) {\n            if ($$.is.string(node)) {\n              // from is a selector string\n              var node = (cy.filter(node)[0]).id();\n            } else {\n              // from is a node\n              var node = node.id();\n            }\n\n            return outdegrees[node] / maxOutdegree;\n          }\n\n        };\n      }\n\n    }, // degreeCentralityNormalized\n\n    // Implemented from the algorithm in Opsahl's paper \"Node centrality in weighted networks: Generalizing degree and shortest paths\" check the heading 2 \"Degree\"\n    // options => options object\n    //   node : focal node\n    //   weight: function( edge ){} // specifies weight to use for `edge`/`this`. If not present, it will be asumed a weight of 1 for all edges\n    //   alpha : alpha value for the algorithm (Benchmark values of alpha: 0 -> disregards the weights focuses on number of edges\n    //                                                                     1 -> disregards the number of edges focuses on total amount of weight\n    //   directed // default false\n    // retObj => returned object by function\n    // if directed\n    //   indegree : indegree of the given node\n    //   outdegree: outdegree of the given node\n    // if undirected\n    //   degree : degree of the given node\n    degreeCentrality: function (options) {\n      options = options || {};\n\n      var callingEles = this;\n\n      // var logDebug = function () {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Parse options\n      // debug - optional\n      // if (options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n\n      // logDebug(\"Starting degree centrality...\");\n\n      // root - mandatory!\n      if (options != null && options.root != null) {\n        var root = $$.is.string(options.root) ? this.filter(options.root)[0] : options.root[0];\n        // logDebug(\"Source node: %s\", root.id());\n      } else {\n        return undefined;\n      }\n\n      // weight - optional\n      if (options.weight != null && $$.is.fn(options.weight)) {\n        var weightFn = options.weight;\n      } else {\n        // If not specified, assume each edge has equal weight (1)\n        var weightFn = function (e) {\n          return 1;\n        };\n      }\n\n      // directed - optional\n      if (options.directed != null) {\n        var directed = options.directed;\n      } else {\n        var directed = false;\n      }\n\n      // alpha - optional\n      if (options.alpha != null && $$.is.number(options.alpha)) {\n        var alpha = options.alpha;\n      } else {\n        alpha = 0;\n      }\n\n\n      if (!directed) {\n        var connEdges = root.connectedEdges().intersection( callingEles );\n        var k = connEdges.length;\n        var s = 0;\n\n        // Now, sum edge weights\n        for (var i = 0; i < connEdges.length; i++) {\n          var edge = connEdges[i];\n          s += weightFn.apply(edge, [edge]);\n        }\n\n        return {\n          degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)\n        };\n      } else {\n        var incoming = root.connectedEdges('edge[target = \"' + root.id() + '\"]').intersection( callingEles );\n        var outgoing = root.connectedEdges('edge[source = \"' + root.id() + '\"]').intersection( callingEles );\n        var k_in = incoming.length;\n        var k_out = outgoing.length;\n        var s_in = 0;\n        var s_out = 0;\n\n        // Now, sum incoming edge weights\n        for (var i = 0; i < incoming.length; i++) {\n          var edge = incoming[i];\n          s_in += weightFn.apply(edge, [edge]);\n        }\n\n        // Now, sum outgoing edge weights\n        for (var i = 0; i < outgoing.length; i++) {\n          var edge = outgoing[i];\n          s_out += weightFn.apply(edge, [edge]);\n        }\n\n        return {\n          indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),\n          outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)\n        };\n      }\n    }, // degreeCentrality\n\n    // options => options object\n    //   weight: function( edge ){} // specifies weight to use for `edge`/`this`. If not present, it will be asumed a weight of 1 for all edges\n    //   directed // default false\n    //   harmonic // use harmonic mean instead of arithmetic mean\n    // retObj => returned object by function\n    //   closeness : function(node) // Returns the normalized closeness of the given node\n    closenessCentralityNormalized: function (options) {\n      options = options || {};\n\n      // var logDebug = function () {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Parse options\n      // debug - optional\n      // if (options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n\n      // logDebug(\"Starting closeness centrality...\");\n\n      var harmonic = options.harmonic;\n      if( harmonic === undefined ){\n        harmonic = true;\n      }\n\n      var closenesses = {};\n      var maxCloseness = 0;\n      var nodes = this.nodes();\n      var fw = this.floydWarshall({ weight: options.weight, directed: options.directed });\n\n      // Compute closeness for every node and find the maximum closeness\n      for(var i = 0; i < nodes.length; i++){\n        var currCloseness = 0;\n        for (var j = 0; j < nodes.length; j++) {\n          if (i != j) {\n            var d = fw.distance(nodes[i], nodes[j]);\n\n            if( harmonic ){\n              currCloseness += 1 / d;\n            } else {\n              currCloseness += d;\n            }\n          }\n        }\n\n        if( !harmonic ){\n          currCloseness = 1 / currCloseness;\n        }\n\n        if (maxCloseness < currCloseness){\n          maxCloseness = currCloseness;\n        }\n\n        closenesses[nodes[i].id()] = currCloseness;\n      }\n\n      return {\n        closeness: function (node) {\n          if ($$.is.string(node)) {\n            // from is a selector string\n            var node = (cy.filter(node)[0]).id();\n          } else {\n            // from is a node\n            var node = node.id();\n          }\n\n          return closenesses[node] / maxCloseness;\n        }\n      };\n    },\n    // Implemented from pseudocode from wikipedia\n    // options => options object\n    //   root : focal node\n    //   weight: function( edge ){} // specifies weight to use for `edge`/`this`. If not present, it will be asumed a weight of 1 for all edges\n    //   directed // default false\n    // closeness => returned value by the function. Closeness value of the given node.\n    closenessCentrality: function (options) {\n      options = options || {};\n\n      // var logDebug = function () {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Parse options\n      // debug - optional\n      // if (options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n\n      // logDebug(\"Starting closeness centrality...\");\n\n      // root - mandatory!\n      if (options.root != null) {\n        if ($$.is.string(options.root)) {\n          // use it as a selector, e.g. \"#rootID\n          var root = this.filter(options.root)[0];\n        } else {\n          var root = options.root[0];\n        }\n        // logDebug(\"Source node: %s\", root.id());\n      } else {\n        $$.util.error(\"options.root required\");\n        return undefined;\n      }\n\n      // weight - optional\n      if (options.weight != null && $$.is.fn(options.weight)) {\n        var weight = options.weight;\n      } else {\n        var weight = function(){return 1;};\n      }\n\n      // directed - optional\n      if (options.directed != null && $$.is.bool(options.directed)) {\n        var directed = options.directed;\n      } else {\n        var directed = false;\n      }\n\n      var harmonic = options.harmonic;\n      if( harmonic === undefined ){\n        harmonic = true;\n      }\n\n      // we need distance from this node to every other node\n      var dijkstra = this.dijkstra({\n        root: root,\n        weight: weight,\n        directed: directed\n      });\n      var totalDistance = 0;\n\n      var nodes = this.nodes();\n      for (var i = 0; i < nodes.length; i++){\n        if (nodes[i].id() != root.id()){\n          var d = dijkstra.distanceTo(nodes[i]);\n\n          if( harmonic ){\n            totalDistance += 1 / d;\n          } else {\n            totalDistance += d;\n          }\n        }\n      }\n\n      return harmonic ? totalDistance : 1 / totalDistance;\n    }, // closenessCentrality\n\n    // Implemented from the algorithm in the paper \"On Variants of Shortest-Path Betweenness Centrality and their Generic Computation\" by Ulrik Brandes\n    // options => options object\n    //   weight: function( edge ){} // specifies weight to use for `edge`/`this`. If not present, it will be asumed a weight of 1 for all edges\n    //   directed // default false\n    // retObj => returned object by function\n    //   betweenness : function(node) // Returns the betweenness centrality of the given node\n    //   betweennessNormalized : function(node) // Returns the normalized betweenness centrality of the given node\n    betweennessCentrality: function (options) {\n      options = options || {};\n\n      // var logDebug = function () {\n      //   if (debug) {\n      //     console.log.apply(console, arguments);\n      //   }\n      // };\n\n      // Parse options\n      // debug - optional\n      // if (options.debug != null) {\n      //   var debug = options.debug;\n      // } else {\n      //   var debug = false;\n      // }\n\n      // logDebug(\"Starting betweenness centrality...\");\n\n      // Weight - optional\n      if (options.weight != null && $$.is.fn(options.weight)) {\n        var weightFn = options.weight;\n        var weighted = true;\n      } else {\n        var weighted = false;\n      }\n\n      // Directed - default false\n      if (options.directed != null && $$.is.bool(options.directed)) {\n        var directed = options.directed;\n      } else {\n        var directed = false;\n      }\n\n      var priorityInsert = function (queue, ele) {\n        queue.unshift(ele);\n        for (var i = 0; d[queue[i]] < d[queue[i + 1]] && i < queue.length - 1; i++) {\n          var tmp = queue[i];\n          queue[i] = queue[i + 1];\n          queue[i + 1] = tmp;\n        }\n      };\n\n      var cy = this._private.cy;\n\n      // starting\n      var V = this.nodes();\n      var A = {};\n      var C = {};\n\n      // A contains the neighborhoods of every node\n      for (var i = 0; i < V.length; i++) {\n        if (directed) {\n          A[V[i].id()] = V[i].outgoers(\"node\"); // get outgoers of every node\n        } else {\n          A[V[i].id()] = V[i].openNeighborhood(\"node\"); // get neighbors of every node\n        }\n      }\n\n      // C contains the betweenness values\n      for (var i = 0; i < V.length; i++) {\n        C[V[i].id()] = 0;\n      }\n\n      for (var s = 0; s < V.length; s++) {\n        var S = []; // stack\n        var P = {};\n        var g = {};\n        var d = {};\n        var Q = []; // queue\n\n        // init dictionaries\n        for (var i = 0; i < V.length; i++) {\n          P[V[i].id()] = [];\n          g[V[i].id()] = 0;\n          d[V[i].id()] = Number.POSITIVE_INFINITY;\n        }\n\n        g[V[s].id()] = 1; // sigma\n        d[V[s].id()] = 0; // distance to s\n\n        Q.unshift(V[s].id());\n\n        while (Q.length > 0) {\n          var v = Q.pop();\n          S.push(v);\n          if (weighted) {\n            A[v].forEach(function (w) {\n              if (cy.$('#' + v).edgesTo(w).length > 0) {\n                var edge = cy.$('#' + v).edgesTo(w)[0];\n              } else {\n                var edge = w.edgesTo('#' + v)[0];\n              }\n\n              var edgeWeight = weightFn.apply(edge, [edge]);\n\n              if (d[w.id()] > d[v] + edgeWeight) {\n                d[w.id()] = d[v] + edgeWeight;\n                if (Q.indexOf(w.id()) < 0) { //if w is not in Q\n                  priorityInsert(Q, w.id());\n                } else { // update position if w is in Q\n                  Q.splice(Q.indexOf(w.id()), 1);\n                  priorityInsert(Q, w.id());\n                }\n                g[w.id()] = 0;\n                P[w.id()] = [];\n              }\n              if (d[w.id()] == d[v] + edgeWeight) {\n                g[w.id()] = g[w.id()] + g[v];\n                P[w.id()].push(v);\n              }\n            });\n          } else {\n            A[v].forEach(function (w) {\n              if (d[w.id()] == Number.POSITIVE_INFINITY) {\n                Q.unshift(w.id());\n                d[w.id()] = d[v] + 1;\n              }\n              if (d[w.id()] == d[v] + 1) {\n                g[w.id()] = g[w.id()] + g[v];\n                P[w.id()].push(v);\n              }\n            });\n          }\n        }\n\n        var e = {};\n        for (var i = 0; i < V.length; i++) {\n          e[V[i].id()] = 0;\n        }\n\n        while (S.length > 0) {\n          var w = S.pop();\n          P[w].forEach(function (v) {\n            e[v] = e[v] + (g[v] / g[w]) * (1 + e[w]);\n            if (w != V[s].id())\n              C[w] = C[w] + e[w];\n          });\n        }\n      }\n\n      var max = 0;\n      for (var key in C) {\n        if (max < C[key])\n          max = C[key];\n      }\n\n      var ret = {\n        betweenness: function (node) {\n          if ($$.is.string(node)) {\n            var node = (cy.filter(node)[0]).id();\n          } else {\n            var node = node.id();\n          }\n\n          return C[node];\n        },\n\n        betweennessNormalized: function (node) {\n          if ($$.is.string(node)) {\n            var node = (cy.filter(node)[0]).id();\n          } else {\n            var node = node.id();\n          }\n\n          return C[node] / max;\n        }\n      };\n\n      // alias\n      ret.betweennessNormalised = ret.betweennessNormalized;\n\n      return ret;\n    } // betweennessCentrality\n  }); // $$.fn.eles\n\n  // nice, short mathemathical alias\n  $$.elesfn.dc = $$.elesfn.degreeCentrality;\n  $$.elesfn.dcn = $$.elesfn.degreeCentralityNormalised = $$.elesfn.degreeCentralityNormalized;\n  $$.elesfn.cc = $$.elesfn.closenessCentrality;\n  $$.elesfn.ccn = $$.elesfn.closenessCentralityNormalised = $$.elesfn.closenessCentralityNormalized;\n  $$.elesfn.bc = $$.elesfn.betweennessCentrality;\n}) (cytoscape);\n\n;(function( $$ ){ 'use strict';\n\n  $$.fn.eles({\n    animated: $$.define.animated(),\n    clearQueue: $$.define.clearQueue(),\n    delay: $$.define.delay(),\n    animate: $$.define.animate(),\n    stop: $$.define.stop()\n  });\n\n})( cytoscape );\n\n;(function( $$ ){ 'use strict';\n\n  $$.fn.eles({\n    addClass: function(classes){\n      classes = classes.split(/\\s+/);\n      var self = this;\n      var changed = [];\n\n      for( var i = 0; i < classes.length; i++ ){\n        var cls = classes[i];\n        if( $$.is.emptyString(cls) ){ continue; }\n\n        for( var j = 0; j < self.length; j++ ){\n          var ele = self[j];\n          var hasClass = ele._private.classes[cls];\n          ele._private.classes[cls] = true;\n\n          if( !hasClass ){ // if didn't already have, add to list of changed\n            changed.push( ele );\n          }\n        }\n      }\n\n      // trigger update style on those eles that had class changes\n      if( changed.length > 0 ){\n        new $$.Collection(this._private.cy, changed)\n          .updateStyle()\n          .trigger('class')\n        ;\n      }\n\n      return self;\n    },\n\n    hasClass: function(className){\n      var ele = this[0];\n      return ( ele != null && ele._private.classes[className] ) ? true : false;\n    },\n\n    toggleClass: function(classesStr, toggle){\n      var classes = classesStr.split(/\\s+/);\n      var self = this;\n      var changed = []; // eles who had classes changed\n\n      for( var i = 0, il = self.length; i < il; i++ ){\n        var ele = self[i];\n\n        for( var j = 0; j < classes.length; j++ ){\n          var cls = classes[j];\n\n          if( $$.is.emptyString(cls) ){ continue; }\n\n          var hasClass = ele._private.classes[cls];\n          var shouldAdd = toggle || (toggle === undefined && !hasClass);\n\n          if( shouldAdd ){\n            ele._private.classes[cls] = true;\n\n            if( !hasClass ){ changed.push(ele); }\n          } else { // then remove\n            ele._private.classes[cls] = false;\n\n            if( hasClass ){ changed.push(ele); }\n          }\n\n        } // for j classes\n      } // for i eles\n\n      // trigger update style on those eles that had class changes\n      if( changed.length > 0 ){\n        new $$.Collection(this._private.cy, changed)\n          .updateStyle()\n          .trigger('class')\n        ;\n      }\n\n      return self;\n    },\n\n    removeClass: function(classes){\n      classes = classes.split(/\\s+/);\n      var self = this;\n      var changed = [];\n\n      for( var i = 0; i < self.length; i++ ){\n        var ele = self[i];\n\n        for( var j = 0; j < classes.length; j++ ){\n          var cls = classes[j];\n          if( !cls || cls === '' ){ continue; }\n\n          var hasClass = ele._private.classes[cls];\n          ele._private.classes[cls] = undefined;\n\n          if( hasClass ){ // then we changed its set of classes\n            changed.push( ele );\n          }\n        }\n      }\n\n      // trigger update style on those eles that had class changes\n      if( changed.length > 0 ){\n        new $$.Collection(self._private.cy, changed).updateStyle();\n      }\n\n      self.trigger('class');\n      return self;\n    },\n\n    flashClass: function(classes, duration){\n      var self = this;\n\n      if( duration == null ){\n        duration = 250;\n      } else if( duration === 0 ){\n        return self; // nothing to do really\n      }\n\n      self.addClass( classes );\n      setTimeout(function(){\n        self.removeClass( classes );\n      }, duration);\n\n      return self;\n    }\n  });\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.eles({\n    allAre: function( selector ){\n      return this.filter(selector).length === this.length;\n    },\n\n    is: function( selector ){\n      return this.filter(selector).length > 0;\n    },\n\n    some: function( fn, thisArg ){\n      for( var i = 0; i < this.length; i++ ){\n        var ret = !thisArg ? fn( this[i], i, this ) : fn.apply( thisArg, [ this[i], i, this ] );\n\n        if( ret ){\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    every: function( fn, thisArg ){\n      for( var i = 0; i < this.length; i++ ){\n        var ret = !thisArg ? fn( this[i], i, this ) : fn.apply( thisArg, [ this[i], i, this ] );\n\n        if( !ret ){\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    same: function( collection ){\n      collection = this.cy().collection( collection );\n\n      // cheap extra check\n      if( this.length !== collection.length ){\n        return false;\n      }\n\n      return this.intersect( collection ).length === this.length;\n    },\n\n    anySame: function( collection ){\n      collection = this.cy().collection( collection );\n\n      return this.intersect( collection ).length > 0;\n    },\n\n    allAreNeighbors: function( collection ){\n      collection = this.cy().collection( collection );\n\n      return this.neighborhood().intersect( collection ).length === collection.length;\n    }\n  });\n\n  $$.elesfn.allAreNeighbours = $$.elesfn.allAreNeighbors;\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // Compound functions\n  /////////////////////\n\n  $$.fn.eles({\n    parent: function( selector ){\n      var parents = [];\n      var cy = this._private.cy;\n\n      for( var i = 0; i < this.length; i++ ){\n        var ele = this[i];\n        var parent = cy.getElementById( ele._private.data.parent );\n\n        if( parent.size() > 0 ){\n          parents.push( parent );\n        }\n      }\n\n      return new $$.Collection( cy, parents, { unique: true } ).filter( selector );\n    },\n\n    parents: function( selector ){\n      var parents = [];\n\n      var eles = this.parent();\n      while( eles.nonempty() ){\n        for( var i = 0; i < eles.length; i++ ){\n          var ele = eles[i];\n          parents.push( ele );\n        }\n\n        eles = eles.parent();\n      }\n\n      return new $$.Collection( this.cy(), parents, { unique: true } ).filter( selector );\n    },\n\n    commonAncestors: function( selector ){\n      var ancestors;\n\n      for( var i = 0; i < this.length; i++ ){\n        var ele = this[i];\n        var parents = ele.parents();\n\n        ancestors = ancestors || parents;\n\n        ancestors = ancestors.intersect( parents ); // current list must be common with current ele parents set\n      }\n\n      return ancestors.filter( selector );\n    },\n\n    orphans: function( selector ){\n      return this.stdFilter(function( ele ){\n        return ele.isNode() && ele.parent().empty();\n      }).filter( selector );\n    },\n\n    nonorphans: function( selector ){\n      return this.stdFilter(function( ele ){\n        return ele.isNode() && ele.parent().nonempty();\n      }).filter( selector );\n    },\n\n    children: function( selector ){\n      var children = [];\n\n      for( var i = 0; i < this.length; i++ ){\n        var ele = this[i];\n        children = children.concat( ele._private.children );\n      }\n\n      return new $$.Collection( this.cy(), children, { unique: true } ).filter( selector );\n    },\n\n    siblings: function( selector ){\n      return this.parent().children().not( this ).filter( selector );\n    },\n\n    isParent: function(){\n      var ele = this[0];\n\n      if( ele ){\n        return ele._private.children.length !== 0;\n      }\n    },\n\n    isChild: function(){\n      var ele = this[0];\n\n      if( ele ){\n        return ele._private.data.parent !== undefined && ele.parent().length !== 0;\n      }\n    },\n\n    descendants: function( selector ){\n      var elements = [];\n\n      function add( eles ){\n        for( var i = 0; i < eles.length; i++ ){\n          var ele = eles[i];\n\n          elements.push( ele );\n\n          if( ele.children().nonempty() ){\n            add( ele.children() );\n          }\n        }\n      }\n\n      add( this.children() );\n\n      return new $$.Collection( this.cy(), elements, { unique: true } ).filter( selector );\n    }\n  });\n\n  // aliases\n  $$.elesfn.ancestors = $$.elesfn.parents;\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var borderWidthMultiplier = 2 * 0.5;\n  var borderWidthAdjustment = 0;\n\n  $$.fn.eles({\n\n    data: $$.define.data({\n      field: 'data',\n      bindingEvent: 'data',\n      allowBinding: true,\n      allowSetting: true,\n      settingEvent: 'data',\n      settingTriggersEvent: true,\n      triggerFnName: 'trigger',\n      allowGetting: true,\n      immutableKeys: {\n        'id': true,\n        'source': true,\n        'target': true,\n        'parent': true\n      },\n      updateStyle: true\n    }),\n\n    removeData: $$.define.removeData({\n      field: 'data',\n      event: 'data',\n      triggerFnName: 'trigger',\n      triggerEvent: true,\n      immutableKeys: {\n        'id': true,\n        'source': true,\n        'target': true,\n        'parent': true\n      },\n      updateStyle: true\n    }),\n\n    scratch: $$.define.data({\n      field: 'scratch',\n      bindingEvent: 'scratch',\n      allowBinding: true,\n      allowSetting: true,\n      settingEvent: 'scratch',\n      settingTriggersEvent: true,\n      triggerFnName: 'trigger',\n      allowGetting: true,\n      updateStyle: true\n    }),\n\n    removeScratch: $$.define.removeData({\n      field: 'scratch',\n      event: 'scratch',\n      triggerFnName: 'trigger',\n      triggerEvent: true,\n      updateStyle: true\n    }),\n\n    rscratch: $$.define.data({\n      field: 'rscratch',\n      allowBinding: false,\n      allowSetting: true,\n      settingTriggersEvent: false,\n      allowGetting: true\n    }),\n\n    removeRscratch: $$.define.removeData({\n      field: 'rscratch',\n      triggerEvent: false\n    }),\n\n    id: function(){\n      var ele = this[0];\n\n      if( ele ){\n        return ele._private.data.id;\n      }\n    },\n\n    position: $$.define.data({\n      field: 'position',\n      bindingEvent: 'position',\n      allowBinding: true,\n      allowSetting: true,\n      settingEvent: 'position',\n      settingTriggersEvent: true,\n      triggerFnName: 'rtrigger',\n      allowGetting: true,\n      validKeys: ['x', 'y'],\n      onSet: function( eles ){\n        var updatedEles = eles.updateCompoundBounds();\n        updatedEles.rtrigger('position');\n      },\n      canSet: function( ele ){\n        return !ele.locked();\n      }\n    }),\n\n    // position but no notification to renderer\n    silentPosition: $$.define.data({\n      field: 'position',\n      bindingEvent: 'position',\n      allowBinding: false,\n      allowSetting: true,\n      settingEvent: 'position',\n      settingTriggersEvent: false,\n      triggerFnName: 'trigger',\n      allowGetting: true,\n      validKeys: ['x', 'y'],\n      onSet: function( eles ){\n        eles.updateCompoundBounds();\n      },\n      canSet: function( ele ){\n        return !ele.locked();\n      }\n    }),\n\n    positions: function( pos, silent ){\n      if( $$.is.plainObject(pos) ){\n        this.position(pos);\n\n      } else if( $$.is.fn(pos) ){\n        var fn = pos;\n\n        for( var i = 0; i < this.length; i++ ){\n          var ele = this[i];\n\n          var pos = fn.apply(ele, [i, ele]);\n\n          if( pos && !ele.locked() ){\n            var elePos = ele._private.position;\n            elePos.x = pos.x;\n            elePos.y = pos.y;\n          }\n        }\n\n        var updatedEles = this.updateCompoundBounds();\n        var toTrigger = updatedEles.length > 0 ? this.add( updatedEles ) : this;\n\n        if( silent ){\n          toTrigger.trigger('position');\n        } else {\n          toTrigger.rtrigger('position');\n        }\n      }\n\n      return this; // chaining\n    },\n\n    silentPositions: function( pos ){\n      return this.positions( pos, true );\n    },\n\n    updateCompoundBounds: function(){\n      var cy = this.cy();\n\n      if( !cy.styleEnabled() || !cy.hasCompoundNodes() ){ return cy.collection(); } // save cycles for non compound graphs or when style disabled\n\n      var updated = [];\n\n      function update( parent ){\n        var children = parent.children();\n        var style = parent._private.style;\n        var includeLabels = style['compound-sizing-wrt-labels'].value === 'include';\n        var bb = children.boundingBox({ includeLabels: includeLabels, includeEdges: true });\n        var padding = {\n          top: style['padding-top'].pxValue,\n          bottom: style['padding-bottom'].pxValue,\n          left: style['padding-left'].pxValue,\n          right: style['padding-right'].pxValue\n        };\n        var pos = parent._private.position;\n        var didUpdate = false;\n\n        if( style['width'].value === 'auto' ){\n          parent._private.autoWidth = bb.w + padding.left + padding.right;\n          pos.x = (bb.x1 + bb.x2 - padding.left + padding.right)/2;\n          didUpdate = true;\n        }\n\n        if( style['height'].value === 'auto' ){\n          parent._private.autoHeight = bb.h + padding.top + padding.bottom;\n          pos.y = (bb.y1 + bb.y2 - padding.top + padding.bottom)/2;\n          didUpdate = true;\n        }\n\n        if( didUpdate ){\n          updated.push( parent );\n        }\n      }\n\n      // go up, level by level\n      var eles = this.parent();\n      while( eles.nonempty() ){\n\n        // update each parent node in this level\n        for( var i = 0; i < eles.length; i++ ){\n          var ele = eles[i];\n\n          update( ele );\n        }\n\n        // next level\n        eles = eles.parent();\n      }\n\n      // return changed\n      return new $$.Collection( cy, updated );\n    },\n\n    // get/set the rendered (i.e. on screen) positon of the element\n    renderedPosition: function( dim, val ){\n      var ele = this[0];\n      var cy = this.cy();\n      var zoom = cy.zoom();\n      var pan = cy.pan();\n      var rpos = $$.is.plainObject( dim ) ? dim : undefined;\n      var setting = rpos !== undefined || ( val !== undefined && $$.is.string(dim) );\n\n      if( ele && ele.isNode() ){ // must have an element and must be a node to return position\n        if( setting ){\n          for( var i = 0; i < this.length; i++ ){\n            var ele = this[i];\n\n            if( val !== undefined ){ // set one dimension\n              ele._private.position[dim] = ( val - pan[dim] )/zoom;\n            } else if( rpos !== undefined ){ // set whole position\n              ele._private.position = {\n                x: ( rpos.x - pan.x ) /zoom,\n                y: ( rpos.y - pan.y ) /zoom\n              };\n            }\n          }\n\n          this.rtrigger('position');\n        } else { // getting\n          var pos = ele._private.position;\n          rpos = {\n            x: pos.x * zoom + pan.x,\n            y: pos.y * zoom + pan.y\n          };\n\n          if( dim === undefined ){ // then return the whole rendered position\n            return rpos;\n          } else { // then return the specified dimension\n            return rpos[ dim ];\n          }\n        }\n      } else if( !setting ){\n        return undefined; // for empty collection case\n      }\n\n      return this; // chaining\n    },\n\n    // get/set the position relative to the parent\n    relativePosition: function( dim, val ){\n      var ele = this[0];\n      var cy = this.cy();\n      var ppos = $$.is.plainObject( dim ) ? dim : undefined;\n      var setting = ppos !== undefined || ( val !== undefined && $$.is.string(dim) );\n      var hasCompoundNodes = cy.hasCompoundNodes();\n\n      if( ele && ele.isNode() ){ // must have an element and must be a node to return position\n        if( setting ){\n          for( var i = 0; i < this.length; i++ ){\n            var ele = this[i];\n            var parent = hasCompoundNodes ? ele.parent() : null;\n            var hasParent = parent && parent.length > 0;\n            var relativeToParent = hasParent;\n\n            if( hasParent ){\n              parent = parent[0];\n            }\n\n            var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };\n\n            if( val !== undefined ){ // set one dimension\n              ele._private.position[dim] = val + origin[dim];\n            } else if( ppos !== undefined ){ // set whole position\n              ele._private.position = {\n                x: ppos.x + origin.x,\n                y: ppos.y + origin.y,\n              };\n            }\n          }\n\n          this.rtrigger('position');\n\n        } else { // getting\n          var pos = ele._private.position;\n          var parent = hasCompoundNodes ? ele.parent() : null;\n          var hasParent = parent && parent.length > 0;\n          var relativeToParent = hasParent;\n\n          if( hasParent ){\n            parent = parent[0];\n          }\n\n          var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };\n\n          ppos = {\n            x: pos.x - origin.x,\n            y: pos.y - origin.y\n          };\n\n          if( dim === undefined ){ // then return the whole rendered position\n            return ppos;\n          } else { // then return the specified dimension\n            return ppos[ dim ];\n          }\n        }\n      } else if( !setting ){\n        return undefined; // for empty collection case\n      }\n\n      return this; // chaining\n    },\n\n    // convenience function to get a numerical value for the width of the node/edge\n    width: function(){\n      var ele = this[0];\n      var cy = ele._private.cy;\n      var styleEnabled = cy._private.styleEnabled;\n\n      if( ele ){\n        if( styleEnabled ){\n          var w = ele._private.style.width;\n          return w.strValue === 'auto' ? ele._private.autoWidth : w.pxValue;\n        } else {\n          return 1;\n        }\n      }\n    },\n\n    outerWidth: function(){\n      var ele = this[0];\n      var cy = ele._private.cy;\n      var styleEnabled = cy._private.styleEnabled;\n\n      if( ele ){\n        if( styleEnabled ){\n          var style = ele._private.style;\n          var width = style.width.strValue === 'auto' ? ele._private.autoWidth : style.width.pxValue;\n          var border = style['border-width'] ? style['border-width'].pxValue * borderWidthMultiplier + borderWidthAdjustment : 0;\n\n          return width + border;\n        } else {\n          return 1;\n        }\n      }\n    },\n\n    renderedWidth: function(){\n      var ele = this[0];\n\n      if( ele ){\n        var width = ele.width();\n        return width * this.cy().zoom();\n      }\n    },\n\n    renderedOuterWidth: function(){\n      var ele = this[0];\n\n      if( ele ){\n        var owidth = ele.outerWidth();\n        return owidth * this.cy().zoom();\n      }\n    },\n\n    // convenience function to get a numerical value for the height of the node\n    height: function(){\n      var ele = this[0];\n      var cy = ele._private.cy;\n      var styleEnabled = cy._private.styleEnabled;\n\n      if( ele && ele._private.group === 'nodes' ){\n        if( styleEnabled ){\n          var h = ele._private.style.height;\n          return h.strValue === 'auto' ? ele._private.autoHeight : h.pxValue;\n        } else {\n          return 1;\n        }\n      }\n    },\n\n    outerHeight: function(){\n      var ele = this[0];\n      var cy = ele._private.cy;\n      var styleEnabled = cy._private.styleEnabled;\n\n      if( ele && ele._private.group === 'nodes' ){\n        if( styleEnabled ){\n          var style = ele._private.style;\n          var height = style.height.strValue === 'auto' ? ele._private.autoHeight : style.height.pxValue;\n          var border = style['border-width'] ? style['border-width'].pxValue * borderWidthMultiplier + borderWidthAdjustment : 0;\n        } else {\n          return 1;\n        }\n\n        return height + border;\n      }\n    },\n\n    renderedHeight: function(){\n      var ele = this[0];\n\n      if( ele && ele._private.group === 'nodes' ){\n        var height = ele.height();\n        return height * this.cy().zoom();\n      }\n    },\n\n    renderedOuterHeight: function(){\n      var ele = this[0];\n\n      if( ele && ele._private.group === 'nodes' ){\n        var oheight = ele.outerHeight();\n        return oheight * this.cy().zoom();\n      }\n    },\n\n    renderedBoundingBox: function( options ){\n      var bb = this.boundingBox( options );\n      var cy = this.cy();\n      var zoom = cy.zoom();\n      var pan = cy.pan();\n\n      var x1 = bb.x1 * zoom + pan.x;\n      var x2 = bb.x2 * zoom + pan.x;\n      var y1 = bb.y1 * zoom + pan.y;\n      var y2 = bb.y2 * zoom + pan.y;\n\n      return {\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2,\n        w: x2 - x1,\n        h: y2 - y1\n      };\n    },\n\n    // get the bounding box of the elements (in raw model position)\n    boundingBox: function( options ){\n      var eles = this;\n      var cy = eles._private.cy;\n      var cy_p = cy._private;\n      var styleEnabled = cy_p.styleEnabled;\n\n      options = options || {};\n\n      var includeNodes = options.includeNodes === undefined ? true : options.includeNodes;\n      var includeEdges = options.includeEdges === undefined ? true : options.includeEdges;\n      var includeLabels = options.includeLabels === undefined ? true : options.includeLabels;\n\n      // recalculate projections etc\n      if( styleEnabled ){\n        cy_p.renderer.recalculateRenderedStyle( this );\n      }\n\n      var x1 = Infinity;\n      var x2 = -Infinity;\n      var y1 = Infinity;\n      var y2 = -Infinity;\n\n      // find bounds of elements\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        var _p = ele._private;\n        var style = _p.style;\n        var display = styleEnabled ? _p.style['display'].value : 'element';\n        var isNode = _p.group === 'nodes';\n        var ex1, ex2, ey1, ey2, x, y;\n        var includedEle = false;\n\n        if( display === 'none' ){ continue; } // then ele doesn't take up space\n\n        if( isNode && includeNodes ){\n          includedEle = true;\n\n          var pos = _p.position;\n          x = pos.x;\n          y = pos.y;\n          var w = ele.outerWidth();\n          var halfW = w/2;\n          var h = ele.outerHeight();\n          var halfH = h/2;\n\n          // handle node dimensions\n          /////////////////////////\n\n          ex1 = x - halfW;\n          ex2 = x + halfW;\n          ey1 = y - halfH;\n          ey2 = y + halfH;\n\n          x1 = ex1 < x1 ? ex1 : x1;\n          x2 = ex2 > x2 ? ex2 : x2;\n          y1 = ey1 < y1 ? ey1 : y1;\n          y2 = ey2 > y2 ? ey2 : y2;\n\n        } else if( ele.isEdge() && includeEdges ){\n          includedEle = true;\n\n          var n1 = _p.source;\n          var n1_p = n1._private;\n          var n1pos = n1_p.position;\n\n          var n2 = _p.target;\n          var n2_p = n2._private;\n          var n2pos = n2_p.position;\n\n\n          // handle edge dimensions (rough box estimate)\n          //////////////////////////////////////////////\n\n          var rstyle = _p.rstyle || {};\n          var w = 0;\n          var wHalf = 0;\n\n          if( styleEnabled ){\n            w = style['width'].pxValue;\n            wHalf = w/2;\n          }\n\n          ex1 = n1pos.x;\n          ex2 = n2pos.x;\n          ey1 = n1pos.y;\n          ey2 = n2pos.y;\n\n          if( ex1 > ex2 ){\n            var temp = ex1;\n            ex1 = ex2;\n            ex2 = temp;\n          }\n\n          if( ey1 > ey2 ){\n            var temp = ey1;\n            ey1 = ey2;\n            ey2 = temp;\n          }\n\n          // take into account edge width\n          ex1 -= wHalf;\n          ex2 += wHalf;\n          ey1 -= wHalf;\n          ey2 += wHalf;\n\n          x1 = ex1 < x1 ? ex1 : x1;\n          x2 = ex2 > x2 ? ex2 : x2;\n          y1 = ey1 < y1 ? ey1 : y1;\n          y2 = ey2 > y2 ? ey2 : y2;\n\n          // handle points along edge (sanity check)\n          //////////////////////////////////////////\n\n          if( styleEnabled ){\n            var bpts = rstyle.bezierPts || [];\n\n            for( var j = 0; j < bpts.length; j++ ){\n              var bpt = bpts[j];\n\n              ex1 = bpt.x - wHalf;\n              ex2 = bpt.x + wHalf;\n              ey1 = bpt.y - wHalf;\n              ey2 = bpt.y + wHalf;\n\n              x1 = ex1 < x1 ? ex1 : x1;\n              x2 = ex2 > x2 ? ex2 : x2;\n              y1 = ey1 < y1 ? ey1 : y1;\n              y2 = ey2 > y2 ? ey2 : y2;\n            }\n          }\n\n          // precise haystacks (sanity check)\n          ///////////////////////////////////\n\n          if( styleEnabled && style['curve-style'].strValue === 'haystack' ){\n            var hpts = _p.rscratch.haystackPts;\n\n            ex1 = hpts[0];\n            ey1 = hpts[1];\n            ex2 = hpts[2];\n            ey2 = hpts[3];\n\n            if( ex1 > ex2 ){\n              var temp = ex1;\n              ex1 = ex2;\n              ex2 = temp;\n            }\n\n            if( ey1 > ey2 ){\n              var temp = ey1;\n              ey1 = ey2;\n              ey2 = temp;\n            }\n\n            x1 = ex1 < x1 ? ex1 : x1;\n            x2 = ex2 > x2 ? ex2 : x2;\n            y1 = ey1 < y1 ? ey1 : y1;\n            y2 = ey2 > y2 ? ey2 : y2;\n          }\n\n        } // edges\n\n\n        // handle label dimensions\n        //////////////////////////\n\n        if( styleEnabled ){\n\n          var style = ele._private.style;\n          var rstyle = ele._private.rstyle;\n          var label = style['content'].strValue;\n          var fontSize = style['font-size'];\n          var halign = style['text-halign'];\n          var valign = style['text-valign'];\n          var labelWidth = rstyle.labelWidth;\n          var labelHeight = rstyle.labelHeight;\n          var labelX = rstyle.labelX;\n          var labelY = rstyle.labelY;\n\n          if( includedEle && includeLabels && label && fontSize && labelHeight != null && labelWidth != null && labelX != null && labelY != null && halign && valign ){\n            var lh = labelHeight;\n            var lw = labelWidth;\n            var lx1, lx2, ly1, ly2;\n\n            if( ele.isEdge() ){\n              lx1 = labelX - lw/2;\n              lx2 = labelX + lw/2;\n              ly1 = labelY - lh/2;\n              ly2 = labelY + lh/2;\n            } else {\n              switch( halign.value ){\n                case 'left':\n                  lx1 = labelX - lw;\n                  lx2 = labelX;\n                  break;\n\n                case 'center':\n                  lx1 = labelX - lw/2;\n                  lx2 = labelX + lw/2;\n                  break;\n\n                case 'right':\n                  lx1 = labelX;\n                  lx2 = labelX + lw;\n                  break;\n              }\n\n              switch( valign.value ){\n                case 'top':\n                  ly1 = labelY - lh;\n                  ly2 = labelY;\n                  break;\n\n                case 'center':\n                  ly1 = labelY - lh/2;\n                  ly2 = labelY + lh/2;\n                  break;\n\n                case 'bottom':\n                  ly1 = labelY;\n                  ly2 = labelY + lh;\n                  break;\n              }\n            }\n\n            x1 = lx1 < x1 ? lx1 : x1;\n            x2 = lx2 > x2 ? lx2 : x2;\n            y1 = ly1 < y1 ? ly1 : y1;\n            y2 = ly2 > y2 ? ly2 : y2;\n          }\n        } // style enabled\n      } // for\n\n      var noninf = function(x){\n        if( x === Infinity || x === -Infinity ){\n          return 0;\n        }\n\n        return x;\n      };\n\n      x1 = noninf(x1);\n      x2 = noninf(x2);\n      y1 = noninf(y1);\n      y2 = noninf(y2);\n\n      return {\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2,\n        w: x2 - x1,\n        h: y2 - y1\n      };\n    }\n  });\n\n  // aliases\n  var fn = $$.elesfn;\n  fn.attr = fn.data;\n  fn.removeAttr = fn.removeData;\n  fn.modelPosition = fn.point = fn.position;\n  fn.modelPositions = fn.points = fn.positions;\n  fn.renderedPoint = fn.renderedPosition;\n  fn.relativePoint = fn.relativePosition;\n  fn.boundingbox = fn.boundingBox;\n  fn.renderedBoundingbox = fn.renderedBoundingBox;\n\n})( cytoscape );\n\n;(function( $$ ){ 'use strict';\n\n  // Regular degree functions (works on single element)\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  function defineDegreeFunction(callback){\n    return function( includeLoops ){\n      var self = this;\n\n      if( includeLoops === undefined ){\n        includeLoops = true;\n      }\n\n      if( self.length === 0 ){ return; }\n\n      if( self.isNode() && !self.removed() ){\n        var degree = 0;\n        var node = self[0];\n        var connectedEdges = node._private.edges;\n\n        for( var i = 0; i < connectedEdges.length; i++ ){\n          var edge = connectedEdges[i];\n\n          if( !includeLoops && edge.isLoop() ){\n            continue;\n          }\n\n          degree += callback( node, edge );\n        }\n\n        return degree;\n      } else {\n        return;\n      }\n    };\n  }\n\n  $$.fn.eles({\n    degree: defineDegreeFunction(function(node, edge){\n      if( edge.source().same( edge.target() ) ){\n        return 2;\n      } else {\n        return 1;\n      }\n    }),\n\n    indegree: defineDegreeFunction(function(node, edge){\n      if( edge.target().same(node) ){\n        return 1;\n      } else {\n        return 0;\n      }\n    }),\n\n    outdegree: defineDegreeFunction(function(node, edge){\n      if( edge.source().same(node) ){\n        return 1;\n      } else {\n        return 0;\n      }\n    })\n  });\n\n\n  // Collection degree stats\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  function defineDegreeBoundsFunction(degreeFn, callback){\n    return function( includeLoops ){\n      var ret;\n      var nodes = this.nodes();\n\n      for( var i = 0; i < nodes.length; i++ ){\n        var ele = nodes[i];\n        var degree = ele[degreeFn]( includeLoops );\n        if( degree !== undefined && (ret === undefined || callback(degree, ret)) ){\n          ret = degree;\n        }\n      }\n\n      return ret;\n    };\n  }\n\n  $$.fn.eles({\n    minDegree: defineDegreeBoundsFunction('degree', function(degree, min){\n      return degree < min;\n    }),\n\n    maxDegree: defineDegreeBoundsFunction('degree', function(degree, max){\n      return degree > max;\n    }),\n\n    minIndegree: defineDegreeBoundsFunction('indegree', function(degree, min){\n      return degree < min;\n    }),\n\n    maxIndegree: defineDegreeBoundsFunction('indegree', function(degree, max){\n      return degree > max;\n    }),\n\n    minOutdegree: defineDegreeBoundsFunction('outdegree', function(degree, min){\n      return degree < min;\n    }),\n\n    maxOutdegree: defineDegreeBoundsFunction('outdegree', function(degree, max){\n      return degree > max;\n    })\n  });\n\n  $$.fn.eles({\n    totalDegree: function( includeLoops ){\n      var total = 0;\n      var nodes = this.nodes();\n\n      for( var i = 0; i < nodes.length; i++ ){\n        total += nodes[i].degree( includeLoops );\n      }\n\n      return total;\n    }\n  });\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // Functions for binding & triggering events\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  $$.fn.eles({\n    on: $$.define.on(), // .on( events [, selector] [, data], handler)\n    one: $$.define.on({ unbindSelfOnTrigger: true }),\n    once: $$.define.on({ unbindAllBindersOnTrigger: true }),\n    off: $$.define.off(), // .off( events [, selector] [, handler] )\n    trigger: $$.define.trigger(), // .trigger( events [, extraParams] )\n\n    rtrigger: function(event, extraParams){ // for internal use only\n      if( this.length === 0 ){ return; } // empty collections don't need to notify anything\n\n      // notify renderer\n      this.cy().notify({\n        type: event,\n        collection: this\n      });\n\n      this.trigger(event, extraParams);\n      return this;\n    }\n  });\n\n  // aliases:\n  $$.define.eventAliasesOn( $$.elesfn );\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.eles({\n    nodes: function( selector ){\n      return this.filter(function(i, element){\n        return element.isNode();\n      }).filter(selector);\n    },\n\n    edges: function( selector ){\n      return this.filter(function(i, element){\n        return element.isEdge();\n      }).filter(selector);\n    },\n\n    filter: function( filter ){\n      var cy = this._private.cy;\n\n      if( $$.is.fn(filter) ){\n        var elements = [];\n\n        for( var i = 0; i < this.length; i++ ){\n          var ele = this[i];\n\n          if( filter.apply(ele, [i, ele]) ){\n            elements.push(ele);\n          }\n        }\n\n        return new $$.Collection(cy, elements);\n\n      } else if( $$.is.string(filter) || $$.is.elementOrCollection(filter) ){\n        return new $$.Selector(filter).filter(this);\n\n      } else if( filter === undefined ){\n        return this;\n      }\n\n      return new $$.Collection( cy ); // if not handled by above, give 'em an empty collection\n    },\n\n    not: function( toRemove ){\n      var cy = this._private.cy;\n\n      if( !toRemove ){\n        return this;\n      } else {\n\n        if( $$.is.string( toRemove ) ){\n          toRemove = this.filter( toRemove );\n        }\n\n        var elements = [];\n\n        for( var i = 0; i < this.length; i++ ){\n          var element = this[i];\n\n          var remove = toRemove._private.ids[ element.id() ];\n          if( !remove ){\n            elements.push( element );\n          }\n        }\n\n        return new $$.Collection( cy, elements );\n      }\n\n    },\n\n    absoluteComplement: function(){\n      var cy = this._private.cy;\n\n      return cy.elements().not( this );\n    },\n\n    intersect: function( other ){\n      var cy = this._private.cy;\n\n      // if a selector is specified, then filter by it instead\n      if( $$.is.string(other) ){\n        var selector = other;\n        return this.filter( selector );\n      }\n\n      var elements = [];\n      var col1 = this;\n      var col2 = other;\n      var col1Smaller = this.length < other.length;\n      // var ids1 = col1Smaller ? col1._private.ids : col2._private.ids;\n      var ids2 = col1Smaller ? col2._private.ids : col1._private.ids;\n      var col = col1Smaller ? col1 : col2;\n\n      for( var i = 0; i < col.length; i++ ){\n        var id = col[i]._private.data.id;\n        var ele = ids2[ id ];\n\n        if( ele ){\n          elements.push( ele );\n        }\n      }\n\n      return new $$.Collection( cy, elements );\n    },\n\n    xor: function( other ){\n      var cy = this._private.cy;\n\n      if( $$.is.string(other) ){\n        other = cy.$( other );\n      }\n\n      var elements = [];\n      var col1 = this;\n      var col2 = other;\n\n      var add = function( col, other ){\n\n        for( var i = 0; i < col.length; i++ ){\n          var ele = col[i];\n          var id = ele._private.data.id;\n          var inOther = other._private.ids[ id ];\n\n          if( !inOther ){\n            elements.push( ele );\n          }\n        }\n\n      };\n\n      add( col1, col2 );\n      add( col2, col1 );\n\n      return new $$.Collection( cy, elements );\n    },\n\n    diff: function( other ){\n      var cy = this._private.cy;\n\n      if( $$.is.string(other) ){\n        other = cy.$( other );\n      }\n\n      var left = [];\n      var right = [];\n      var both = [];\n      var col1 = this;\n      var col2 = other;\n\n      var add = function( col, other, retEles ){\n\n        for( var i = 0; i < col.length; i++ ){\n          var ele = col[i];\n          var id = ele._private.data.id;\n          var inOther = other._private.ids[ id ];\n\n          if( inOther ){\n            both.push( ele );\n          } else {\n            retEles.push( ele );\n          }\n        }\n\n      };\n\n      add( col1, col2, left );\n      add( col2, col1, right );\n\n      return {\n        left: new $$.Collection( cy, left, { unique: true } ),\n        right: new $$.Collection( cy, right, { unique: true } ),\n        both: new $$.Collection( cy, both, { unique: true } )\n      };\n    },\n\n    add: function( toAdd ){\n      var cy = this._private.cy;\n\n      if( !toAdd ){\n        return this;\n      }\n\n      if( $$.is.string(toAdd) ){\n        var selector = toAdd;\n        toAdd = cy.elements(selector);\n      }\n\n      var elements = [];\n\n      for( var i = 0; i < this.length; i++ ){\n        elements.push( this[i] );\n      }\n\n      for( var i = 0; i < toAdd.length; i++ ){\n\n        var add = !this._private.ids[ toAdd[i].id() ];\n        if( add ){\n          elements.push( toAdd[i] );\n        }\n      }\n\n      return new $$.Collection(cy, elements);\n    },\n\n    // in place merge on calling collection\n    merge: function( toAdd ){\n      var _p = this._private;\n      var cy = _p.cy;\n\n      if( !toAdd ){\n        return this;\n      }\n\n      if( $$.is.string(toAdd) ){\n        var selector = toAdd;\n        toAdd = cy.elements(selector);\n      }\n\n      for( var i = 0; i < toAdd.length; i++ ){\n        var toAddEle = toAdd[i];\n        var id = toAddEle.id();\n        var add = !_p.ids[ id ];\n\n        if( add ){\n          var index = this.length++;\n\n          this[ index ] = toAddEle;\n          _p.ids[ id ] = toAddEle;\n          _p.indexes[ id ] = index;\n        }\n      }\n\n      return this; // chaining\n    },\n\n    // remove single ele in place in calling collection\n    unmergeOne: function( ele ){\n      ele = ele[0];\n\n      var _p = this._private;\n      var id = ele.id();\n      var i = _p.indexes[ id ];\n\n      if( i == null ){\n        return this; // no need to remove\n      }\n\n      // remove ele\n      this[i] = undefined;\n      _p.ids[ id ] = undefined;\n      _p.indexes[ id ] = undefined;\n\n      var unmergedLastEle = i === this.length - 1;\n\n      // replace empty spot with last ele in collection\n      if( this.length > 1 && !unmergedLastEle ){\n        var lastEleI = this.length - 1;\n        var lastEle = this[ lastEleI ];\n\n        this[ lastEleI ] = undefined;\n        this[i] = lastEle;\n        _p.indexes[ lastEle.id() ] = i;\n      }\n\n      // the collection is now 1 ele smaller\n      this.length--;\n\n      return this;\n    },\n\n    // remove eles in place on calling collection\n    unmerge: function( toRemove ){\n      var cy = this._private.cy;\n\n      if( !toRemove ){\n        return this;\n      }\n\n      if( $$.is.string(toRemove) ){\n        var selector = toRemove;\n        toRemove = cy.elements(selector);\n      }\n\n      for( var i = 0; i < toRemove.length; i++ ){\n        this.unmergeOne( toRemove[i] );\n      }\n\n      return this; // chaining\n    },\n\n    map: function( mapFn, thisArg ){\n      var arr = [];\n      var eles = this;\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        var ret = thisArg ? mapFn.apply( thisArg, [ele, i, eles] ) : mapFn( ele, i, eles );\n\n        arr.push( ret );\n      }\n\n      return arr;\n    },\n\n    stdFilter: function( fn, thisArg ){\n      var filterEles = [];\n      var eles = this;\n      var cy = this._private.cy;\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        var include = thisArg ? fn.apply( thisArg, [ele, i, eles] ) : fn( ele, i, eles );\n\n        if( include ){\n          filterEles.push( ele );\n        }\n      }\n\n      return new $$.Collection( cy, filterEles );\n    },\n\n    max: function( valFn, thisArg ){\n      var max = -Infinity;\n      var maxEle;\n      var eles = this;\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );\n\n        if( val > max ){\n          max = val;\n          maxEle = ele;\n        }\n      }\n\n      return {\n        value: max,\n        ele: maxEle\n      };\n    },\n\n    min: function( valFn, thisArg ){\n      var min = Infinity;\n      var minEle;\n      var eles = this;\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );\n\n        if( val < min ){\n          min = val;\n          minEle = ele;\n        }\n      }\n\n      return {\n        value: min,\n        ele: minEle\n      };\n    }\n  });\n\n  // aliases\n  var fn = $$.elesfn;\n  fn['u'] = fn['|'] = fn['+'] = fn.union = fn.or = fn.add;\n  fn['\\\\'] = fn['!'] = fn['-'] = fn.difference = fn.relativeComplement = fn.not;\n  fn['n'] = fn['&'] = fn['.'] = fn.and = fn.intersection = fn.intersect;\n  fn['^'] = fn['(+)'] = fn['(-)'] = fn.symmetricDifference = fn.symdiff = fn.xor;\n  fn.fnFilter = fn.filterFn = fn.stdFilter;\n  fn.complement = fn.abscomp = fn.absoluteComplement;\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.eles({\n    isNode: function(){\n      return this.group() === 'nodes';\n    },\n\n    isEdge: function(){\n      return this.group() === 'edges';\n    },\n\n    isLoop: function(){\n      return this.isEdge() && this.source().id() === this.target().id();\n    },\n\n    isSimple: function(){\n      return this.isEdge() && this.source().id() !== this.target().id();\n    },\n\n    group: function(){\n      var ele = this[0];\n\n      if( ele ){\n        return ele._private.group;\n      }\n    }\n  });\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // Functions for iterating over collections\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  $$.fn.eles({\n    each: function(fn){\n      if( $$.is.fn(fn) ){\n        for(var i = 0; i < this.length; i++){\n          var ele = this[i];\n          var ret = fn.apply( ele, [ i, ele ] );\n\n          if( ret === false ){ break; } // exit each early on return false\n        }\n      }\n      return this;\n    },\n\n    forEach: function(fn, thisArg){\n      if( $$.is.fn(fn) ){\n\n        for(var i = 0; i < this.length; i++){\n          var ele = this[i];\n          var ret = thisArg ? fn.apply( thisArg, [ ele, i, this ] ) : fn( ele, i, this );\n\n          if( ret === false ){ break; } // exit each early on return false\n        }\n      }\n\n      return this;\n    },\n\n    toArray: function(){\n      var array = [];\n\n      for(var i = 0; i < this.length; i++){\n        array.push( this[i] );\n      }\n\n      return array;\n    },\n\n    slice: function(start, end){\n      var array = [];\n      var thisSize = this.length;\n\n      if( end == null ){\n        end = thisSize;\n      }\n\n      if( start == null ){\n        start = 0;\n      }\n\n      if( start < 0 ){\n        start = thisSize + start;\n      }\n\n      if( end < 0 ){\n        end = thisSize + end;\n      }\n\n      for(var i = start; i >= 0 && i < end && i < thisSize; i++){\n        array.push( this[i] );\n      }\n\n      return new $$.Collection(this.cy(), array);\n    },\n\n    size: function(){\n      return this.length;\n    },\n\n    eq: function(i){\n      return this[i] || new $$.Collection( this.cy() );\n    },\n\n    first: function(){\n      return this[0] || new $$.Collection( this.cy() );\n    },\n\n    last: function(){\n      return this[ this.length - 1 ] || new $$.Collection( this.cy() );\n    },\n\n    empty: function(){\n      return this.length === 0;\n    },\n\n    nonempty: function(){\n      return !this.empty();\n    },\n\n    sort: function( sortFn ){\n      if( !$$.is.fn( sortFn ) ){\n        return this;\n      }\n\n      var cy = this.cy();\n      var sorted = this.toArray().sort( sortFn );\n\n      return new $$.Collection(cy, sorted);\n    },\n\n    sortByZIndex: function(){\n      return this.sort( $$.Collection.zIndexSort );\n    },\n\n    zDepth: function(){\n      var ele = this[0];\n      if( !ele ){ return undefined; }\n\n      // var cy = ele.cy();\n      var _p = ele._private;\n      var group = _p.group;\n\n      if( group === 'nodes' ){\n        var depth = _p.data.parent ? ele.parents().size() : 0;\n\n        if( !ele.isParent() ){\n          return Number.MAX_VALUE; // childless nodes always on top\n        }\n\n        return depth;\n      } else {\n        var src = _p.source;\n        var tgt = _p.target;\n        var srcDepth = src.zDepth();\n        var tgtDepth = tgt.zDepth();\n\n        return Math.max( srcDepth, tgtDepth, 0 ); // depth of deepest parent\n      }\n    }\n  });\n\n  $$.Collection.zIndexSort = function(a, b){\n    var cy = a.cy();\n    var a_p = a._private;\n    var b_p = b._private;\n    var zDiff = a_p.style['z-index'].value - b_p.style['z-index'].value;\n    var depthA = 0;\n    var depthB = 0;\n    var hasCompoundNodes = cy.hasCompoundNodes();\n    var aIsNode = a_p.group === 'nodes';\n    var aIsEdge = a_p.group === 'edges';\n    var bIsNode = b_p.group === 'nodes';\n    var bIsEdge = b_p.group === 'edges';\n\n    // no need to calculate element depth if there is no compound node\n    if( hasCompoundNodes ){\n      depthA = a.zDepth();\n      depthB = b.zDepth();\n    }\n\n    var depthDiff = depthA - depthB;\n    var sameDepth = depthDiff === 0;\n\n    if( sameDepth ){\n\n      if( aIsNode && bIsEdge ){\n        return 1; // 'a' is a node, it should be drawn later\n\n      } else if( aIsEdge && bIsNode ){\n        return -1; // 'a' is an edge, it should be drawn first\n\n      } else { // both nodes or both edges\n        if( zDiff === 0 ){ // same z-index => compare indices in the core (order added to graph w/ last on top)\n          return a_p.index - b_p.index;\n        } else {\n          return zDiff;\n        }\n      }\n\n    // elements on different level\n    } else {\n      return depthDiff; // deeper element should be drawn later\n    }\n\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // Functions for layouts on nodes\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  $$.fn.eles({\n\n    // using standard layout options, apply position function (w/ or w/o animation)\n    layoutPositions: function( layout, options, fn ){\n      var nodes = this.nodes();\n      var cy = this.cy();\n\n      layout.trigger({ type: 'layoutstart', layout: layout });\n\n      if( options.animate ){\n        for( var i = 0; i < nodes.length; i++ ){\n          var node = nodes[i];\n          var lastNode = i === nodes.length - 1;\n\n          var newPos = fn.call( node, i, node );\n          var pos = node.position();\n\n          if( !$$.is.number(pos.x) || !$$.is.number(pos.y) ){\n            node.silentPosition({ x: 0, y: 0 });\n          }\n\n          node.animate({\n            position: newPos\n          }, {\n            duration: options.animationDuration,\n            step: !lastNode ? undefined : function(){\n              if( options.fit ){\n                cy.fit( options.eles, options.padding );\n              }\n            },\n            complete: !lastNode ? undefined : function(){\n              if( options.zoom != null ){\n                cy.zoom( options.zoom );\n              }\n\n              if( options.pan ){\n                cy.pan( options.pan );\n              }\n\n              if( options.fit ){\n                cy.fit( options.eles, options.padding );\n              }\n\n              layout.one('layoutstop', options.stop);\n              layout.trigger({ type: 'layoutstop', layout: layout });\n            }\n          });\n        }\n\n        layout.one('layoutready', options.ready);\n        layout.trigger({ type: 'layoutready', layout: layout });\n      } else {\n        nodes.positions( fn );\n\n        if( options.fit ){\n          cy.fit( options.eles, options.padding );\n        }\n\n        if( options.zoom != null ){\n          cy.zoom( options.zoom );\n        }\n\n        if( options.pan ){\n          cy.pan( options.pan );\n        }\n\n        layout.one('layoutready', options.ready);\n        layout.trigger({ type: 'layoutready', layout: layout });\n\n        layout.one('layoutstop', options.stop);\n        layout.trigger({ type: 'layoutstop', layout: layout });\n      }\n\n      return this; // chaining\n    },\n\n    layout: function( options ){\n      var cy = this.cy();\n\n      cy.layout( $$.util.extend({}, options, {\n        eles: this\n      }) );\n\n      return this;\n    },\n\n    makeLayout: function( options ){\n      var cy = this.cy();\n\n      return cy.makeLayout( $$.util.extend({}, options, {\n        eles: this\n      }) );\n    }\n\n  });\n\n  // aliases:\n  $$.elesfn.createLayout = $$.elesfn.makeLayout;\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.eles({\n\n    // fully updates (recalculates) the style for the elements\n    updateStyle: function( notifyRenderer ){\n      var cy = this._private.cy;\n\n      if( !cy.styleEnabled() ){ return this; }\n\n      if( cy._private.batchingStyle ){\n        var bEles = cy._private.batchStyleEles;\n\n        for( var i = 0; i < this.length; i++ ){\n          var ele = this[i];\n\n          if( !bEles.ids[ ele._private.id ] ){\n            bEles.push( ele );\n          }\n        }\n\n        return this; // chaining and exit early when batching\n      }\n\n      var style = cy.style();\n      notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;\n\n      style.apply( this );\n\n      var updatedCompounds = this.updateCompoundBounds();\n      var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;\n\n      if( notifyRenderer ){\n        toNotify.rtrigger('style'); // let renderer know we changed style\n      } else {\n        toNotify.trigger('style'); // just fire the event\n      }\n      return this; // chaining\n    },\n\n    // just update the mappers in the elements' styles; cheaper than eles.updateStyle()\n    updateMappers: function( notifyRenderer ){\n      var cy = this._private.cy;\n      var style = cy.style();\n      notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;\n\n      if( !cy.styleEnabled() ){ return this; }\n\n      style.updateMappers( this );\n\n      var updatedCompounds = this.updateCompoundBounds();\n      var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;\n\n      if( notifyRenderer ){\n        toNotify.rtrigger('style'); // let renderer know we changed style\n      } else {\n        toNotify.trigger('style'); // just fire the event\n      }\n      return this; // chaining\n    },\n\n    // get the specified css property as a rendered value (i.e. on-screen value)\n    // or get the whole rendered style if no property specified (NB doesn't allow setting)\n    renderedCss: function( property ){\n      var cy = this.cy();\n      if( !cy.styleEnabled() ){ return this; }\n\n      var ele = this[0];\n\n      if( ele ){\n        var renstyle = ele.cy().style().getRenderedStyle( ele );\n\n        if( property === undefined ){\n          return renstyle;\n        } else {\n          return renstyle[ property ];\n        }\n      }\n    },\n\n    // read the calculated css style of the element or override the style (via a bypass)\n    css: function( name, value ){\n      var cy = this.cy();\n\n      if( !cy.styleEnabled() ){ return this; }\n\n      var updateTransitions = false;\n      var style = cy.style();\n\n      if( $$.is.plainObject(name) ){ // then extend the bypass\n        var props = name;\n        style.applyBypass( this, props, updateTransitions );\n\n        var updatedCompounds = this.updateCompoundBounds();\n        var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;\n        toNotify.rtrigger('style'); // let the renderer know we've updated style\n\n      } else if( $$.is.string(name) ){\n\n        if( value === undefined ){ // then get the property from the style\n          var ele = this[0];\n\n          if( ele ){\n            return ele._private.style[ name ].strValue;\n          } else { // empty collection => can't get any value\n            return;\n          }\n\n        } else { // then set the bypass with the property value\n          style.applyBypass( this, name, value, updateTransitions );\n\n          var updatedCompounds = this.updateCompoundBounds();\n          var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;\n          toNotify.rtrigger('style'); // let the renderer know we've updated style\n        }\n\n      } else if( name === undefined ){\n        var ele = this[0];\n\n        if( ele ){\n          return style.getRawStyle( ele );\n        } else { // empty collection => can't get any value\n          return;\n        }\n      }\n\n      return this; // chaining\n    },\n\n    removeCss: function( names ){\n      var cy = this.cy();\n\n      if( !cy.styleEnabled() ){ return this; }\n\n      var updateTransitions = false;\n      var style = cy.style();\n      var eles = this;\n\n      if( names === undefined ){\n        for( var i = 0; i < eles.length; i++ ){\n          var ele = eles[i];\n\n          style.removeAllBypasses( ele, updateTransitions );\n        }\n      } else {\n        names = names.split(/\\s+/);\n\n        for( var i = 0; i < eles.length; i++ ){\n          var ele = eles[i];\n\n          style.removeBypasses( ele, names, updateTransitions );\n        }\n      }\n\n      var updatedCompounds = this.updateCompoundBounds();\n      var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;\n      toNotify.rtrigger('style'); // let the renderer know we've updated style\n\n      return this; // chaining\n    },\n\n    show: function(){\n      this.css('display', 'element');\n      return this; // chaining\n    },\n\n    hide: function(){\n      this.css('display', 'none');\n      return this; // chaining\n    },\n\n    visible: function(){\n      var cy = this.cy();\n      if( !cy.styleEnabled() ){ return true; }\n\n      var ele = this[0];\n      var hasCompoundNodes = cy.hasCompoundNodes();\n\n      if( ele ){\n        var style = ele._private.style;\n\n        if(\n          style['visibility'].value !== 'visible'\n          || style['display'].value !== 'element'\n        ){\n          return false;\n        }\n\n        if( ele._private.group === 'nodes' ){\n          if( !hasCompoundNodes ){ return true; }\n\n          var parents = ele._private.data.parent ? ele.parents() : null;\n\n          if( parents ){\n            for( var i = 0; i < parents.length; i++ ){\n              var parent = parents[i];\n              var pStyle = parent._private.style;\n              var pVis = pStyle['visibility'].value;\n              var pDis = pStyle['display'].value;\n\n              if( pVis !== 'visible' || pDis !== 'element' ){\n                return false;\n              }\n            }\n          }\n\n          return true;\n        } else {\n          var src = ele._private.source;\n          var tgt = ele._private.target;\n\n          return src.visible() && tgt.visible();\n        }\n\n      }\n    },\n\n    hidden: function(){\n      var ele = this[0];\n\n      if( ele ){\n        return !ele.visible();\n      }\n    },\n\n    effectiveOpacity: function(){\n      var cy = this.cy();\n      if( !cy.styleEnabled() ){ return 1; }\n\n      var hasCompoundNodes = cy.hasCompoundNodes();\n      var ele = this[0];\n\n      if( ele ){\n        var _p = ele._private;\n        var parentOpacity = _p.style.opacity.value;\n\n        if( !hasCompoundNodes ){ return parentOpacity; }\n\n        var parents = !_p.data.parent ? null : ele.parents();\n\n        if( parents ){\n          for( var i = 0; i < parents.length; i++ ){\n            var parent = parents[i];\n            var opacity = parent._private.style.opacity.value;\n\n            parentOpacity = opacity * parentOpacity;\n          }\n        }\n\n        return parentOpacity;\n      }\n    },\n\n    transparent: function(){\n      var cy = this.cy();\n      if( !cy.styleEnabled() ){ return false; }\n\n      var ele = this[0];\n      var hasCompoundNodes = ele.cy().hasCompoundNodes();\n\n      if( ele ){\n        if( !hasCompoundNodes ){\n          return ele._private.style.opacity.value === 0;\n        } else {\n          return ele.effectiveOpacity() === 0;\n        }\n      }\n    },\n\n    isFullAutoParent: function(){\n      var cy = this.cy();\n      if( !cy.styleEnabled() ){ return false; }\n\n      var ele = this[0];\n\n      if( ele ){\n        var autoW = ele._private.style['width'].value === 'auto';\n        var autoH = ele._private.style['height'].value === 'auto';\n\n        return ele.isParent() && autoW && autoH;\n      }\n    },\n\n    backgrounding: function(){\n      var cy = this.cy();\n      if( !cy.styleEnabled() ){ return false; }\n\n      var ele = this[0];\n\n      return ele._private.backgrounding ? true : false;\n    }\n\n  });\n\n\n  $$.elesfn.bypass = $$.elesfn.style = $$.elesfn.css;\n  $$.elesfn.renderedStyle = $$.elesfn.renderedCss;\n  $$.elesfn.removeBypass = $$.elesfn.removeStyle = $$.elesfn.removeCss;\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // Collection functions that toggle a boolean value\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  function defineSwitchFunction(params){\n    return function(){\n      var args = arguments;\n      var changedEles = [];\n\n      // e.g. cy.nodes().select( data, handler )\n      if( args.length === 2 ){\n        var data = args[0];\n        var handler = args[1];\n        this.bind( params.event, data, handler );\n      }\n\n      // e.g. cy.nodes().select( handler )\n      else if( args.length === 1 ){\n        var handler = args[0];\n        this.bind( params.event, handler );\n      }\n\n      // e.g. cy.nodes().select()\n      else if( args.length === 0 ){\n        for( var i = 0; i < this.length; i++ ){\n          var ele = this[i];\n          var able = !params.ableField || ele._private[params.ableField];\n          var changed = ele._private[params.field] != params.value;\n\n          if( params.overrideAble ){\n            var overrideAble = params.overrideAble(ele);\n\n            if( overrideAble !== undefined ){\n              able = overrideAble;\n\n              if( !overrideAble ){ return this; } // to save cycles assume not able for all on override\n            }\n          }\n\n          if( able ){\n            ele._private[params.field] = params.value;\n\n            if( changed ){\n              changedEles.push( ele );\n            }\n          }\n        }\n\n        var changedColl = $$.Collection( this.cy(), changedEles );\n        changedColl.updateStyle(); // change of state => possible change of style\n        changedColl.trigger( params.event );\n      }\n\n      return this;\n    };\n  }\n\n  function defineSwitchSet( params ){\n    $$.elesfn[ params.field ] = function(){\n      var ele = this[0];\n\n      if( ele ){\n        if( params.overrideField ){\n          var val = params.overrideField(ele);\n\n          if( val !== undefined ){\n            return val;\n          }\n        }\n\n        return ele._private[ params.field ];\n      }\n    };\n\n    $$.elesfn[ params.on ] = defineSwitchFunction({\n      event: params.on,\n      field: params.field,\n      ableField: params.ableField,\n      overrideAble: params.overrideAble,\n      value: true\n    });\n\n    $$.elesfn[ params.off ] = defineSwitchFunction({\n      event: params.off,\n      field: params.field,\n      ableField: params.ableField,\n      overrideAble: params.overrideAble,\n      value: false\n    });\n  }\n\n  defineSwitchSet({\n    field: 'locked',\n    overrideField: function(ele){\n      return ele.cy().autolock() ? true : undefined;\n    },\n    on: 'lock',\n    off: 'unlock'\n  });\n\n  defineSwitchSet({\n    field: 'grabbable',\n    overrideField: function(ele){\n      return ele.cy().autoungrabify() ? false : undefined;\n    },\n    on: 'grabify',\n    off: 'ungrabify'\n  });\n\n  defineSwitchSet({\n    field: 'selected',\n    ableField: 'selectable',\n    overrideAble: function(ele){\n      return ele.cy().autounselectify() ? false : undefined;\n    },\n    on: 'select',\n    off: 'unselect'\n  });\n\n  defineSwitchSet({\n    field: 'selectable',\n    overrideField: function(ele){\n      return ele.cy().autounselectify() ? false : undefined;\n    },\n    on: 'selectify',\n    off: 'unselectify'\n  });\n\n  $$.elesfn.deselect = $$.elesfn.unselect;\n\n  $$.elesfn.grabbed = function(){\n    var ele = this[0];\n    if( ele ){\n      return ele._private.grabbed;\n    }\n  };\n\n  defineSwitchSet({\n    field: 'active',\n    on: 'activate',\n    off: 'unactivate'\n  });\n\n  $$.elesfn.inactive = function(){\n    var ele = this[0];\n    if( ele ){\n      return !ele._private.active;\n    }\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // DAG functions\n  //////////////////////////\n\n  $$.fn.eles({\n    // get the root nodes in the DAG\n    roots: function( selector ){\n      var eles = this;\n      var roots = [];\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        if( !ele.isNode() ){\n          continue;\n        }\n\n        var hasEdgesPointingIn = ele.connectedEdges(function(){\n          return this.data('target') === ele.id() && this.data('source') !== ele.id();\n        }).length > 0;\n\n        if( !hasEdgesPointingIn ){\n          roots.push( ele );\n        }\n      }\n\n      return new $$.Collection( this._private.cy, roots, { unique: true } ).filter( selector );\n    },\n\n    // get the leaf nodes in the DAG\n    leaves: function( selector ){\n      var eles = this;\n      var leaves = [];\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        if( !ele.isNode() ){\n          continue;\n        }\n\n        var hasEdgesPointingOut = ele.connectedEdges(function(){\n          return this.data('source') === ele.id() && this.data('target') !== ele.id();\n        }).length > 0;\n\n        if( !hasEdgesPointingOut ){\n          leaves.push( ele );\n        }\n      }\n\n      return new $$.Collection( this._private.cy, leaves, { unique: true } ).filter( selector );\n    },\n\n    // normally called children in graph theory\n    // these nodes =edges=> outgoing nodes\n    outgoers: function( selector ){\n      var eles = this;\n      var oEles = [];\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        var eleId = ele.id();\n\n        if( !ele.isNode() ){ continue; }\n\n        var edges = ele._private.edges;\n        for( var j = 0; j < edges.length; j++ ){\n          var edge = edges[j];\n          var srcId = edge._private.data.source;\n          var tgtId = edge._private.data.target;\n\n          if( srcId === eleId && tgtId !== eleId ){\n            oEles.push( edge );\n            oEles.push( edge.target()[0] );\n          }\n        }\n      }\n\n      return new $$.Collection( this._private.cy, oEles, { unique: true } ).filter( selector );\n    },\n\n    // aka DAG descendants\n    successors: function( selector ){\n      var eles = this;\n      var sEles = [];\n      var sElesIds = {};\n\n      for(;;){\n        var outgoers = eles.outgoers();\n\n        if( outgoers.length === 0 ){ break; } // done if no outgoers left\n\n        var newOutgoers = false;\n        for( var i = 0; i < outgoers.length; i++ ){\n          var outgoer = outgoers[i];\n          var outgoerId = outgoer.id();\n\n          if( !sElesIds[ outgoerId ] ){\n            sElesIds[ outgoerId ] = true;\n            sEles.push( outgoer );\n            newOutgoers = true;\n          }\n        }\n\n        if( !newOutgoers ){ break; } // done if touched all outgoers already\n\n        eles = outgoers;\n      }\n\n      return new $$.Collection( this._private.cy, sEles, { unique: true } ).filter( selector );\n    },\n\n    // normally called parents in graph theory\n    // these nodes <=edges= incoming nodes\n    incomers: function( selector ){\n      var eles = this;\n      var oEles = [];\n\n      for( var i = 0; i < eles.length; i++ ){\n        var ele = eles[i];\n        var eleId = ele.id();\n\n        if( !ele.isNode() ){ continue; }\n\n        var edges = ele._private.edges;\n        for( var j = 0; j < edges.length; j++ ){\n          var edge = edges[j];\n          var srcId = edge._private.data.source;\n          var tgtId = edge._private.data.target;\n\n          if( tgtId === eleId && srcId !== eleId ){\n            oEles.push( edge );\n            oEles.push( edge.source()[0] );\n          }\n        }\n      }\n\n      return new $$.Collection( this._private.cy, oEles, { unique: true } ).filter( selector );\n    },\n\n    // aka DAG ancestors\n    predecessors: function( selector ){\n      var eles = this;\n      var pEles = [];\n      var pElesIds = {};\n\n      for(;;){\n        var incomers = eles.incomers();\n\n        if( incomers.length === 0 ){ break; } // done if no incomers left\n\n        var newIncomers = false;\n        for( var i = 0; i < incomers.length; i++ ){\n          var incomer = incomers[i];\n          var incomerId = incomer.id();\n\n          if( !pElesIds[ incomerId ] ){\n            pElesIds[ incomerId ] = true;\n            pEles.push( incomer );\n            newIncomers = true;\n          }\n        }\n\n        if( !newIncomers ){ break; } // done if touched all incomers already\n\n        eles = incomers;\n      }\n\n      return new $$.Collection( this._private.cy, pEles, { unique: true } ).filter( selector );\n    }\n  });\n\n\n  // Neighbourhood functions\n  //////////////////////////\n\n  $$.fn.eles({\n    neighborhood: function(selector){\n      var elements = [];\n      var cy = this._private.cy;\n      var nodes = this.nodes();\n\n      for( var i = 0; i < nodes.length; i++ ){ // for all nodes\n        var node = nodes[i];\n        var connectedEdges = node.connectedEdges();\n\n        // for each connected edge, add the edge and the other node\n        for( var j = 0; j < connectedEdges.length; j++ ){\n          var edge = connectedEdges[j];\n          var otherNode = edge.connectedNodes().not(node);\n\n          // need check in case of loop\n          if( otherNode.length > 0 ){\n            elements.push( otherNode[0] ); // add node 1 hop away\n          }\n\n          // add connected edge\n          elements.push( edge[0] );\n        }\n\n      }\n\n      return ( new $$.Collection( cy, elements, { unique: true } ) ).filter( selector );\n    },\n\n    closedNeighborhood: function(selector){\n      return this.neighborhood().add( this ).filter( selector );\n    },\n\n    openNeighborhood: function(selector){\n      return this.neighborhood( selector );\n    }\n  });\n\n  // aliases\n  $$.elesfn.neighbourhood = $$.elesfn.neighborhood;\n  $$.elesfn.closedNeighbourhood = $$.elesfn.closedNeighborhood;\n  $$.elesfn.openNeighbourhood = $$.elesfn.openNeighborhood;\n\n\n  // Edge functions\n  /////////////////\n\n  $$.fn.eles({\n    source: function( selector ){\n      var ele = this[0];\n      var src;\n\n      if( ele ){\n        src = ele._private.source;\n      }\n\n      return src && selector ? src.filter( selector ) : src;\n    },\n\n    target: function( selector ){\n      var ele = this[0];\n      var tgt;\n\n      if( ele ){\n        tgt = ele._private.target;\n      }\n\n      return tgt && selector ? tgt.filter( selector ) : tgt;\n    },\n\n    sources: defineSourceFunction({\n      attr: 'source'\n    }),\n\n    targets: defineSourceFunction({\n      attr: 'target'\n    })\n  });\n\n  function defineSourceFunction( params ){\n    return function( selector ){\n      var sources = [];\n      var cy = this._private.cy;\n\n      for( var i = 0; i < this.length; i++ ){\n        var ele = this[i];\n        var src = ele._private[ params.attr ];\n\n        if( src ){\n          sources.push( src );\n        }\n      }\n\n      return new $$.Collection( cy, sources, { unique: true } ).filter( selector );\n    };\n  }\n\n  $$.fn.eles({\n    edgesWith: defineEdgesWithFunction(),\n\n    edgesTo: defineEdgesWithFunction({\n      thisIs: 'source'\n    })\n  });\n\n  function defineEdgesWithFunction( params ){\n\n    return function(otherNodes){\n      var elements = [];\n      var cy = this._private.cy;\n      var p = params || {};\n\n      // get elements if a selector is specified\n      if( $$.is.string(otherNodes) ){\n        otherNodes = cy.$( otherNodes );\n      }\n\n      var thisIds = this._private.ids;\n      var otherIds = otherNodes._private.ids;\n\n      for( var h = 0; h < otherNodes.length; h++ ){\n        var edges = otherNodes[h]._private.edges;\n\n        for( var i = 0; i < edges.length; i++ ){\n          var edge = edges[i];\n          var foundId;\n          var edgeData = edge._private.data;\n          var thisToOther = thisIds[ edgeData.source ] && otherIds[ edgeData.target ];\n          var otherToThis = otherIds[ edgeData.source ] && thisIds[ edgeData.target ];\n          var edgeConnectsThisAndOther = thisToOther || otherToThis;\n\n          if( !edgeConnectsThisAndOther ){ continue; }\n\n          if( p.thisIs ){\n            if( p.thisIs === 'source' && !thisToOther ){ continue; }\n\n            if( p.thisIs === 'target' && !otherToThis ){ continue; }\n          }\n\n          elements.push( edge );\n        }\n      }\n\n      return new $$.Collection( cy, elements, { unique: true } );\n    };\n  }\n\n  $$.fn.eles({\n    connectedEdges: function( selector ){\n      var retEles = [];\n      var cy = this._private.cy;\n\n      var eles = this;\n      for( var i = 0; i < eles.length; i++ ){\n        var node = eles[i];\n        if( !node.isNode() ){ continue; }\n\n        var edges = node._private.edges;\n\n        for( var j = 0; j < edges.length; j++ ){\n          var edge = edges[j];\n          retEles.push( edge );\n        }\n      }\n\n      return new $$.Collection( cy, retEles, { unique: true } ).filter( selector );\n    },\n\n    connectedNodes: function( selector ){\n      var retEles = [];\n      var cy = this._private.cy;\n\n      var eles = this;\n      for( var i = 0; i < eles.length; i++ ){\n        var edge = eles[i];\n        if( !edge.isEdge() ){ continue; }\n\n        retEles.push( edge.source()[0] );\n        retEles.push( edge.target()[0] );\n      }\n\n      return new $$.Collection( cy, retEles, { unique: true } ).filter( selector );\n    },\n\n    parallelEdges: defineParallelEdgesFunction(),\n\n    codirectedEdges: defineParallelEdgesFunction({\n      codirected: true\n    })\n  });\n\n  function defineParallelEdgesFunction(params){\n    var defaults = {\n      codirected: false\n    };\n    params = $$.util.extend({}, defaults, params);\n\n    return function( selector ){\n      var cy = this._private.cy;\n      var elements = [];\n      var edges = this.edges();\n      var p = params;\n\n      // look at all the edges in the collection\n      for( var i = 0; i < edges.length; i++ ){\n        var edge1 = edges[i];\n        var src1 = edge1.source()[0];\n        var srcid1 = src1.id();\n        var tgt1 = edge1.target()[0];\n        var tgtid1 = tgt1.id();\n        var srcEdges1 = src1._private.edges;\n\n        // look at edges connected to the src node of this edge\n        for( var j = 0; j < srcEdges1.length; j++ ){\n          var edge2 = srcEdges1[j];\n          var edge2data = edge2._private.data;\n          var tgtid2 = edge2data.target;\n          var srcid2 = edge2data.source;\n\n          var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;\n          var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;\n\n          if( (p.codirected && codirected) || (!p.codirected && (codirected || oppdirected)) ){\n            elements.push( edge2 );\n          }\n        }\n      }\n\n      return new $$.Collection( cy, elements, { unique: true } ).filter( selector );\n    };\n\n  }\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  $$.fn.eles({\n\n    fit: function(){},\n    center: function(){}\n\n  });\n\n})( cytoscape );\n\n;(function ($$) {\n  \"use strict\";\n\n  /*  Min and Max heap predefaults */\n\n  $$.Minheap = function (cy, eles, valueFn) {\n    return new $$.Heap(cy, eles, $$.Heap.minHeapComparator, valueFn);\n  };\n\n  $$.Maxheap = function (cy, eles, valueFn) {\n    return new $$.Heap(cy, eles, $$.Heap.maxHeapComparator, valueFn);\n  };\n\n  $$.Heap = function (cy, eles, comparator, valueFn) {\n    if (typeof comparator === \"undefined\" || typeof eles === \"undefined\") {\n      return;\n    }\n\n    if (typeof valueFn === \"undefined\") {\n      valueFn = $$.Heap.idFn;\n    }\n\n    var sourceHeap = [],\n      pointers = {},\n      elements = [],\n      i = 0,\n      id,\n      heap,\n      elesLen;\n\n    eles = this.getArgumentAsCollection(eles, cy);\n    elesLen = eles.length;\n\n    for (i = 0; i < elesLen; i += 1) {\n      sourceHeap.push(valueFn.call(cy, eles[i], i, eles));\n\n      id = eles[i].id();\n\n      if (pointers.hasOwnProperty(id)) {\n        throw \"ERROR: Multiple items with the same id found: \" + id;\n      }\n\n      pointers[id] = i;\n      elements.push(id);\n    }\n\n    this._private = {\n      cy: cy,\n      heap: sourceHeap,\n      pointers: pointers,\n      elements: elements,\n      comparator: comparator,\n      extractor: valueFn,\n      length: elesLen\n    };\n\n    for (i = Math.floor(elesLen / 2); i >= 0; i -= 1) {\n      heap = this.heapify(i);\n    }\n\n    return heap;\n  };\n\n  /* static methods */\n  $$.Heap.idFn = function (node) {\n    return node.id();\n  };\n\n  $$.Heap.minHeapComparator = function (a, b) {\n    return a >= b;\n  };\n\n  $$.Heap.maxHeapComparator = function (a, b) {\n    return a <= b;\n  };\n\n  $$.fn.heap = function( fnMap, options ){\n    for( var name in fnMap ){\n      var fn = fnMap[name];\n      $$.Heap.prototype[ name ] = fn;\n    }\n  };\n\n  $$.heapfn = $$.Heap.prototype; // short alias\n\n  /* object methods */\n  $$.heapfn.size = function () {\n    return this._private.length;\n  };\n\n  $$.heapfn.getArgumentAsCollection = function (eles, cy) {\n    var result;\n    if(typeof cy === \"undefined\") {\n      cy = this._private.cy;\n    }\n\n    if ($$.is.elementOrCollection(eles)) {\n      result = eles;\n\n    } else {\n      var resultArray = [],\n        sourceEles = [].concat.apply([], [eles]);\n\n      for (var i = 0; i < sourceEles.length; i++) {\n        var id = sourceEles[i],\n          ele = cy.getElementById(id);\n\n        if(ele.length > 0) {\n          resultArray.push(ele);\n        }\n      }\n\n      result = new $$.Collection(cy, resultArray);\n    }\n\n    return result;\n  };\n\n  $$.heapfn.isHeap = function () {\n    var array = this._private.heap,\n      arrlen = array.length,\n      i,\n      left,\n      right,\n      lCheck,\n      rCheck,\n      comparator = this._private.comparator;\n\n    for (i = 0; i < arrlen; i += 1) {\n      left = 2 * i + 1;\n      right = left + 1;\n      lCheck = left < arrlen ? comparator(array[left], array[i]) : true;\n      rCheck = right < arrlen ? comparator(array[right], array[i]) : true;\n\n      if (!lCheck || !rCheck) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  $$.heapfn.heapSwap = function (i, j) {\n    var heap = this._private.heap,\n      pointers = this._private.pointers,\n      elements = this._private.elements,\n      swapValue = heap[i],\n      swapElems = elements[i],\n      idI = elements[i],\n      idJ = elements[j];\n\n    heap[i] = heap[j];\n    elements[i] = elements[j];\n\n    pointers[idI] = j;\n    pointers[idJ] = i;\n\n    heap[j] = swapValue;\n    elements[j] = swapElems;\n  };\n\n  $$.heapfn.heapify = function (i, rootToLeaf) {\n    var treeLen = 0,\n      condHeap = false,\n      array,\n      current,\n      left,\n      right,\n      best,\n      comparator,\n      parent;\n\n    if (typeof rootToLeaf === \"undefined\") {\n      rootToLeaf = true;\n    }\n\n    array = this._private.heap;\n    treeLen = array.length;\n    comparator = this._private.comparator;\n    current = i;\n\n    while (!condHeap) {\n\n      if (rootToLeaf) {\n        left = 2 * current + 1;\n        right = left + 1;\n        best = current;\n\n        if (left < treeLen && !comparator(array[left], array[best])) {\n          best = left;\n        }\n\n        if (right < treeLen && !comparator(array[right], array[best])) {\n          best = right;\n        }\n\n        condHeap = best === current;\n\n        if (!condHeap) {\n          this.heapSwap(best, current);\n          current = best;\n        }\n\n      } else {\n        parent = Math.floor((current - 1) / 2);\n        best = current;\n        condHeap = parent < 0 || comparator(array[best], array[parent]);\n\n        if (!condHeap) {\n          this.heapSwap(best, parent);\n          current = parent;\n        }\n      }\n\n    } // while\n  };\n\n  /* collectionOrElement */\n  $$.heapfn.insert = function (eles) {\n    var elements = this.getArgumentAsCollection(eles),\n      elsize = elements.length,\n      element,\n      elindex,\n      elvalue,\n      elid,\n      i;\n\n    for (i = 0; i < elsize; i += 1) {\n      element = elements[i];\n      elindex = this._private.heap.length;\n      elvalue = this._private.extractor(element);\n      elid = element.id();\n\n      if (this._private.pointers.hasOwnProperty(elid)) {\n        throw \"ERROR: Multiple items with the same id found: \" + elid;\n      }\n\n      this._private.heap.push(elvalue);\n      this._private.elements.push(elid);\n      this._private.pointers[elid] = elindex;\n      this.heapify(elindex, false);\n    }\n\n    this._private.length = this._private.heap.length;\n  };\n\n  $$.heapfn.getValueById = function (elementId) {\n    if (this._private.pointers.hasOwnProperty(elementId)) {\n      var elementIndex = this._private.pointers[elementId];\n\n      return this._private.heap[elementIndex];\n    }\n  };\n\n  $$.heapfn.contains = function (eles) {\n    var elements = this.getArgumentAsCollection(eles);\n\n    for (var i = 0; i < elements.length; i += 1) {\n      var elementId = elements[i].id();\n\n      if(!this._private.pointers.hasOwnProperty(elementId)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  $$.heapfn.top = function () {\n    if (this._private.length > 0) {\n\n      return {\n        value: this._private.heap[0],\n        id: this._private.elements[0]\n      };\n\n    }\n  };\n\n  $$.heapfn.pop = function () {\n    if (this._private.length > 0) {\n      var top = this.top(),\n        lastIndex = this._private.length - 1,\n        removeCandidate,\n        removeValue,\n        remId;\n\n      this.heapSwap(0, lastIndex);\n\n      removeCandidate = this._private.elements[lastIndex];\n      removeValue = this._private.heap[lastIndex];\n      remId = removeCandidate;\n\n      this._private.heap.pop();\n      this._private.elements.pop();\n      this._private.length = this._private.heap.length;\n      this._private.pointers[remId] = undefined;\n\n      this.heapify(0);\n      return top;\n    }\n  };\n\n  $$.heapfn.findDirectionHeapify = function (index) {\n    var parent = Math.floor((index - 1) / 2),\n      array = this._private.heap,\n      condHeap = parent < 0 || this._private.comparator(array[index], array[parent]);\n\n    this.heapify(index, condHeap);\n  };\n\n  /* edit is a new value or function */\n  // only values in heap are updated. elements themselves are not!\n  $$.heapfn.edit = function (eles, edit) {\n    var elements = this.getArgumentAsCollection(eles);\n\n    for (var i = 0; i < elements.length; i += 1) {\n      var elementId = elements[i].id(),\n        elementIndex = this._private.pointers[elementId],\n        elementValue = this._private.heap[elementIndex];\n\n      if ($$.is.number(edit)) {\n        this._private.heap[elementIndex] = edit;\n\n      } else if ($$.is.fn(edit)) {\n        this._private.heap[elementIndex] = edit.call(this._private.cy, elementValue, elementIndex);\n      }\n\n      this.findDirectionHeapify(elementIndex);\n    }\n  };\n\n  $$.heapfn.remove = function (eles) {\n    var elements = this.getArgumentAsCollection(eles);\n\n    for (var i = 0; i < elements.length; i += 1) {\n      var elementId = elements[i].id(),\n        elementIndex = this._private.pointers[elementId],\n        lastIndex = this._private.length - 1,\n        removeCandidate,\n        removeValue,\n        remId;\n\n      if (elementIndex !== lastIndex) {\n        this.heapSwap(elementIndex, lastIndex);\n      }\n\n      removeCandidate = this._private.elements[lastIndex];\n      removeValue = this._private.heap[lastIndex];\n      remId = removeCandidate;\n\n      this._private.heap.pop();\n      this._private.elements.pop();\n      this._private.length = this._private.heap.length;\n      this._private.pointers[remId] = undefined;\n\n      this.findDirectionHeapify(elementIndex);\n    }\n\n    return removeValue;\n  };\n\n})(cytoscape);\n\n/*\n  The canvas renderer was written by Yue Dong.\n\n  Modifications tracked on Github.\n*/\n\n(function($$) { 'use strict';\n\n  CanvasRenderer.CANVAS_LAYERS = 3;\n  //\n  CanvasRenderer.SELECT_BOX = 0;\n  CanvasRenderer.DRAG = 1;\n  CanvasRenderer.NODE = 2;\n\n  CanvasRenderer.BUFFER_COUNT = 3;\n  //\n  CanvasRenderer.TEXTURE_BUFFER = 0;\n  CanvasRenderer.MOTIONBLUR_BUFFER_NODE = 1;\n  CanvasRenderer.MOTIONBLUR_BUFFER_DRAG = 2;\n\n  function CanvasRenderer(options) {\n\n    this.options = options;\n\n    this.data = {\n\n      select: [undefined, undefined, undefined, undefined, 0], // Coordinates for selection box, plus enabled flag\n      renderer: this, cy: options.cy, container: options.cy.container(),\n\n      canvases: new Array(CanvasRenderer.CANVAS_LAYERS),\n      contexts: new Array(CanvasRenderer.CANVAS_LAYERS),\n      canvasNeedsRedraw: new Array(CanvasRenderer.CANVAS_LAYERS),\n\n      bufferCanvases: new Array(CanvasRenderer.BUFFER_COUNT),\n      bufferContexts: new Array(CanvasRenderer.CANVAS_LAYERS)\n\n    };\n\n    //--Pointer-related data\n    this.hoverData = {down: null, last: null,\n        downTime: null, triggerMode: null,\n        dragging: false,\n        initialPan: [null, null], capture: false};\n\n    this.timeoutData = {panTimeout: null};\n\n    this.dragData = {possibleDragElements: []};\n\n    this.touchData = {start: null, capture: false,\n        // These 3 fields related to tap, taphold events\n        startPosition: [null, null, null, null, null, null],\n        singleTouchStartTime: null,\n        singleTouchMoved: true,\n\n\n        now: [null, null, null, null, null, null],\n        earlier: [null, null, null, null, null, null] };\n    //--\n\n    //--Wheel-related data\n    this.zoomData = {freeToZoom: false, lastPointerX: null};\n    //--\n\n    this.redraws = 0;\n    this.showFps = options.showFps;\n\n    this.bindings = [];\n\n    this.data.canvasContainer = document.createElement('div');\n    var containerStyle = this.data.canvasContainer.style;\n    containerStyle.position = 'absolute';\n    containerStyle.zIndex = '0';\n    containerStyle.overflow = 'hidden';\n\n    this.data.container.appendChild( this.data.canvasContainer );\n\n    for (var i = 0; i < CanvasRenderer.CANVAS_LAYERS; i++) {\n      this.data.canvases[i] = document.createElement('canvas');\n      this.data.contexts[i] = this.data.canvases[i].getContext('2d');\n      this.data.canvases[i].style.position = 'absolute';\n      this.data.canvases[i].setAttribute('data-id', 'layer' + i);\n      this.data.canvases[i].style.zIndex = String(CanvasRenderer.CANVAS_LAYERS - i);\n      this.data.canvasContainer.appendChild(this.data.canvases[i]);\n\n      this.data.canvasNeedsRedraw[i] = false;\n    }\n    this.data.topCanvas = this.data.canvases[0];\n\n    this.data.canvases[CanvasRenderer.NODE].setAttribute('data-id', 'layer' + CanvasRenderer.NODE + '-node');\n    this.data.canvases[CanvasRenderer.SELECT_BOX].setAttribute('data-id', 'layer' + CanvasRenderer.SELECT_BOX + '-selectbox');\n    this.data.canvases[CanvasRenderer.DRAG].setAttribute('data-id', 'layer' + CanvasRenderer.DRAG + '-drag');\n\n    for (var i = 0; i < CanvasRenderer.BUFFER_COUNT; i++) {\n      this.data.bufferCanvases[i] = document.createElement('canvas');\n      this.data.bufferContexts[i] = this.data.bufferCanvases[i].getContext('2d');\n      this.data.bufferCanvases[i].style.position = 'absolute';\n      this.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);\n      this.data.bufferCanvases[i].style.zIndex = String(-i - 1);\n      this.data.bufferCanvases[i].style.visibility = 'hidden';\n      //this.data.canvasContainer.appendChild(this.data.bufferCanvases[i]);\n    }\n\n    this.hideEdgesOnViewport = options.hideEdgesOnViewport;\n    this.hideLabelsOnViewport = options.hideLabelsOnViewport;\n    this.textureOnViewport = options.textureOnViewport;\n    this.wheelSensitivity = options.wheelSensitivity;\n    this.motionBlurEnabled = options.motionBlur; // on by default\n    this.forcedPixelRatio = options.pixelRatio;\n    this.motionBlur = true; // for initial kick off\n    this.motionBlurOpacity = options.motionBlurOpacity;\n    this.motionBlurTransparency = 1 - this.motionBlurOpacity;\n    this.motionBlurPxRatio = 1;\n    this.mbPxRBlurry = 1; //0.8;\n    this.minMbLowQualFrames = 4;\n    this.fullQualityMb = false;\n    this.clearedForMotionBlur = [];\n    this.desktopTapThreshold = options.desktopTapThreshold;\n    this.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;\n    this.touchTapThreshold = options.touchTapThreshold;\n    this.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;\n    this.tapholdDuration = 500;\n\n    this.load();\n  }\n\n  CanvasRenderer.panOrBoxSelectDelay = 400;\n\n  // whether to use Path2D caching for drawing\n  var pathsImpld = typeof Path2D !== 'undefined';\n  CanvasRenderer.usePaths = function(){\n    return pathsImpld;\n  };\n\n  CanvasRenderer.prototype.notify = function(params) {\n    var types;\n\n    if( $$.is.array( params.type ) ){\n      types = params.type;\n\n    } else {\n      types = [ params.type ];\n    }\n\n    for( var i = 0; i < types.length; i++ ){\n      var type = types[i];\n\n      switch( type ){\n        case 'destroy':\n          this.destroy();\n          return;\n\n        case 'add':\n        case 'remove':\n        case 'load':\n          this.updateNodesCache();\n          this.updateEdgesCache();\n          break;\n\n        case 'viewport':\n          this.data.canvasNeedsRedraw[CanvasRenderer.SELECT_BOX] = true;\n          break;\n\n        case 'style':\n          this.updateCachedZSortedEles();\n          break;\n      }\n\n      if( type === 'load' || type === 'resize' ){\n        this.invalidateContainerClientCoordsCache();\n        this.matchCanvasSize(this.data.container);\n      }\n    } // for\n\n    this.data.canvasNeedsRedraw[CanvasRenderer.NODE] = true;\n    this.data.canvasNeedsRedraw[CanvasRenderer.DRAG] = true;\n\n    this.redraw();\n  };\n\n  CanvasRenderer.prototype.destroy = function(){\n    this.destroyed = true;\n\n    for( var i = 0; i < this.bindings.length; i++ ){\n      var binding = this.bindings[i];\n      var b = binding;\n\n      b.target.removeEventListener(b.event, b.handler, b.useCapture);\n    }\n\n    if( this.removeObserver ){\n      this.removeObserver.disconnect();\n    }\n\n    if( this.labelCalcDiv ){\n      try{\n        document.body.removeChild(this.labelCalcDiv);\n      } catch(e){\n        // ie10 issue #1014\n      }\n    }\n  };\n\n\n\n  // copy the math functions into the renderer prototype\n  // unfortunately these functions are used interspersed t/o the code\n  // and this makes sure things work just in case a ref was missed in refactoring\n  // TODO remove this eventually\n  for( var fnName in $$.math ){\n    CanvasRenderer.prototype[ fnName ] = $$.math[ fnName ];\n  }\n\n\n  $$('renderer', 'canvas', CanvasRenderer);\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var rendFunc = CanvasRenderer.prototype;\n  var arrowShapes = CanvasRenderer.arrowShapes = {};\n\n  CanvasRenderer.arrowShapeHeight = 0.3;\n\n  // Contract for arrow shapes:\n  // 0, 0 is arrow tip\n  // (0, 1) is direction towards node\n  // (1, 0) is right\n  //\n  // functional api:\n  // collide: check x, y in shape\n  // roughCollide: called before collide, no false negatives\n  // draw: draw\n  // spacing: dist(arrowTip, nodeBoundary)\n  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip\n\n  var bbCollide = function(x, y, centerX, centerY, width, height, direction, padding){\n    var x1 = centerX - width/2;\n    var x2 = centerX + width/2;\n    var y1 = centerY - height/2;\n    var y2 = centerY + height/2;\n\n    return (x1 <= x && x <= x2) && (y1 <= y && y <= y2);\n  };\n\n  var transform = function(x, y, size, angle, translation){\n    angle = -angle; // b/c of notation used in arrow draw fn\n\n    var xRotated = x * Math.cos(angle) - y * Math.sin(angle);\n    var yRotated = x * Math.sin(angle) + y * Math.cos(angle);\n\n    var xScaled = xRotated * size;\n    var yScaled = yRotated * size;\n\n    var xTranslated = xScaled + translation.x;\n    var yTranslated = yScaled + translation.y;\n\n    return {\n      x: xTranslated,\n      y: yTranslated\n    };\n  };\n\n  arrowShapes['arrow'] = {\n    _points: [\n      -0.15, -0.3,\n      0, 0,\n      0.15, -0.3\n    ],\n\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      var points = arrowShapes['arrow']._points;\n\n//      console.log(\"collide(): \" + direction);\n\n      return $$.math.pointInsidePolygon(\n        x, y, points, centerX, centerY, width, height, direction, padding);\n    },\n\n    roughCollide: bbCollide,\n\n    draw: function(context, size, angle, translation) {\n      var points = arrowShapes['arrow']._points;\n\n      for (var i = 0; i < points.length / 2; i++) {\n        var pt = transform( points[i * 2], points[i * 2 + 1], size, angle, translation );\n\n        context.lineTo(pt.x, pt.y);\n      }\n\n    },\n\n    spacing: function(edge) {\n      return 0;\n    },\n\n    gap: function(edge) {\n      return edge._private.style['width'].pxValue * 2;\n    }\n  };\n\n  arrowShapes['triangle'] = arrowShapes['arrow'];\n\n  arrowShapes['triangle-backcurve'] = {\n    _ctrlPt: [ 0, -0.15 ],\n\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      var points = arrowShapes['triangle']._points;\n\n//      console.log(\"collide(): \" + direction);\n\n      return $$.math.pointInsidePolygon(\n        x, y, points, centerX, centerY, width, height, direction, padding);\n    },\n\n    roughCollide: bbCollide,\n\n    draw: function(context, size, angle, translation) {\n      var points = arrowShapes['triangle']._points;\n      var firstPt;\n\n      for (var i = 0; i < points.length / 2; i++) {\n        var pt = transform( points[i * 2], points[i * 2 + 1], size, angle, translation );\n\n        if( i === 0 ){\n          firstPt = pt;\n        }\n\n        context.lineTo(pt.x, pt.y);\n      }\n\n      var ctrlPt = this._ctrlPt;\n      var ctrlPtTrans = transform( ctrlPt[0], ctrlPt[1], size, angle, translation );\n\n      context.quadraticCurveTo( ctrlPtTrans.x, ctrlPtTrans.y, firstPt.x, firstPt.y );\n    },\n\n    spacing: function(edge) {\n      return 0;\n    },\n\n    gap: function(edge) {\n      return edge._private.style['width'].pxValue;\n    }\n  };\n\n\n  arrowShapes['triangle-tee'] = {\n    _points: [\n      -0.15, -0.3,\n      0, 0,\n      0.15, -0.3,\n      -0.15, -0.3\n    ],\n\n    _pointsTee: [\n      -0.15, -0.4,\n      -0.15, -0.5,\n      0.15, -0.5,\n      0.15, -0.4\n    ],\n\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      var triPts = arrowShapes['triangle-tee']._points;\n      var teePts = arrowShapes['triangle-tee']._pointsTee;\n\n      var inside = $$.math.pointInsidePolygon(x, y, teePts, centerX, centerY, width, height, direction, padding)\n        || $$.math.pointInsidePolygon(x, y, triPts, centerX, centerY, width, height, direction, padding);\n\n      return inside;\n    },\n\n    roughCollide: bbCollide,\n\n    draw: function(context, size, angle, translation) {\n      var triPts = arrowShapes['triangle-tee']._points;\n      for (var i = 0; i < triPts.length / 2; i++){\n        var pt = transform( triPts[ i * 2 ],  triPts[ i * 2 + 1 ], size, angle, translation );\n\n        context.lineTo( pt.x, pt.y );\n      }\n\n      var teePts = arrowShapes['triangle-tee']._pointsTee;\n      var firstTeePt = transform( teePts[0], teePts[1], size, angle, translation );\n      context.moveTo( firstTeePt.x, firstTeePt.y );\n\n      for (var i = 0; i < teePts.length / 2; i++){\n        var pt = transform( teePts[ i * 2 ],  teePts[ i * 2 + 1 ], size, angle, translation );\n\n        context.lineTo( pt.x, pt.y );\n      }\n    },\n\n    spacing: function(edge) {\n      return 0;\n    },\n\n    gap: function(edge) {\n      return edge._private.style['width'].pxValue * 2;\n    }\n  };\n\n  arrowShapes['half-triangle-overshot'] = {\n    _points: [\n      0, -0.25,\n      -0.5, -0.25,\n      0.5, 0.25\n    ],\n\n    leavePathOpen: true,\n    matchEdgeWidth: true,\n\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      var points = this._points;\n\n//      console.log(\"collide(): \" + direction);\n\n      return $$.math.pointInsidePolygon(\n        x, y, points, centerX, centerY, width, height, direction, padding);\n    },\n\n    roughCollide: bbCollide,\n\n    draw: function(context, size, angle, translation) {\n      var points = this._points;\n\n      for (var i = 0; i < points.length / 2; i++) {\n        var pt = transform( points[i * 2], points[i * 2 + 1], size, angle, translation );\n\n        context.lineTo(pt.x, pt.y);\n      }\n    },\n\n    spacing: function(edge) {\n      return 0;\n    },\n\n    gap: function(edge) {\n      return edge._private.style['width'].pxValue * 2;\n    }\n  };\n\n  arrowShapes['none'] = {\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      return false;\n    },\n\n    roughCollide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      return false;\n    },\n\n    draw: function(context) {\n    },\n\n    spacing: function(edge) {\n      return 0;\n    },\n\n    gap: function(edge) {\n      return 0;\n    }\n  };\n\n  arrowShapes['circle'] = {\n    _baseRadius: 0.15,\n\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      // Transform x, y to get non-rotated ellipse\n\n      if (width != height) {\n        var aspectRatio = (height + padding) / (width + padding);\n        y /= aspectRatio;\n        centerY /= aspectRatio;\n\n        return (Math.pow(centerX - x, 2)\n          + Math.pow(centerY - y, 2) <= Math.pow((width + padding)\n            * arrowShapes['circle']._baseRadius, 2));\n      } else {\n        return (Math.pow(centerX - x, 2)\n          + Math.pow(centerY - y, 2) <= Math.pow((width + padding)\n            * arrowShapes['circle']._baseRadius, 2));\n      }\n    },\n\n    roughCollide: bbCollide,\n\n    draw: function(context, size, angle, translation) {\n      context.arc(translation.x, translation.y, arrowShapes['circle']._baseRadius * size, 0, Math.PI * 2, false);\n    },\n\n    spacing: function(edge) {\n      return rendFunc.getArrowWidth(edge._private.style['width'].pxValue)\n        * arrowShapes['circle']._baseRadius;\n    },\n\n    gap: function(edge) {\n      return edge._private.style['width'].pxValue * 2;\n    }\n  };\n\n  arrowShapes['inhibitor'] = {\n    _points: [\n      -0.25, 0,\n      -0.25, -0.1,\n      0.25, -0.1,\n      0.25, 0\n    ],\n\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      var points = arrowShapes['inhibitor']._points;\n\n      return $$.math.pointInsidePolygon(\n        x, y, points, centerX, centerY, width, height, direction, padding);\n    },\n\n    roughCollide: bbCollide,\n\n    draw: function(context, size, angle, translation) {\n      var points = arrowShapes['inhibitor']._points;\n\n      for (var i = 0; i < points.length / 2; i++) {\n        var pt = transform( points[i * 2], points[i * 2 + 1], size, angle, translation );\n\n        context.lineTo(pt.x, pt.y);\n      }\n    },\n\n    spacing: function(edge) {\n      return 1;\n    },\n\n    gap: function(edge) {\n      return 1;\n    }\n  };\n\n  arrowShapes['tee'] = arrowShapes['inhibitor'];\n\n  arrowShapes['square'] = {\n    _points: [\n      -0.15, 0.00,\n      0.15, 0.00,\n      0.15, -0.3,\n      -0.15, -0.3\n    ],\n\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      var points = arrowShapes['square']._points;\n\n      return $$.math.pointInsidePolygon(\n        x, y, points, centerX, centerY, width, height, direction, padding);\n    },\n\n    roughCollide: bbCollide,\n\n    draw: function(context, size, angle, translation) {\n      var points = arrowShapes['square']._points;\n\n      for (var i = 0; i < points.length / 2; i++) {\n        var pt = transform( points[i * 2], points[i * 2 + 1], size, angle, translation );\n\n        context.lineTo(pt.x, pt.y);\n      }\n    },\n\n    spacing: function(edge) {\n      return 0;\n    },\n\n    gap: function(edge) {\n      return edge._private.style['width'].pxValue * 2;\n    }\n  };\n\n  arrowShapes['diamond'] = {\n    _points: [\n      -0.15, -0.15,\n      0, -0.3,\n      0.15, -0.15,\n      0, 0\n    ],\n\n    collide: function(x, y, centerX, centerY, width, height, direction, padding) {\n      var points = arrowShapes['diamond']._points;\n\n      return $$.math.pointInsidePolygon(\n        x, y, points, centerX, centerY, width, height, direction, padding);\n    },\n\n    roughCollide: bbCollide,\n\n    draw: function(context, size, angle, translation) {\n      var points = arrowShapes['diamond']._points;\n\n      for (var i = 0; i < points.length / 2; i++) {\n        var pt = transform( points[i * 2], points[i * 2 + 1], size, angle, translation );\n\n        context.lineTo(pt.x, pt.y);\n      }\n    },\n\n    spacing: function(edge) {\n      return 0;\n    },\n\n    gap: function(edge) {\n      return edge._private.style['width'].pxValue;\n    }\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CRp = CanvasRenderer.prototype;\n\n  CRp.getCachedNodes = function() {\n    var data = this.data; var cy = this.data.cy;\n\n    if (data.cache == null) {\n      data.cache = {};\n    }\n\n    if (data.cache.cachedNodes == null) {\n      data.cache.cachedNodes = cy.nodes();\n    }\n\n    return data.cache.cachedNodes;\n  };\n\n  CRp.updateNodesCache = function() {\n    var data = this.data; var cy = this.data.cy;\n\n    if (data.cache == null) {\n      data.cache = {};\n    }\n\n    data.cache.cachedNodes = cy.nodes();\n  };\n\n  CRp.getCachedEdges = function() {\n    var data = this.data; var cy = this.data.cy;\n\n    if (data.cache == null) {\n      data.cache = {};\n    }\n\n    if (data.cache.cachedEdges == null) {\n      data.cache.cachedEdges = cy.edges();\n    }\n\n    return data.cache.cachedEdges;\n  };\n\n  CRp.updateEdgesCache = function() {\n    var data = this.data; var cy = this.data.cy;\n\n    if (data.cache == null) {\n      data.cache = {};\n    }\n\n    data.cache.cachedEdges = cy.edges();\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CRp = CanvasRenderer.prototype;\n\n  // Project mouse\n  CRp.projectIntoViewport = function(clientX, clientY) {\n    var offsets = this.findContainerClientCoords();\n    var offsetLeft = offsets[0];\n    var offsetTop = offsets[1];\n\n    var x = clientX - offsetLeft;\n    var y = clientY - offsetTop;\n\n    x -= this.data.cy.pan().x; y -= this.data.cy.pan().y; x /= this.data.cy.zoom(); y /= this.data.cy.zoom();\n    return [x, y];\n  };\n\n  CRp.findContainerClientCoords = function() {\n    var container = this.data.container;\n\n    var bb = this.containerBB = this.containerBB || container.getBoundingClientRect();\n\n    return [bb.left, bb.top, bb.right - bb.left, bb.bottom - bb.top];\n  };\n\n  CRp.invalidateContainerClientCoordsCache = function(){\n    this.containerBB = null;\n  };\n\n  // Find nearest element\n  CRp.findNearestElement = function(x, y, visibleElementsOnly, isTouch){\n    var self = this;\n    var eles = this.getCachedZSortedEles();\n    var near = [];\n    var zoom = this.data.cy.zoom();\n    var hasCompounds = this.data.cy.hasCompoundNodes();\n    var edgeThreshold = (isTouch ? 24 : 8) / zoom;\n    var nodeThreshold = (isTouch ? 8 : 2) / zoom;\n\n    function checkNode(node){\n      var width = node.outerWidth() + 2*nodeThreshold;\n      var height = node.outerHeight() + 2*nodeThreshold;\n      var hw = width/2;\n      var hh = height/2;\n      var pos = node._private.position;\n\n      if(\n        pos.x - hw <= x && x <= pos.x + hw // bb check x\n          &&\n        pos.y - hh <= y && y <= pos.y + hh // bb check y\n      ){\n        var visible = !visibleElementsOnly || ( node.visible() && !node.transparent() );\n\n        // exit early if invisible edge and must be visible\n        if( visibleElementsOnly && !visible ){\n          return;\n        }\n\n        var shape = CanvasRenderer.nodeShapes[ self.getNodeShape(node) ];\n        var borderWO = node._private.style['border-width'].pxValue / 2;\n\n        if(\n          shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)\n        ){\n          near.push( node );\n        }\n\n      }\n    }\n\n    function checkEdge(edge){\n      var rs = edge._private.rscratch;\n      var style = edge._private.style;\n      var width = style['width'].pxValue/2 + edgeThreshold; // more like a distance radius from centre\n      var widthSq = width * width;\n      var width2 = width * 2;\n      var src = edge._private.source;\n      var tgt = edge._private.target;\n      var inEdgeBB = false;\n      var sqDist;\n\n      // exit early if invisible edge and must be visible\n      var passedVisibilityCheck;\n      var passesVisibilityCheck = function(){\n        if( passedVisibilityCheck !== undefined ){\n          return passedVisibilityCheck;\n        }\n\n        if( !visibleElementsOnly ){\n          passedVisibilityCheck = true;\n          return true;\n        }\n\n        var visible = edge.visible() && !edge.transparent();\n        if( visible ){\n          passedVisibilityCheck = true;\n          return true;\n        }\n\n        passedVisibilityCheck = false;\n        return false;\n      };\n\n      if (rs.edgeType === 'self' || rs.edgeType === 'compound') {\n        if(\n            (\n              (inEdgeBB = $$.math.inBezierVicinity(x, y, rs.startX, rs.startY, rs.cp2ax, rs.cp2ay, rs.selfEdgeMidX, rs.selfEdgeMidY, widthSq))\n                && passesVisibilityCheck() &&\n              ( widthSq > (sqDist = $$.math.sqDistanceToQuadraticBezier(x, y, rs.startX, rs.startY, rs.cp2ax, rs.cp2ay, rs.selfEdgeMidX, rs.selfEdgeMidY)) )\n            )\n              ||\n            (\n              (inEdgeBB = $$.math.inBezierVicinity(x, y, rs.selfEdgeMidX, rs.selfEdgeMidY, rs.cp2cx, rs.cp2cy, rs.endX, rs.endY, widthSq))\n                && passesVisibilityCheck() &&\n              ( widthSq > (sqDist = $$.math.sqDistanceToQuadraticBezier(x, y, rs.selfEdgeMidX, rs.selfEdgeMidY, rs.cp2cx, rs.cp2cy, rs.endX, rs.endY)) )\n            )\n        ){\n          near.push( edge );\n        }\n\n      } else if (rs.edgeType === 'haystack') {\n        var radius = style['haystack-radius'].value;\n        var halfRadius = radius/2; // b/c have to half width/height\n\n        var tgtPos = tgt._private.position;\n        var tgtW = tgt.width();\n        var tgtH = tgt.height();\n        var srcPos = src._private.position;\n        var srcW = src.width();\n        var srcH = src.height();\n\n        var startX = srcPos.x + rs.source.x * srcW * halfRadius;\n        var startY = srcPos.y + rs.source.y * srcH * halfRadius;\n        var endX = tgtPos.x + rs.target.x * tgtW * halfRadius;\n        var endY = tgtPos.y + rs.target.y * tgtH * halfRadius;\n\n        if(\n          (inEdgeBB = $$.math.inLineVicinity(x, y, startX, startY, endX, endY, width2))\n            && passesVisibilityCheck() &&\n          widthSq > ( sqDist = $$.math.sqDistanceToFiniteLine( x, y, startX, startY, endX, endY ) )\n        ){\n          near.push( edge );\n        }\n\n      } else if (rs.edgeType === 'straight') {\n        if(\n          (inEdgeBB = $$.math.inLineVicinity(x, y, rs.startX, rs.startY, rs.endX, rs.endY, width2))\n            && passesVisibilityCheck() &&\n          widthSq > ( sqDist = $$.math.sqDistanceToFiniteLine(x, y, rs.startX, rs.startY, rs.endX, rs.endY) )\n        ){\n          near.push( edge );\n        }\n\n      } else if (rs.edgeType === 'bezier') {\n        if(\n          (inEdgeBB = $$.math.inBezierVicinity(x, y, rs.startX, rs.startY, rs.cp2x, rs.cp2y, rs.endX, rs.endY, widthSq))\n            && passesVisibilityCheck() &&\n          (widthSq > (sqDist = $$.math.sqDistanceToQuadraticBezier(x, y, rs.startX, rs.startY, rs.cp2x, rs.cp2y, rs.endX, rs.endY)) )\n        ){\n          near.push( edge );\n        }\n      }\n\n      // if we're close to the edge but didn't hit it, maybe we hit its arrows\n      if( inEdgeBB && passesVisibilityCheck() && near.length === 0 || near[near.length - 1] !== edge ){\n        var srcShape = CanvasRenderer.arrowShapes[ style['source-arrow-shape'].value ];\n        var tgtShape = CanvasRenderer.arrowShapes[ style['target-arrow-shape'].value ];\n\n        var src = src || edge._private.source;\n        var tgt = tgt || edge._private.target;\n\n        var tgtPos = tgt._private.position;\n        var srcPos = src._private.position;\n\n        var srcArW = self.getArrowWidth( style['width'].pxValue );\n        var srcArH = self.getArrowHeight( style['width'].pxValue );\n\n        var tgtArW = srcArW;\n        var tgtArH = srcArH;\n\n        if(\n          (\n            srcShape.roughCollide(x, y, rs.arrowStartX, rs.arrowStartY, srcArW, srcArH, [rs.arrowStartX - srcPos.x, rs.arrowStartY - srcPos.y], edgeThreshold)\n              &&\n            srcShape.collide(x, y, rs.arrowStartX, rs.arrowStartY, srcArW, srcArH, [rs.arrowStartX - srcPos.x, rs.arrowStartY - srcPos.y], edgeThreshold)\n          )\n            ||\n          (\n            tgtShape.roughCollide(x, y, rs.arrowEndX, rs.arrowEndY, tgtArW, tgtArH, [rs.arrowEndX - tgtPos.x, rs.arrowEndY - tgtPos.y], edgeThreshold)\n              &&\n            tgtShape.collide(x, y, rs.arrowEndX, rs.arrowEndY, tgtArW, tgtArH, [rs.arrowEndX - tgtPos.x, rs.arrowEndY - tgtPos.y], edgeThreshold)\n          )\n        ){\n          near.push( edge );\n        }\n      }\n\n      // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)\n      if( hasCompounds &&  near.length > 0 && near[ near.length - 1 ] === edge ){\n        checkNode( src );\n        checkNode( tgt );\n      }\n    }\n\n    for( var i = eles.length - 1; i >= 0; i-- ){ // reverse order for precedence\n      var ele = eles[i];\n\n      if( near.length > 0 ){ break; } // since we check in z-order, first found is top and best result => exit early\n\n      if( ele._private.group === 'nodes' ){\n        checkNode( eles[i] );\n\n      } else  { // then edge\n        checkEdge( eles[i] );\n      }\n\n    }\n\n\n    if( near.length > 0 ){\n      return near[ near.length - 1 ];\n    } else {\n      return null;\n    }\n  };\n\n  // 'Give me everything from this box'\n  CRp.getAllInBox = function(x1, y1, x2, y2) {\n    var nodes = this.getCachedNodes();\n    var edges = this.getCachedEdges();\n    var box = [];\n\n    var x1c = Math.min(x1, x2);\n    var x2c = Math.max(x1, x2);\n    var y1c = Math.min(y1, y2);\n    var y2c = Math.max(y1, y2);\n\n    x1 = x1c;\n    x2 = x2c;\n    y1 = y1c;\n    y2 = y2c;\n\n    var heur;\n\n    for ( var i = 0; i < nodes.length; i++ ){\n      var pos = nodes[i]._private.position;\n      var nShape = this.getNodeShape(nodes[i]);\n      var w = this.getNodeWidth(nodes[i]);\n      var h = this.getNodeHeight(nodes[i]);\n      var border = nodes[i]._private.style['border-width'].pxValue / 2;\n      var shapeObj = CanvasRenderer.nodeShapes[ nShape ];\n\n      if ( shapeObj.intersectBox(x1, y1, x2, y2, w, h, pos.x, pos.y, border) ){\n        box.push(nodes[i]);\n      }\n    }\n\n    for ( var i = 0; i < edges.length; i++ ){\n      var rs = edges[i]._private.rscratch;\n\n      if (edges[i]._private.rscratch.edgeType == 'self') {\n        if ((heur = $$.math.boxInBezierVicinity(x1, y1, x2, y2,\n            rs.startX, rs.startY,\n            rs.cp2ax, rs.cp2ay,\n            rs.endX, rs.endY, edges[i]._private.style['width'].pxValue))\n              &&\n            (heur == 2 || (heur == 1 && $$.math.checkBezierInBox(x1, y1, x2, y2,\n              rs.startX, rs.startY,\n              rs.cp2ax, rs.cp2ay,\n              rs.endX, rs.endY, edges[i]._private.style['width'].pxValue)))\n                ||\n          (heur = $$.math.boxInBezierVicinity(x1, y1, x2, y2,\n            rs.startX, rs.startY,\n            rs.cp2cx, rs.cp2cy,\n            rs.endX, rs.endY, edges[i]._private.style['width'].pxValue))\n              &&\n            (heur == 2 || (heur == 1 && $$.math.checkBezierInBox(x1, y1, x2, y2,\n              rs.startX, rs.startY,\n              rs.cp2cx, rs.cp2cy,\n              rs.endX, rs.endY, edges[i]._private.style['width'].pxValue)))\n          )\n        { box.push(edges[i]); }\n      }\n\n      if (rs.edgeType == 'bezier' &&\n        (heur = $$.math.boxInBezierVicinity(x1, y1, x2, y2,\n            rs.startX, rs.startY,\n            rs.cp2x, rs.cp2y,\n            rs.endX, rs.endY, edges[i]._private.style['width'].pxValue))\n              &&\n            (heur == 2 || (heur == 1 && $$.math.checkBezierInBox(x1, y1, x2, y2,\n              rs.startX, rs.startY,\n              rs.cp2x, rs.cp2y,\n              rs.endX, rs.endY, edges[i]._private.style['width'].pxValue))))\n        { box.push(edges[i]); }\n\n      if (rs.edgeType == 'straight' &&\n        (heur = $$.math.boxInBezierVicinity(x1, y1, x2, y2,\n            rs.startX, rs.startY,\n            rs.startX * 0.5 + rs.endX * 0.5,\n            rs.startY * 0.5 + rs.endY * 0.5,\n            rs.endX, rs.endY, edges[i]._private.style['width'].pxValue))\n              && /* console.log('test', heur) == undefined && */\n            (heur == 2 || (heur == 1 && $$.math.checkStraightEdgeInBox(x1, y1, x2, y2,\n              rs.startX, rs.startY,\n              rs.endX, rs.endY, edges[i]._private.style['width'].pxValue))))\n        { box.push(edges[i]); }\n\n\n      if (rs.edgeType == 'haystack'){\n        var tgt = edges[i].target()[0];\n        var tgtPos = tgt.position();\n        var src = edges[i].source()[0];\n        var srcPos = src.position();\n\n        var startX = srcPos.x + rs.source.x;\n        var startY = srcPos.y + rs.source.y;\n        var endX = tgtPos.x + rs.target.x;\n        var endY = tgtPos.y + rs.target.y;\n\n        var startInBox = (x1 <= startX && startX <= x2) && (y1 <= startY && startY <= y2);\n        var endInBox = (x1 <= endX && endX <= x2) && (y1 <= endY && endY <= y2);\n\n        if( startInBox && endInBox ){\n          box.push( edges[i] );\n        }\n      }\n\n    }\n\n    return box;\n  };\n\n\n  /**\n   * Returns the width of the given node. If the width is set to auto,\n   * returns the value of the autoWidth field.\n   *\n   * @param node          a node\n   * @return {number}     width of the node\n   */\n  CRp.getNodeWidth = function(node)\n  {\n    return node.width();\n  };\n\n  /**\n   * Returns the height of the given node. If the height is set to auto,\n   * returns the value of the autoHeight field.\n   *\n   * @param node          a node\n   * @return {number}     width of the node\n   */\n  CRp.getNodeHeight = function(node)\n  {\n    return node.height();\n  };\n\n  /**\n   * Returns the shape of the given node. If the height or width of the given node\n   * is set to auto, the node is considered to be a compound.\n   *\n   * @param node          a node\n   * @return {String}     shape of the node\n   */\n  CRp.getNodeShape = function(node)\n  {\n    // TODO only allow rectangle for a compound node?\n//    if (node._private.style['width'].value == 'auto' ||\n//        node._private.style['height'].value == 'auto')\n//    {\n//      return 'rectangle';\n//    }\n\n    var shape = node._private.style['shape'].value;\n\n    if( node.isParent() ){\n      if( shape === 'rectangle' || shape === 'roundrectangle' ){\n        return shape;\n      } else {\n        return 'rectangle';\n      }\n    }\n\n    return shape;\n  };\n\n\n  CRp.getNodePadding = function(node)\n  {\n    var left = node._private.style['padding-left'].pxValue;\n    var right = node._private.style['padding-right'].pxValue;\n    var top = node._private.style['padding-top'].pxValue;\n    var bottom = node._private.style['padding-bottom'].pxValue;\n\n    if (isNaN(left))\n    {\n      left = 0;\n    }\n\n    if (isNaN(right))\n    {\n      right = 0;\n    }\n\n    if (isNaN(top))\n    {\n      top = 0;\n    }\n\n    if (isNaN(bottom))\n    {\n      bottom = 0;\n    }\n\n    return {left : left,\n      right : right,\n      top : top,\n      bottom : bottom};\n  };\n\n  CRp.zOrderSort = $$.Collection.zIndexSort;\n\n  CRp.updateCachedZSortedEles = function(){\n    this.getCachedZSortedEles( true );\n  };\n\n  CRp.getCachedZSortedEles = function( forceRecalc ){\n    var lastNodes = this.lastZOrderCachedNodes;\n    var lastEdges = this.lastZOrderCachedEdges;\n    var nodes = this.getCachedNodes();\n    var edges = this.getCachedEdges();\n    var eles = [];\n\n    if( forceRecalc || !lastNodes || !lastEdges || lastNodes !== nodes || lastEdges !== edges ){\n      //console.time('cachezorder')\n\n      for( var i = 0; i < nodes.length; i++ ){\n        var n = nodes[i];\n\n        if( n.animated() || (n.visible() && !n.transparent()) ){\n          eles.push( n );\n        }\n      }\n\n      for( var i = 0; i < edges.length; i++ ){\n        var e = edges[i];\n\n        if( e.animated() || (e.visible() && !e.transparent()) ){\n          eles.push( e );\n        }\n      }\n\n      eles.sort( this.zOrderSort );\n      this.cachedZSortedEles = eles;\n      //console.log('make cache')\n\n      //console.timeEnd('cachezorder')\n    } else {\n      eles = this.cachedZSortedEles;\n      //console.log('read cache')\n    }\n\n    this.lastZOrderCachedNodes = nodes;\n    this.lastZOrderCachedEdges = edges;\n\n    return eles;\n  };\n\n  CRp.projectBezier = function(edge){\n    var qbezierAt = $$.math.qbezierAt;\n    var rs = edge._private.rscratch;\n    var bpts = edge._private.rstyle.bezierPts = [];\n\n    function pushBezierPts(pts){\n      bpts.push({\n        x: qbezierAt( pts[0], pts[2], pts[4], 0.05 ),\n        y: qbezierAt( pts[1], pts[3], pts[5], 0.05 )\n      });\n\n      bpts.push({\n        x: qbezierAt( pts[0], pts[2], pts[4], 0.25 ),\n        y: qbezierAt( pts[1], pts[3], pts[5], 0.25 )\n      });\n\n      bpts.push({\n        x: qbezierAt( pts[0], pts[2], pts[4], 0.4 ),\n        y: qbezierAt( pts[1], pts[3], pts[5], 0.4 )\n      });\n\n      var mid = {\n        x: qbezierAt( pts[0], pts[2], pts[4], 0.5 ),\n        y: qbezierAt( pts[1], pts[3], pts[5], 0.5 )\n      };\n\n      bpts.push( mid );\n\n      if( rs.edgeType === 'self' || rs.edgeType === 'compound' ){\n        rs.midX = rs.selfEdgeMidX;\n        rs.midY = rs.selfEdgeMidY;\n      } else {\n        rs.midX = mid.x;\n        rs.midY = mid.y;\n      }\n\n      bpts.push({\n        x: qbezierAt( pts[0], pts[2], pts[4], 0.6 ),\n        y: qbezierAt( pts[1], pts[3], pts[5], 0.6 )\n      });\n\n      bpts.push({\n        x: qbezierAt( pts[0], pts[2], pts[4], 0.75 ),\n        y: qbezierAt( pts[1], pts[3], pts[5], 0.75 )\n      });\n\n      bpts.push({\n        x: qbezierAt( pts[0], pts[2], pts[4], 0.95 ),\n        y: qbezierAt( pts[1], pts[3], pts[5], 0.95 )\n      });\n    }\n\n    if( rs.edgeType === 'self' ){\n      pushBezierPts( [rs.startX, rs.startY, rs.cp2ax, rs.cp2ay, rs.selfEdgeMidX, rs.selfEdgeMidY] );\n      pushBezierPts( [rs.selfEdgeMidX, rs.selfEdgeMidY, rs.cp2cx, rs.cp2cy, rs.endX, rs.endY] );\n    } else if( rs.edgeType === 'bezier' ){\n      pushBezierPts( [rs.startX, rs.startY, rs.cp2x, rs.cp2y, rs.endX, rs.endY] );\n    }\n  };\n\n  CRp.recalculateNodeLabelProjection = function( node ){\n    var content = node._private.style['content'].strValue;\n    if( !content || content.match(/^\\s+$/) ){ return; }\n\n    var textX, textY;\n    var nodeWidth = node.outerWidth();\n    var nodeHeight = node.outerHeight();\n    var nodePos = node._private.position;\n    var textHalign = node._private.style['text-halign'].strValue;\n    var textValign = node._private.style['text-valign'].strValue;\n    var rs = node._private.rscratch;\n    var rstyle = node._private.rstyle;\n\n    switch( textHalign ){\n      case 'left':\n        textX = nodePos.x - nodeWidth / 2;\n        break;\n\n      case 'right':\n        textX = nodePos.x + nodeWidth / 2;\n        break;\n\n      default: // e.g. center\n        textX = nodePos.x;\n    }\n\n    switch( textValign ){\n      case 'top':\n        textY = nodePos.y - nodeHeight / 2;\n        break;\n\n      case 'bottom':\n        textY = nodePos.y + nodeHeight / 2;\n        break;\n\n      default: // e.g. middle\n        textY = nodePos.y;\n    }\n\n    rs.labelX = textX;\n    rs.labelY = textY;\n    rstyle.labelX = textX;\n    rstyle.labelY = textY;\n\n    this.applyLabelDimensions( node );\n  };\n\n  CRp.recalculateEdgeLabelProjection = function( edge ){\n    var content = edge._private.style['content'].strValue;\n    if( !content || content.match(/^\\s+$/) ){ return; }\n\n    var textX, textY;\n    var edgeCenterX, edgeCenterY;\n    var _p = edge._private;\n    var rs = _p.rscratch;\n    //var style = _p.style;\n    var rstyle = _p.rstyle;\n\n    if (rs.edgeType == 'self') {\n      edgeCenterX = rs.selfEdgeMidX;\n      edgeCenterY = rs.selfEdgeMidY;\n    } else if (rs.edgeType == 'straight') {\n      edgeCenterX = (rs.startX + rs.endX) / 2;\n      edgeCenterY = (rs.startY + rs.endY) / 2;\n    } else if (rs.edgeType == 'bezier') {\n      edgeCenterX = $$.math.qbezierAt( rs.startX, rs.cp2x, rs.endX, 0.5 );\n      edgeCenterY = $$.math.qbezierAt( rs.startY, rs.cp2y, rs.endY, 0.5 );\n    } else if (rs.edgeType == 'haystack') {\n      // var src = _p.source;\n      // var tgt = _p.target;\n      // var srcPos = src._private.position;\n      // var tgtPos = tgt._private.position;\n      var pts = rs.haystackPts;\n\n      edgeCenterX = ( pts[0] + pts[2] )/2;\n      edgeCenterY = ( pts[1] + pts[3] )/2;\n    }\n\n    textX = edgeCenterX;\n    textY = edgeCenterY;\n\n    // add center point to style so bounding box calculations can use it\n    rs.labelX = textX;\n    rs.labelY = textY;\n    rstyle.labelX = textX;\n    rstyle.labelY = textY;\n\n    this.applyLabelDimensions( edge );\n  };\n\n  CRp.applyLabelDimensions = function( ele ){\n    var rs = ele._private.rscratch;\n    var rstyle = ele._private.rstyle;\n\n    var text = this.getLabelText( ele );\n    var labelDims = this.calculateLabelDimensions( ele, text );\n\n    rstyle.labelWidth = labelDims.width;\n    rs.labelWidth = labelDims.width;\n\n    rstyle.labelHeight = labelDims.height;\n    rs.labelHeight = labelDims.height;\n  };\n\n  CRp.getLabelText = function( ele ){\n    var style = ele._private.style;\n    var text = ele._private.style['content'].strValue;\n    var textTransform = style['text-transform'].value;\n    var rscratch = ele._private.rscratch;\n\n    if (textTransform == 'none') {\n    } else if (textTransform == 'uppercase') {\n      text = text.toUpperCase();\n    } else if (textTransform == 'lowercase') {\n      text = text.toLowerCase();\n    }\n\n    if( style['text-wrap'].value === 'wrap' ){\n      //console.log('wrap');\n\n      // save recalc if the label is the same as before\n      if( rscratch.labelWrapKey === rscratch.labelKey ){\n        // console.log('wrap cache hit');\n        return rscratch.labelWrapCachedText;\n      }\n      // console.log('wrap cache miss');\n\n      var lines = text.split('\\n');\n      var maxW = style['text-max-width'].pxValue;\n      var wrappedLines = [];\n\n      for( var l = 0; l < lines.length; l++ ){\n        var line = lines[l];\n        var lineDims = this.calculateLabelDimensions( ele, line, 'line=' + line );\n        var lineW = lineDims.width;\n\n        if( lineW > maxW ){ // line is too long\n          var words = line.split(/\\s+/); // NB: assume collapsed whitespace into single space\n          var subline = '';\n\n          for( var w = 0; w < words.length; w++ ){\n            var word = words[w];\n            var testLine = subline.length === 0 ? word : subline + ' ' + word;\n            var testDims = this.calculateLabelDimensions( ele, testLine, 'testLine=' + testLine );\n            var testW = testDims.width;\n\n            if( testW <= maxW ){ // word fits on current line\n              subline += word + ' ';\n            } else { // word starts new line\n              wrappedLines.push( subline );\n              subline = word + ' ';\n            }\n          }\n\n          // if there's remaining text, put it in a wrapped line\n          if( !subline.match(/^\\s+$/) ){\n            wrappedLines.push( subline );\n          }\n        } else { // line is already short enough\n          wrappedLines.push( line );\n        }\n      } // for\n\n      rscratch.labelWrapCachedLines = wrappedLines;\n      rscratch.labelWrapCachedText = text = wrappedLines.join('\\n');\n      rscratch.labelWrapKey = rscratch.labelKey;\n\n      // console.log(text)\n    } // if wrap\n\n    return text;\n  };\n\n  CRp.calculateLabelDimensions = function( ele, text, extraKey ){\n    var r = this;\n    var style = ele._private.style;\n    var fStyle = style['font-style'].strValue;\n    var size = style['font-size'].pxValue + 'px';\n    var family = style['font-family'].strValue;\n    // var variant = style['font-variant'].strValue;\n    var weight = style['font-weight'].strValue;\n\n    var cacheKey = ele._private.labelKey;\n\n    if( extraKey ){\n      cacheKey += '$@$' + extraKey;\n    }\n\n    var cache = r.labelDimCache || (r.labelDimCache = {});\n\n    if( cache[cacheKey] ){\n      return cache[cacheKey];\n    }\n\n    var div = this.labelCalcDiv;\n\n    if( !div ){\n      div = this.labelCalcDiv = document.createElement('div');\n      document.body.appendChild( div );\n    }\n\n    var ds = div.style;\n\n    // from ele style\n    ds.fontFamily = family;\n    ds.fontStyle = fStyle;\n    ds.fontSize = size;\n    // ds.fontVariant = variant;\n    ds.fontWeight = weight;\n\n    // forced style\n    ds.position = 'absolute';\n    ds.left = '-9999px';\n    ds.top = '-9999px';\n    ds.zIndex = '-1';\n    ds.visibility = 'hidden';\n    ds.pointerEvents = 'none';\n    ds.padding = '0';\n    ds.lineHeight = '1';\n\n    if( style['text-wrap'].value === 'wrap' ){\n      ds.whiteSpace = 'pre'; // so newlines are taken into account\n    } else {\n      ds.whiteSpace = 'normal';\n    }\n\n    // put label content in div\n    div.textContent = text;\n\n    cache[cacheKey] = {\n      width: div.clientWidth,\n      height: div.clientHeight\n    };\n\n    return cache[cacheKey];\n  };\n\n  CRp.recalculateRenderedStyle = function( eles ){\n    var edges = [];\n    var nodes = [];\n    var handledEdge = {};\n\n    for( var i = 0; i < eles.length; i++ ){\n      var ele = eles[i];\n      var _p = ele._private;\n      var style = _p.style;\n      var rs = _p.rscratch;\n      var rstyle = _p.rstyle;\n      var id = _p.data.id;\n      var bbStyleSame = rs.boundingBoxKey != null && _p.boundingBoxKey === rs.boundingBoxKey;\n      var labelStyleSame = rs.labelKey != null && _p.labelKey === rs.labelKey;\n      var styleSame = bbStyleSame && labelStyleSame;\n\n      if( ele._private.group === 'nodes' ){\n        var pos = _p.position;\n        var posSame = rstyle.nodeX != null && rstyle.nodeY != null && pos.x === rstyle.nodeX && pos.y === rstyle.nodeY;\n        var wSame = rstyle.nodeW != null && rstyle.nodeW === style['width'].pxValue;\n        var hSame = rstyle.nodeH != null && rstyle.nodeH === style['height'].pxValue;\n\n        if( !posSame || !styleSame || !wSame || !hSame ){\n          nodes.push( ele );\n        }\n\n        rstyle.nodeX = pos.x;\n        rstyle.nodeY = pos.y;\n        rstyle.nodeW = style['width'].pxValue;\n        rstyle.nodeH = style['height'].pxValue;\n      } else { // edges\n\n        var srcPos = ele._private.source._private.position;\n        var tgtPos = ele._private.target._private.position;\n        var srcSame = rstyle.srcX != null && rstyle.srcY != null && srcPos.x === rstyle.srcX && srcPos.y === rstyle.srcY;\n        var tgtSame = rstyle.tgtX != null && rstyle.tgtY != null && tgtPos.x === rstyle.tgtX && tgtPos.y === rstyle.tgtY;\n        var positionsSame = srcSame && tgtSame;\n\n        if( !positionsSame || !styleSame ){\n          var curveType = _p.style['curve-style'].value;\n\n          if( curveType === 'bezier' ){\n            if( !handledEdge[ id ] ){\n              edges.push( ele );\n              handledEdge[ id ] = true;\n\n              var parallelEdges = ele.parallelEdges();\n              for( var i = 0; i < parallelEdges.length; i++ ){\n                var pEdge = parallelEdges[i];\n                var pId = pEdge._private.data.id;\n\n                if( !handledEdge[ pId ] ){\n                  edges.push( pEdge );\n                  handledEdge[ pId ] = true;\n                }\n\n              }\n            }\n          } else {\n            edges.push( ele );\n          }\n        } // if positions diff\n\n        // update rstyle positions\n        rstyle.srcX = srcPos.x;\n        rstyle.srcY = srcPos.y;\n        rstyle.tgtX = tgtPos.x;\n        rstyle.tgtY = tgtPos.y;\n\n      } // if edges\n\n      rs.boundingBoxKey = _p.boundingBoxKey;\n      rs.labelKey = _p.labelKey;\n    }\n\n    this.recalculateEdgeProjections( edges );\n    this.recalculateLabelProjections( nodes, edges );\n  };\n\n  CRp.recalculateLabelProjections = function( nodes, edges ){\n    for( var i = 0; i < nodes.length; i++ ){\n      this.recalculateNodeLabelProjection( nodes[i] );\n    }\n\n    for( var i = 0; i < edges.length; i++ ){\n      this.recalculateEdgeLabelProjection( edges[i] );\n    }\n  };\n\n  CRp.recalculateEdgeProjections = function( edges ){\n    this.findEdgeControlPoints( edges );\n  };\n\n\n  // Find edge control points\n  CRp.findEdgeControlPoints = function(edges) {\n    if( !edges || edges.length === 0 ){ return; }\n\n    var cy = this.data.cy;\n    var hasCompounds = cy.hasCompoundNodes();\n    var hashTable = {};\n    var pairIds = [];\n    var haystackEdges = [];\n\n    // create a table of edge (src, tgt) => list of edges between them\n    var pairId;\n    for (var i = 0; i < edges.length; i++){\n      var edge = edges[i];\n      var style = edge._private.style;\n      var edgeIsUnbundled = style['curve-style'].value === 'unbundled-bezier';\n\n      // ignore edges who are not to be displayed\n      // they shouldn't take up space\n      if( style.display.value === 'none' ){\n        continue;\n      }\n\n      if( style['curve-style'].value === 'haystack' ){\n        haystackEdges.push( edge );\n        continue;\n      }\n\n      var srcId = edge._private.data.source;\n      var tgtId = edge._private.data.target;\n\n      pairId = srcId > tgtId ?\n        tgtId + '-' + srcId :\n        srcId + '-' + tgtId ;\n\n      if( edgeIsUnbundled ){\n        pairId = 'unbundled' + edge._private.data.id;\n      }\n\n      if (hashTable[pairId] == null) {\n        hashTable[pairId] = [];\n        pairIds.push( pairId );\n      }\n\n      hashTable[pairId].push( edge );\n\n      if( edgeIsUnbundled ){\n        hashTable[pairId].hasUnbundled = true;\n      }\n    }\n\n    var src, tgt, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape, srcBorder, tgtBorder;\n    var vectorNormInverse;\n    var badBezier;\n\n    // for each pair (src, tgt), create the ctrl pts\n    // Nested for loop is OK; total number of iterations for both loops = edgeCount\n    for (var p = 0; p < pairIds.length; p++) {\n      pairId = pairIds[p];\n      var pairEdges = hashTable[pairId];\n\n      // for each pair id, the edges should be sorted by index\n      pairEdges.sort(function(edge1, edge2){\n        return edge1._private.index - edge2._private.index;\n      });\n\n      src = pairEdges[0]._private.source;\n      tgt = pairEdges[0]._private.target;\n\n      // make sure src/tgt distinction is consistent\n      // (src/tgt in this case are just for ctrlpts and don't actually have to be true src/tgt)\n      if( src._private.data.id > tgt._private.data.id ){\n        var temp = src;\n        src = tgt;\n        tgt = temp;\n      }\n\n      srcPos = src._private.position;\n      tgtPos = tgt._private.position;\n\n      srcW = this.getNodeWidth(src);\n      srcH = this.getNodeHeight(src);\n\n      tgtW = this.getNodeWidth(tgt);\n      tgtH = this.getNodeHeight(tgt);\n\n      srcShape = CanvasRenderer.nodeShapes[ this.getNodeShape(src) ];\n      tgtShape = CanvasRenderer.nodeShapes[ this.getNodeShape(tgt) ];\n\n      srcBorder = src._private.style['border-width'].pxValue;\n      tgtBorder = tgt._private.style['border-width'].pxValue;\n\n      badBezier = false;\n\n\n      if( (pairEdges.length > 1 && src !== tgt) || pairEdges.hasUnbundled ){\n\n        // pt outside src shape to calc distance/displacement from src to tgt\n        var srcOutside = srcShape.intersectLine(\n          srcPos.x,\n          srcPos.y,\n          srcW,\n          srcH,\n          tgtPos.x,\n          tgtPos.y,\n          srcBorder / 2\n        );\n\n        // pt outside tgt shape to calc distance/displacement from src to tgt\n        var tgtOutside = tgtShape.intersectLine(\n          tgtPos.x,\n          tgtPos.y,\n          tgtW,\n          tgtH,\n          srcPos.x,\n          srcPos.y,\n          tgtBorder / 2\n        );\n\n        var midptSrcPts = {\n          x1: srcOutside[0],\n          x2: tgtOutside[0],\n          y1: srcOutside[1],\n          y2: tgtOutside[1]\n        };\n\n        var dy = ( tgtOutside[1] - srcOutside[1] );\n        var dx = ( tgtOutside[0] - srcOutside[0] );\n        var l = Math.sqrt( dx*dx + dy*dy );\n\n        var vector = {\n          x: dx,\n          y: dy\n        };\n\n        var vectorNorm = {\n          x: vector.x/l,\n          y: vector.y/l\n        };\n        vectorNormInverse = {\n          x: -vectorNorm.y,\n          y: vectorNorm.x\n        };\n\n        // if src intersection is inside tgt or tgt intersection is inside src, then no ctrl pts to draw\n        if(\n          tgtShape.checkPoint( srcOutside[0], srcOutside[1], tgtBorder/2, tgtW, tgtH, tgtPos.x, tgtPos.y )  ||\n          srcShape.checkPoint( tgtOutside[0], tgtOutside[1], srcBorder/2, srcW, srcH, srcPos.x, srcPos.y )\n        ){\n          vectorNormInverse = {};\n          badBezier = true;\n        }\n\n      }\n\n      var edge;\n      var rs;\n\n      for (var i = 0; i < pairEdges.length; i++) {\n        edge = pairEdges[i];\n        rs = edge._private.rscratch;\n\n        var edgeIndex1 = rs.lastEdgeIndex;\n        var edgeIndex2 = i;\n\n        var numEdges1 = rs.lastNumEdges;\n        var numEdges2 = pairEdges.length;\n\n        var eStyle = edge._private.style;\n        var stepSize = eStyle['control-point-step-size'].pxValue;\n        var stepDist = eStyle['control-point-distance'] !== undefined ? eStyle['control-point-distance'].pxValue : undefined;\n        var stepWeight = eStyle['control-point-weight'].value;\n        var edgeIsUnbundled = eStyle['curve-style'].value === 'unbundled-bezier';\n\n        var swappedDirection = edge._private.source !== src;\n\n        if( swappedDirection && edgeIsUnbundled ){\n          stepDist *= -1;\n        }\n\n        var srcX1 = rs.lastSrcCtlPtX;\n        var srcX2 = srcPos.x;\n        var srcY1 = rs.lastSrcCtlPtY;\n        var srcY2 = srcPos.y;\n        var srcW1 = rs.lastSrcCtlPtW;\n        var srcW2 = src.outerWidth();\n        var srcH1 = rs.lastSrcCtlPtH;\n        var srcH2 = src.outerHeight();\n\n        var tgtX1 = rs.lastTgtCtlPtX;\n        var tgtX2 = tgtPos.x;\n        var tgtY1 = rs.lastTgtCtlPtY;\n        var tgtY2 = tgtPos.y;\n        var tgtW1 = rs.lastTgtCtlPtW;\n        var tgtW2 = tgt.outerWidth();\n        var tgtH1 = rs.lastTgtCtlPtH;\n        var tgtH2 = tgt.outerHeight();\n\n        var width1 = rs.lastW;\n        var width2 = eStyle['control-point-step-size'].pxValue;\n\n        if( badBezier ){\n          rs.badBezier = true;\n        } else {\n          rs.badBezier = false;\n        }\n\n        if( srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2\n        &&  tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2\n        &&  width1 === width2\n        &&  ((edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2) || edgeIsUnbundled) ){\n          // console.log('edge ctrl pt cache HIT')\n          continue; // then the control points haven't changed and we can skip calculating them\n        } else {\n          rs.lastSrcCtlPtX = srcX2;\n          rs.lastSrcCtlPtY = srcY2;\n          rs.lastSrcCtlPtW = srcW2;\n          rs.lastSrcCtlPtH = srcH2;\n          rs.lastTgtCtlPtX = tgtX2;\n          rs.lastTgtCtlPtY = tgtY2;\n          rs.lastTgtCtlPtW = tgtW2;\n          rs.lastTgtCtlPtH = tgtH2;\n          rs.lastEdgeIndex = edgeIndex2;\n          rs.lastNumEdges = numEdges2;\n          rs.lastWidth = width2;\n          // console.log('edge ctrl pt cache MISS')\n        }\n\n        // Self-edge\n        if ( src === tgt ) {\n\n          rs.edgeType = 'self';\n\n          var j = i;\n          var loopDist = stepSize;\n\n          if( edgeIsUnbundled ){\n            j = 0;\n            loopDist = stepDist;\n          }\n\n          // New -- fix for large nodes\n          rs.cp2ax = srcPos.x;\n          rs.cp2ay = srcPos.y - (1 + Math.pow(srcH, 1.12) / 100) * loopDist * (j / 3 + 1);\n\n          rs.cp2cx = srcPos.x - (1 + Math.pow(srcW, 1.12) / 100) * loopDist * (j / 3 + 1);\n          rs.cp2cy = srcPos.y;\n\n          rs.selfEdgeMidX = (rs.cp2ax + rs.cp2cx) / 2.0;\n          rs.selfEdgeMidY = (rs.cp2ay + rs.cp2cy) / 2.0;\n\n        // Compound edge\n        } else if(\n          hasCompounds &&\n          ( src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild() ) &&\n          ( src.parents().anySame(tgt) || tgt.parents().anySame(src) )\n        ){\n\n          rs.edgeType = 'compound';\n\n          // because the line approximation doesn't apply for compound beziers\n          // (loop/self edges are already elided b/c of cheap src==tgt check)\n          rs.badBezier = false;\n\n          var j = i;\n          var loopDist = stepSize;\n\n          if( edgeIsUnbundled ){\n            j = 0;\n            loopDist = stepDist;\n          }\n\n\n          var loopW = 50;\n\n          var loopaPos = {\n            x: srcPos.x - srcW/2,\n            y: srcPos.y - srcH/2\n          };\n\n          var loopbPos = {\n            x: tgtPos.x - tgtW/2,\n            y: tgtPos.y - tgtH/2\n          };\n\n          var minCompoundStretch = 1;\n\n          rs.cp2ax = loopaPos.x;\n          rs.compoundStretchA = Math.max( minCompoundStretch, Math.log(srcW * 0.01) ); // avoids cases with impossible beziers\n          rs.cp2ay = loopaPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * rs.compoundStretchA;\n\n          rs.compoundStretchB = Math.max( minCompoundStretch, Math.log(tgtW * 0.01) ); // avoids cases with impossible beziers\n          rs.cp2cx = loopbPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * rs.compoundStretchB;\n          rs.cp2cy = loopbPos.y;\n\n          rs.selfEdgeMidX = (rs.cp2ax + rs.cp2cx) / 2.0;\n          rs.selfEdgeMidY = (rs.cp2ay + rs.cp2cy) / 2.0;\n\n        // Straight edge\n        } else if (pairEdges.length % 2 === 1\n          && i === Math.floor(pairEdges.length / 2)\n          && !edgeIsUnbundled ) {\n\n          rs.edgeType = 'straight';\n\n        // Bezier edge\n        } else {\n          var normStepDist = (0.5 - pairEdges.length / 2 + i) * stepSize;\n          var manStepDist;\n          var sign = $$.math.signum( normStepDist );\n\n          if( edgeIsUnbundled ){\n            manStepDist = stepDist;\n          } else {\n            manStepDist = stepDist !== undefined ? sign * stepDist : undefined;\n          }\n\n          var distanceFromMidpoint = manStepDist !== undefined ? manStepDist : normStepDist;\n\n          var w1 = (1 - stepWeight);\n          var w2 = stepWeight;\n\n          if( swappedDirection ){\n            w1 = stepWeight;\n            w2 = (1 - stepWeight);\n          }\n\n          var adjustedMidpt = {\n            x: midptSrcPts.x1 * w1 + midptSrcPts.x2 * w2,\n            y: midptSrcPts.y1 * w1 + midptSrcPts.y2 * w2\n          };\n\n          rs.edgeType = 'bezier';\n\n          rs.cp2x = adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint;\n          rs.cp2y = adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint;\n\n          // console.log(edge, midPointX, displacementX, distanceFromMidpoint);\n        }\n\n        // find endpts for edge\n        this.findEndpoints( edge );\n\n        var badStart = !$$.is.number( rs.startX ) || !$$.is.number( rs.startY );\n        var badAStart = !$$.is.number( rs.arrowStartX ) || !$$.is.number( rs.arrowStartY );\n        var badEnd = !$$.is.number( rs.endX ) || !$$.is.number( rs.endY );\n        var badAEnd = !$$.is.number( rs.arrowEndX ) || !$$.is.number( rs.arrowEndY );\n\n        var minCpADistFactor = 3;\n        var arrowW = this.getArrowWidth( edge._private.style['width'].pxValue ) * CanvasRenderer.arrowShapeHeight;\n        var minCpADist = minCpADistFactor * arrowW;\n        var startACpDist = $$.math.distance( { x: rs.cp2x, y: rs.cp2y }, { x: rs.startX, y: rs.startY } );\n        var closeStartACp = startACpDist < minCpADist;\n        var endACpDist = $$.math.distance( { x: rs.cp2x, y: rs.cp2y }, { x: rs.endX, y: rs.endY } );\n        var closeEndACp = endACpDist < minCpADist;\n\n        if( rs.edgeType === 'bezier' ){\n          var overlapping = false;\n\n          if( badStart || badAStart || closeStartACp ){\n            overlapping = true;\n\n            // project control point along line from src centre to outside the src shape\n            // (otherwise intersection will yield nothing)\n            var cpD = { // delta\n              x: rs.cp2x - srcPos.x,\n              y: rs.cp2y - srcPos.y\n            };\n            var cpL = Math.sqrt( cpD.x*cpD.x + cpD.y*cpD.y ); // length of line\n            var cpM = { // normalised delta\n              x: cpD.x / cpL,\n              y: cpD.y / cpL\n            };\n            var radius = Math.max(srcW, srcH);\n            var cpProj = { // *2 radius guarantees outside shape\n              x: rs.cp2x + cpM.x * 2 * radius,\n              y: rs.cp2y + cpM.y * 2 * radius\n            };\n\n            var srcCtrlPtIntn = srcShape.intersectLine(\n              srcPos.x,\n              srcPos.y,\n              srcW,\n              srcH,\n              cpProj.x,\n              cpProj.y,\n              srcBorder / 2\n            );\n\n            if( closeStartACp ){\n              rs.cp2x = rs.cp2x + cpM.x * (minCpADist - startACpDist);\n              rs.cp2y = rs.cp2y + cpM.y * (minCpADist - startACpDist);\n            } else {\n              rs.cp2x = srcCtrlPtIntn[0] + cpM.x * minCpADist;\n              rs.cp2y = srcCtrlPtIntn[1] + cpM.y * minCpADist;\n            }\n          }\n\n          if( badEnd || badAEnd || closeEndACp ){\n            overlapping = true;\n\n            // project control point along line from tgt centre to outside the tgt shape\n            // (otherwise intersection will yield nothing)\n            var cpD = { // delta\n              x: rs.cp2x - tgtPos.x,\n              y: rs.cp2y - tgtPos.y\n            };\n            var cpL = Math.sqrt( cpD.x*cpD.x + cpD.y*cpD.y ); // length of line\n            var cpM = { // normalised delta\n              x: cpD.x / cpL,\n              y: cpD.y / cpL\n            };\n            var radius = Math.max(srcW, srcH);\n            var cpProj = { // *2 radius guarantees outside shape\n              x: rs.cp2x + cpM.x * 2 * radius,\n              y: rs.cp2y + cpM.y * 2 * radius\n            };\n\n            var tgtCtrlPtIntn = tgtShape.intersectLine(\n              tgtPos.x,\n              tgtPos.y,\n              tgtW,\n              tgtH,\n              cpProj.x,\n              cpProj.y,\n              tgtBorder / 2\n            );\n\n            if( closeEndACp ){\n              rs.cp2x = rs.cp2x + cpM.x * (minCpADist - endACpDist);\n              rs.cp2y = rs.cp2y + cpM.y * (minCpADist - endACpDist);\n            } else {\n              rs.cp2x = tgtCtrlPtIntn[0] + cpM.x * minCpADist;\n              rs.cp2y = tgtCtrlPtIntn[1] + cpM.y * minCpADist;\n            }\n\n          }\n\n          if( overlapping ){\n            // recalc endpts\n            this.findEndpoints( edge );\n          }\n        } else if( rs.edgeType === 'straight' ){\n          rs.midX = ( srcX2 + tgtX2 )/2;\n          rs.midY = ( srcY2 + tgtY2 )/2;\n        }\n\n        // project the edge into rstyle\n        this.projectBezier( edge );\n        this.recalculateEdgeLabelProjection( edge );\n\n      }\n    }\n\n    for( var i = 0; i < haystackEdges.length; i++ ){\n      var edge = haystackEdges[i];\n      var _p = edge._private;\n      var rscratch = _p.rscratch;\n      var rs = rscratch;\n\n      if( !rscratch.haystack ){\n        var angle = Math.random() * 2 * Math.PI;\n\n        rscratch.source = {\n          x: Math.cos(angle),\n          y: Math.sin(angle)\n        };\n\n        var angle = Math.random() * 2 * Math.PI;\n\n        rscratch.target = {\n          x: Math.cos(angle),\n          y: Math.sin(angle)\n        };\n\n      }\n\n      var src = _p.source;\n      var tgt = _p.target;\n      var srcPos = src._private.position;\n      var tgtPos = tgt._private.position;\n      var srcW = src.width();\n      var tgtW = tgt.width();\n      var srcH = src.height();\n      var tgtH = tgt.height();\n      var radius = style['haystack-radius'].value;\n      var halfRadius = radius/2; // b/c have to half width/height\n\n      rs.haystackPts = [\n        rs.source.x * srcW * halfRadius + srcPos.x,\n        rs.source.y * srcH * halfRadius + srcPos.y,\n        rs.target.x * tgtW * halfRadius + tgtPos.x,\n        rs.target.y * tgtH * halfRadius + tgtPos.y\n      ];\n\n      // always override as haystack in case set to different type previously\n      rscratch.edgeType = 'haystack';\n      rscratch.haystack = true;\n\n      this.recalculateEdgeLabelProjection( edge );\n    }\n\n    return hashTable;\n  };\n\n  CRp.findEndpoints = function(edge) {\n    var intersect;\n\n    var source = edge.source()[0];\n    var target = edge.target()[0];\n\n    var tgtArShape = edge._private.style['target-arrow-shape'].value;\n    var srcArShape = edge._private.style['source-arrow-shape'].value;\n\n    var tgtBorderW = target._private.style['border-width'].pxValue;\n    var srcBorderW = source._private.style['border-width'].pxValue;\n\n    var rs = edge._private.rscratch;\n\n    if (rs.edgeType == 'self' || rs.edgeType == 'compound') {\n\n      var cp = [rs.cp2cx, rs.cp2cy];\n\n      intersect = CanvasRenderer.nodeShapes[this.getNodeShape(target)].intersectLine(\n        target._private.position.x,\n        target._private.position.y,\n        this.getNodeWidth(target),\n        this.getNodeHeight(target),\n        cp[0],\n        cp[1],\n        tgtBorderW / 2\n      );\n\n      var arrowEnd = $$.math.shortenIntersection(intersect, cp,\n        CanvasRenderer.arrowShapes[tgtArShape].spacing(edge));\n      var edgeEnd = $$.math.shortenIntersection(intersect, cp,\n        CanvasRenderer.arrowShapes[tgtArShape].gap(edge));\n\n      rs.endX = edgeEnd[0];\n      rs.endY = edgeEnd[1];\n\n      rs.arrowEndX = arrowEnd[0];\n      rs.arrowEndY = arrowEnd[1];\n\n      var cp = [rs.cp2ax, rs.cp2ay];\n\n      intersect = CanvasRenderer.nodeShapes[this.getNodeShape(source)].intersectLine(\n        source._private.position.x,\n        source._private.position.y,\n        this.getNodeWidth(source),\n        this.getNodeHeight(source),\n        cp[0], //halfPointX,\n        cp[1], //halfPointY\n        srcBorderW / 2\n      );\n\n      var arrowStart = $$.math.shortenIntersection(intersect, cp,\n        CanvasRenderer.arrowShapes[srcArShape].spacing(edge));\n      var edgeStart = $$.math.shortenIntersection(intersect, cp,\n        CanvasRenderer.arrowShapes[srcArShape].gap(edge));\n\n      rs.startX = edgeStart[0];\n      rs.startY = edgeStart[1];\n\n\n      rs.arrowStartX = arrowStart[0];\n      rs.arrowStartY = arrowStart[1];\n\n    } else if (rs.edgeType == 'straight') {\n\n      intersect = CanvasRenderer.nodeShapes[this.getNodeShape(target)].intersectLine(\n        target._private.position.x,\n        target._private.position.y,\n        this.getNodeWidth(target),\n        this.getNodeHeight(target),\n        source.position().x,\n        source.position().y,\n        tgtBorderW / 2);\n\n      if (intersect.length === 0) {\n        rs.noArrowPlacement = true;\n        // return;\n      } else {\n        rs.noArrowPlacement = false;\n      }\n\n      var arrowEnd = $$.math.shortenIntersection(intersect,\n        [source.position().x, source.position().y],\n        CanvasRenderer.arrowShapes[tgtArShape].spacing(edge));\n      var edgeEnd = $$.math.shortenIntersection(intersect,\n        [source.position().x, source.position().y],\n        CanvasRenderer.arrowShapes[tgtArShape].gap(edge));\n\n      rs.endX = edgeEnd[0];\n      rs.endY = edgeEnd[1];\n\n      rs.arrowEndX = arrowEnd[0];\n      rs.arrowEndY = arrowEnd[1];\n\n      intersect = CanvasRenderer.nodeShapes[this.getNodeShape(source)].intersectLine(\n        source._private.position.x,\n        source._private.position.y,\n        this.getNodeWidth(source),\n        this.getNodeHeight(source),\n        target.position().x,\n        target.position().y,\n        srcBorderW / 2);\n\n      if (intersect.length === 0) {\n        rs.noArrowPlacement = true;\n       // return;\n      } else {\n        rs.noArrowPlacement = false;\n      }\n\n      /*\n      console.log(\"1: \"\n        + CanvasRenderer.arrowShapes[srcArShape],\n          srcArShape);\n      */\n      var arrowStart = $$.math.shortenIntersection(intersect,\n        [target.position().x, target.position().y],\n        CanvasRenderer.arrowShapes[srcArShape].spacing(edge));\n      var edgeStart = $$.math.shortenIntersection(intersect,\n        [target.position().x, target.position().y],\n        CanvasRenderer.arrowShapes[srcArShape].gap(edge));\n\n      rs.startX = edgeStart[0];\n      rs.startY = edgeStart[1];\n\n      rs.arrowStartX = arrowStart[0];\n      rs.arrowStartY = arrowStart[1];\n\n      if( !$$.is.number(rs.startX) || !$$.is.number(rs.startY) || !$$.is.number(rs.endX) || !$$.is.number(rs.endY) ){\n        rs.badLine = true;\n      } else {\n        rs.badLine = false;\n      }\n\n    } else if (rs.edgeType == 'bezier') {\n      // if( window.badArrow) debugger;\n      var cp = [rs.cp2x, rs.cp2y];\n\n      intersect = CanvasRenderer.nodeShapes[\n        this.getNodeShape(target)].intersectLine(\n        target._private.position.x,\n        target._private.position.y,\n        this.getNodeWidth(target),\n        this.getNodeHeight(target),\n        cp[0], //halfPointX,\n        cp[1], //halfPointY\n        tgtBorderW / 2\n      );\n\n      /*\n      console.log(\"2: \"\n        + CanvasRenderer.arrowShapes[srcArShape],\n          srcArShape);\n      */\n      var arrowEnd = $$.math.shortenIntersection(intersect, cp,\n        CanvasRenderer.arrowShapes[tgtArShape].spacing(edge));\n      var edgeEnd = $$.math.shortenIntersection(intersect, cp,\n        CanvasRenderer.arrowShapes[tgtArShape].gap(edge));\n\n      rs.endX = edgeEnd[0];\n      rs.endY = edgeEnd[1];\n\n      rs.arrowEndX = arrowEnd[0];\n      rs.arrowEndY = arrowEnd[1];\n\n      intersect = CanvasRenderer.nodeShapes[\n        this.getNodeShape(source)].intersectLine(\n        source._private.position.x,\n        source._private.position.y,\n        this.getNodeWidth(source),\n        this.getNodeHeight(source),\n        cp[0], //halfPointX,\n        cp[1], //halfPointY\n        srcBorderW / 2\n      );\n\n      var arrowStart = $$.math.shortenIntersection(\n        intersect,\n        cp,\n        CanvasRenderer.arrowShapes[srcArShape].spacing(edge)\n      );\n      var edgeStart = $$.math.shortenIntersection(\n        intersect,\n        cp,\n        CanvasRenderer.arrowShapes[srcArShape].gap(edge)\n      );\n\n      rs.startX = edgeStart[0];\n      rs.startY = edgeStart[1];\n\n      rs.arrowStartX = arrowStart[0];\n      rs.arrowStartY = arrowStart[1];\n\n      // if( isNaN(rs.startX) || isNaN(rs.startY) ){\n      //   debugger;\n      // }\n\n    } else if (rs.isArcEdge) {\n      return;\n    }\n  };\n\n  // Find adjacent edges\n  CRp.findEdges = function(nodeSet) {\n\n    var edges = this.getCachedEdges();\n\n    var hashTable = {};\n    var adjacentEdges = [];\n\n    for (var i = 0; i < nodeSet.length; i++) {\n      hashTable[nodeSet[i]._private.data.id] = nodeSet[i];\n    }\n\n    for (var i = 0; i < edges.length; i++) {\n      if (hashTable[edges[i]._private.data.source]\n        || hashTable[edges[i]._private.data.target]) {\n\n        adjacentEdges.push(edges[i]);\n      }\n    }\n\n    return adjacentEdges;\n  };\n\n  CRp.getArrowWidth = CRp.getArrowHeight = function(edgeWidth) {\n    var cache = this.arrowWidthCache = this.arrowWidthCache || {};\n\n    var cachedVal = cache[edgeWidth];\n    if( cachedVal ){\n      return cachedVal;\n    }\n\n    cachedVal =  Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29);\n    cache[edgeWidth] = cachedVal;\n\n    return cachedVal;\n  };\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CRp = CanvasRenderer.prototype;\n\n// Draw edge\n  CRp.drawEdge = function(context, edge, drawOverlayInstead) {\n    var rs = edge._private.rscratch;\n    var usePaths = CanvasRenderer.usePaths();\n\n    // if bezier ctrl pts can not be calculated, then die\n    if( rs.badBezier || ( (rs.edgeType === 'bezier' || rs.edgeType === 'straight') && isNaN(rs.startX)) ){ // extra isNaN() for safari 7.1 b/c it mangles ctrlpt calcs\n      return;\n    }\n\n    var style = edge._private.style;\n\n    // Edge line width\n    if (style['width'].pxValue <= 0) {\n      return;\n    }\n\n    var overlayPadding = style['overlay-padding'].pxValue;\n    var overlayOpacity = style['overlay-opacity'].value;\n    var overlayColor = style['overlay-color'].value;\n\n    // Edge color & opacity\n    if( drawOverlayInstead ){\n\n      if( overlayOpacity === 0 ){ // exit early if no overlay\n        return;\n      }\n\n      this.strokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);\n      context.lineCap = 'round';\n\n      if( edge._private.rscratch.edgeType == 'self' && !usePaths ){\n        context.lineCap = 'butt';\n      }\n\n    } else {\n      var lineColor = style['line-color'].value;\n\n      this.strokeStyle(context, lineColor[0], lineColor[1], lineColor[2], style.opacity.value);\n\n      context.lineCap = 'butt';\n    }\n\n    var startNode, endNode, source, target;\n    source = startNode = edge._private.source;\n    target = endNode = edge._private.target;\n\n    // var targetPos = target._private.position;\n    // var targetW = target.width();\n    // var targetH = target.height();\n    // var sourcePos = source._private.position;\n    // var sourceW = source.width();\n    // var sourceH = source.height();\n\n\n    var edgeWidth = style['width'].pxValue + (drawOverlayInstead ? 2 * overlayPadding : 0);\n    var lineStyle = drawOverlayInstead ? 'solid' : style['line-style'].value;\n    context.lineWidth = edgeWidth;\n\n    var shadowBlur = style['shadow-blur'].pxValue;\n    var shadowOpacity = style['shadow-opacity'].value;\n    var shadowColor = style['shadow-color'].value;\n    var shadowOffsetX = style['shadow-offset-x'].pxValue;\n    var shadowOffsetY = style['shadow-offset-y'].pxValue;\n\n    this.shadowStyle(context,  shadowColor, drawOverlayInstead ? 0 : shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);\n\n    // if( rs.edgeType !== 'haystack' ){\n    //   this.findEndpoints(edge);\n    // }\n\n    if( rs.edgeType === 'haystack' ){\n      // var radius = style['haystack-radius'].value;\n      // var halfRadius = radius/2; // b/c have to half width/height\n\n      this.drawStyledEdge(\n        edge,\n        context,\n        rs.haystackPts,\n        lineStyle,\n        edgeWidth\n      );\n    } else if (rs.edgeType === 'self' || rs.edgeType === 'compound') {\n\n      var details = edge._private.rscratch;\n      var points = [details.startX, details.startY, details.cp2ax,\n        details.cp2ay, details.selfEdgeMidX, details.selfEdgeMidY,\n        details.selfEdgeMidX, details.selfEdgeMidY,\n        details.cp2cx, details.cp2cy, details.endX, details.endY];\n\n      this.drawStyledEdge(edge, context, points, lineStyle, edgeWidth);\n\n    } else if (rs.edgeType === 'straight') {\n\n      var nodeDirectionX = endNode._private.position.x - startNode._private.position.x;\n      var nodeDirectionY = endNode._private.position.y - startNode._private.position.y;\n\n      var edgeDirectionX = rs.endX - rs.startX;\n      var edgeDirectionY = rs.endY - rs.startY;\n\n      if (nodeDirectionX * edgeDirectionX\n        + nodeDirectionY * edgeDirectionY < 0) {\n\n        rs.straightEdgeTooShort = true;\n      } else {\n\n        var details = rs;\n        this.drawStyledEdge(edge, context, [details.startX, details.startY,\n                                      details.endX, details.endY],\n                                      lineStyle,\n                                      edgeWidth);\n\n        rs.straightEdgeTooShort = false;\n      }\n    } else {\n\n      var details = rs;\n\n      this.drawStyledEdge(edge, context, [details.startX, details.startY,\n        details.cp2x, details.cp2y, details.endX, details.endY],\n        lineStyle,\n        edgeWidth);\n\n    }\n\n    if( rs.edgeType === 'haystack' ){\n      this.drawArrowheads(context, edge, drawOverlayInstead);\n    } else if ( rs.noArrowPlacement !== true && rs.startX !== undefined ){\n      this.drawArrowheads(context, edge, drawOverlayInstead);\n    }\n\n    this.shadowStyle(context, 'transparent', 0); // reset for next guy\n\n  };\n\n\n  CRp.drawStyledEdge = function(\n      edge, context, pts, type, width) {\n\n    // 3 points given -> assume Bezier\n    // 2 -> assume straight\n\n    var rs = edge._private.rscratch;\n    var canvasCxt = context;\n    var path;\n    var pathCacheHit = false;\n    var usePaths = CanvasRenderer.usePaths();\n\n\n    if( usePaths ){\n\n      var pathCacheKey = pts;\n      var keyLengthMatches = rs.pathCacheKey && pathCacheKey.length === rs.pathCacheKey.length;\n      var keyMatches = keyLengthMatches;\n\n      for( var i = 0; keyMatches && i < pathCacheKey.length; i++ ){\n        if( rs.pathCacheKey[i] !== pathCacheKey[i] ){\n          keyMatches = false;\n        }\n      }\n\n      if( keyMatches ){\n        path = context = rs.pathCache;\n        pathCacheHit = true;\n      } else {\n        path = context = new Path2D();\n        rs.pathCacheKey = pathCacheKey;\n        rs.pathCache = path;\n      }\n\n    }\n\n    if( canvasCxt.setLineDash ){ // for very outofdate browsers\n      switch( type ){\n        case 'dotted':\n          canvasCxt.setLineDash([ 1, 1 ]);\n          break;\n\n        case 'dashed':\n          canvasCxt.setLineDash([ 6, 3 ]);\n          break;\n\n        case 'solid':\n          canvasCxt.setLineDash([ ]);\n          break;\n      }\n    }\n\n    if( !pathCacheHit ){\n      if( context.beginPath ){ context.beginPath(); }\n      context.moveTo(pts[0], pts[1]);\n\n      if( pts.length === 6 && !rs.badBezier ){ // bezier\n        context.quadraticCurveTo(pts[2], pts[3], pts[4], pts[5]);\n      } else if( pts.length === 12 && !rs.badBezier ){ // double bezier loop\n        context.quadraticCurveTo(pts[2], pts[3], pts[4], pts[5]);\n        context.quadraticCurveTo(pts[8], pts[9], pts[10], pts[11]);\n      } else if( pts.length === 4 && !rs.badLine ){ // line\n        context.lineTo(pts[2], pts[3]);\n      }\n    }\n\n    context = canvasCxt;\n    if( usePaths ){\n      context.stroke( path );\n    } else {\n      context.stroke();\n    }\n\n    // reset any line dashes\n    if( context.setLineDash ){ // for very outofdate browsers\n      context.setLineDash([ ]);\n    }\n\n  };\n\n  CRp.drawArrowheads = function(context, edge, drawOverlayInstead) {\n    if( drawOverlayInstead ){ return; } // don't do anything for overlays\n\n    var rs = edge._private.rscratch;\n    var self = this;\n    var isHaystack = rs.edgeType === 'haystack';\n\n    // Displacement gives direction for arrowhead orientation\n    var dispX, dispY;\n    var startX, startY, endX, endY;\n\n    var srcPos = edge.source().position();\n    var tgtPos = edge.target().position();\n\n    if( isHaystack ){\n      startX = rs.haystackPts[0];\n      startY = rs.haystackPts[1];\n      endX = rs.haystackPts[2];\n      endY = rs.haystackPts[3];\n    } else {\n      startX = rs.arrowStartX;\n      startY = rs.arrowStartY;\n      endX = rs.arrowEndX;\n      endY = rs.arrowEndY;\n    }\n\n    var style = edge._private.style;\n\n    function drawArrowhead( prefix, x, y, dispX, dispY ){\n      var arrowShape = style[prefix + '-arrow-shape'].value;\n\n      if( arrowShape === 'none' ){\n        return;\n      }\n\n      var gco = context.globalCompositeOperation;\n\n      var arrowClearFill = style[prefix + '-arrow-fill'].value === 'hollow' ? 'both' : 'filled';\n      var arrowFill = style[prefix + '-arrow-fill'].value;\n\n      if( arrowShape === 'half-triangle-overshot' ){\n        arrowFill = 'hollow';\n        arrowClearFill = 'hollow';\n      }\n\n      if( style.opacity.value !== 1 || arrowFill === 'hollow' ){ // then extra clear is needed\n        context.globalCompositeOperation = 'destination-out';\n\n        self.fillStyle(context, 255, 255, 255, 1);\n        self.strokeStyle(context, 255, 255, 255, 1);\n\n        self.drawArrowShape( edge, prefix, context,\n          arrowClearFill, style['width'].pxValue, style[prefix + '-arrow-shape'].value,\n          x, y, dispX, dispY\n        );\n\n        context.globalCompositeOperation = gco;\n      } // otherwise, the opaque arrow clears it for free :)\n\n      var color = style[prefix + '-arrow-color'].value;\n      self.fillStyle(context, color[0], color[1], color[2], style.opacity.value);\n      self.strokeStyle(context, color[0], color[1], color[2], style.opacity.value);\n\n      self.drawArrowShape( edge, prefix, context,\n        arrowFill, style['width'].pxValue, style[prefix + '-arrow-shape'].value,\n        x, y, dispX, dispY\n      );\n    }\n\n    dispX = startX - srcPos.x;\n    dispY = startY - srcPos.y;\n\n    if( !isHaystack && !isNaN(startX) && !isNaN(startY) && !isNaN(dispX) && !isNaN(dispY) ){\n      drawArrowhead( 'source', startX, startY, dispX, dispY );\n\n    } else {\n      // window.badArrow = true;\n      // debugger;\n    }\n\n    var midX = rs.midX;\n    var midY = rs.midY;\n\n    if( isHaystack ){\n      midX = ( startX + endX )/2;\n      midY = ( startY + endY )/2;\n    }\n\n    dispX = startX - endX;\n    dispY = startY - endY;\n\n    if( rs.edgeType === 'self' ){\n      dispX = 1;\n      dispY = -1;\n    }\n\n    if( !isNaN(midX) && !isNaN(midY) ){\n      drawArrowhead( 'mid-target', midX, midY, dispX, dispY );\n    }\n\n    dispX *= -1;\n    dispY *= -1;\n\n    if( !isNaN(midX) && !isNaN(midY) ){\n      drawArrowhead( 'mid-source', midX, midY, dispX, dispY );\n    }\n\n    dispX = endX - tgtPos.x;\n    dispY = endY - tgtPos.y;\n\n    if( !isHaystack && !isNaN(endX) && !isNaN(endY) && !isNaN(dispX) && !isNaN(dispY) ){\n      drawArrowhead( 'target', endX, endY, dispX, dispY );\n    }\n  };\n\n  // Draw arrowshape\n  CRp.drawArrowShape = function(edge, arrowType, context, fill, edgeWidth, shape, x, y, dispX, dispY) {\n    var usePaths = CanvasRenderer.usePaths();\n    var rs = edge._private.rscratch;\n    var pathCacheHit = false;\n    var path;\n    var canvasContext = context;\n    var translation = { x: x, y: y };\n\n    // Negative of the angle\n    var angle = Math.asin(dispY / (Math.sqrt(dispX * dispX + dispY * dispY)));\n\n    if (dispX < 0) {\n      angle = angle + Math.PI / 2;\n    } else {\n      angle = - (Math.PI / 2 + angle);\n    }\n\n    var size = this.getArrowWidth( edgeWidth );\n    var shapeImpl = CanvasRenderer.arrowShapes[shape];\n\n    // context.translate(x, y);\n\n    if( usePaths ){\n      var pathCacheKey = size + '$' + shape + '$' + angle + '$' + x + '$' + y;\n      rs.arrowPathCacheKey = rs.arrowPathCacheKey || {};\n      rs.arrowPathCache = rs.arrowPathCache || {};\n\n      var alreadyCached = rs.arrowPathCacheKey[arrowType] === pathCacheKey;\n      if( alreadyCached ){\n        path = context = rs.arrowPathCache[arrowType];\n        pathCacheHit = true;\n      } else {\n        path = context = new Path2D();\n        rs.arrowPathCacheKey[arrowType] = pathCacheKey;\n        rs.arrowPathCache[arrowType] = path;\n      }\n    }\n\n    if( context.beginPath ){ context.beginPath(); }\n\n    if( !pathCacheHit ){\n      shapeImpl.draw(context, size, angle, translation);\n    }\n\n    if( !shapeImpl.leavePathOpen && context.closePath ){\n      context.closePath();\n    }\n\n    context = canvasContext;\n\n    if( fill === 'filled' || fill === 'both' ){\n      if( usePaths ){\n        context.fill( path );\n      } else {\n        context.fill();\n      }\n    }\n\n    if( fill === 'hollow' || fill === 'both' ){\n      context.lineWidth = ( shapeImpl.matchEdgeWidth ? edgeWidth : 1 );\n      context.lineJoin = 'miter';\n\n      if( usePaths ){\n        context.stroke( path );\n      } else {\n        context.stroke();\n      }\n\n    }\n\n    // context.translate(-x, -y);\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CRp = CanvasRenderer.prototype;\n\n  CRp.getCachedImage = function(url, onLoad) {\n    var r = this;\n    var imageCache = r.imageCache = r.imageCache || {};\n\n    if( imageCache[url] && imageCache[url].image ){\n      return imageCache[url].image;\n    }\n\n    var cache = imageCache[url] = imageCache[url] || {};\n\n    var image = cache.image = new Image();\n    image.addEventListener('load', onLoad);\n    image.src = url;\n\n    return image;\n  };\n\n  CRp.safeDrawImage = function( context, img, ix, iy, iw, ih, x, y, w, h ){\n    var r = this;\n\n    try {\n      context.drawImage( img, ix, iy, iw, ih, x, y, w, h );\n    } catch(e){\n      r.data.canvasNeedsRedraw[CanvasRenderer.NODE] = true;\n      r.data.canvasNeedsRedraw[CanvasRenderer.DRAG] = true;\n\n      r.drawingImage = true;\n\n      r.redraw();\n    }\n  };\n\n  CRp.drawInscribedImage = function(context, img, node) {\n    var r = this;\n    var nodeX = node._private.position.x;\n    var nodeY = node._private.position.y;\n    var style = node._private.style;\n    var fit = style['background-fit'].value;\n    var xPos = style['background-position-x'];\n    var yPos = style['background-position-y'];\n    var repeat = style['background-repeat'].value;\n    var nodeW = node.width();\n    var nodeH = node.height();\n    var rs = node._private.rscratch;\n    var clip = style['background-clip'].value;\n    var shouldClip = clip === 'node';\n    var imgOpacity = style['background-image-opacity'].value;\n\n    var w = img.width;\n    var h = img.height;\n\n    if( w === 0 || h === 0 ){\n      return; // no point in drawing empty image (and chrome is broken in this case)\n    }\n\n    var bgW = style['background-width'];\n    if( bgW.value !== 'auto' ){\n      if( bgW.units === '%' ){\n        w = bgW.value/100 * nodeW;\n      } else {\n        w = bgW.pxValue;\n      }\n    }\n\n    var bgH = style['background-height'];\n    if( bgH.value !== 'auto' ){\n      if( bgH.units === '%' ){\n        h = bgH.value/100 * nodeH;\n      } else {\n        h = bgH.pxValue;\n      }\n    }\n\n    if( w === 0 || h === 0 ){\n      return; // no point in drawing empty image (and chrome is broken in this case)\n    }\n\n    if( fit === 'contain' ){\n      var scale = Math.min( nodeW/w, nodeH/h );\n\n      w *= scale;\n      h *= scale;\n\n    } else if( fit === 'cover' ){\n      var scale = Math.max( nodeW/w, nodeH/h );\n\n      w *= scale;\n      h *= scale;\n    }\n\n    var x = (nodeX - nodeW/2); // left\n    if( xPos.units === '%' ){\n      x += (nodeW - w) * xPos.value/100;\n    } else {\n      x += xPos.pxValue;\n    }\n\n    var y = (nodeY - nodeH/2); // top\n    if( yPos.units === '%' ){\n      y += (nodeH - h) * yPos.value/100;\n    } else {\n      y += yPos.pxValue;\n    }\n\n    if( rs.pathCache ){\n      x -= nodeX;\n      y -= nodeY;\n\n      nodeX = 0;\n      nodeY = 0;\n    }\n\n    var gAlpha = context.globalAlpha;\n\n    context.globalAlpha = imgOpacity;\n\n    if( repeat === 'no-repeat' ){\n\n      if( shouldClip ){\n        context.save();\n\n        if( rs.pathCache ){\n          context.clip( rs.pathCache );\n        } else {\n          CanvasRenderer.nodeShapes[r.getNodeShape(node)].drawPath(\n            context,\n            nodeX, nodeY,\n            nodeW, nodeH);\n\n          context.clip();\n        }\n      }\n\n      // context.drawImage( img, 0, 0, img.width, img.height, x, y, w, h );\n      r.safeDrawImage( context, img, 0, 0, img.width, img.height, x, y, w, h );\n\n      if( shouldClip ){\n        context.restore();\n      }\n    } else {\n      var pattern = context.createPattern( img, repeat );\n      context.fillStyle = pattern;\n\n      CanvasRenderer.nodeShapes[r.getNodeShape(node)].drawPath(\n          context,\n          nodeX, nodeY,\n          nodeW, nodeH);\n\n        context.translate(x, y);\n        context.fill();\n        context.translate(-x, -y);\n    }\n\n    context.globalAlpha = gAlpha;\n\n  };\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CRp = CanvasRenderer.prototype;\n\n  // Draw edge text\n  CRp.drawEdgeText = function(context, edge) {\n    var text = edge._private.style['content'].strValue;\n\n    if( !text || text.match(/^\\s+$/) ){\n      return;\n    }\n\n    if( this.hideEdgesOnViewport && (this.dragData.didDrag || this.pinching || this.hoverData.dragging || this.data.wheel || this.swipePanning) ){ return; } // save cycles on pinching\n\n    var computedSize = edge._private.style['font-size'].pxValue * edge.cy().zoom();\n    var minSize = edge._private.style['min-zoomed-font-size'].pxValue;\n\n    if( computedSize < minSize ){\n      return;\n    }\n\n    // Calculate text draw position\n\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n\n    var rs = edge._private.rscratch;\n    if( !$$.is.number( rs.labelX ) || !$$.is.number( rs.labelY ) ){ return; } // no pos => label can't be rendered\n\n    var style = edge._private.style;\n    var autorotate = style['edge-text-rotation'].strValue === 'autorotate';\n    var theta, dx, dy;\n\n    if( autorotate ){\n      switch( rs.edgeType ){\n        case 'haystack':\n          dx = rs.haystackPts[2] - rs.haystackPts[0];\n          dy = rs.haystackPts[3] - rs.haystackPts[1];\n          break;\n        default:\n          dx = rs.endX - rs.startX;\n          dy = rs.endY - rs.startY;\n      }\n\n      theta = Math.atan( dy / dx );\n\n      context.translate(rs.labelX, rs.labelY);\n      context.rotate(theta);\n\n      this.drawText(context, edge, 0, 0);\n\n      context.rotate(-theta);\n      context.translate(-rs.labelX, -rs.labelY);\n    } else {\n      this.drawText(context, edge, rs.labelX, rs.labelY);\n    }\n\n  };\n\n  // Draw node text\n  CRp.drawNodeText = function(context, node) {\n    var text = node._private.style['content'].strValue;\n\n    if ( !text || text.match(/^\\s+$/) ) {\n      return;\n    }\n\n    var computedSize = node._private.style['font-size'].pxValue * node.cy().zoom();\n    var minSize = node._private.style['min-zoomed-font-size'].pxValue;\n\n    if( computedSize < minSize ){\n      return;\n    }\n\n    // this.recalculateNodeLabelProjection( node );\n\n    var textHalign = node._private.style['text-halign'].strValue;\n    var textValign = node._private.style['text-valign'].strValue;\n    var rs = node._private.rscratch;\n    if( !$$.is.number( rs.labelX ) || !$$.is.number( rs.labelY ) ){ return; } // no pos => label can't be rendered\n\n    switch( textHalign ){\n      case 'left':\n        context.textAlign = 'right';\n        break;\n\n      case 'right':\n        context.textAlign = 'left';\n        break;\n\n      default: // e.g. center\n        context.textAlign = 'center';\n    }\n\n    switch( textValign ){\n      case 'top':\n        context.textBaseline = 'bottom';\n        break;\n\n      case 'bottom':\n        context.textBaseline = 'top';\n        break;\n\n      default: // e.g. center\n        context.textBaseline = 'middle';\n    }\n\n    this.drawText(context, node, rs.labelX, rs.labelY);\n  };\n\n  CRp.getFontCache = function(context){\n    var cache;\n\n    this.fontCaches = this.fontCaches || [];\n\n    for( var i = 0; i < this.fontCaches.length; i++ ){\n      cache = this.fontCaches[i];\n\n      if( cache.context === context ){\n        return cache;\n      }\n    }\n\n    cache = {\n      context: context\n    };\n    this.fontCaches.push(cache);\n\n    return cache;\n  };\n\n  // set up canvas context with font\n  // returns transformed text string\n  CRp.setupTextStyle = function( context, element ){\n    // Font style\n    var parentOpacity = element.effectiveOpacity();\n    var style = element._private.style;\n    var labelStyle = style['font-style'].strValue;\n    var labelSize = style['font-size'].pxValue + 'px';\n    var labelFamily = style['font-family'].strValue;\n    var labelWeight = style['font-weight'].strValue;\n    var opacity = style['text-opacity'].value * style['opacity'].value * parentOpacity;\n    var outlineOpacity = style['text-outline-opacity'].value * opacity;\n    var color = style['color'].value;\n    var outlineColor = style['text-outline-color'].value;\n    var shadowBlur = style['text-shadow-blur'].pxValue;\n    var shadowOpacity = style['text-shadow-opacity'].value;\n    var shadowColor = style['text-shadow-color'].value;\n    var shadowOffsetX = style['text-shadow-offset-x'].pxValue;\n    var shadowOffsetY = style['text-shadow-offset-y'].pxValue;\n\n    var fontCacheKey = element._private.fontKey;\n    var cache = this.getFontCache(context);\n\n    if( cache.key !== fontCacheKey ){\n      context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;\n\n      cache.key = fontCacheKey;\n    }\n\n    var text = this.getLabelText( element );\n\n    // Calculate text draw position based on text alignment\n\n    // so text outlines aren't jagged\n    context.lineJoin = 'round';\n\n    this.fillStyle(context, color[0], color[1], color[2], opacity);\n\n    this.strokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);\n\n    this.shadowStyle(context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);\n\n    return text;\n  };\n\n  function roundRect(ctx, x, y, width, height, radius) {\n    var radius = radius || 5;\n    ctx.beginPath();\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  // Draw text\n  CRp.drawText = function(context, element, textX, textY) {\n    var _p = element._private;\n    var style = _p.style;\n    var rstyle = _p.rstyle;\n    var rscratch = _p.rscratch;\n    var parentOpacity = element.effectiveOpacity();\n    if( parentOpacity === 0 || style['text-opacity'].value === 0){ return; }\n\n    var text = this.setupTextStyle( context, element );\n    var halign = style['text-halign'].value;\n    var valign = style['text-valign'].value;\n\n    if( element.isEdge() ){\n      halign = 'center';\n      valign = 'center';\n    }\n\n    if ( text != null && !isNaN(textX) && !isNaN(textY)) {\n      var backgroundOpacity = style['text-background-opacity'].value;\n      var borderOpacity = style['text-border-opacity'].value;\n      var textBorderWidth = style['text-border-width'].pxValue;\n\n      if( backgroundOpacity > 0 || (textBorderWidth > 0 && borderOpacity > 0) ){\n        var margin = 4 + textBorderWidth/2;\n\n        if (element.isNode()) {\n          //Move textX, textY to include the background margins\n          if (valign === 'top') {\n            textY -= margin;\n          } else if (valign === 'bottom') {\n            textY += margin;\n          }\n          if (halign === 'left') {\n            textX -= margin;\n          } else if (halign === 'right') {\n            textX += margin;\n          }\n        }\n\n        var bgWidth = rstyle.labelWidth;\n        var bgHeight = rstyle.labelHeight;\n        var bgX = textX;\n\n        if (halign) {\n          if (halign == 'center') {\n            bgX = bgX - bgWidth / 2;\n          } else if (halign == 'left') {\n            bgX = bgX- bgWidth;\n          }\n        }\n\n        var bgY = textY;\n\n        if (element.isNode()) {\n          if (valign == 'top') {\n             bgY = bgY - bgHeight;\n          } else if (valign == 'center') {\n            bgY = bgY- bgHeight / 2;\n          }\n        } else {\n          bgY = bgY - bgHeight / 2;\n        }\n\n        if (style['edge-text-rotation'].strValue === 'autorotate') {\n          textY = 0;\n          bgWidth += 4;\n          bgX = textX - bgWidth / 2;\n          bgY = textY - bgHeight / 2;\n        } else {\n          // Adjust with border width & margin\n          bgX -= margin;\n          bgY -= margin;\n          bgHeight += margin*2;\n          bgWidth += margin*2;\n        }\n\n        if( backgroundOpacity > 0 ){\n          var textFill = context.fillStyle;\n          var textBackgroundColor = style['text-background-color'].value;\n\n          context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';\n          var styleShape = style['text-background-shape'].strValue;\n          if (styleShape == 'roundrectangle') {\n            roundRect(context, bgX, bgY, bgWidth, bgHeight, 2);\n          } else {\n            context.fillRect(bgX,bgY,bgWidth,bgHeight);\n          }\n          context.fillStyle = textFill;\n        }\n\n        if( textBorderWidth > 0 && borderOpacity > 0 ){\n          var textStroke = context.strokeStyle;\n          var textLineWidth = context.lineWidth;\n          var textBorderColor = style['text-border-color'].value;\n          var textBorderStyle = style['text-border-style'].value;\n\n          context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';\n          context.lineWidth = textBorderWidth;\n\n          if( context.setLineDash ){ // for very outofdate browsers\n            switch( textBorderStyle ){\n              case 'dotted':\n                context.setLineDash([ 1, 1 ]);\n                break;\n              case 'dashed':\n                context.setLineDash([ 4, 2 ]);\n                break;\n              case 'double':\n                context.lineWidth = textBorderWidth/4; // 50% reserved for white between the two borders\n                context.setLineDash([ ]);\n                break;\n              case 'solid':\n                context.setLineDash([ ]);\n                break;\n            }\n          }\n\n          context.strokeRect(bgX,bgY,bgWidth,bgHeight);\n\n          if( textBorderStyle === 'double' ){\n            var whiteWidth = textBorderWidth/2;\n\n            context.strokeRect(bgX+whiteWidth,bgY+whiteWidth,bgWidth-whiteWidth*2,bgHeight-whiteWidth*2);\n          }\n\n          if( context.setLineDash ){ // for very outofdate browsers\n            context.setLineDash([ ]);\n          }\n          context.lineWidth = textLineWidth;\n          context.strokeStyle = textStroke;\n        }\n\n      }\n\n      var lineWidth = 2  * style['text-outline-width'].pxValue; // *2 b/c the stroke is drawn centred on the middle\n\n      if( lineWidth > 0 ){\n        context.lineWidth = lineWidth;\n      }\n\n      if( style['text-wrap'].value === 'wrap' ){ //console.log('draw wrap');\n        var lines = rscratch.labelWrapCachedLines;\n        var lineHeight = rstyle.labelHeight / lines.length;\n\n        //console.log('lines', lines);\n\n        switch( valign ){\n          case 'top':\n            textY -= (lines.length - 1) * lineHeight;\n            break;\n\n          case 'bottom':\n            // nothing required\n            break;\n\n          default:\n          case 'center':\n            textY -= (lines.length - 1) * lineHeight / 2;\n        }\n\n        for( var l = 0; l < lines.length; l++ ){\n          if( lineWidth > 0 ){\n            context.strokeText( lines[l], textX, textY );\n          }\n\n          context.fillText( lines[l], textX, textY );\n\n          textY += lineHeight;\n        }\n\n        // var fontSize = style['font-size'].pxValue;\n        // wrapText(context, text, textX, textY, style['text-max-width'].pxValue, fontSize + 1);\n      } else {\n        if( lineWidth > 0 ){\n          context.strokeText( text, textX, textY );\n        }\n\n        context.fillText( text, textX, textY );\n      }\n\n\n      this.shadowStyle(context, 'transparent', 0); // reset for next guy\n    }\n  };\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CRp = CanvasRenderer.prototype;\n\n  // Draw node\n  CRp.drawNode = function(context, node, drawOverlayInstead) {\n\n    var r = this;\n    var nodeWidth, nodeHeight;\n    var style = node._private.style;\n    var rs = node._private.rscratch;\n    var _p = node._private;\n    var pos = _p.position;\n\n    if( pos.x === undefined || pos.y === undefined ){\n      return; // can't draw node with undefined position\n    }\n\n    var usePaths = CanvasRenderer.usePaths();\n    var canvasContext = context;\n    var path;\n    var pathCacheHit = false;\n\n    var overlayPadding = style['overlay-padding'].pxValue;\n    var overlayOpacity = style['overlay-opacity'].value;\n    var overlayColor = style['overlay-color'].value;\n\n    if( drawOverlayInstead && overlayOpacity === 0 ){ // exit early if drawing overlay but none to draw\n      return;\n    }\n\n    var parentOpacity = node.effectiveOpacity();\n    if( parentOpacity === 0 ){ return; }\n\n    nodeWidth = this.getNodeWidth(node);\n    nodeHeight = this.getNodeHeight(node);\n\n    context.lineWidth = style['border-width'].pxValue;\n\n    if( drawOverlayInstead === undefined || !drawOverlayInstead ){\n\n      var url = style['background-image'].value[2] ||\n        style['background-image'].value[1];\n      var image;\n\n      if (url !== undefined) {\n\n        // get image, and if not loaded then ask to redraw when later loaded\n        image = this.getCachedImage(url, function(){\n          r.data.canvasNeedsRedraw[CanvasRenderer.NODE] = true;\n          r.data.canvasNeedsRedraw[CanvasRenderer.DRAG] = true;\n\n          r.drawingImage = true;\n\n          r.redraw();\n        });\n\n        var prevBging = _p.backgrounding;\n        _p.backgrounding = !image.complete;\n\n        if( prevBging !== _p.backgrounding ){ // update style b/c :backgrounding state changed\n          node.updateStyle( false );\n        }\n      }\n\n      // Node color & opacity\n\n      var bgColor = style['background-color'].value;\n      var borderColor = style['border-color'].value;\n      var borderStyle = style['border-style'].value;\n\n      this.fillStyle(context, bgColor[0], bgColor[1], bgColor[2], style['background-opacity'].value * parentOpacity);\n\n      this.strokeStyle(context, borderColor[0], borderColor[1], borderColor[2], style['border-opacity'].value * parentOpacity);\n\n      var shadowBlur = style['shadow-blur'].pxValue;\n      var shadowOpacity = style['shadow-opacity'].value;\n      var shadowColor = style['shadow-color'].value;\n      var shadowOffsetX = style['shadow-offset-x'].pxValue;\n      var shadowOffsetY = style['shadow-offset-y'].pxValue;\n\n      this.shadowStyle(context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);\n\n      context.lineJoin = 'miter'; // so borders are square with the node shape\n\n      if( context.setLineDash ){ // for very outofdate browsers\n        switch( borderStyle ){\n          case 'dotted':\n            context.setLineDash([ 1, 1 ]);\n            break;\n\n          case 'dashed':\n            context.setLineDash([ 4, 2 ]);\n            break;\n\n          case 'solid':\n          case 'double':\n            context.setLineDash([ ]);\n            break;\n        }\n      }\n\n\n      var styleShape = style['shape'].strValue;\n\n      if( usePaths ){\n        var pathCacheKey = styleShape + '$' + nodeWidth +'$' + nodeHeight;\n\n        context.translate( pos.x, pos.y );\n\n        if( rs.pathCacheKey === pathCacheKey ){\n          path = context = rs.pathCache;\n          pathCacheHit = true;\n        } else {\n          path = context = new Path2D();\n          rs.pathCacheKey = pathCacheKey;\n          rs.pathCache = path;\n        }\n      }\n\n      if( !pathCacheHit ){\n\n        var npos = pos;\n\n        if( usePaths ){\n          npos = {\n            x: 0,\n            y: 0\n          };\n        }\n\n        CanvasRenderer.nodeShapes[this.getNodeShape(node)].drawPath(\n              context,\n              npos.x,\n              npos.y,\n              nodeWidth,\n              nodeHeight);\n      }\n\n      context = canvasContext;\n\n      if( usePaths ){\n        context.fill( path );\n      } else {\n        context.fill();\n      }\n\n      this.shadowStyle(context, 'transparent', 0); // reset for next guy\n\n      if (url !== undefined) {\n        if( image.complete ){\n          this.drawInscribedImage(context, image, node);\n        }\n      }\n\n      var darkness = style['background-blacken'].value;\n      var borderWidth = style['border-width'].pxValue;\n\n      if( this.hasPie(node) ){\n        this.drawPie( context, node, parentOpacity );\n\n        // redraw path for blacken and border\n        if( darkness !== 0 || borderWidth !== 0 ){\n\n          if( !usePaths ){\n            CanvasRenderer.nodeShapes[this.getNodeShape(node)].drawPath(\n                context,\n                pos.x,\n                pos.y,\n                nodeWidth,\n                nodeHeight);\n          }\n        }\n      }\n\n      if( darkness > 0 ){\n        this.fillStyle(context, 0, 0, 0, darkness);\n\n        if( usePaths ){\n          context.fill( path );\n        } else {\n          context.fill();\n        }\n\n      } else if( darkness < 0 ){\n        this.fillStyle(context, 255, 255, 255, -darkness);\n\n        if( usePaths ){\n          context.fill( path );\n        } else {\n          context.fill();\n        }\n      }\n\n      // Border width, draw border\n      if (borderWidth > 0) {\n\n        if( usePaths ){\n          context.stroke( path );\n        } else {\n          context.stroke();\n        }\n\n        if( borderStyle === 'double' ){\n          context.lineWidth = style['border-width'].pxValue/3;\n\n          var gco = context.globalCompositeOperation;\n          context.globalCompositeOperation = 'destination-out';\n\n          if( usePaths ){\n            context.stroke( path );\n          } else {\n            context.stroke();\n          }\n\n          context.globalCompositeOperation = gco;\n        }\n\n      }\n\n      if( usePaths ){\n        context.translate( -pos.x, -pos.y );\n      }\n\n      // reset in case we changed the border style\n      if( context.setLineDash ){ // for very outofdate browsers\n        context.setLineDash([ ]);\n      }\n\n    // draw the overlay\n    } else {\n\n      if( overlayOpacity > 0 ){\n        this.fillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);\n\n        CanvasRenderer.nodeShapes['roundrectangle'].drawPath(\n          context,\n          node._private.position.x,\n          node._private.position.y,\n          nodeWidth + overlayPadding * 2,\n          nodeHeight + overlayPadding * 2\n        );\n\n        context.fill();\n      }\n    }\n\n  };\n\n  // does the node have at least one pie piece?\n  CRp.hasPie = function(node){\n    node = node[0]; // ensure ele ref\n\n    return node._private.hasPie;\n  };\n\n  CRp.drawPie = function( context, node, nodeOpacity ){\n    node = node[0]; // ensure ele ref\n\n    var _p = node._private;\n    var style = _p.style;\n    var pieSize = style['pie-size'];\n    var nodeW = this.getNodeWidth( node );\n    var nodeH = this.getNodeHeight( node );\n    var x = _p.position.x;\n    var y = _p.position.y;\n    var radius = Math.min( nodeW, nodeH ) / 2; // must fit in node\n    var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]\n    var usePaths = CanvasRenderer.usePaths();\n\n    if( usePaths ){\n      x = 0;\n      y = 0;\n    }\n\n    if( pieSize.units === '%' ){\n      radius = radius * pieSize.value / 100;\n    } else if( pieSize.pxValue !== undefined ){\n      radius = pieSize.pxValue / 2;\n    }\n\n    for( var i = 1; i <= $$.style.pieBackgroundN; i++ ){ // 1..N\n      var size = style['pie-' + i + '-background-size'].value;\n      var color = style['pie-' + i + '-background-color'].value;\n      var opacity = style['pie-' + i + '-background-opacity'].value * nodeOpacity;\n      var percent = size / 100; // map integer range [0, 100] to [0, 1]\n\n      // percent can't push beyond 1\n      if( percent + lastPercent > 1 ){\n        percent = 1 - lastPercent;\n      }\n\n      var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise\n      var angleDelta = 2 * Math.PI * percent;\n      var angleEnd = angleStart + angleDelta;\n\n      // ignore if\n      // - zero size\n      // - we're already beyond the full circle\n      // - adding the current slice would go beyond the full circle\n      if( size === 0 || lastPercent >= 1 || lastPercent + percent > 1 ){\n        continue;\n      }\n\n      context.beginPath();\n      context.moveTo(x, y);\n      context.arc( x, y, radius, angleStart, angleEnd );\n      context.closePath();\n\n      this.fillStyle(context, color[0], color[1], color[2], opacity);\n\n      context.fill();\n\n      lastPercent += percent;\n    }\n\n  };\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CR = CanvasRenderer;\n  var CRp = CanvasRenderer.prototype;\n\n  // var isFirefox = typeof InstallTrigger !== 'undefined';\n\n  CRp.getPixelRatio = function(){\n    var context = this.data.contexts[0];\n\n    if( this.forcedPixelRatio != null ){\n      return this.forcedPixelRatio;\n    }\n\n    var backingStore = context.backingStorePixelRatio ||\n      context.webkitBackingStorePixelRatio ||\n      context.mozBackingStorePixelRatio ||\n      context.msBackingStorePixelRatio ||\n      context.oBackingStorePixelRatio ||\n      context.backingStorePixelRatio || 1;\n\n    //console.log(window.devicePixelRatio, backingStore);\n\n    // if( isFirefox ){ // because ff can't scale canvas properly\n    //   return 1;\n    // }\n\n    return (window.devicePixelRatio || 1) / backingStore;\n  };\n\n  CRp.paintCache = function(context){\n    var caches = this.paintCaches = this.paintCaches || [];\n    var needToCreateCache = true;\n    var cache;\n\n    for(var i = 0; i < caches.length; i++ ){\n      cache = caches[i];\n\n      if( cache.context === context ){\n        needToCreateCache = false;\n        break;\n      }\n    }\n\n    if( needToCreateCache ){\n      cache = {\n        context: context\n      };\n      caches.push( cache );\n    }\n\n    return cache;\n  };\n\n  CRp.fillStyle = function(context, r, g, b, a){\n    context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\n    // turn off for now, seems context does its own caching\n\n    // var cache = this.paintCache(context);\n\n    // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\n    // if( cache.fillStyle !== fillStyle ){\n    //   context.fillStyle = cache.fillStyle = fillStyle;\n    // }\n  };\n\n  CRp.strokeStyle = function(context, r, g, b, a){\n    context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\n    // turn off for now, seems context does its own caching\n\n    // var cache = this.paintCache(context);\n\n    // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\n    // if( cache.strokeStyle !== strokeStyle ){\n    //   context.strokeStyle = cache.strokeStyle = strokeStyle;\n    // }\n  };\n\n  CRp.shadowStyle = function(context, color, opacity, blur, offsetX, offsetY){\n    var zoom = this.data.cy.zoom();\n\n    var cache = this.paintCache(context);\n\n    // don't make expensive changes to the shadow style if it's not used\n    if( cache.shadowOpacity === 0 && opacity === 0 ){\n      return;\n    }\n\n    cache.shadowOpacity = opacity;\n\n    if (opacity > 0) {\n      context.shadowBlur = blur * zoom;\n      context.shadowColor = \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \",\" + opacity + \")\";\n      context.shadowOffsetX = offsetX * zoom;\n      context.shadowOffsetY = offsetY * zoom;\n    } else {\n      context.shadowBlur = 0;\n      context.shadowColor = \"transparent\";\n    }\n  };\n\n  // Resize canvas\n  CRp.matchCanvasSize = function(container) {\n    var data = this.data;\n    var width = container.clientWidth;\n    var height = container.clientHeight;\n    var pixelRatio = this.getPixelRatio();\n    var mbPxRatio = this.motionBlurPxRatio;\n\n    if(\n      container === this.data.bufferCanvases[CR.MOTIONBLUR_BUFFER_NODE] ||\n      container === this.data.bufferCanvases[CR.MOTIONBLUR_BUFFER_DRAG]\n    ){\n      pixelRatio = mbPxRatio;\n    }\n\n    var canvasWidth = width * pixelRatio;\n    var canvasHeight = height * pixelRatio;\n    var canvas;\n\n    if( canvasWidth === this.canvasWidth && canvasHeight === this.canvasHeight ){\n      return; // save cycles if same\n    }\n\n    this.fontCaches = null; // resizing resets the style\n\n    var canvasContainer = data.canvasContainer;\n    canvasContainer.style.width = width + 'px';\n    canvasContainer.style.height = height + 'px';\n\n    for (var i = 0; i < CanvasRenderer.CANVAS_LAYERS; i++) {\n\n      canvas = data.canvases[i];\n\n      if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n\n        canvas.style.width = width + 'px';\n        canvas.style.height = height + 'px';\n      }\n    }\n\n    for (var i = 0; i < CanvasRenderer.BUFFER_COUNT; i++) {\n\n      canvas = data.bufferCanvases[i];\n\n      if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n\n        canvas.style.width = width + 'px';\n        canvas.style.height = height + 'px';\n      }\n    }\n\n    this.textureMult = 1;\n    if( pixelRatio <= 1 ){\n      canvas = data.bufferCanvases[ CanvasRenderer.TEXTURE_BUFFER ];\n\n      this.textureMult = 2;\n      canvas.width = canvasWidth * this.textureMult;\n      canvas.height = canvasHeight * this.textureMult;\n    }\n\n    this.canvasWidth = canvasWidth;\n    this.canvasHeight = canvasHeight;\n\n  };\n\n  CRp.renderTo = function( cxt, zoom, pan, pxRatio ){\n    this.redraw({\n      forcedContext: cxt,\n      forcedZoom: zoom,\n      forcedPan: pan,\n      drawAllLayers: true,\n      forcedPxRatio: pxRatio\n    });\n  };\n\n  CRp.timeToRender = function(){\n    return this.redrawTotalTime / this.redrawCount;\n  };\n\n  CanvasRenderer.minRedrawLimit = 1000/60; // people can't see much better than 60fps\n  CanvasRenderer.maxRedrawLimit = 1000;  // don't cap max b/c it's more important to be responsive than smooth\n  CanvasRenderer.motionBlurDelay = 100;\n\n  // Redraw frame\n  CRp.redraw = function( options ) {\n    options = options || {};\n\n    // console.log('redraw()');\n\n    var forcedContext = options.forcedContext;\n    var drawAllLayers = options.drawAllLayers;\n    var drawOnlyNodeLayer = options.drawOnlyNodeLayer;\n    var forcedZoom = options.forcedZoom;\n    var forcedPan = options.forcedPan;\n    var r = this;\n    var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;\n    var cy = r.data.cy; var data = r.data;\n    var needDraw = data.canvasNeedsRedraw;\n    var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);\n    var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;\n    var mbPxRatio = r.motionBlurPxRatio;\n    var hasCompoundNodes = cy.hasCompoundNodes();\n    var inNodeDragGesture = r.hoverData.draggingEles;\n    var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;\n    motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;\n    var motionBlurFadeEffect = motionBlur;\n\n    // console.log('textureDraw?', textureDraw);\n\n\n    if( !forcedContext && r.motionBlurTimeout ){\n      clearTimeout( r.motionBlurTimeout );\n    }\n\n    if( !forcedContext && this.redrawTimeout ){\n      clearTimeout( this.redrawTimeout );\n    }\n    this.redrawTimeout = null;\n\n    if( this.averageRedrawTime === undefined ){ this.averageRedrawTime = 0; }\n\n    var minRedrawLimit = CanvasRenderer.minRedrawLimit;\n    var maxRedrawLimit = CanvasRenderer.maxRedrawLimit;\n\n    var redrawLimit = this.averageRedrawTime; // estimate the ideal redraw limit based on how fast we can draw\n    redrawLimit = minRedrawLimit > redrawLimit ? minRedrawLimit : redrawLimit;\n    redrawLimit = redrawLimit < maxRedrawLimit ? redrawLimit : maxRedrawLimit;\n\n    //console.log('--\\nideal: %i; effective: %i', this.averageRedrawTime, redrawLimit);\n\n    if( this.lastDrawTime === undefined ){ this.lastDrawTime = 0; }\n\n    var nowTime = Date.now();\n    var timeElapsed = nowTime - this.lastDrawTime;\n    var callAfterLimit = timeElapsed >= redrawLimit;\n\n    if( !forcedContext && !r.clearingMotionBlur ){\n      if( !callAfterLimit || this.currentlyDrawing ){\n        // console.log('-- skip', redrawLimit);\n\n        // we have new things to draw but we're busy, so try again when possibly free\n        this.redrawTimeout = setTimeout(function(){\n          r.redraw();\n        }, redrawLimit);\n        return;\n      }\n\n      this.lastDrawTime = nowTime;\n      this.currentlyDrawing = true;\n    }\n\n    if( motionBlur ){\n      if( r.mbFrames == null ){\n        r.mbFrames = 0;\n      }\n\n      if( !r.drawingImage ){ // image loading frames don't count towards motion blur blurry frames\n        r.mbFrames++;\n      }\n\n      if( r.mbFrames < 3 ){ // need several frames before even high quality motionblur\n        motionBlurFadeEffect = false;\n      }\n\n      // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)\n      if( r.mbFrames > r.minMbLowQualFrames ){\n        //r.fullQualityMb = false;\n        r.motionBlurPxRatio = r.mbPxRBlurry;\n      }\n    }\n\n    // console.log('mb: %s, N: %s, q: %s', motionBlur, r.mbFrames, r.motionBlurPxRatio);\n\n    if( r.clearingMotionBlur ){\n      //r.fullQualityMb = true; // TODO enable when doesn't cause scaled flashing issue\n\n      r.motionBlurPxRatio = 1;\n    }\n\n\n    var startTime = Date.now();\n\n    // console.log('-- redraw --')\n\n    function drawToContext(){\n      // startTime = Date.now();\n      // console.profile('draw' + startTime)\n\n      // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame\n      // because a rogue async texture frame would clear needDraw\n      if( r.textureDrawLastFrame && !textureDraw ){\n        needDraw[CR.NODE] = true;\n        needDraw[CR.SELECT_BOX] = true;\n      }\n\n      // console.log('drawToContext()');\n      // console.log( 'needDraw', needDraw[CR.NODE], needDraw[CR.DRAG], needDraw[CR.SELECT_BOX] );\n\n      var edges = r.getCachedEdges();\n      var coreStyle = cy.style()._private.coreStyle;\n\n      var zoom = cy.zoom();\n      var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;\n      var pan = cy.pan();\n      var effectivePan = {\n        x: pan.x,\n        y: pan.y\n      };\n\n      var vp = {\n        zoom: zoom,\n        pan: {\n          x: pan.x,\n          y: pan.y\n        }\n      };\n      var prevVp = r.prevViewport;\n      var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;\n\n      // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)\n      if( !viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes) ){\n        r.motionBlurPxRatio = 1;\n      }\n\n      if( forcedPan ){\n        effectivePan = forcedPan;\n      }\n\n      // apply pixel ratio\n\n      effectiveZoom *= pixelRatio;\n      effectivePan.x *= pixelRatio;\n      effectivePan.y *= pixelRatio;\n\n      var eles = {\n        drag: {\n          nodes: [],\n          edges: [],\n          eles: []\n        },\n        nondrag: {\n          nodes: [],\n          edges: [],\n          eles: []\n        }\n      };\n\n      function mbclear( context, x, y, w, h ){\n        var gco = context.globalCompositeOperation;\n\n        context.globalCompositeOperation = 'destination-out';\n        r.fillStyle( context, 255, 255, 255, r.motionBlurTransparency );\n        context.fillRect(x, y, w, h);\n\n        context.globalCompositeOperation = gco;\n      }\n\n      function setContextTransform(context, clear){\n        var ePan, eZoom, w, h;\n\n        if( /*!r.fullQualityMb &&*/ !r.clearingMotionBlur && (context === data.bufferContexts[CR.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[CR.MOTIONBLUR_BUFFER_DRAG]) ){\n          ePan = {\n            x: pan.x * mbPxRatio,\n            y: pan.y * mbPxRatio\n          };\n\n          eZoom = zoom * mbPxRatio;\n\n          w = r.canvasWidth * mbPxRatio;\n          h = r.canvasHeight * mbPxRatio;\n        } else {\n          ePan = effectivePan;\n          eZoom = effectiveZoom;\n\n          w = r.canvasWidth;\n          h = r.canvasHeight;\n        }\n\n        context.setTransform(1, 0, 0, 1, 0, 0);\n\n        if( clear === 'motionBlur' ){\n          mbclear(context, 0, 0, w, h);\n        } else if( !forcedContext && (clear === undefined || clear) ){\n          context.clearRect(0, 0, w, h);\n        }\n\n        if( !drawAllLayers ){\n          context.translate( ePan.x, ePan.y );\n          context.scale( eZoom, eZoom );\n        }\n        if( forcedPan ){\n          context.translate( forcedPan.x, forcedPan.y );\n        }\n        if( forcedZoom ){\n          context.scale( forcedZoom, forcedZoom );\n        }\n      }\n\n      if( !textureDraw ){\n        r.textureDrawLastFrame = false;\n      }\n\n      if( textureDraw ){\n        // console.log('textureDraw')\n\n        r.textureDrawLastFrame = true;\n\n        var bb;\n\n        if( !r.textureCache ){\n          r.textureCache = {};\n\n          bb = r.textureCache.bb = cy.elements().boundingBox();\n\n          r.textureCache.texture = r.data.bufferCanvases[ CanvasRenderer.TEXTURE_BUFFER ];\n\n          var cxt = r.data.bufferContexts[ CanvasRenderer.TEXTURE_BUFFER ];\n\n          cxt.setTransform(1, 0, 0, 1, 0, 0);\n          cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);\n\n          r.redraw({\n            forcedContext: cxt,\n            drawOnlyNodeLayer: true,\n            forcedPxRatio: pixelRatio * r.textureMult\n          });\n\n          var vp = r.textureCache.viewport = {\n            zoom: cy.zoom(),\n            pan: cy.pan(),\n            width: r.canvasWidth,\n            height: r.canvasHeight\n          };\n\n          vp.mpan = {\n            x: (0 - vp.pan.x)/vp.zoom,\n            y: (0 - vp.pan.y)/vp.zoom\n          };\n        }\n\n        needDraw[CR.DRAG] = false;\n        needDraw[CR.NODE] = false;\n\n        var context = data.contexts[CR.NODE];\n\n        var texture = r.textureCache.texture;\n        var vp = r.textureCache.viewport;\n        bb = r.textureCache.bb;\n\n        context.setTransform(1, 0, 0, 1, 0, 0);\n\n        if( motionBlur ){\n          mbclear(context, 0, 0, vp.width, vp.height);\n        } else {\n          context.clearRect(0, 0, vp.width, vp.height);\n        }\n\n        var outsideBgColor = coreStyle['outside-texture-bg-color'].value;\n        var outsideBgOpacity = coreStyle['outside-texture-bg-opacity'].value;\n        r.fillStyle( context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity );\n        context.fillRect( 0, 0, vp.width, vp.height );\n\n        var zoom = cy.zoom();\n\n        setContextTransform( context, false );\n\n        context.clearRect( vp.mpan.x, vp.mpan.y, vp.width/vp.zoom/pixelRatio, vp.height/vp.zoom/pixelRatio );\n        context.drawImage( texture, vp.mpan.x, vp.mpan.y, vp.width/vp.zoom/pixelRatio, vp.height/vp.zoom/pixelRatio );\n\n      } else if( r.textureOnViewport && !forcedContext ){ // clear the cache since we don't need it\n        r.textureCache = null;\n      }\n\n      var vpManip = (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles);\n      var hideEdges = r.hideEdgesOnViewport && vpManip;\n      var hideLabels = r.hideLabelsOnViewport && vpManip;\n\n      if (needDraw[CR.DRAG] || needDraw[CR.NODE] || drawAllLayers || drawOnlyNodeLayer) {\n        //NB : VERY EXPENSIVE\n\n        if( hideEdges ){\n        } else {\n          r.findEdgeControlPoints(edges);\n        }\n\n        var zEles = r.getCachedZSortedEles();\n        var extent = cy.extent();\n\n        for (var i = 0; i < zEles.length; i++) {\n          var ele = zEles[i];\n          var list;\n          var bb = forcedContext ? null : ele.boundingBox();\n          var insideExtent = forcedContext ? true : $$.math.boundingBoxesIntersect( extent, bb );\n\n          if( !insideExtent ){ continue; } // no need to render\n\n          if ( ele._private.rscratch.inDragLayer ) {\n            list = eles.drag;\n          } else {\n            list = eles.nondrag;\n          }\n\n          list.eles.push( ele );\n        }\n\n      }\n\n\n      function drawElements( list, context ){\n        var eles = list.eles;\n\n        for( var i = 0; i < eles.length; i++ ){\n          var ele = eles[i];\n\n          if( ele.isNode() ){\n            r.drawNode(context, ele);\n\n            if( !hideLabels ){\n              r.drawNodeText(context, ele);\n            }\n\n            r.drawNode(context, ele, true);\n          } else if( !hideEdges ) {\n            r.drawEdge(context, ele);\n\n            if( !hideLabels ){\n              r.drawEdgeText(context, ele);\n            }\n\n            r.drawEdge(context, ele, true);\n          }\n\n\n        }\n\n      }\n\n      var needMbClear = [];\n\n      needMbClear[CR.NODE] = !needDraw[CR.NODE] && motionBlur && !r.clearedForMotionBlur[CR.NODE] || r.clearingMotionBlur;\n      if( needMbClear[CR.NODE] ){ r.clearedForMotionBlur[CR.NODE] = true; }\n\n      needMbClear[CR.DRAG] = !needDraw[CR.DRAG] && motionBlur && !r.clearedForMotionBlur[CR.DRAG] || r.clearingMotionBlur;\n      if( needMbClear[CR.DRAG] ){ r.clearedForMotionBlur[CR.DRAG] = true; }\n\n      // console.log('--');\n\n      // if( needDraw[CR.DRAG] && motionBlur && needDraw[CR.NODE] && inNodeDragGesture ){\n      //   console.log('NODE blurclean');\n      //\n      //   var context = data.contexts[CR.NODE];\n      //\n      //   setContextTransform( context, true );\n      //   drawElements(eles.nondrag, context);\n      //\n      //   needDraw[CR.NODE] = false;\n      //   needMbClear[CR.NODE] = false;\n      //\n      // } else\n      if( needDraw[CR.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[CR.NODE] ){\n        // console.log('NODE', needDraw[CR.NODE], needMbClear[CR.NODE]);\n\n        var useBuffer = motionBlur && !needMbClear[CR.NODE] && mbPxRatio !== 1;\n        var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ CR.MOTIONBLUR_BUFFER_NODE ] : data.contexts[CR.NODE] );\n        var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;\n\n        // if( needDraw[CR.DRAG] && needDraw[CR.NODE] ){\n        //   clear = true;\n        // }\n\n        setContextTransform( context, clear );\n        drawElements(eles.nondrag, context);\n\n        if( !drawAllLayers && !motionBlur ){\n          needDraw[CR.NODE] = false;\n        }\n      }\n\n      if ( !drawOnlyNodeLayer && (needDraw[CR.DRAG] || drawAllLayers || needMbClear[CR.DRAG]) ) {\n        // console.log('DRAG');\n\n        var useBuffer = motionBlur && !needMbClear[CR.DRAG] && mbPxRatio !== 1;\n        var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ CR.MOTIONBLUR_BUFFER_DRAG ] : data.contexts[CR.DRAG] );\n\n        setContextTransform( context, motionBlur && !useBuffer ? 'motionBlur' : undefined );\n        drawElements(eles.drag, context);\n\n        if( !drawAllLayers && !motionBlur ){\n          needDraw[CR.DRAG] = false;\n        }\n      }\n\n      if( r.showFps || (!drawOnlyNodeLayer && (needDraw[CR.SELECT_BOX] && !drawAllLayers)) ) {\n        // console.log('redrawing selection box');\n\n        var context = forcedContext || data.contexts[CR.SELECT_BOX];\n\n        setContextTransform( context );\n\n        if( data.select[4] == 1 && ( r.hoverData.selecting || r.touchData.selecting ) ){\n          var zoom = data.cy.zoom();\n          var borderWidth = coreStyle['selection-box-border-width'].value / zoom;\n\n          context.lineWidth = borderWidth;\n          context.fillStyle = \"rgba(\"\n            + coreStyle['selection-box-color'].value[0] + \",\"\n            + coreStyle['selection-box-color'].value[1] + \",\"\n            + coreStyle['selection-box-color'].value[2] + \",\"\n            + coreStyle['selection-box-opacity'].value + \")\";\n\n          context.fillRect(\n            data.select[0],\n            data.select[1],\n            data.select[2] - data.select[0],\n            data.select[3] - data.select[1]);\n\n          if (borderWidth > 0) {\n            context.strokeStyle = \"rgba(\"\n              + coreStyle['selection-box-border-color'].value[0] + \",\"\n              + coreStyle['selection-box-border-color'].value[1] + \",\"\n              + coreStyle['selection-box-border-color'].value[2] + \",\"\n              + coreStyle['selection-box-opacity'].value + \")\";\n\n            context.strokeRect(\n              data.select[0],\n              data.select[1],\n              data.select[2] - data.select[0],\n              data.select[3] - data.select[1]);\n          }\n        }\n\n        if( data.bgActivePosistion && !r.hoverData.selecting ){\n          var zoom = data.cy.zoom();\n          var pos = data.bgActivePosistion;\n\n          context.fillStyle = \"rgba(\"\n            + coreStyle['active-bg-color'].value[0] + \",\"\n            + coreStyle['active-bg-color'].value[1] + \",\"\n            + coreStyle['active-bg-color'].value[2] + \",\"\n            + coreStyle['active-bg-opacity'].value + \")\";\n\n          context.beginPath();\n          context.arc(pos.x, pos.y, coreStyle['active-bg-size'].pxValue / zoom, 0, 2 * Math.PI);\n          context.fill();\n        }\n\n        var timeToRender = r.averageRedrawTime;\n        if( r.showFps && timeToRender ){\n          timeToRender = Math.round( timeToRender );\n          var fps = Math.round(1000/timeToRender);\n\n          context.setTransform(1, 0, 0, 1, 0, 0);\n\n          //context.font = '20px helvetica';\n          context.fillStyle = 'rgba(255, 0, 0, 0.75)';\n          context.strokeStyle = 'rgba(255, 0, 0, 0.75)';\n          context.lineWidth = 1;\n          context.fillText( '1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);\n\n          var maxFps = 60;\n          context.strokeRect(0, 30, 250, 20);\n          context.fillRect(0, 30, 250 * Math.min(fps/maxFps, 1), 20);\n        }\n\n        if( !drawAllLayers ){\n          needDraw[CR.SELECT_BOX] = false;\n        }\n      }\n\n      // motionblur: blit rendered blurry frames\n      if( motionBlur && mbPxRatio !== 1 ){\n        var cxtNode = data.contexts[CR.NODE];\n        var txtNode = r.data.bufferCanvases[ CR.MOTIONBLUR_BUFFER_NODE ];\n\n        var cxtDrag = data.contexts[CR.DRAG];\n        var txtDrag = r.data.bufferCanvases[ CR.MOTIONBLUR_BUFFER_DRAG ];\n\n        var drawMotionBlur = function( cxt, txt, needClear ){\n          cxt.setTransform(1, 0, 0, 1, 0, 0);\n\n          if( needClear || !motionBlurFadeEffect ){\n            cxt.clearRect( 0, 0, r.canvasWidth, r.canvasHeight );\n          } else {\n            mbclear( cxt, 0, 0, r.canvasWidth, r.canvasHeight );\n          }\n\n          var pxr = /*r.fullQualityMb ? 1 :*/ mbPxRatio;\n\n          cxt.drawImage(\n            txt, // img\n            0, 0, // sx, sy\n            r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh\n            0, 0, // x, y\n            r.canvasWidth, r.canvasHeight // w, h\n          );\n        };\n\n        if( needDraw[CR.NODE] || needMbClear[CR.NODE] ){\n          // console.log('mb NODE', needMbClear[CR.NODE]);\n\n          drawMotionBlur( cxtNode, txtNode, needMbClear[CR.NODE] );\n          needDraw[CR.NODE] = false;\n        }\n\n        if( needDraw[CR.DRAG] || needMbClear[CR.DRAG] ){\n          // console.log('mb DRAG');\n\n          drawMotionBlur( cxtDrag, txtDrag, needMbClear[CR.DRAG] );\n          needDraw[CR.DRAG] = false;\n          //needMbClear[CR.NODE] = true;\n        }\n      }\n\n\n      var endTime = Date.now();\n\n      if( r.averageRedrawTime === undefined ){\n        r.averageRedrawTime = endTime - startTime;\n      }\n\n      if( r.redrawCount === undefined ){\n        r.redrawCount = 0;\n      }\n\n      r.redrawCount++;\n\n      if( r.redrawTotalTime === undefined ){\n        r.redrawTotalTime = 0;\n      }\n\n      r.redrawTotalTime += endTime - startTime;\n      r.lastRedrawTime = endTime - startTime;\n\n      // use a weighted average with a bias from the previous average so we don't spike so easily\n      r.averageRedrawTime = r.averageRedrawTime/2 + (endTime - startTime)/2;\n      //console.log('actual: %i, average: %i', endTime - startTime, this.averageRedrawTime);\n\n      r.currentlyDrawing = false;\n\n      r.prevViewport = vp;\n\n      // console.profileEnd('draw' + startTime)\n\n      if( r.clearingMotionBlur ){\n        r.clearingMotionBlur = false;\n        r.motionBlurCleared = true;\n        r.motionBlur = true;\n      }\n\n      if( motionBlur ){\n        r.motionBlurTimeout = setTimeout(function(){\n          r.motionBlurTimeout = null;\n          // console.log('mb CLEAR');\n\n          r.clearedForMotionBlur[CR.NODE] = false;\n          r.clearedForMotionBlur[CR.DRAG] = false;\n          r.motionBlur = false;\n          r.clearingMotionBlur = !textureDraw;\n          r.mbFrames = 0;\n\n          needDraw[CR.NODE] = true;\n          needDraw[CR.DRAG] = true;\n\n          r.redraw();\n        }, CanvasRenderer.motionBlurDelay);\n      }\n\n      r.drawingImage = false;\n\n    } // draw to context\n\n    if( !forcedContext ){\n      $$.util.requestAnimationFrame(drawToContext); // makes direct renders to screen a bit more responsive\n    } else {\n      drawToContext();\n    }\n\n    if( !forcedContext && !r.initrender ){\n      r.initrender = true;\n      cy.trigger('initrender');\n    }\n\n    if( !forcedContext ){\n      cy.triggerOnRender();\n    }\n\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CRp = CanvasRenderer.prototype;\n\n  // @O Polygon drawing\n  CRp.drawPolygonPath = function(\n    context, x, y, width, height, points) {\n\n    var halfW = width / 2;\n    var halfH = height / 2;\n\n    if( context.beginPath ){ context.beginPath(); }\n\n    context.moveTo( x + halfW * points[0], y + halfH * points[1] );\n\n    for (var i = 1; i < points.length / 2; i++) {\n      context.lineTo( x + halfW * points[i * 2], y + halfH * points[i * 2 + 1] );\n    }\n\n    context.closePath();\n  };\n\n  CRp.drawPolygon = function(\n    context, x, y, width, height, points) {\n\n    // Draw path\n    this.drawPolygonPath(context, x, y, width, height, points);\n\n    // Fill path\n    context.fill();\n  };\n\n  // Round rectangle drawing\n  CRp.drawRoundRectanglePath = function(\n    context, x, y, width, height, radius) {\n\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n\n    if( context.beginPath ){ context.beginPath(); }\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n\n\n    context.closePath();\n  };\n\n  CRp.drawRoundRectangle = function(\n    context, x, y, width, height, radius) {\n\n    this.drawRoundRectanglePath(context, x, y, width, height, radius);\n\n    context.fill();\n  };\n\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CRp = CanvasRenderer.prototype;\n\n  CRp.createBuffer = function(w, h) {\n    var buffer = document.createElement('canvas');\n    buffer.width = w;\n    buffer.height = h;\n\n    return [buffer, buffer.getContext('2d')];\n  };\n\n  CRp.bufferCanvasImage = function( options ){\n    var data = this.data;\n    var cy = data.cy;\n    var bb = cy.elements().boundingBox();\n    var width = options.full ? Math.ceil(bb.w) : this.data.container.clientWidth;\n    var height = options.full ? Math.ceil(bb.h) : this.data.container.clientHeight;\n    var scale = 1;\n\n    if( options.scale !== undefined ){\n      width *= options.scale;\n      height *= options.scale;\n\n      scale = options.scale;\n    } else if( $$.is.number(options.maxWidth) || $$.is.number(options.maxHeight) ){\n      var maxScaleW = Infinity;\n      var maxScaleH = Infinity;\n\n      if( $$.is.number(options.maxWidth) ){\n        maxScaleW = scale * options.maxWidth / width;\n      }\n\n      if( $$.is.number(options.maxHeight) ){\n        maxScaleH = scale * options.maxHeight / height;\n      }\n\n      scale = Math.min( maxScaleW, maxScaleH );\n\n      width *= scale;\n      height *= scale;\n    }\n\n    var buffCanvas = document.createElement('canvas');\n\n    buffCanvas.width = width;\n    buffCanvas.height = height;\n\n    buffCanvas.style.width = width + 'px';\n    buffCanvas.style.height = height + 'px';\n\n    var buffCxt = buffCanvas.getContext('2d');\n\n    // Rasterize the layers, but only if container has nonzero size\n    if (width > 0 && height > 0) {\n\n      buffCxt.clearRect( 0, 0, width, height );\n\n      if( options.bg ){\n        buffCxt.fillStyle = options.bg;\n        buffCxt.rect( 0, 0, width, height );\n        buffCxt.fill();\n      }\n\n      buffCxt.globalCompositeOperation = 'source-over';\n\n      if( options.full ){ // draw the full bounds of the graph\n        this.redraw({\n          forcedContext: buffCxt,\n          drawAllLayers: true,\n          forcedZoom: scale,\n          forcedPan: { x: -bb.x1*scale, y: -bb.y1*scale },\n          forcedPxRatio: 1\n        });\n      } else { // draw the current view\n        var cyPan = cy.pan();\n        var pan = {\n          x: cyPan.x * scale,\n          y: cyPan.y * scale\n        };\n        var zoom = cy.zoom() * scale;\n\n        this.redraw({\n          forcedContext: buffCxt,\n          drawAllLayers: true,\n          forcedZoom: zoom,\n          forcedPan: pan,\n          forcedPxRatio: 1\n        });\n      }\n    }\n\n    return buffCanvas;\n  };\n\n  CRp.png = function( options ){\n    return this.bufferCanvasImage( options ).toDataURL('image/png');\n  };\n\n  CRp.jpg = function( options ){\n    return this.bufferCanvasImage( options ).toDataURL('image/jpeg');\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var CR = CanvasRenderer;\n  var CRp = CR.prototype;\n\n  CRp.registerBinding = function(target, event, handler, useCapture){\n    this.bindings.push({\n      target: target,\n      event: event,\n      handler: handler,\n      useCapture: useCapture\n    });\n\n    target.addEventListener(event, handler, useCapture);\n  };\n\n  CRp.nodeIsDraggable = function(node) {\n    if (node._private.style['opacity'].value !== 0\n      && node._private.style['visibility'].value == 'visible'\n      && node._private.style['display'].value == 'element'\n      && !node.locked()\n      && node.grabbable() ) {\n\n      return true;\n    }\n\n    return false;\n  };\n\n  CRp.load = function() {\n    var r = this;\n\n    var getDragListIds = function(opts){\n      var listHasId;\n\n      if( opts.addToList && r.data.cy.hasCompoundNodes() ){ // only needed for compound graphs\n        if( !opts.addToList.hasId ){ // build ids lookup if doesn't already exist\n          opts.addToList.hasId = {};\n\n          for( var i = 0; i < opts.addToList.length; i++ ){\n            var ele = opts.addToList[i];\n\n            opts.addToList.hasId[ ele.id() ] = true;\n          }\n        }\n\n        listHasId = opts.addToList.hasId;\n      }\n\n      return listHasId || {};\n    };\n\n    // helper function to determine which child nodes and inner edges\n    // of a compound node to be dragged as well as the grabbed and selected nodes\n    var addDescendantsToDrag = function(node, opts){\n      if( !node._private.cy.hasCompoundNodes() ){\n        return;\n      }\n\n      if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do\n\n      var listHasId = getDragListIds( opts );\n\n      var innerNodes = node.descendants();\n\n      // TODO do not drag hidden children & children of hidden children?\n      for( var i = 0; i < innerNodes.size(); i++ ){\n        var iNode = innerNodes[i];\n        var _p = iNode._private;\n\n        if( opts.inDragLayer ){\n          _p.rscratch.inDragLayer = true;\n        }\n\n        if( opts.addToList && !listHasId[ iNode.id() ] ){\n          opts.addToList.push( iNode );\n          listHasId[ iNode.id() ] = true;\n\n          _p.grabbed = true;\n        }\n\n        var edges = _p.edges;\n        for( var j = 0; opts.inDragLayer && j < edges.length; j++ ){\n          edges[j]._private.rscratch.inDragLayer = true;\n        }\n      }\n    };\n\n    // adds the given nodes, and its edges to the drag layer\n    var addNodeToDrag = function(node, opts){\n\n      var _p = node._private;\n      var listHasId = getDragListIds( opts );\n\n      if( opts.inDragLayer ){\n        _p.rscratch.inDragLayer = true;\n      }\n\n      if( opts.addToList && !listHasId[ node.id() ] ){\n        opts.addToList.push( node );\n        listHasId[ node.id() ] = true;\n\n        _p.grabbed = true;\n      }\n\n      var edges = _p.edges;\n      for( var i = 0; opts.inDragLayer && i < edges.length; i++ ){\n        edges[i]._private.rscratch.inDragLayer = true;\n      }\n\n      addDescendantsToDrag( node, opts ); // always add to drag\n\n      // also add nodes and edges related to the topmost ancestor\n      updateAncestorsInDragLayer( node, {\n        inDragLayer: opts.inDragLayer\n      } );\n    };\n\n    var freeDraggedElements = function( draggedElements ){\n      if( !draggedElements ){ return; }\n\n      for (var i=0; i < draggedElements.length; i++) {\n\n        var dEi_p = draggedElements[i]._private;\n\n        if(dEi_p.group === 'nodes') {\n          dEi_p.rscratch.inDragLayer = false;\n          dEi_p.grabbed = false;\n\n          var sEdges = dEi_p.edges;\n          for( var j = 0; j < sEdges.length; j++ ){ sEdges[j]._private.rscratch.inDragLayer = false; }\n\n          // for compound nodes, also remove related nodes and edges from the drag layer\n          updateAncestorsInDragLayer(draggedElements[i], { inDragLayer: false });\n\n        } else if( dEi_p.group === 'edges' ){\n          dEi_p.rscratch.inDragLayer = false;\n        }\n\n      }\n    };\n\n    // helper function to determine which ancestor nodes and edges should go\n    // to the drag layer (or should be removed from drag layer).\n    var updateAncestorsInDragLayer = function(node, opts) {\n\n      if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do\n\n      // find top-level parent\n      var parent = node;\n\n      if( !node._private.cy.hasCompoundNodes() ){\n        return;\n      }\n\n      while( parent.parent().nonempty() ){\n        parent = parent.parent()[0];\n      }\n\n      // no parent node: no nodes to add to the drag layer\n      if( parent == node ){\n        return;\n      }\n\n      var nodes = parent.descendants()\n        .merge( parent )\n        .unmerge( node )\n        .unmerge( node.descendants() )\n      ;\n\n      var edges = nodes.connectedEdges();\n\n      var listHasId = getDragListIds( opts );\n\n      for( var i = 0; i < nodes.size(); i++ ){\n        if( opts.inDragLayer !== undefined ){\n          nodes[i]._private.rscratch.inDragLayer = opts.inDragLayer;\n        }\n\n        if( opts.addToList && !listHasId[ nodes[i].id() ] ){\n          opts.addToList.push( nodes[i] );\n          listHasId[ nodes[i].id() ] = true;\n\n          nodes[i]._private.grabbed = true;\n        }\n      }\n\n      for( var j = 0; opts.inDragLayer !== undefined && j < edges.length; j++ ) {\n        edges[j]._private.rscratch.inDragLayer = opts.inDragLayer;\n      }\n    };\n\n    if( typeof MutationObserver !== 'undefined' ){\n      r.removeObserver = new MutationObserver(function( mutns ){\n        for( var i = 0; i < mutns.length; i++ ){\n          var mutn = mutns[i];\n          var rNodes = mutn.removedNodes;\n\n          if( rNodes ){ for( var j = 0; j < rNodes.length; j++ ){\n            var rNode = rNodes[j];\n\n            if( rNode === r.data.container ){\n              r.destroy();\n              break;\n            }\n          } }\n        }\n      });\n\n      r.removeObserver.observe( r.data.container.parentNode, { childList: true } );\n    } else {\n      r.registerBinding(r.data.container, 'DOMNodeRemoved', function(e){\n        r.destroy();\n      });\n    }\n\n\n\n    // auto resize\n    r.registerBinding(window, 'resize', $$.util.debounce( function(e) {\n      r.invalidateContainerClientCoordsCache();\n\n      r.matchCanvasSize(r.data.container);\n      r.data.canvasNeedsRedraw[CR.NODE] = true;\n      r.redraw();\n    }, 100 ) );\n\n    var invalCtnrBBOnScroll = function(domEle){\n      r.registerBinding(domEle, 'scroll', function(e){\n        r.invalidateContainerClientCoordsCache();\n      } );\n    };\n\n    var bbCtnr = r.data.cy.container();\n\n    for( ;; ){\n\n      invalCtnrBBOnScroll( bbCtnr );\n\n      if( bbCtnr.parentNode ){\n        bbCtnr = bbCtnr.parentNode;\n      } else {\n        break;\n      }\n\n    }\n\n    // stop right click menu from appearing on cy\n    r.registerBinding(r.data.container, 'contextmenu', function(e){\n      e.preventDefault();\n    });\n\n    var inBoxSelection = function(){\n      return r.data.select[4] !== 0;\n    };\n\n    // Primary key\n    r.registerBinding(r.data.container, 'mousedown', function(e) {\n      e.preventDefault();\n      r.hoverData.capture = true;\n      r.hoverData.which = e.which;\n\n      var cy = r.data.cy;\n      var pos = r.projectIntoViewport(e.clientX, e.clientY);\n      var select = r.data.select;\n      var near = r.findNearestElement(pos[0], pos[1], true, false);\n      var draggedElements = r.dragData.possibleDragElements;\n\n      r.hoverData.mdownPos = pos;\n\n      var needsRedraw = r.data.canvasNeedsRedraw;\n\n      var checkForTaphold = function(){\n        r.hoverData.tapholdCancelled = false;\n\n        clearTimeout( r.hoverData.tapholdTimeout );\n\n        r.hoverData.tapholdTimeout = setTimeout(function(){\n\n          if( r.hoverData.tapholdCancelled ){\n            return;\n          } else {\n            var ele = r.hoverData.down;\n\n            if( ele ){\n              ele.trigger( new $$.Event(e, {\n                type: 'taphold',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }) );\n            } else {\n              cy.trigger( new $$.Event(e, {\n                type: 'taphold',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }) );\n            }\n          }\n\n        }, r.tapholdDuration);\n      };\n\n      // Right click button\n      if( e.which == 3 ){\n\n        r.hoverData.cxtStarted = true;\n\n        var cxtEvt = new $$.Event(e, {\n          type: 'cxttapstart',\n          cyPosition: { x: pos[0], y: pos[1] }\n        });\n\n        if( near ){\n          near.activate();\n          near.trigger( cxtEvt );\n\n          r.hoverData.down = near;\n        } else {\n          cy.trigger( cxtEvt );\n        }\n\n        r.hoverData.downTime = (new Date()).getTime();\n        r.hoverData.cxtDragged = false;\n\n      // Primary button\n      } else if (e.which == 1) {\n\n        if( near ){\n          near.activate();\n        }\n\n        // Element dragging\n        {\n          // If something is under the cursor and it is draggable, prepare to grab it\n          if (near != null) {\n\n            if( r.nodeIsDraggable(near) ){\n\n              var grabEvent = new $$.Event(e, {\n                type: 'grab',\n                cyPosition: { x: pos[0], y: pos[1] }\n              });\n\n              if ( near.isNode() && !near.selected() ){\n\n                draggedElements = r.dragData.possibleDragElements = [];\n                addNodeToDrag( near, { addToList: draggedElements } );\n\n                near.trigger(grabEvent);\n\n              } else if ( near.isNode() && near.selected() ){\n                draggedElements = r.dragData.possibleDragElements = [  ];\n\n                var selectedNodes = cy.$(function(){ return this.isNode() && this.selected(); });\n\n                for( var i = 0; i < selectedNodes.length; i++ ){\n\n                  // Only add this selected node to drag if it is draggable, eg. has nonzero opacity\n                  if( r.nodeIsDraggable( selectedNodes[i] ) ){\n                    addNodeToDrag( selectedNodes[i], { addToList: draggedElements } );\n                  }\n                }\n\n                near.trigger( grabEvent );\n              }\n\n              needsRedraw[CR.NODE] = true;\n              needsRedraw[CR.DRAG] = true;\n\n            }\n\n            near\n              .trigger(new $$.Event(e, {\n                type: 'mousedown',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'tapstart',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'vmousedown',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n            ;\n\n          } else if (near == null) {\n            cy\n              .trigger(new $$.Event(e, {\n                type: 'mousedown',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'tapstart',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'vmousedown',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n            ;\n          }\n\n          r.hoverData.down = near;\n          r.hoverData.downTime = (new Date()).getTime();\n\n        }\n\n        // Selection box\n        if ( near == null || near.isEdge() ) {\n          select[4] = 1;\n          var timeUntilActive = Math.max( 0, CR.panOrBoxSelectDelay - (+new Date() - r.hoverData.downTime) );\n\n          clearTimeout( r.bgActiveTimeout );\n\n          if( cy.boxSelectionEnabled() || ( near && near.isEdge() ) ){\n            r.bgActiveTimeout = setTimeout(function(){\n              if( near ){\n                near.unactivate();\n              }\n\n              r.data.bgActivePosistion = {\n                x: pos[0],\n                y: pos[1]\n              };\n\n              r.hoverData.dragging = true;\n\n              //checkForTaphold();\n\n              needsRedraw[CR.SELECT_BOX] = true;\n\n              r.redraw();\n            }, timeUntilActive);\n          } else {\n            r.data.bgActivePosistion = {\n              x: pos[0],\n              y: pos[1]\n            };\n\n            //r.hoverData.dragging = true;\n\n            //checkForTaphold();\n\n            needsRedraw[CR.SELECT_BOX] = true;\n\n            r.redraw();\n          }\n\n        }\n\n        checkForTaphold();\n\n      }\n\n      // Initialize selection box coordinates\n      select[0] = select[2] = pos[0];\n      select[1] = select[3] = pos[1];\n\n    }, false);\n\n    r.registerBinding(window, 'mousemove', $$.util.throttle( function(e) {\n      var preventDefault = false;\n      var capture = r.hoverData.capture;\n\n      // save cycles if mouse events aren't to be captured\n      if ( !capture ){\n        var containerPageCoords = r.findContainerClientCoords();\n\n        if (e.clientX > containerPageCoords[0] && e.clientX < containerPageCoords[0] + r.canvasWidth\n          && e.clientY > containerPageCoords[1] && e.clientY < containerPageCoords[1] + r.canvasHeight\n        ) {\n          // inside container bounds so OK\n        } else {\n          return;\n        }\n\n        var cyContainer = r.data.container;\n        var target = e.target;\n        var tParent = target.parentNode;\n        var containerIsTarget = false;\n\n        while( tParent ){\n          if( tParent === cyContainer ){\n            containerIsTarget = true;\n            break;\n          }\n\n          tParent = tParent.parentNode;\n        }\n\n        if( !containerIsTarget ){ return; } // if target is outisde cy container, then this event is not for us\n      }\n\n      var cy = r.data.cy;\n      var zoom = cy.zoom();\n      var pos = r.projectIntoViewport(e.clientX, e.clientY);\n      var select = r.data.select;\n      var needsRedraw = r.data.canvasNeedsRedraw;\n\n      var near = null;\n      if( !r.hoverData.draggingEles ){\n        near = r.findNearestElement(pos[0], pos[1], true, false);\n      }\n      var last = r.hoverData.last;\n      var down = r.hoverData.down;\n\n      var disp = [pos[0] - select[2], pos[1] - select[3]];\n\n      var draggedElements = r.dragData.possibleDragElements;\n\n      var dx = select[2] - select[0];\n      var dx2 = dx * dx;\n      var dy = select[3] - select[1];\n      var dy2 = dy * dy;\n      var dist2 = dx2 + dy2;\n      var rdist2 = dist2 * zoom * zoom;\n\n      r.hoverData.tapholdCancelled = true;\n\n      var updateDragDelta = function(){\n        var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];\n\n        if( dragDelta.length === 0 ){\n          dragDelta.push( disp[0] );\n          dragDelta.push( disp[1] );\n        } else {\n          dragDelta[0] += disp[0];\n          dragDelta[1] += disp[1];\n        }\n      };\n\n\n      preventDefault = true;\n\n      // Mousemove event\n      {\n        if (near != null) {\n          near\n            .trigger(new $$.Event(e, {\n              type: 'mousemove',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'vmousemove',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'tapdrag',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }))\n          ;\n\n        } else if (near == null) {\n          cy\n            .trigger(new $$.Event(e, {\n              type: 'mousemove',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'vmousemove',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'tapdrag',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }))\n          ;\n        }\n\n      }\n\n      // trigger context drag if rmouse down\n      if( r.hoverData.which === 3 ){\n        var cxtEvt = new $$.Event(e, {\n          type: 'cxtdrag',\n          cyPosition: { x: pos[0], y: pos[1] }\n        });\n\n        if( down ){\n          down.trigger( cxtEvt );\n        } else {\n          cy.trigger( cxtEvt );\n        }\n\n        r.hoverData.cxtDragged = true;\n\n        if( !r.hoverData.cxtOver || near !== r.hoverData.cxtOver ){\n\n          if( r.hoverData.cxtOver ){\n            r.hoverData.cxtOver.trigger( new $$.Event(e, {\n              type: 'cxtdragout',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }) );\n\n            // console.log('cxtdragout ' + r.hoverData.cxtOver.id());\n          }\n\n          r.hoverData.cxtOver = near;\n\n          if( near ){\n            near.trigger( new $$.Event(e, {\n              type: 'cxtdragover',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }) );\n\n            // console.log('cxtdragover ' + near.id());\n          }\n\n        }\n\n      // Check if we are drag panning the entire graph\n      } else if (r.hoverData.dragging) {\n        preventDefault = true;\n\n        if( cy.panningEnabled() && cy.userPanningEnabled() ){\n          var deltaP;\n\n          if( r.hoverData.justStartedPan ){\n            var mdPos = r.hoverData.mdownPos;\n\n            deltaP = {\n              x: ( pos[0] - mdPos[0] ) * zoom,\n              y: ( pos[1] - mdPos[1] ) * zoom\n            };\n\n            r.hoverData.justStartedPan = false;\n\n          } else {\n            deltaP = {\n              x: disp[0] * zoom,\n              y: disp[1] * zoom\n            };\n\n          }\n\n          cy.panBy( deltaP );\n\n          r.hoverData.dragged = true;\n        }\n\n        // Needs reproject due to pan changing viewport\n        pos = r.projectIntoViewport(e.clientX, e.clientY);\n\n      // Checks primary button down & out of time & mouse not moved much\n      } else if(\n          select[4] == 1 && (down == null || down.isEdge())\n          && ( !cy.boxSelectionEnabled() || (+new Date() - r.hoverData.downTime >= CR.panOrBoxSelectDelay) )\n          //&& (Math.abs(select[3] - select[1]) + Math.abs(select[2] - select[0]) < 4)\n          && !r.hoverData.selecting\n          && rdist2 >= r.desktopTapThreshold2\n          && cy.panningEnabled() && cy.userPanningEnabled()\n      ){\n        r.hoverData.dragging = true;\n        r.hoverData.selecting = false;\n        r.hoverData.justStartedPan = true;\n        select[4] = 0;\n\n      } else {\n        // deactivate bg on box selection\n        if (cy.boxSelectionEnabled() && !r.hoverData.dragging && Math.pow(select[2] - select[0], 2) + Math.pow(select[3] - select[1], 2) > 7 && select[4]){\n          clearTimeout( r.bgActiveTimeout );\n          r.data.bgActivePosistion = undefined;\n          r.hoverData.selecting = true;\n\n          needsRedraw[CR.SELECT_BOX] = true;\n          r.redraw();\n        }\n\n        if( down && down.isEdge() && down.active() ){ down.unactivate(); }\n\n        if (near != last) {\n\n          if (last) {\n            last.trigger( new $$.Event(e, {\n              type: 'mouseout',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }) );\n\n            last.trigger( new $$.Event(e, {\n              type: 'tapdragout',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }) );\n          }\n\n          if (near) {\n            near.trigger( new $$.Event(e, {\n              type: 'mouseover',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }) );\n\n            near.trigger( new $$.Event(e, {\n              type: 'tapdragover',\n              cyPosition: { x: pos[0], y: pos[1] }\n            }) );\n          }\n\n          r.hoverData.last = near;\n        }\n\n        if( down && down.isNode() && r.nodeIsDraggable(down) ){\n\n          if( rdist2 >= r.desktopTapThreshold2 ){ // then drag\n\n            var justStartedDrag = !r.dragData.didDrag;\n\n            if( justStartedDrag ) {\n              needsRedraw[CR.NODE] = true;\n            }\n\n            r.dragData.didDrag = true; // indicate that we actually did drag the node\n\n            var toTrigger = [];\n\n            for( var i = 0; i < draggedElements.length; i++ ){\n              var dEle = draggedElements[i];\n\n              // now, add the elements to the drag layer if not done already\n              if( !r.hoverData.draggingEles ){\n                addNodeToDrag( dEle, { inDragLayer: true } );\n              }\n\n              // Locked nodes not draggable, as well as non-visible nodes\n              if( dEle.isNode() && r.nodeIsDraggable(dEle) && dEle.grabbed() ){\n                var dPos = dEle._private.position;\n\n                toTrigger.push( dEle );\n\n                if( $$.is.number(disp[0]) && $$.is.number(disp[1]) ){\n                  dPos.x += disp[0];\n                  dPos.y += disp[1];\n\n                  if( justStartedDrag ){\n                    var dragDelta = r.hoverData.dragDelta;\n\n                    if( $$.is.number(dragDelta[0]) && $$.is.number(dragDelta[1]) ){\n                      dPos.x += dragDelta[0];\n                      dPos.y += dragDelta[1];\n                    }\n                  }\n                }\n\n              }\n            }\n\n            r.hoverData.draggingEles = true;\n\n            var tcol = (new $$.Collection(cy, toTrigger));\n\n            tcol.updateCompoundBounds();\n            tcol.trigger('position drag');\n\n            needsRedraw[CR.DRAG] = true;\n            r.redraw();\n\n          } else { // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant\n            updateDragDelta();\n          }\n        }\n\n        // prevent the dragging from triggering text selection on the page\n        preventDefault = true;\n      }\n\n      select[2] = pos[0]; select[3] = pos[1];\n\n      if( preventDefault ){\n        if(e.stopPropagation) e.stopPropagation();\n          if(e.preventDefault) e.preventDefault();\n          return false;\n        }\n    }, 1000/30, { trailing: true }), false);\n\n    r.registerBinding(window, 'mouseup', function(e) {\n      // console.log('--\\nmouseup', e)\n\n      var capture = r.hoverData.capture;\n      if (!capture) { return; }\n      r.hoverData.capture = false;\n\n      var cy = r.data.cy; var pos = r.projectIntoViewport(e.clientX, e.clientY); var select = r.data.select;\n      var near = r.findNearestElement(pos[0], pos[1], true, false);\n      var draggedElements = r.dragData.possibleDragElements; var down = r.hoverData.down;\n      var shiftDown = e.shiftKey;\n      var needsRedraw = r.data.canvasNeedsRedraw;\n\n      if( r.data.bgActivePosistion ){\n        needsRedraw[CR.SELECT_BOX] = true;\n        r.redraw();\n      }\n\n      r.hoverData.tapholdCancelled = true;\n\n      r.data.bgActivePosistion = undefined; // not active bg now\n      clearTimeout( r.bgActiveTimeout );\n\n      if( down ){\n        down.unactivate();\n      }\n\n      if( r.hoverData.which === 3 ){\n        var cxtEvt = new $$.Event(e, {\n          type: 'cxttapend',\n          cyPosition: { x: pos[0], y: pos[1] }\n        });\n\n        if( down ){\n          down.trigger( cxtEvt );\n        } else {\n          cy.trigger( cxtEvt );\n        }\n\n        if( !r.hoverData.cxtDragged ){\n          var cxtTap = new $$.Event(e, {\n            type: 'cxttap',\n            cyPosition: { x: pos[0], y: pos[1] }\n          });\n\n          if( down ){\n            down.trigger( cxtTap );\n          } else {\n            cy.trigger( cxtTap );\n          }\n        }\n\n        r.hoverData.cxtDragged = false;\n        r.hoverData.which = null;\n\n      // if not right mouse\n      } else {\n\n        // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something\n        if ( (down == null) // not mousedown on node\n          && !r.dragData.didDrag // didn't move the node around\n          //&& !(Math.pow(select[2] - select[0], 2) + Math.pow(select[3] - select[1], 2) > 7 && select[4]) // not box selection\n          && !r.hoverData.dragged // didn't pan\n        ) {\n\n          cy.$(function(){\n            return this.selected();\n          }).unselect();\n\n          if (draggedElements.length > 0) {\n            needsRedraw[CR.NODE] = true;\n          }\n\n          r.dragData.possibleDragElements = draggedElements = [];\n        }\n\n\n        // Mouseup event\n        {\n          // console.log('trigger mouseup et al');\n\n          if (near != null) {\n            near\n              .trigger(new $$.Event(e, {\n                type: 'mouseup',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'tapend',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'vmouseup',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n            ;\n          } else if (near == null) {\n            cy\n              .trigger(new $$.Event(e, {\n                type: 'mouseup',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'tapend',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'vmouseup',\n                cyPosition: { x: pos[0], y: pos[1] }\n              }))\n            ;\n          }\n        }\n\n        // Click event\n        {\n          // console.log('trigger click et al');\n\n          if(\n            //Math.pow(select[2] - select[0], 2) + Math.pow(select[3] - select[1], 2) === 0\n            !r.dragData.didDrag // didn't move a node around\n            && !r.hoverData.dragged // didn't pan\n          ){\n            if (near != null) {\n              near\n                .trigger( new $$.Event(e, {\n                  type: 'click',\n                  cyPosition: { x: pos[0], y: pos[1] }\n                }) )\n                .trigger( new $$.Event(e, {\n                  type: 'tap',\n                  cyPosition: { x: pos[0], y: pos[1] }\n                }) )\n                .trigger( new $$.Event(e, {\n                  type: 'vclick',\n                  cyPosition: { x: pos[0], y: pos[1] }\n                }) )\n              ;\n            } else if (near == null) {\n              cy\n                .trigger( new $$.Event(e, {\n                  type: 'click',\n                  cyPosition: { x: pos[0], y: pos[1] }\n                }) )\n                .trigger( new $$.Event(e, {\n                  type: 'tap',\n                  cyPosition: { x: pos[0], y: pos[1] }\n                }) )\n                .trigger( new $$.Event(e, {\n                  type: 'vclick',\n                  cyPosition: { x: pos[0], y: pos[1] }\n                }) )\n              ;\n            }\n          }\n        }\n\n        // Single selection\n        if (near == down && !r.dragData.didDrag) {\n          if (near != null && near._private.selectable) {\n\n            // console.log('single selection')\n\n            if( r.hoverData.dragging ){\n              // if panning, don't change selection state\n            } else if( cy.selectionType() === 'additive' || shiftDown ){\n              if( near.selected() ){\n                near.unselect();\n              } else {\n                near.select();\n              }\n            } else {\n              if( !shiftDown ){\n                cy.$(':selected').unmerge( near ).unselect();\n                near.select();\n              }\n            }\n\n            needsRedraw[CR.NODE] = true;\n\n          }\n\n        }\n\n        if ( r.hoverData.selecting && cy.boxSelectionEnabled() &&  Math.pow(select[2] - select[0], 2) + Math.pow(select[3] - select[1], 2) > 7 && select[4] ) {\n          var newlySelected = [];\n          var box = r.getAllInBox( select[0], select[1], select[2], select[3] );\n\n          needsRedraw[CR.SELECT_BOX] = true;\n\n          if( box.length > 0 ) {\n            needsRedraw[CR.NODE] = true;\n          }\n\n          for( var i = 0; i < box.length; i++ ){\n            if( box[i]._private.selectable ){\n              newlySelected.push( box[i] );\n            }\n          }\n\n          var newlySelCol = new $$.Collection( cy, newlySelected );\n\n          if( cy.selectionType() === 'additive' ){\n            newlySelCol.select();\n          } else {\n            if( !shiftDown ){\n              cy.$(':selected').unmerge( newlySelCol ).unselect();\n            }\n\n            newlySelCol.select();\n          }\n\n          // always need redraw in case eles unselectable\n          r.redraw();\n\n        }\n\n        // Cancel drag pan\n        if( r.hoverData.dragging ){\n          r.hoverData.dragging = false;\n\n          needsRedraw[CR.SELECT_BOX] = true;\n          needsRedraw[CR.NODE] = true;\n\n          r.redraw();\n        }\n\n        if (!select[4]) {\n          // console.log('free at end', draggedElements)\n\n          needsRedraw[CR.DRAG] = true;\n          needsRedraw[CR.NODE] = true;\n\n          freeDraggedElements( draggedElements );\n\n          if( down ){ down.trigger('free'); }\n\n  //        draggedElements = r.dragData.possibleDragElements = [];\n\n        }\n\n      } // else not right mouse\n\n      select[4] = 0; r.hoverData.down = null;\n\n      //r.data.canvasNeedsRedraw[CR.SELECT_BOX] = true;\n\n//      console.log('mu', pos[0], pos[1]);\n//      console.log('ss', select);\n\n      r.hoverData.cxtStarted = false;\n      r.hoverData.draggingEles = false;\n      r.hoverData.selecting = false;\n      r.dragData.didDrag = false;\n      r.hoverData.dragged = false;\n      r.hoverData.dragDelta = [];\n\n    }, false);\n\n    var wheelHandler = function(e) {\n      if( r.scrollingPage ){ return; } // while scrolling, ignore wheel-to-zoom\n\n      var cy = r.data.cy;\n      var pos = r.projectIntoViewport(e.clientX, e.clientY);\n      var rpos = [pos[0] * cy.zoom() + cy.pan().x,\n                    pos[1] * cy.zoom() + cy.pan().y];\n\n      if( r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection() ){ // if pan dragging or cxt dragging, wheel movements make no zoom\n        e.preventDefault();\n        return;\n      }\n\n      if( cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled() ){\n        e.preventDefault();\n\n        r.data.wheelZooming = true;\n        clearTimeout( r.data.wheelTimeout );\n        r.data.wheelTimeout = setTimeout(function(){\n          r.data.wheelZooming = false;\n\n          r.data.canvasNeedsRedraw[CR.NODE] = true;\n          r.redraw();\n        }, 150);\n\n        var diff = e.deltaY / -250 || e.wheelDeltaY / 1000 || e.wheelDelta / 1000;\n        diff = diff * r.wheelSensitivity;\n\n        var needsWheelFix = e.deltaMode === 1;\n        if( needsWheelFix ){ // fixes slow wheel events on ff/linux and ff/windows\n          diff *= 33;\n        }\n\n        cy.zoom({\n          level: cy.zoom() * Math.pow(10, diff),\n          renderedPosition: { x: rpos[0], y: rpos[1] }\n        });\n      }\n\n    };\n\n    // Functions to help with whether mouse wheel should trigger zooming\n    // --\n    r.registerBinding(r.data.container, 'wheel', wheelHandler, true);\n\n    // disable nonstandard wheel events\n    // r.registerBinding(r.data.container, 'mousewheel', wheelHandler, true);\n    // r.registerBinding(r.data.container, 'DOMMouseScroll', wheelHandler, true);\n    // r.registerBinding(r.data.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox\n\n    r.registerBinding(window, 'scroll', function(e){\n      r.scrollingPage = true;\n\n      clearTimeout( r.scrollingPageTimeout );\n      r.scrollingPageTimeout = setTimeout(function(){\n        r.scrollingPage = false;\n      }, 250);\n    }, true);\n\n    // Functions to help with handling mouseout/mouseover on the Cytoscape container\n          // Handle mouseout on Cytoscape container\n    r.registerBinding(r.data.container, 'mouseout', function(e) {\n      var pos = r.projectIntoViewport(e.clientX, e.clientY);\n\n      r.data.cy.trigger(new $$.Event(e, {\n        type: 'mouseout',\n        cyPosition: { x: pos[0], y: pos[1] }\n      }));\n    }, false);\n\n    r.registerBinding(r.data.container, 'mouseover', function(e) {\n      var pos = r.projectIntoViewport(e.clientX, e.clientY);\n\n      r.data.cy.trigger(new $$.Event(e, {\n        type: 'mouseover',\n        cyPosition: { x: pos[0], y: pos[1] }\n      }));\n    }, false);\n\n    var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom\n    var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom\n    var center1, modelCenter1; // center point on start pinch to zoom\n    var offsetLeft, offsetTop;\n    var containerWidth, containerHeight;\n    var twoFingersStartInside;\n\n    var distance = function(x1, y1, x2, y2){\n      return Math.sqrt( (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) );\n    };\n\n    var distanceSq = function(x1, y1, x2, y2){\n      return (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);\n    };\n\n    r.registerBinding(r.data.container, 'touchstart', function(e) {\n\n      clearTimeout( this.threeFingerSelectTimeout );\n\n      if( e.target !== r.data.link ){\n        e.preventDefault();\n      }\n\n      r.touchData.capture = true;\n      r.data.bgActivePosistion = undefined;\n\n      var cy = r.data.cy;\n      var nodes = r.getCachedNodes();\n      var edges = r.getCachedEdges();\n      var now = r.touchData.now;\n      var earlier = r.touchData.earlier;\n      var needsRedraw = r.data.canvasNeedsRedraw;\n\n      if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }\n      if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }\n      if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }\n\n\n      // record starting points for pinch-to-zoom\n      if( e.touches[1] ){\n\n        // anything in the set of dragged eles should be released\n        var release = function( eles ){\n          for( var i = 0; i < eles.length; i++ ){\n            eles[i]._private.grabbed = false;\n            eles[i]._private.rscratch.inDragLayer = false;\n            if( eles[i].active() ){ eles[i].unactivate(); }\n          }\n        };\n        release(nodes);\n        release(edges);\n\n        var offsets = r.findContainerClientCoords();\n        offsetLeft = offsets[0];\n        offsetTop = offsets[1];\n        containerWidth = offsets[2];\n        containerHeight = offsets[3];\n\n        f1x1 = e.touches[0].clientX - offsetLeft;\n        f1y1 = e.touches[0].clientY - offsetTop;\n\n        f2x1 = e.touches[1].clientX - offsetLeft;\n        f2y1 = e.touches[1].clientY - offsetTop;\n\n        twoFingersStartInside =\n             0 <= f1x1 && f1x1 <= containerWidth\n          && 0 <= f2x1 && f2x1 <= containerWidth\n          && 0 <= f1y1 && f1y1 <= containerHeight\n          && 0 <= f2y1 && f2y1 <= containerHeight\n        ;\n\n        var pan = cy.pan();\n        var zoom = cy.zoom();\n\n        distance1 = distance( f1x1, f1y1, f2x1, f2y1 );\n        distance1Sq = distanceSq( f1x1, f1y1, f2x1, f2y1 );\n        center1 = [ (f1x1 + f2x1)/2, (f1y1 + f2y1)/2 ];\n        modelCenter1 = [\n          (center1[0] - pan.x) / zoom,\n          (center1[1] - pan.y) / zoom\n        ];\n\n        // consider context tap\n        var cxtDistThreshold = 200;\n        var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;\n        if( distance1Sq < cxtDistThresholdSq && !e.touches[2] ){\n\n          var near1 = r.findNearestElement(now[0], now[1], true, true);\n          var near2 = r.findNearestElement(now[2], now[3], true, true);\n\n          //console.log(distance1)\n\n          if( near1 && near1.isNode() ){\n            near1.activate().trigger( new $$.Event(e, {\n              type: 'cxttapstart',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n            r.touchData.start = near1;\n\n          } else if( near2 && near2.isNode() ){\n            near2.activate().trigger( new $$.Event(e, {\n              type: 'cxttapstart',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n            r.touchData.start = near2;\n\n          } else {\n            cy.trigger( new $$.Event(e, {\n              type: 'cxttapstart',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n            r.touchData.start = null;\n          }\n\n          if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }\n          r.touchData.cxt = true;\n          r.touchData.cxtDragged = false;\n          r.data.bgActivePosistion = undefined;\n\n          //console.log('cxttapstart')\n\n          r.redraw();\n          return;\n\n        }\n\n        // console.log(center1);\n        // console.log('touchstart ptz');\n        // console.log(offsetLeft, offsetTop);\n        // console.log(f1x1, f1y1);\n        // console.log(f2x1, f2y1);\n        // console.log(distance1);\n        // console.log(center1);\n      }\n\n      // console.log('another tapstart')\n\n\n      if (e.touches[2]) {\n\n      } else if (e.touches[1]) {\n\n      } else if (e.touches[0]) {\n        var near = r.findNearestElement(now[0], now[1], true, true);\n\n        if (near != null) {\n          near.activate();\n\n          r.touchData.start = near;\n\n          if( near.isNode() && r.nodeIsDraggable(near) ){\n\n            var draggedEles = r.dragData.touchDragEles = [];\n\n            needsRedraw[CR.NODE] = true;\n            needsRedraw[CR.DRAG] = true;\n\n            if( near.selected() ){\n              // reset drag elements, since near will be added again\n\n              var selectedNodes = cy.$(function(){\n                return this.isNode() && this.selected();\n              });\n\n              for( var k = 0; k < selectedNodes.length; k++ ){\n                var selectedNode = selectedNodes[k];\n\n                if( r.nodeIsDraggable(selectedNode) ){\n                  addNodeToDrag( selectedNode, { addToList: draggedEles } );\n                }\n              }\n            } else {\n              addNodeToDrag( near, { addToList: draggedEles } );\n            }\n\n            near.trigger( new $$.Event(e, {\n              type: 'grab',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n          }\n\n          near\n            .trigger(new $$.Event(e, {\n              type: 'touchstart',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'tapstart',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'vmousdown',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n          ;\n        } if (near == null) {\n          cy\n            .trigger(new $$.Event(e, {\n              type: 'touchstart',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'tapstart',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'vmousedown',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n          ;\n\n          r.data.bgActivePosistion = {\n            x: pos[0],\n            y: pos[1]\n          };\n\n          needsRedraw[CR.SELECT_BOX] = true;\n          r.redraw();\n        }\n\n\n        // Tap, taphold\n        // -----\n\n        for (var i=0; i<now.length; i++) {\n          earlier[i] = now[i];\n          r.touchData.startPosition[i] = now[i];\n        }\n\n        r.touchData.singleTouchMoved = false;\n        r.touchData.singleTouchStartTime = +new Date();\n\n        clearTimeout( r.touchData.tapholdTimeout );\n        r.touchData.tapholdTimeout = setTimeout(function() {\n          if(\n              r.touchData.singleTouchMoved === false\n              && !r.pinching // if pinching, then taphold unselect shouldn't take effect\n\n              // This time double constraint prevents multiple quick taps\n              // followed by a taphold triggering multiple taphold events\n              //&& Date.now() - r.touchData.singleTouchStartTime > 250\n          ){\n            if (r.touchData.start) {\n              r.touchData.start.trigger( new $$.Event(e, {\n                type: 'taphold',\n                cyPosition: { x: now[0], y: now[1] }\n              }) );\n            } else {\n              r.data.cy.trigger( new $$.Event(e, {\n                type: 'taphold',\n                cyPosition: { x: now[0], y: now[1] }\n              }) );\n\n              cy.$(':selected').unselect();\n            }\n\n//            console.log('taphold');\n          }\n        }, r.tapholdDuration);\n      }\n\n      //r.redraw();\n\n    }, false);\n\n// console.log = function(m){ $('#console').append('<div>'+m+'</div>'); };\n\n    r.registerBinding(window, 'touchmove', $$.util.throttle(function(e) {\n\n      var select = r.data.select;\n      var capture = r.touchData.capture; //if (!capture) { return; };\n      if( capture ){ e.preventDefault(); }\n\n      var cy = r.data.cy;\n      var now = r.touchData.now; var earlier = r.touchData.earlier;\n      var zoom = cy.zoom();\n\n      var needsRedraw = r.data.canvasNeedsRedraw;\n\n      if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }\n      if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }\n      if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }\n      var disp = []; for (var j=0;j<now.length;j++) { disp[j] = now[j] - earlier[j]; }\n\n      var startPos = r.touchData.startPosition;\n\n      var dx = now[0] - startPos[0];\n      var dx2 = dx * dx;\n      var dy = now[1] - startPos[1];\n      var dy2 = dy * dy;\n      var dist2 = dx2 + dy2;\n      var rdist2 = dist2 * zoom * zoom;\n\n      if( capture && r.touchData.cxt ){\n        var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;\n        var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;\n        // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );\n        var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );\n        var factorSq = distance2Sq / distance1Sq;\n\n        var distThreshold = 150;\n        var distThresholdSq = distThreshold * distThreshold;\n        var factorThreshold = 1.5;\n        var factorThresholdSq = factorThreshold * factorThreshold;\n\n        //console.log(factor, distance2)\n\n        // cancel ctx gestures if the distance b/t the fingers increases\n        if( factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq ){\n          r.touchData.cxt = false;\n          if( r.touchData.start ){ r.touchData.start.unactivate(); r.touchData.start = null; }\n          r.data.bgActivePosistion = undefined;\n          needsRedraw[CR.SELECT_BOX] = true;\n\n          var cxtEvt = new $$.Event(e, {\n            type: 'cxttapend',\n            cyPosition: { x: now[0], y: now[1] }\n          });\n          if( r.touchData.start ){\n            r.touchData.start.trigger( cxtEvt );\n          } else {\n            cy.trigger( cxtEvt );\n          }\n        }\n\n      }\n\n      if( capture && r.touchData.cxt ){\n        var cxtEvt = new $$.Event(e, {\n          type: 'cxtdrag',\n          cyPosition: { x: now[0], y: now[1] }\n        });\n        r.data.bgActivePosistion = undefined;\n        needsRedraw[CR.SELECT_BOX] = true;\n\n        if( r.touchData.start ){\n          r.touchData.start.trigger( cxtEvt );\n        } else {\n          cy.trigger( cxtEvt );\n        }\n\n        if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }\n        r.touchData.cxtDragged = true;\n\n        //console.log('cxtdrag')\n\n        var near = r.findNearestElement(now[0], now[1], true, true);\n\n        if( !r.touchData.cxtOver || near !== r.touchData.cxtOver ){\n\n          if( r.touchData.cxtOver ){\n            r.touchData.cxtOver.trigger( new $$.Event(e, {\n              type: 'cxtdragout',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n\n            // console.log('cxtdragout');\n          }\n\n          r.touchData.cxtOver = near;\n\n          if( near ){\n            near.trigger( new $$.Event(e, {\n              type: 'cxtdragover',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n\n            // console.log('cxtdragover');\n          }\n\n        }\n\n      } else if( capture && e.touches[2] && cy.boxSelectionEnabled() ){\n        r.data.bgActivePosistion = undefined;\n        clearTimeout( this.threeFingerSelectTimeout );\n        this.lastThreeTouch = +new Date();\n        r.touchData.selecting = true;\n\n        needsRedraw[CR.SELECT_BOX] = true;\n\n        if( !select || select.length === 0 || select[0] === undefined ){\n          select[0] = (now[0] + now[2] + now[4])/3;\n          select[1] = (now[1] + now[3] + now[5])/3;\n          select[2] = (now[0] + now[2] + now[4])/3 + 1;\n          select[3] = (now[1] + now[3] + now[5])/3 + 1;\n        } else {\n          select[2] = (now[0] + now[2] + now[4])/3;\n          select[3] = (now[1] + now[3] + now[5])/3;\n        }\n\n        select[4] = 1;\n        r.touchData.selecting = true;\n\n        r.redraw();\n\n      } else if ( capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled() ) { // two fingers => pinch to zoom\n        r.data.bgActivePosistion = undefined;\n        needsRedraw[CR.SELECT_BOX] = true;\n\n        var draggedEles = r.dragData.touchDragEles;\n        if( draggedEles ){\n          needsRedraw[CR.DRAG] = true;\n\n          for( var i = 0; i < draggedEles.length; i++ ){\n            draggedEles[i]._private.grabbed = false;\n            draggedEles[i]._private.rscratch.inDragLayer = false;\n          }\n        }\n\n        // console.log('touchmove ptz');\n\n        // (x2, y2) for fingers 1 and 2\n        var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;\n        var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;\n\n        // console.log( f1x2, f1y2 )\n        // console.log( f2x2, f2y2 )\n\n        var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );\n        // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );\n        // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );\n        var factor = distance2 / distance1;\n\n        // console.log(distance2)\n        // console.log(factor)\n\n        if( factor != 1 && twoFingersStartInside){\n\n          // console.log(factor)\n          // console.log(distance2 + ' / ' + distance1);\n          // console.log('--');\n\n          // delta finger1\n          var df1x = f1x2 - f1x1;\n          var df1y = f1y2 - f1y1;\n\n          // delta finger 2\n          var df2x = f2x2 - f2x1;\n          var df2y = f2y2 - f2y1;\n\n          // translation is the normalised vector of the two fingers movement\n          // i.e. so pinching cancels out and moving together pans\n          var tx = (df1x + df2x)/2;\n          var ty = (df1y + df2y)/2;\n\n          // adjust factor by the speed multiplier\n          // var speed = 1.5;\n          // if( factor > 1 ){\n          //   factor = (factor - 1) * speed + 1;\n          // } else {\n          //   factor = 1 - (1 - factor) * speed;\n          // }\n\n          // now calculate the zoom\n          var zoom1 = cy.zoom();\n          var zoom2 = zoom1 * factor;\n          var pan1 = cy.pan();\n\n          // the model center point converted to the current rendered pos\n          var ctrx = modelCenter1[0] * zoom1 + pan1.x;\n          var ctry = modelCenter1[1] * zoom1 + pan1.y;\n\n          var pan2 = {\n            x: -zoom2/zoom1 * (ctrx - pan1.x - tx) + ctrx,\n            y: -zoom2/zoom1 * (ctry - pan1.y - ty) + ctry\n          };\n\n          // console.log(pan2);\n          // console.log(zoom2);\n\n          // remove dragged eles\n          if( r.touchData.start ){\n            var draggedEles = r.dragData.touchDragEles;\n\n            if( draggedEles ){ for( var i = 0; i < draggedEles.length; i++ ){\n              var dEi_p = draggedEles[i]._private;\n\n              dEi_p.grabbed = false;\n              dEi_p.rscratch.inDragLayer = false;\n            } }\n\n            var start_p = r.touchData.start._private;\n            start_p.active = false;\n            start_p.grabbed = false;\n            start_p.rscratch.inDragLayer = false;\n\n            needsRedraw[CR.DRAG] = true;\n\n            r.touchData.start\n              .trigger('free')\n              .trigger('unactivate')\n            ;\n          }\n\n          cy.viewport({\n            zoom: zoom2,\n            pan: pan2,\n            cancelOnFailedZoom: true\n          });\n\n          distance1 = distance2;\n          f1x1 = f1x2;\n          f1y1 = f1y2;\n          f2x1 = f2x2;\n          f2y1 = f2y2;\n\n          r.pinching = true;\n        }\n\n        // Re-project\n        if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }\n        if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }\n        if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }\n\n      } else if (e.touches[0]) {\n        var start = r.touchData.start;\n        var last = r.touchData.last;\n        var near = near || r.findNearestElement(now[0], now[1], true, true);\n\n        if( start != null && start._private.group == 'nodes' && r.nodeIsDraggable(start) ){\n\n          if( rdist2 >= r.touchTapThreshold2 ){ // then dragging can happen\n            var draggedEles = r.dragData.touchDragEles;\n\n            for( var k = 0; k < draggedEles.length; k++ ){\n              var draggedEle = draggedEles[k];\n\n              if( r.nodeIsDraggable(draggedEle) && draggedEle.isNode() && draggedEle.grabbed() ){\n                r.dragData.didDrag = true;\n                var dPos = draggedEle._private.position;\n                var justStartedDrag = !r.hoverData.draggingEles;\n\n                if( $$.is.number(disp[0]) && $$.is.number(disp[1]) ){\n                  dPos.x += disp[0];\n                  dPos.y += disp[1];\n                }\n\n                if( justStartedDrag ){\n                  addNodeToDrag( draggedEle, { inDragLayer: true } );\n\n                  needsRedraw[CR.NODE] = true;\n\n                  var dragDelta = r.touchData.dragDelta;\n\n                  if( $$.is.number(dragDelta[0]) && $$.is.number(dragDelta[1]) ){\n                    dPos.x += dragDelta[0];\n                    dPos.y += dragDelta[1];\n                  }\n\n                }\n              }\n            }\n\n            var tcol = new $$.Collection(cy, draggedEle);\n\n            tcol.updateCompoundBounds();\n            tcol.trigger('position drag');\n\n            r.hoverData.draggingEles = true;\n\n            needsRedraw[CR.DRAG] = true;\n\n            if(\n                 r.touchData.startPosition[0] == earlier[0]\n              && r.touchData.startPosition[1] == earlier[1]\n            ){\n\n              needsRedraw[CR.NODE] = true;\n            }\n\n            r.redraw();\n          } else { // otherise keep track of drag delta for later\n            var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];\n\n            if( dragDelta.length === 0 ){\n              dragDelta.push( disp[0] );\n              dragDelta.push( disp[1] );\n            } else {\n              dragDelta[0] += disp[0];\n              dragDelta[1] += disp[1];\n            }\n          }\n        }\n\n        // Touchmove event\n        {\n\n          if (start != null) {\n            start.trigger( new $$.Event(e, {\n              type: 'touchmove',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n\n            start.trigger( new $$.Event(e, {\n              type: 'tapdrag',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n\n            start.trigger( new $$.Event(e, {\n              type: 'vmousemove',\n              cyPosition: { x: now[0], y: now[1] }\n            }) );\n          }\n\n          if (start == null) {\n\n            if (near != null) {\n              near.trigger( new $$.Event(e, {\n                type: 'touchmove',\n                cyPosition: { x: now[0], y: now[1] }\n              }) );\n\n              near.trigger( new $$.Event(e, {\n                type: 'tapdrag',\n                cyPosition: { x: now[0], y: now[1] }\n              }) );\n\n              near.trigger( new $$.Event(e, {\n                type: 'vmousemove',\n                cyPosition: { x: now[0], y: now[1] }\n              }) );\n            }\n\n            if (near == null) {\n              cy.trigger( new $$.Event(e, {\n                type: 'touchmove',\n                cyPosition: { x: now[0], y: now[1] }\n              }) );\n\n              cy.trigger( new $$.Event(e, {\n                type: 'tapdrag',\n                cyPosition: { x: now[0], y: now[1] }\n              }) );\n\n              cy.trigger( new $$.Event(e, {\n                type: 'vmousemove',\n                cyPosition: { x: now[0], y: now[1] }\n              }) );\n            }\n          }\n\n          if (near != last) {\n            if (last) { last.trigger(new $$.Event(e, { type: 'tapdragout', cyPosition: { x: now[0], y: now[1] } })); }\n            if (near) { near.trigger(new $$.Event(e, { type: 'tapdragover', cyPosition: { x: now[0], y: now[1] } })); }\n          }\n\n          r.touchData.last = near;\n        }\n\n        // Check to cancel taphold\n        for (var i=0;i<now.length;i++) {\n          if (now[i]\n            && r.touchData.startPosition[i]\n            && Math.abs(now[i] - r.touchData.startPosition[i]) > 4) {\n\n            r.touchData.singleTouchMoved = true;\n          }\n        }\n\n        if(\n            capture\n            && ( start == null || start.isEdge() )\n            && cy.panningEnabled() && cy.userPanningEnabled()\n        ){\n\n          if( r.swipePanning ){\n            cy.panBy({\n              x: disp[0] * zoom,\n              y: disp[1] * zoom\n            });\n\n          } else if( rdist2 >= r.touchTapThreshold2 ){\n            r.swipePanning = true;\n\n            cy.panBy({\n              x: dx * zoom,\n              y: dy * zoom\n            });\n          }\n\n          if( start ){\n            start.unactivate();\n\n            if( !r.data.bgActivePosistion ){\n              r.data.bgActivePosistion = {\n                x: now[0],\n                y: now[1]\n              };\n            }\n\n            needsRedraw[CR.SELECT_BOX] = true;\n\n            r.touchData.start = null;\n          }\n\n          // Re-project\n          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n          now[0] = pos[0]; now[1] = pos[1];\n        }\n      }\n\n      for (var j=0; j<now.length; j++) { earlier[j] = now[j]; }\n      //r.redraw();\n\n    }, 1000/30, { trailing: true }), false);\n\n    r.registerBinding(window, 'touchcancel', function(e) {\n      var start = r.touchData.start;\n\n      r.touchData.capture = false;\n\n      if( start ){\n        start.unactivate();\n      }\n    });\n\n    r.registerBinding(window, 'touchend', function(e) {\n      var start = r.touchData.start;\n\n      var capture = r.touchData.capture;\n\n      if( capture ){\n        r.touchData.capture = false;\n      } else {\n        return;\n      }\n\n      e.preventDefault();\n      var select = r.data.select;\n\n      r.swipePanning = false;\n      r.hoverData.draggingEles = false;\n\n      var cy = r.data.cy;\n      var zoom = cy.zoom();\n      var now = r.touchData.now;\n      var earlier = r.touchData.earlier;\n\n      var needsRedraw = r.data.canvasNeedsRedraw;\n\n      if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }\n      if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }\n      if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }\n\n      if( start ){\n        start.unactivate();\n      }\n\n      var ctxTapend;\n      if( r.touchData.cxt ){\n        ctxTapend = new $$.Event(e, {\n          type: 'cxttapend',\n          cyPosition: { x: now[0], y: now[1] }\n        });\n\n        if( start ){\n          start.trigger( ctxTapend );\n        } else {\n          cy.trigger( ctxTapend );\n        }\n\n        //console.log('cxttapend')\n\n        if( !r.touchData.cxtDragged ){\n          var ctxTap = new $$.Event(e, {\n            type: 'cxttap',\n            cyPosition: { x: now[0], y: now[1] }\n          });\n\n          if( start ){\n            start.trigger( ctxTap );\n          } else {\n            cy.trigger( ctxTap );\n          }\n\n          //console.log('cxttap')\n        }\n\n        if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }\n        r.touchData.cxt = false;\n        r.touchData.start = null;\n\n        r.redraw();\n        return;\n      }\n\n      // no more box selection if we don't have three fingers\n      if( !e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting ){\n        r.touchData.selecting = false;\n        clearTimeout( this.threeFingerSelectTimeout );\n        //this.threeFingerSelectTimeout = setTimeout(function(){\n          var newlySelected = [];\n          var box = r.getAllInBox( select[0], select[1], select[2], select[3] );\n\n          select[0] = undefined;\n          select[1] = undefined;\n          select[2] = undefined;\n          select[3] = undefined;\n          select[4] = 0;\n\n          needsRedraw[CR.SELECT_BOX] = true;\n\n          // console.log(box);\n          for( var i = 0; i< box.length; i++ ) {\n            if( box[i]._private.selectable ){\n              newlySelected.push( box[i] );\n            }\n          }\n\n          var newlySelCol = new $$.Collection( cy, newlySelected );\n\n          if( cy.selectionType() === 'single' ){\n            cy.$(':selected').unmerge( newlySelCol ).unselect();\n          }\n\n          newlySelCol.select();\n\n          if( newlySelCol.length > 0 ) {\n            needsRedraw[CR.NODE] = true;\n          } else {\n            r.redraw();\n          }\n\n        //}, 100);\n      }\n\n      var updateStartStyle = false;\n\n      if( start != null ){\n        start._private.active = false;\n        updateStartStyle = true;\n        start.unactivate();\n      }\n\n      if (e.touches[2]) {\n        r.data.bgActivePosistion = undefined;\n        needsRedraw[CR.SELECT_BOX] = true;\n      } else if (e.touches[1]) {\n\n      } else if (e.touches[0]) {\n\n      // Last touch released\n      } else if (!e.touches[0]) {\n\n        r.data.bgActivePosistion = undefined;\n        needsRedraw[CR.SELECT_BOX] = true;\n\n        var draggedEles = r.dragData.touchDragEles;\n\n        if (start != null ) {\n\n          var startWasGrabbed = start._private.grabbed;\n\n          freeDraggedElements( draggedEles );\n\n          needsRedraw[CR.DRAG] = true;\n          needsRedraw[CR.NODE] = true;\n\n          if( startWasGrabbed ){\n            start.trigger('free');\n          }\n\n          start\n            .trigger(new $$.Event(e, {\n              type: 'touchend',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'tapend',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n            .trigger(new $$.Event(e, {\n              type: 'vmouseup',\n              cyPosition: { x: now[0], y: now[1] }\n            }))\n          ;\n\n          start.unactivate();\n\n          r.touchData.start = null;\n\n        } else {\n          var near = r.findNearestElement(now[0], now[1], true, true);\n\n          if (near != null) {\n            near\n              .trigger(new $$.Event(e, {\n                type: 'touchend',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'tapend',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'vmouseup',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n            ;\n          }\n\n          if (near == null) {\n            cy\n              .trigger(new $$.Event(e, {\n                type: 'touchend',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'tapend',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'vmouseup',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n            ;\n          }\n        }\n\n        var dx = r.touchData.startPosition[0] - now[0];\n        var dx2 = dx * dx;\n        var dy = r.touchData.startPosition[1] - now[1];\n        var dy2 = dy * dy;\n        var dist2 = dx2 + dy2;\n        var rdist2 = dist2 * zoom * zoom;\n\n        // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance\n        if (start != null\n            && !r.dragData.didDrag // didn't drag nodes around\n            && start._private.selectable\n            && rdist2 < r.touchTapThreshold2\n            && !r.pinching // pinch to zoom should not affect selection\n        ) {\n\n          if( cy.selectionType() === 'single' ){\n            cy.$(':selected').unmerge( start ).unselect();\n            start.select();\n          } else {\n            if( start.selected() ){\n              start.unselect();\n            } else {\n              start.select();\n            }\n          }\n\n          updateStartStyle = true;\n\n\n          needsRedraw[CR.NODE] = true;\n        }\n\n        // Tap event, roughly same as mouse click event for touch\n        if ( r.touchData.singleTouchMoved === false ) {\n\n          if (start) {\n            start\n              .trigger(new $$.Event(e, {\n                type: 'tap',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'vclick',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n            ;\n          } else {\n            cy\n              .trigger(new $$.Event(e, {\n                type: 'tap',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n              .trigger(new $$.Event(e, {\n                type: 'vclick',\n                cyPosition: { x: now[0], y: now[1] }\n              }))\n            ;\n          }\n\n//          console.log('tap');\n        }\n\n        r.touchData.singleTouchMoved = true;\n      }\n\n      for( var j = 0; j < now.length; j++ ){ earlier[j] = now[j]; }\n\n      r.dragData.didDrag = false; // reset for next mousedown\n\n      if( e.touches.length === 0 ){\n        r.touchData.dragDelta = [];\n      }\n\n      if( updateStartStyle && start ){\n        start.updateStyle(false);\n      }\n\n      if( e.touches.length < 2 ){\n        r.pinching = false;\n        needsRedraw[CR.NODE] = true;\n        r.redraw();\n      }\n\n      //r.redraw();\n\n    }, false);\n  };\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var CanvasRenderer = $$('renderer', 'canvas');\n  var renderer = CanvasRenderer.prototype;\n  var usePaths = CanvasRenderer.usePaths();\n\n  // Node shape contract:\n  //\n  // draw: draw\n  // intersectLine: report intersection from x, y, to node center\n  // checkPoint: check x, y in node\n\n  var nodeShapes = CanvasRenderer.nodeShapes = {};\n\n  var sin0 = Math.sin(0);\n  var cos0 = Math.cos(0);\n\n  var sin = {};\n  var cos = {};\n\n  var ellipseStepSize = 0.1;\n\n  for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ) {\n    sin[i] = Math.sin(i);\n    cos[i] = Math.cos(i);\n  }\n\n  nodeShapes['ellipse'] = {\n    draw: function(context, centerX, centerY, width, height) {\n      nodeShapes['ellipse'].drawPath(context, centerX, centerY, width, height);\n      context.fill();\n    },\n\n    drawPath: function(context, centerX, centerY, width, height) {\n\n      if( usePaths ){\n        if( context.beginPath ){ context.beginPath(); }\n\n        var xPos, yPos;\n        var rw = width/2;\n        var rh = height/2;\n        for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ) {\n            xPos = centerX - (rw * sin[i]) * sin0 + (rw * cos[i]) * cos0;\n            yPos = centerY + (rh * cos[i]) * sin0 + (rh * sin[i]) * cos0;\n\n            if (i === 0) {\n                context.moveTo(xPos, yPos);\n            } else {\n                context.lineTo(xPos, yPos);\n            }\n        }\n        context.closePath();\n\n      } else {\n\n        if( context.beginPath ){ context.beginPath(); }\n        context.translate(centerX, centerY);\n        context.scale(width / 2, height / 2);\n        // At origin, radius 1, 0 to 2pi\n        context.arc(0, 0, 1, 0, Math.PI * 2 * 0.999, false); // *0.999 b/c chrome rendering bug on full circle\n        context.closePath();\n\n        context.scale(2/width, 2/height);\n        context.translate(-centerX, -centerY);\n\n      }\n\n    },\n\n    intersectLine: function(nodeX, nodeY, width, height, x, y, padding) {\n      var intersect = $$.math.intersectLineEllipse(\n        x, y,\n        nodeX,\n        nodeY,\n        width / 2 + padding,\n        height / 2 + padding);\n\n      return intersect;\n    },\n\n    intersectBox: function(\n      x1, y1, x2, y2, width, height, centerX, centerY, padding) {\n\n      return $$.math.boxIntersectEllipse(\n        x1, y1, x2, y2, padding, width, height, centerX, centerY);\n    },\n\n    checkPoint: function(\n      x, y, padding, width, height, centerX, centerY) {\n\n//      console.log(arguments);\n\n      x -= centerX;\n      y -= centerY;\n\n      x /= (width / 2 + padding);\n      y /= (height / 2 + padding);\n\n      return (Math.pow(x, 2) + Math.pow(y, 2) <= 1);\n    }\n  };\n\n  function generatePolygon( name, points ){\n    nodeShapes[name] = {\n      points: points,\n\n      draw: function(context, centerX, centerY, width, height) {\n        renderer.drawPolygon(context,\n          centerX, centerY,\n          width, height,\n          nodeShapes[name].points);\n      },\n\n      drawPath: function(context, centerX, centerY, width, height) {\n        renderer.drawPolygonPath(context,\n          centerX, centerY,\n          width, height,\n          nodeShapes[name].points);\n      },\n\n      intersectLine: function(nodeX, nodeY, width, height, x, y, padding) {\n        return $$.math.polygonIntersectLine(\n            x, y,\n            nodeShapes[name].points,\n            nodeX,\n            nodeY,\n            width / 2, height / 2,\n            padding);\n      },\n\n      intersectBox: function(\n        x1, y1, x2, y2,\n        width, height, centerX,\n        centerY, padding) {\n\n        var points = nodeShapes[name].points;\n\n        return $$.math.boxIntersectPolygon(\n          x1, y1, x2, y2,\n          points, width, height, centerX,\n          centerY, [0, -1], padding);\n      },\n\n      checkPoint: function(\n        x, y, padding, width, height, centerX, centerY) {\n\n        return $$.math.pointInsidePolygon(x, y, nodeShapes[name].points,\n          centerX, centerY, width, height, [0, -1], padding);\n      }\n    };\n  }\n\n  generatePolygon( 'triangle', $$.math.generateUnitNgonPointsFitToSquare(3, 0) );\n\n  generatePolygon( 'square', $$.math.generateUnitNgonPointsFitToSquare(4, 0) );\n  nodeShapes['rectangle'] = nodeShapes['square'];\n\n  nodeShapes['roundrectangle'] = {\n    points: $$.math.generateUnitNgonPointsFitToSquare(4, 0),\n\n    draw: function(context, centerX, centerY, width, height) {\n      renderer.drawRoundRectangle(context,\n        centerX, centerY,\n        width, height,\n        10);\n    },\n\n    drawPath: function(context, centerX, centerY, width, height) {\n      renderer.drawRoundRectanglePath(context,\n        centerX, centerY,\n        width, height,\n        10);\n    },\n\n    intersectLine: function(nodeX, nodeY, width, height, x, y, padding) {\n      return $$.math.roundRectangleIntersectLine(\n          x, y,\n          nodeX,\n          nodeY,\n          width, height,\n          padding);\n    },\n\n    intersectBox: function(\n      x1, y1, x2, y2,\n      width, height, centerX,\n      centerY, padding) {\n\n      return $$.math.roundRectangleIntersectBox(\n        x1, y1, x2, y2,\n        width, height, centerX, centerY, padding);\n    },\n\n    // Looks like the width passed into this function is actually the total width / 2\n    checkPoint: function(\n      x, y, padding, width, height, centerX, centerY) {\n\n      var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n\n      // Check hBox\n      if ($$.math.pointInsidePolygon(x, y, nodeShapes['roundrectangle'].points,\n        centerX, centerY, width, height - 2 * cornerRadius, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check vBox\n      if ($$.math.pointInsidePolygon(x, y, nodeShapes['roundrectangle'].points,\n        centerX, centerY, width - 2 * cornerRadius, height, [0, -1], padding)) {\n        return true;\n      }\n\n      var checkInEllipse = function(x, y, centerX, centerY, width, height, padding) {\n        x -= centerX;\n        y -= centerY;\n\n        x /= (width / 2 + padding);\n        y /= (height / 2 + padding);\n\n        return (Math.pow(x, 2) + Math.pow(y, 2) <= 1);\n      };\n\n\n      // Check top left quarter circle\n      if (checkInEllipse(x, y,\n        centerX - width / 2 + cornerRadius,\n        centerY - height / 2 + cornerRadius,\n        cornerRadius * 2, cornerRadius * 2, padding)) {\n\n        return true;\n      }\n\n      /*\n      if (renderer.boxIntersectEllipse(x, y, x, y, padding,\n        cornerRadius * 2, cornerRadius * 2,\n        centerX - width + cornerRadius,\n        centerY - height + cornerRadius)) {\n        return true;\n      }\n      */\n\n      // Check top right quarter circle\n      if (checkInEllipse(x, y,\n        centerX + width / 2 - cornerRadius,\n        centerY - height / 2 + cornerRadius,\n        cornerRadius * 2, cornerRadius * 2, padding)) {\n\n        return true;\n      }\n\n      // Check bottom right quarter circle\n      if (checkInEllipse(x, y,\n        centerX + width / 2 - cornerRadius,\n        centerY + height / 2 - cornerRadius,\n        cornerRadius * 2, cornerRadius * 2, padding)) {\n\n        return true;\n      }\n\n      // Check bottom left quarter circle\n      if (checkInEllipse(x, y,\n        centerX - width / 2 + cornerRadius,\n        centerY + height / 2 - cornerRadius,\n        cornerRadius * 2, cornerRadius * 2, padding)) {\n\n        return true;\n      }\n\n      return false;\n    }\n  };\n\n  generatePolygon( 'diamond', [\n    0, 1,\n    1, 0,\n    0, -1,\n    -1, 0\n  ] );\n\n  generatePolygon( 'pentagon', $$.math.generateUnitNgonPointsFitToSquare(5, 0) );\n\n  generatePolygon( 'hexagon', $$.math.generateUnitNgonPointsFitToSquare(6, 0) );\n\n  generatePolygon( 'heptagon', $$.math.generateUnitNgonPointsFitToSquare(7, 0) );\n\n  generatePolygon( 'octagon', $$.math.generateUnitNgonPointsFitToSquare(8, 0) );\n\n  var star5Points = new Array(20);\n  {\n    var outerPoints = $$.math.generateUnitNgonPoints(5, 0);\n    var innerPoints = $$.math.generateUnitNgonPoints(5, Math.PI / 5);\n\n  //  console.log(outerPoints);\n  //  console.log(innerPoints);\n\n    // Outer radius is 1; inner radius of star is smaller\n    var innerRadius = 0.5 * (3 - Math.sqrt(5));\n    innerRadius *= 1.57;\n\n    for (var i=0;i<innerPoints.length/2;i++) {\n      innerPoints[i*2] *= innerRadius;\n      innerPoints[i*2+1] *= innerRadius;\n    }\n\n    for (var i=0;i<20/4;i++) {\n      star5Points[i*4] = outerPoints[i*2];\n      star5Points[i*4+1] = outerPoints[i*2+1];\n\n      star5Points[i*4+2] = innerPoints[i*2];\n      star5Points[i*4+3] = innerPoints[i*2+1];\n    }\n\n  //  console.log(star5Points);\n  }\n\n  star5Points = $$.math.fitPolygonToSquare( star5Points );\n\n  generatePolygon( 'star', star5Points );\n\n  generatePolygon( 'vee', [\n    -1, -1,\n    0, -0.333,\n    1, -1,\n    0, 1\n  ] );\n\n  generatePolygon( 'rhomboid', [\n    -1, -1,\n    0.333, -1,\n    1, 1,\n    -0.333, 1\n  ] );\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var defaults = {\n    animate: true, // whether to show the layout as it's running\n    maxSimulationTime: 4000, // max length in ms to run the layout\n    fit: true, // on every layout reposition of nodes, fit the viewport\n    padding: 30, // padding around the simulation\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    ungrabifyWhileSimulating: false, // so you can't drag nodes during layout\n\n    // callbacks on layout events\n    ready: undefined, // callback on layoutready\n    stop: undefined, // callback on layoutstop\n\n    // forces used by arbor (use arbor default on undefined)\n    repulsion: undefined,\n    stiffness: undefined,\n    friction: undefined,\n    gravity: true,\n    fps: undefined,\n    precision: undefined,\n\n    // static numbers or functions that dynamically return what these\n    // values should be for each element\n    // e.g. nodeMass: function(n){ return n.data('weight') }\n    nodeMass: undefined,\n    edgeLength: undefined,\n\n    stepSize: 0.1, // smoothing of arbor bounding box\n\n    // function that returns true if the system is stable to indicate\n    // that the layout can be stopped\n    stableEnergy: function( energy ){\n      var e = energy;\n      return (e.max <= 0.5) || (e.mean <= 0.3);\n    },\n\n    // infinite layout options\n    infinite: false // overrides all other options for a forces-all-the-time mode\n  };\n\n  function ArborLayout(options){\n    this._private = {};\n\n    this._private.options = $$.util.extend({}, defaults, options);\n  }\n\n  ArborLayout.prototype.run = function(){\n    var layout = this;\n    var options = this._private.options;\n\n    $$.util.require('arbor', function(arbor){\n\n      var cy = options.cy;\n      var eles = options.eles;\n      var nodes = eles.nodes().not(':parent');\n      var edges = eles.edges();\n      var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n        x1: 0, y1: 0, w: cy.width(), h: cy.height()\n      } );\n      var simUpdatingPos = false;\n\n      layout.trigger({ type: 'layoutstart', layout: layout });\n\n      // backward compatibility for old animation option\n      if( options.liveUpdate !== undefined ){\n        options.animate = options.liveUpdate;\n      }\n\n      // arbor doesn't work with just 1 node\n      if( eles.nodes().size() <= 1 ){\n        if( options.fit ){\n          cy.reset();\n        }\n\n        eles.nodes().position({\n          x: Math.round( (bb.x1 + bb.x2)/2 ),\n          y: Math.round( (bb.y1 + bb.y2)/2 )\n        });\n\n        layout.one('layoutready', options.ready);\n        layout.trigger({ type: 'layoutready', layout: layout });\n\n        layout.one('layoutstop', options.stop);\n        layout.trigger({ type: 'layoutstop', layout: layout });\n\n        return;\n      }\n\n      var sys = layout._private.system = arbor.ParticleSystem();\n\n      sys.parameters({\n        repulsion: options.repulsion,\n        stiffness: options.stiffness,\n        friction: options.friction,\n        gravity: options.gravity,\n        fps: options.fps,\n        dt: options.dt,\n        precision: options.precision\n      });\n\n      if( options.animate && options.fit ){\n        cy.fit( bb, options.padding );\n      }\n\n      var doneTime = 250;\n      var doneTimeout;\n\n      var ready = false;\n\n      var lastDraw = +new Date();\n      var sysRenderer = {\n        init: function(system){\n        },\n        redraw: function(){\n          var energy = sys.energy();\n\n          // if we're stable (according to the client), we're done\n          if( !options.infinite && options.stableEnergy != null && energy != null && energy.n > 0 && options.stableEnergy(energy) ){\n            layout.stop();\n            return;\n          }\n\n          if( !options.infinite && doneTime != Infinity ){\n            clearTimeout(doneTimeout);\n            doneTimeout = setTimeout(doneHandler, doneTime);\n          }\n\n          var movedNodes = cy.collection();\n\n          sys.eachNode(function(n, point){\n            var data = n.data;\n            var node = data.element;\n\n            if( node == null ){\n              return;\n            }\n\n            if( !node.locked() && !node.grabbed() ){\n              node.silentPosition({\n                x: bb.x1 + point.x,\n                y: bb.y1 + point.y\n              });\n\n              movedNodes.merge( node );\n            }\n          });\n\n\n          if( options.animate && movedNodes.length > 0 ){\n            simUpdatingPos = true;\n\n            movedNodes.rtrigger('position');\n\n            if( options.fit ){\n              cy.fit( options.padding );\n            }\n\n            lastDraw = +new Date();\n            simUpdatingPos = false;\n          }\n\n\n          if( !ready ){\n            ready = true;\n            layout.one('layoutready', options.ready);\n            layout.trigger({ type: 'layoutready', layout: layout });\n          }\n        }\n\n      };\n      sys.renderer = sysRenderer;\n      sys.screenSize( bb.w, bb.h );\n      sys.screenPadding( options.padding, options.padding, options.padding, options.padding );\n      sys.screenStep( options.stepSize );\n\n      function calculateValueForElement(element, value){\n        if( value == null ){\n          return undefined;\n        } else if( typeof value == typeof function(){} ){\n          return value.apply(element, [element._private.data, {\n            nodes: nodes.length,\n            edges: edges.length,\n            element: element\n          }]);\n        } else {\n          return value;\n        }\n      }\n\n      var grabHandler;\n      nodes.on('grab free position', grabHandler = function(e){\n        if( simUpdatingPos ){ return; }\n\n        var pos = this.position();\n        var apos = sys.fromScreen( pos );\n        if( !apos ){ return; }\n\n        var p = arbor.Point(apos.x, apos.y);\n        var padding = options.padding;\n\n        if(\n          bb.x1 + padding <= pos.x && pos.x <= bb.x2 - padding &&\n          bb.y1 + padding <= pos.y && pos.y <= bb.y2 - padding\n        ){\n          this.scratch().arbor.p = p;\n        }\n\n        switch( e.type ){\n        case 'grab':\n          this.scratch().arbor.fixed = true;\n          break;\n        case 'free':\n          this.scratch().arbor.fixed = false;\n          //this.scratch().arbor.tempMass = 1000;\n          break;\n        }\n      });\n\n      var lockHandler;\n      nodes.on('lock unlock', lockHandler = function(e){\n        node.scratch().arbor.fixed = node.locked();\n      });\n\n      var removeHandler;\n      eles.on('remove', removeHandler = function(e){ return; // TODO enable when layout add/remove api added\n        // var ele = this;\n        // var arborEle = ele.scratch().arbor;\n\n        // if( !arborEle ){ return; }\n\n        // if( ele.isNode() ){\n        //   sys.pruneNode( arborEle );\n        // } else {\n        //   sys.pruneEdge( arborEle );\n        // }\n      });\n\n      var addHandler;\n      cy.on('add', '*', addHandler = function(){ return; // TODO enable when layout add/remove api added\n        // var ele = this;\n\n        // if( ele.isNode() ){\n        //   addNode( ele );\n        // } else {\n        //   addEdge( ele );\n        // }\n      });\n\n      var resizeHandler;\n      cy.on('resize', resizeHandler = function(){\n        if( options.boundingBox == null && layout._private.system != null ){\n          var w = cy.width();\n          var h = cy.height();\n\n          sys.screenSize( w, h );\n        }\n      });\n\n      function addNode( node ){\n        if( node.isFullAutoParent() ){ return; } // they don't exist in the sim\n\n        var id = node._private.data.id;\n        var mass = calculateValueForElement(node, options.nodeMass);\n        var locked = node._private.locked;\n        var nPos = node.position();\n\n        var pos = sys.fromScreen({\n          x: nPos.x,\n          y: nPos.y\n        });\n\n        node.scratch().arbor = sys.addNode(id, {\n          element: node,\n          mass: mass,\n          fixed: locked,\n          x: locked && pos ? pos.x : undefined,\n          y: locked && pos ? pos.y : undefined\n        });\n      }\n\n      function addEdge( edge ){\n        var src = edge.source().id();\n        var tgt = edge.target().id();\n        var length = calculateValueForElement(edge, options.edgeLength);\n\n        edge.scratch().arbor = sys.addEdge(src, tgt, {\n          length: length\n        });\n      }\n\n      nodes.each(function(i, node){\n        addNode( node );\n      });\n\n      edges.each(function(i, edge){\n        addEdge( edge );\n      });\n\n      var grabbableNodes = nodes.filter(\":grabbable\");\n      // disable grabbing if so set\n      if( options.ungrabifyWhileSimulating ){\n        grabbableNodes.ungrabify();\n      }\n\n      var doneHandler = layout._private.doneHandler = function(){\n        layout._private.doneHandler = null;\n\n        if( !options.animate ){\n          if( options.fit ){\n            cy.reset();\n          }\n\n          nodes.rtrigger('position');\n        }\n\n        // unbind handlers\n        nodes.off('grab free position', grabHandler);\n        nodes.off('lock unlock', lockHandler);\n        eles.off('remove', removeHandler);\n        cy.off('add', '*', addHandler);\n        cy.off('resize', resizeHandler);\n\n        // enable back grabbing if so set\n        if( options.ungrabifyWhileSimulating ){\n          grabbableNodes.grabify();\n        }\n\n        layout.one('layoutstop', options.stop);\n        layout.trigger({ type: 'layoutstop', layout: layout });\n      };\n\n      sys.start();\n      if( !options.infinite && options.maxSimulationTime != null && options.maxSimulationTime > 0 && options.maxSimulationTime !== Infinity ){\n        setTimeout(function(){\n          layout.stop();\n        }, options.maxSimulationTime);\n      }\n\n    }); // require\n\n    return this; // chaining\n  };\n\n\n  ArborLayout.prototype.stop = function(){\n    if( this._private.system != null ){\n      this._private.system.stop();\n    }\n\n    if( this._private.doneHandler ){\n      this._private.doneHandler();\n    }\n\n    return this; // chaining\n  };\n\n  $$('layout', 'arbor', ArborLayout);\n\n\n})(cytoscape);\n\n;(function($$){ 'use strict';\n\n  var defaults = {\n    fit: true, // whether to fit the viewport to the graph\n    directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)\n    padding: 30, // padding on fit\n    circle: false, // put depths in concentric circles if true, put depths top down if false\n    spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space\n    roots: undefined, // the roots of the trees\n    maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    ready: undefined, // callback on layoutready\n    stop: undefined // callback on layoutstop\n  };\n\n  function BreadthFirstLayout( options ){\n    this.options = $$.util.extend({}, defaults, options);\n  }\n\n  BreadthFirstLayout.prototype.run = function(){\n    var params = this.options;\n    var options = params;\n\n    var cy = params.cy;\n    var eles = options.eles;\n    var nodes = eles.nodes().not(':parent');\n    var graph = eles;\n\n    var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n      x1: 0, y1: 0, w: cy.width(), h: cy.height()\n    } );\n\n    var roots;\n    if( $$.is.elementOrCollection(options.roots) ){\n      roots = options.roots;\n    } else if( $$.is.array(options.roots) ){\n      var rootsArray = [];\n\n      for( var i = 0; i < options.roots.length; i++ ){\n        var id = options.roots[i];\n        var ele = cy.getElementById( id );\n        rootsArray.push( ele );\n      }\n\n      roots = new $$.Collection( cy, rootsArray );\n    } else if( $$.is.string(options.roots) ){\n      roots = cy.$( options.roots );\n\n    } else {\n      if( options.directed ){\n        roots = nodes.roots();\n      } else {\n        var components = [];\n        var unhandledNodes = nodes;\n\n        while( unhandledNodes.length > 0 ){\n          var currComp = cy.collection();\n\n          eles.bfs({\n            roots: unhandledNodes[0],\n            visit: function(i, depth, node, edge, pNode){\n              currComp = currComp.add( node );\n            },\n            directed: false\n          });\n\n          unhandledNodes = unhandledNodes.not( currComp );\n          components.push( currComp );\n        }\n\n        roots = cy.collection();\n        for( var i = 0; i < components.length; i++ ){\n          var comp = components[i];\n          var maxDegree = comp.maxDegree( false );\n          var compRoots = comp.filter(function(){\n            return this.degree(false) === maxDegree;\n          });\n\n          roots = roots.add( compRoots );\n        }\n\n      }\n    }\n\n\n    var depths = [];\n    var foundByBfs = {};\n    var id2depth = {};\n    var prevNode = {};\n    var prevEdge = {};\n    var successors = {};\n\n    // find the depths of the nodes\n    graph.bfs({\n      roots: roots,\n      directed: options.directed,\n      visit: function(i, depth, node, edge, pNode){\n        var ele = this[0];\n        var id = ele.id();\n\n        if( !depths[depth] ){\n          depths[depth] = [];\n        }\n\n        depths[depth].push( ele );\n        foundByBfs[ id ] = true;\n        id2depth[ id ] = depth;\n        prevNode[ id ] = pNode;\n        prevEdge[ id ] = edge;\n\n        if( pNode ){\n          var prevId = pNode.id();\n          var succ = successors[ prevId ] = successors[ prevId ] || [];\n\n          succ.push( node );\n        }\n      }\n    });\n\n    // check for nodes not found by bfs\n    var orphanNodes = [];\n    for( var i = 0; i < nodes.length; i++ ){\n      var ele = nodes[i];\n\n      if( foundByBfs[ ele.id() ] ){\n        continue;\n      } else {\n        orphanNodes.push( ele );\n      }\n    }\n\n    // assign orphan nodes a depth from their neighborhood\n    var maxChecks = orphanNodes.length * 3;\n    var checks = 0;\n    while( orphanNodes.length !== 0 && checks < maxChecks ){\n      var node = orphanNodes.shift();\n      var neighbors = node.neighborhood().nodes();\n      var assignedDepth = false;\n\n      for( var i = 0; i < neighbors.length; i++ ){\n        var depth = id2depth[ neighbors[i].id() ];\n\n        if( depth !== undefined ){\n          depths[depth].push( node );\n          assignedDepth = true;\n          break;\n        }\n      }\n\n      if( !assignedDepth ){\n        orphanNodes.push( node );\n      }\n\n      checks++;\n    }\n\n    // assign orphan nodes that are still left to the depth of their subgraph\n    while( orphanNodes.length !== 0 ){\n      var node = orphanNodes.shift();\n      //var subgraph = graph.bfs( node ).path;\n      var assignedDepth = false;\n\n      // for( var i = 0; i < subgraph.length; i++ ){\n      //   var depth = id2depth[ subgraph[i].id() ];\n\n      //   if( depth !== undefined ){\n      //     depths[depth].push( node );\n      //     assignedDepth = true;\n      //     break;\n      //   }\n      // }\n\n      if( !assignedDepth ){ // worst case if the graph really isn't tree friendly, then just dump it in 0\n        if( depths.length === 0 ){\n          depths.push([]);\n        }\n\n        depths[0].push( node );\n      }\n    }\n\n    // assign the nodes a depth and index\n    var assignDepthsToEles = function(){\n      for( var i = 0; i < depths.length; i++ ){\n        var eles = depths[i];\n\n        for( var j = 0; j < eles.length; j++ ){\n          var ele = eles[j];\n\n          ele._private.scratch.breadthfirst = {\n            depth: i,\n            index: j\n          };\n        }\n      }\n    };\n    assignDepthsToEles();\n\n\n    var intersectsDepth = function( node ){ // returns true if has edges pointing in from a higher depth\n      var edges = node.connectedEdges(function(){\n        return this.data('target') === node.id();\n      });\n      var thisInfo = node._private.scratch.breadthfirst;\n      var highestDepthOfOther = 0;\n      var highestOther;\n      for( var i = 0; i < edges.length; i++ ){\n        var edge = edges[i];\n        var otherNode = edge.source()[0];\n        var otherInfo = otherNode._private.scratch.breadthfirst;\n\n        if( thisInfo.depth <= otherInfo.depth && highestDepthOfOther < otherInfo.depth ){\n          highestDepthOfOther = otherInfo.depth;\n          highestOther = otherNode;\n        }\n      }\n\n      return highestOther;\n    };\n\n     // make maximal if so set by adjusting depths\n    for( var adj = 0; adj < options.maximalAdjustments; adj++ ){\n\n      var nDepths = depths.length;\n      var elesToMove = [];\n      for( var i = 0; i < nDepths; i++ ){\n        var depth = depths[i];\n\n        var nDepth = depth.length;\n        for( var j = 0; j < nDepth; j++ ){\n          var ele = depth[j];\n          var info = ele._private.scratch.breadthfirst;\n          var intEle = intersectsDepth(ele);\n\n          if( intEle ){\n            info.intEle = intEle;\n            elesToMove.push( ele );\n          }\n        }\n      }\n\n      for( var i = 0; i < elesToMove.length; i++ ){\n        var ele = elesToMove[i];\n        var info = ele._private.scratch.breadthfirst;\n        var intEle = info.intEle;\n        var intInfo = intEle._private.scratch.breadthfirst;\n\n        depths[ info.depth ].splice( info.index, 1 ); // remove from old depth & index\n\n        // add to end of new depth\n        var newDepth = intInfo.depth + 1;\n        while( newDepth > depths.length - 1 ){\n          depths.push([]);\n        }\n        depths[ newDepth ].push( ele );\n\n        info.depth = newDepth;\n        info.index = depths[newDepth].length - 1;\n      }\n\n      assignDepthsToEles();\n    }\n\n    // find min distance we need to leave between nodes\n    var minDistance = 0;\n    if( options.avoidOverlap ){\n      for( var i = 0; i < nodes.length; i++ ){\n        var w = nodes[i].outerWidth();\n        var h = nodes[i].outerHeight();\n\n        minDistance = Math.max(minDistance, w, h);\n      }\n      minDistance *= options.spacingFactor; // just to have some nice spacing\n    }\n\n    // get the weighted percent for an element based on its connectivity to other levels\n    var cachedWeightedPercent = {};\n    var getWeightedPercent = function( ele ){\n      if( cachedWeightedPercent[ ele.id() ] ){\n        return cachedWeightedPercent[ ele.id() ];\n      }\n\n      var eleDepth = ele._private.scratch.breadthfirst.depth;\n      var neighbors = ele.neighborhood().nodes().not(':parent');\n      var percent = 0;\n      var samples = 0;\n\n      for( var i = 0; i < neighbors.length; i++ ){\n        var neighbor = neighbors[i];\n        var bf = neighbor._private.scratch.breadthfirst;\n        var index = bf.index;\n        var depth = bf.depth;\n        var nDepth = depths[depth].length;\n\n        if( eleDepth > depth || eleDepth === 0 ){ // only get influenced by elements above\n          percent += index / nDepth;\n          samples++;\n        }\n      }\n\n      samples = Math.max(1, samples);\n      percent = percent / samples;\n\n      if( samples === 0 ){ // so lone nodes have a \"don't care\" state in sorting\n        percent = undefined;\n      }\n\n      cachedWeightedPercent[ ele.id() ] = percent;\n      return percent;\n    };\n\n\n    // rearrange the indices in each depth level based on connectivity\n\n    var sortFn = function(a, b){\n      var apct = getWeightedPercent( a );\n      var bpct = getWeightedPercent( b );\n\n      return apct - bpct;\n    };\n\n    for( var times = 0; times < 3; times++ ){ // do it a few times b/c the depths are dynamic and we want a more stable result\n\n      for( var i = 0; i < depths.length; i++ ){\n        depths[i] = depths[i].sort( sortFn );\n      }\n      assignDepthsToEles(); // and update\n\n    }\n\n    var biggestDepthSize = 0;\n    for( var i = 0; i < depths.length; i++ ){\n      biggestDepthSize = Math.max( depths[i].length, biggestDepthSize );\n    }\n\n    var center = {\n      x: bb.x1 + bb.w/2,\n      y: bb.x1 + bb.h/2\n    };\n\n    var getPosition = function( ele, isBottomDepth ){\n      var info = ele._private.scratch.breadthfirst;\n      var depth = info.depth;\n      var index = info.index;\n      var depthSize = depths[depth].length;\n\n      var distanceX = Math.max( bb.w / (depthSize + 1), minDistance );\n      var distanceY = Math.max( bb.h / (depths.length + 1), minDistance );\n      var radiusStepSize = Math.min( bb.w / 2 / depths.length, bb.h / 2 / depths.length );\n      radiusStepSize = Math.max( radiusStepSize, minDistance );\n\n      if( !options.circle ){\n\n        var epos = {\n          x: center.x + (index + 1 - (depthSize + 1)/2) * distanceX,\n          y: (depth + 1) * distanceY\n        };\n\n        if( isBottomDepth ){\n          return epos;\n        }\n\n        // var succs = successors[ ele.id() ];\n        // if( succs ){\n        //   epos.x = 0;\n        //\n        //   for( var i = 0 ; i < succs.length; i++ ){\n        //     var spos = pos[ succs[i].id() ];\n        //\n        //     epos.x += spos.x;\n        //   }\n        //\n        //   epos.x /= succs.length;\n        // } else {\n        //   //debugger;\n        // }\n\n        return epos;\n\n      } else {\n        if( options.circle ){\n          var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize/2 : 0);\n          var theta = 2 * Math.PI / depths[depth].length * index;\n\n          if( depth === 0 && depths[0].length === 1 ){\n            radius = 1;\n          }\n\n          return {\n            x: center.x + radius * Math.cos(theta),\n            y: center.y + radius * Math.sin(theta)\n          };\n\n        } else {\n          return {\n            x: center.x + (index + 1 - (depthSize + 1)/2) * distanceX,\n            y: (depth + 1) * distanceY\n          };\n        }\n      }\n\n    };\n\n    // get positions in reverse depth order\n    var pos = {};\n    for( var i = depths.length - 1; i >=0; i-- ){\n      var depth = depths[i];\n\n      for( var j = 0; j < depth.length; j++ ){\n        var node = depth[j];\n\n        pos[ node.id() ] = getPosition( node, i === depths.length - 1 );\n      }\n    }\n\n    nodes.layoutPositions(this, options, function(){\n      return pos[ this.id() ];\n    });\n\n    return this; // chaining\n  };\n\n  $$('layout', 'breadthfirst', BreadthFirstLayout);\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var defaults = {\n    fit: true, // whether to fit the viewport to the graph\n    padding: 30, // the padding on fit\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space\n    radius: undefined, // the radius of the circle\n    startAngle: 3/2 * Math.PI, // the position of the first node\n    counterclockwise: false, // whether the layout should go counterclockwise (true) or clockwise (false)\n    sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    ready: undefined, // callback on layoutready\n    stop: undefined // callback on layoutstop\n  };\n\n  function CircleLayout( options ){\n    this.options = $$.util.extend({}, defaults, options);\n  }\n\n  CircleLayout.prototype.run = function(){\n    var params = this.options;\n    var options = params;\n\n    var cy = params.cy;\n    var eles = options.eles;\n\n    var nodes = eles.nodes().not(':parent');\n\n    if( options.sort ){\n      nodes = nodes.sort( options.sort );\n    }\n\n    var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n      x1: 0, y1: 0, w: cy.width(), h: cy.height()\n    } );\n\n    var center = {\n      x: bb.x1 + bb.w/2,\n      y: bb.y1 + bb.h/2\n    };\n\n    var theta = options.startAngle;\n    var dTheta = 2 * Math.PI / nodes.length;\n    var r;\n\n    var minDistance = 0;\n    for( var i = 0; i < nodes.length; i++ ){\n      var w = nodes[i].outerWidth();\n      var h = nodes[i].outerHeight();\n\n      minDistance = Math.max(minDistance, w, h);\n    }\n\n    if( $$.is.number(options.radius) ){\n      r = options.radius;\n    } else if( nodes.length <= 1 ){\n      r = 0;\n    } else {\n      r = Math.min( bb.h, bb.w )/2 - minDistance;\n    }\n\n    // calculate the radius\n    if( nodes.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)\n      minDistance *= 1.75; // just to have some nice spacing\n\n      var dTheta = 2 * Math.PI / nodes.length;\n      var dcos = Math.cos(dTheta) - Math.cos(0);\n      var dsin = Math.sin(dTheta) - Math.sin(0);\n      var rMin = Math.sqrt( minDistance * minDistance / ( dcos*dcos + dsin*dsin ) ); // s.t. no nodes overlapping\n      r = Math.max( rMin, r );\n    }\n\n    var getPos = function( i, ele ){\n      var rx = r * Math.cos( theta );\n      var ry = r * Math.sin( theta );\n      var pos = {\n        x: center.x + rx,\n        y: center.y + ry\n      };\n\n      theta = options.counterclockwise ? theta - dTheta : theta + dTheta;\n      return pos;\n    };\n\n    nodes.layoutPositions( this, options, getPos );\n\n    return this; // chaining\n  };\n\n  $$('layout', 'circle', CircleLayout);\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // default layout options\n  var defaults = {\n    animate: true, // whether to show the layout as it's running\n    refresh: 1, // number of ticks per frame; higher is faster but more jerky\n    maxSimulationTime: 4000, // max length in ms to run the layout\n    ungrabifyWhileSimulating: false, // so you can't drag nodes during layout\n    fit: true, // on every layout reposition of nodes, fit the viewport\n    padding: 30, // padding around the simulation\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n\n    // layout event callbacks\n    ready: function(){}, // on layoutready\n    stop: function(){}, // on layoutstop\n\n    // positioning options\n    randomize: false, // use random node positions at beginning of layout\n    avoidOverlap: true, // if true, prevents overlap of node bounding boxes\n    handleDisconnected: true, // if true, avoids disconnected components from overlapping\n    nodeSpacing: function( node ){ return 10; }, // extra spacing around nodes\n    flow: undefined, // use DAG/tree flow layout if specified, e.g. { axis: 'y', minSeparation: 30 }\n    alignment: undefined, // relative alignment constraints on nodes, e.g. function( node ){ return { x: 0, y: 1 } }\n\n    // different methods of specifying edge length\n    // each can be a constant numerical value or a function like `function( edge ){ return 2; }`\n    edgeLength: undefined, // sets edge length directly in simulation\n    edgeSymDiffLength: undefined, // symmetric diff edge length in simulation\n    edgeJaccardLength: undefined, // jaccard edge length in simulation\n\n    // iterations of cola algorithm; uses default values on undefined\n    unconstrIter: undefined, // unconstrained initial layout iterations\n    userConstIter: undefined, // initial layout iterations with user-specified constraints\n    allConstIter: undefined, // initial layout iterations with all constraints including non-overlap\n\n    // infinite layout options\n    infinite: false // overrides all other options for a forces-all-the-time mode\n  };\n\n  // constructor\n  // options : object containing layout options\n  function ColaLayout( options ){\n    this.options = $$.util.extend(true, {}, defaults, options);\n  }\n\n  // runs the layout\n  ColaLayout.prototype.run = function(){\n    var layout = this;\n    var options = this.options;\n\n    layout.manuallyStopped = false;\n\n    $$.util.require('cola', function(cola){\n\n      var cy = options.cy; // cy is automatically populated for us in the constructor\n      var eles = options.eles;\n      var nodes = eles.nodes();\n      var edges = eles.edges();\n      var ready = false;\n\n      var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n        x1: 0, y1: 0, w: cy.width(), h: cy.height()\n      } );\n\n      var getOptVal = function( val, ele ){\n        if( $$.is.fn(val) ){\n          var fn = val;\n          return fn.apply( ele, [ ele ] );\n        } else {\n          return val;\n        }\n      };\n\n      var updateNodePositions = function(){\n        var x = { min: Infinity, max: -Infinity };\n        var y = { min: Infinity, max: -Infinity };\n\n        for( var i = 0; i < nodes.length; i++ ){\n          var node = nodes[i];\n          var scratch = node._private.scratch.cola;\n\n          x.min = Math.min( x.min, scratch.x || 0 );\n          x.max = Math.max( x.max, scratch.x || 0 );\n\n          y.min = Math.min( y.min, scratch.y || 0 );\n          y.max = Math.max( y.max, scratch.y || 0 );\n\n          // update node dims\n          if( !scratch.updatedDims ){\n            var nbb = node.boundingBox();\n            var padding = getOptVal( options.nodeSpacing, node );\n\n            scratch.width = nbb.w + 2*padding;\n            scratch.height = nbb.h + 2*padding;\n          }\n        }\n\n        nodes.positions(function(i, node){\n          var scratch = node._private.scratch.cola;\n          var retPos;\n\n          if( !node.grabbed() && !node.isParent() ){\n            retPos = {\n              x: bb.x1 + scratch.x - x.min,\n              y: bb.y1 + scratch.y - y.min\n            };\n\n            if( !$$.is.number(retPos.x) || !$$.is.number(retPos.y) ){\n              retPos = undefined;\n            }\n          }\n\n          return retPos;\n        });\n\n        nodes.updateCompoundBounds(); // because the way this layout sets positions is buggy for some reason; ref #878\n\n        if( !ready ){\n          onReady();\n          ready = true;\n        }\n\n        if( options.fit ){\n          cy.fit( options.padding );\n        }\n      };\n\n      var onDone = function(){\n        if( options.ungrabifyWhileSimulating ){\n          grabbableNodes.grabify();\n        }\n\n        nodes.off('grab free position', grabHandler);\n        nodes.off('lock unlock', lockHandler);\n\n        // trigger layoutstop when the layout stops (e.g. finishes)\n        layout.one('layoutstop', options.stop);\n        layout.trigger({ type: 'layoutstop', layout: layout });\n      };\n\n      var onReady = function(){\n        // trigger layoutready when each node has had its position set at least once\n        layout.one('layoutready', options.ready);\n        layout.trigger({ type: 'layoutready', layout: layout });\n      };\n\n      var ticksPerFrame = options.refresh;\n      var tickSkip = 1; // frames until a tick; used to slow down sim for debugging\n\n      if( options.refresh < 0 ){\n        tickSkip = Math.abs( options.refresh );\n        ticksPerFrame = 1;\n      } else {\n        ticksPerFrame = Math.max( 1, ticksPerFrame ); // at least 1\n      }\n\n      var adaptor = layout.adaptor = cola.adaptor({\n        trigger: function( e ){ // on sim event\n          var TICK = cola.EventType ? cola.EventType.tick : null;\n          var END = cola.EventType ? cola.EventType.end : null;\n\n          switch( e.type ){\n            case 'tick':\n            case TICK:\n              if( options.animate ){\n                updateNodePositions();\n              }\n              break;\n\n            case 'end':\n            case END:\n              updateNodePositions();\n              if( !options.infinite ){ onDone(); }\n              break;\n          }\n        },\n\n        kick: function(){ // kick off the simulation\n          var skip = 0;\n\n          var inftick = function(){\n            if( layout.manuallyStopped ){\n              onDone();\n\n              return true;\n            }\n\n            var ret = adaptor.tick();\n\n            if( ret && options.infinite ){ // resume layout if done\n              adaptor.resume(); // resume => new kick\n            }\n\n            return ret; // allow regular finish b/c of new kick\n          };\n\n          var multitick = function(){ // multiple ticks in a row\n            var ret;\n\n            // skip ticks to slow down layout for debugging\n            // var thisSkip = skip;\n            // skip = (skip + 1) % tickSkip;\n            // if( thisSkip !== 0 ){\n            //   return false;\n            // }\n\n            for( var i = 0; i < ticksPerFrame && !ret; i++ ){\n              ret = ret || inftick(); // pick up true ret vals => sim done\n            }\n\n            return ret;\n          };\n\n          if( options.animate ){\n            var frame = function(){\n              if( multitick() ){ return; }\n\n              $$.util.requestAnimationFrame( frame );\n            };\n\n            $$.util.requestAnimationFrame( frame );\n          } else {\n            while( !inftick() ){}\n          }\n        },\n\n        on: function( type, listener ){}, // dummy; not needed\n\n        drag: function(){} // not needed for our case\n      });\n      layout.adaptor = adaptor;\n\n      // if set no grabbing during layout\n      var grabbableNodes = nodes.filter(':grabbable');\n      if( options.ungrabifyWhileSimulating ){\n        grabbableNodes.ungrabify();\n      }\n\n      // handle node dragging\n      var grabHandler;\n      nodes.on('grab free position', grabHandler = function(e){\n        var node = this;\n        var scrCola = node._private.scratch.cola;\n        var pos = node._private.position;\n\n        // update cola pos obj\n        scrCola.x = pos.x - bb.x1;\n        scrCola.y = pos.y - bb.y1;\n\n        switch( e.type ){\n          case 'grab':\n            adaptor.dragstart( scrCola );\n            adaptor.resume();\n            break;\n          case 'free':\n            adaptor.dragend( scrCola );\n            break;\n        }\n\n      });\n\n      var lockHandler;\n      nodes.on('lock unlock', lockHandler = function(e){\n        var node = this;\n        var scrCola = node._private.scratch.cola;\n\n        if( node.locked() ){\n          adaptor.dragstart( scrCola );\n        } else {\n          adaptor.dragend( scrCola );\n        }\n      });\n\n      var nonparentNodes = nodes.stdFilter(function( node ){\n        return !node.isParent();\n      });\n\n      // add nodes to cola\n      adaptor.nodes( nonparentNodes.map(function( node, i ){\n        var padding = getOptVal( options.nodeSpacing, node );\n        var pos = node.position();\n        var nbb = node.boundingBox();\n\n        var struct = node._private.scratch.cola = {\n          x: options.randomize || pos.x === undefined ? Math.round( Math.random() * bb.w ) : pos.x,\n          y: options.randomize || pos.y === undefined ? Math.round( Math.random() * bb.h ) : pos.y,\n          width: nbb.w + 2*padding,\n          height: nbb.h + 2*padding,\n          index: i\n        };\n\n        return struct;\n      }) );\n\n      if( options.alignment ){ // then set alignment constraints\n\n        var offsetsX = [];\n        var offsetsY = [];\n\n        nonparentNodes.forEach(function( node ){\n          var align = getOptVal( options.alignment, node );\n          var scrCola = node._private.scratch.cola;\n          var index = scrCola.index;\n\n          if( !align ){ return; }\n\n          if( align.x != null ){\n            offsetsX.push({\n              node: index,\n              offset: align.x\n            });\n          }\n\n          if( align.y != null ){\n            offsetsY.push({\n              node: index,\n              offset: align.y\n            });\n          }\n        });\n\n        // add alignment constraints on nodes\n        var constraints = [];\n\n        if( offsetsX.length > 0 ){\n          constraints.push({\n            type: 'alignment',\n            axis: 'x',\n            offsets: offsetsX\n          });\n        }\n\n        if( offsetsY.length > 0 ){\n          constraints.push({\n            type: 'alignment',\n            axis: 'y',\n            offsets: offsetsY\n          });\n        }\n\n        adaptor.constraints( constraints );\n\n      }\n\n      // add compound nodes to cola\n      adaptor.groups( nodes.stdFilter(function( node ){\n        return node.isParent();\n      }).map(function( node, i ){ // add basic group incl leaf nodes\n        var style = node._private.style;\n\n        var optPadding = getOptVal( options.nodeSpacing, node );\n\n        var pleft = style['padding-left'].pxValue + optPadding;\n        var pright = style['padding-right'].pxValue + optPadding;\n        var ptop = style['padding-top'].pxValue + optPadding;\n        var pbottom = style['padding-bottom'].pxValue + optPadding;\n\n        node._private.scratch.cola = {\n          index: i,\n\n          padding: Math.max( pleft, pright, ptop, pbottom ),\n\n          leaves: node.descendants().stdFilter(function( child ){\n            return !child.isParent();\n          }).map(function( child ){\n            return child[0]._private.scratch.cola.index;\n          })\n        };\n\n        return node;\n      }).map(function( node ){ // add subgroups\n        node._private.scratch.cola.groups = node.descendants().stdFilter(function( child ){\n          return child.isParent();\n        }).map(function( child ){\n          return child._private.scratch.cola.index;\n        });\n\n        return node._private.scratch.cola;\n      }) );\n\n      // get the edge length setting mechanism\n      var length;\n      var lengthFnName;\n      if( options.edgeLength != null ){\n        length = options.edgeLength;\n        lengthFnName = 'linkDistance';\n      } else if( options.edgeSymDiffLength != null ){\n        length = options.edgeSymDiffLength;\n        lengthFnName = 'symmetricDiffLinkLengths';\n      } else if( options.edgeJaccardLength != null ){\n        length = options.edgeJaccardLength;\n        lengthFnName = 'jaccardLinkLengths';\n      } else {\n        length = 100;\n        lengthFnName = 'linkDistance';\n      }\n\n      var lengthGetter = function( link ){\n        return link.calcLength;\n      };\n\n      // add the edges to cola\n      adaptor.links( edges.stdFilter(function( edge ){\n        return !edge.source().isParent() && !edge.target().isParent();\n      }).map(function( edge, i ){\n        var c = edge._private.scratch.cola = {\n          source: edge.source()[0]._private.scratch.cola.index,\n          target: edge.target()[0]._private.scratch.cola.index\n        };\n\n        if( length != null ){\n          c.calcLength = getOptVal( length, edge );\n        }\n\n        return c;\n      }) );\n\n      adaptor.size([ bb.w, bb.h ]);\n\n      if( length != null ){\n        adaptor[ lengthFnName ]( lengthGetter );\n      }\n\n      // set the flow of cola\n      if( options.flow ){\n        var flow;\n        var defAxis = 'y';\n        var defMinSep = 50;\n\n        if( $$.is.string(options.flow) ){\n          flow = {\n            axis: options.flow,\n            minSeparation: defMinSep\n          };\n        } else if( $$.is.number(options.flow) ){\n          flow = {\n            axis: defAxis,\n            minSeparation: options.flow\n          };\n        } else if( $$.is.plainObject(options.flow) ){\n          flow = options.flow;\n\n          flow.axis = flow.axis || defAxis;\n          flow.minSeparation = flow.minSeparation != null ? flow.minSeparation : defMinSep;\n        } else { // e.g. options.flow: true\n          flow = {\n            axis: defAxis,\n            minSeparation: defMinSep\n          };\n        }\n\n        adaptor.flowLayout( flow.axis , flow.minSeparation );\n      }\n\n      layout.trigger({ type: 'layoutstart', layout: layout });\n\n      adaptor\n        .avoidOverlaps( options.avoidOverlap )\n        .handleDisconnected( options.handleDisconnected )\n        .start( options.unconstrIter, options.userConstIter, options.allConstIter)\n      ;\n\n      if( !options.infinite ){\n        setTimeout(function(){\n          if( !layout.manuallyStopped ){\n            adaptor.stop();\n          }\n        }, options.maxSimulationTime);\n      }\n\n    }); // require\n\n    return this; // chaining\n  };\n\n  // called on continuous layouts to stop them before they finish\n  ColaLayout.prototype.stop = function(){\n    if( this.adaptor ){\n      this.manuallyStopped = true;\n      this.adaptor.stop();\n    }\n\n    return this; // chaining\n  };\n\n  // register the layout\n  $$('layout', 'cola', ColaLayout);\n\n})(cytoscape);\n\n;(function($$){ 'use strict';\n\n  var defaults = {\n    fit: true, // whether to fit the viewport to the graph\n    padding: 30, // the padding on fit\n    startAngle: 3/2 * Math.PI, // the position of the first node\n    counterclockwise: false, // whether the layout should go counterclockwise/anticlockwise (true) or clockwise (false)\n    minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space\n    height: undefined, // height of layout area (overrides container height)\n    width: undefined, // width of layout area (overrides container width)\n    concentric: function(node){ // returns numeric value for each node, placing higher nodes in levels towards the centre\n      return node.degree();\n    },\n    levelWidth: function(nodes){ // the variation of concentric values in each level\n      return nodes.maxDegree() / 4;\n    },\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    ready: undefined, // callback on layoutready\n    stop: undefined // callback on layoutstop\n  };\n\n  function ConcentricLayout( options ){\n    this.options = $$.util.extend({}, defaults, options);\n  }\n\n  ConcentricLayout.prototype.run = function(){\n    var params = this.options;\n    var options = params;\n\n    var cy = params.cy;\n\n    var eles = options.eles;\n    var nodes = eles.nodes().not(':parent');\n\n    var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n      x1: 0, y1: 0, w: cy.width(), h: cy.height()\n    } );\n\n    var center = {\n      x: bb.x1 + bb.w/2,\n      y: bb.y1 + bb.h/2\n    };\n\n    var nodeValues = []; // { node, value }\n    var theta = options.startAngle;\n    var maxNodeSize = 0;\n\n    for( var i = 0; i < nodes.length; i++ ){\n      var node = nodes[i];\n      var value;\n\n      // calculate the node value\n      value = options.concentric.apply(node, [ node ]);\n      nodeValues.push({\n        value: value,\n        node: node\n      });\n\n      // for style mapping\n      node._private.scratch.concentric = value;\n    }\n\n    // in case we used the `concentric` in style\n    nodes.updateStyle();\n\n    // calculate max size now based on potentially updated mappers\n    for( var i = 0; i < nodes.length; i++ ){\n      var node = nodes[i];\n\n      maxNodeSize = Math.max( maxNodeSize, node.outerWidth(), node.outerHeight() );\n    }\n\n    // sort node values in descreasing order\n    nodeValues.sort(function(a, b){\n      return b.value - a.value;\n    });\n\n    var levelWidth = options.levelWidth( nodes );\n\n    // put the values into levels\n    var levels = [ [] ];\n    var currentLevel = levels[0];\n    for( var i = 0; i < nodeValues.length; i++ ){\n      var val = nodeValues[i];\n\n      if( currentLevel.length > 0 ){\n        var diff = Math.abs( currentLevel[0].value - val.value );\n\n        if( diff >= levelWidth ){\n          currentLevel = [];\n          levels.push( currentLevel );\n        }\n      }\n\n      currentLevel.push( val );\n    }\n\n    // create positions from levels\n\n    var pos = {}; // id => position\n    var r = 0;\n    var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes\n\n    if( !options.avoidOverlap ){ // then strictly constrain to bb\n      var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;\n      var maxR = ( Math.min(bb.w, bb.h) / 2 - minDist );\n      var rStep = maxR / ( levels.length + firstLvlHasMulti ? 1 : 0 );\n\n      minDist = Math.min( minDist, rStep );\n    }\n\n    for( var i = 0; i < levels.length; i++ ){\n      var level = levels[i];\n      var dTheta = 2 * Math.PI / level.length;\n\n      // calculate the radius\n      if( level.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)\n        var dcos = Math.cos(dTheta) - Math.cos(0);\n        var dsin = Math.sin(dTheta) - Math.sin(0);\n        var rMin = Math.sqrt( minDist * minDist / ( dcos*dcos + dsin*dsin ) ); // s.t. no nodes overlapping\n        r = Math.max( rMin, r );\n      }\n\n      for( var j = 0; j < level.length; j++ ){\n        var val = level[j];\n        var theta = options.startAngle + (options.counterclockwise ? -1 : 1) * dTheta * j;\n\n        var p = {\n          x: center.x + r * Math.cos(theta),\n          y: center.y + r * Math.sin(theta)\n        };\n\n        pos[ val.node.id() ] = p;\n      }\n\n      r += minDist;\n\n    }\n\n    // position the nodes\n    nodes.layoutPositions(this, options, function(){\n      var id = this.id();\n\n      return pos[id];\n    });\n\n    return this; // chaining\n  };\n\n  $$('layout', 'concentric', ConcentricLayout);\n\n})( cytoscape );\n\n/*\n  The CoSE layout was written by Gerardo Huck.\n\n  Modifications tracked on Github.\n*/\n\n;(function($$) { 'use strict';\n\n  var DEBUG;\n\n  /**\n   * @brief :  default layout options\n   */\n  var defaults = {\n    // Called on `layoutready`\n    ready               : function() {},\n\n    // Called on `layoutstop`\n    stop                : function() {},\n\n    // Whether to animate while running the layout\n    animate             : true,\n\n    // Number of iterations between consecutive screen positions update (0 -> only updated on the end)\n    refresh             : 4,\n\n    // Whether to fit the network view after when done\n    fit                 : true,\n\n    // Padding on fit\n    padding             : 30,\n\n    // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    boundingBox         : undefined,\n\n    // Whether to randomize node positions on the beginning\n    randomize           : true,\n\n    // Whether to use the JS console to print debug messages\n    debug               : false,\n\n    // Node repulsion (non overlapping) multiplier\n    nodeRepulsion       : 400000,\n\n    // Node repulsion (overlapping) multiplier\n    nodeOverlap         : 10,\n\n    // Ideal edge (non nested) length\n    idealEdgeLength     : 10,\n\n    // Divisor to compute edge forces\n    edgeElasticity      : 100,\n\n    // Nesting factor (multiplier) to compute ideal edge length for nested edges\n    nestingFactor       : 5,\n\n    // Gravity force (constant)\n    gravity             : 250,\n\n    // Maximum number of iterations to perform\n    numIter             : 100,\n\n    // Initial temperature (maximum node displacement)\n    initialTemp         : 200,\n\n    // Cooling factor (how the temperature is reduced between consecutive iterations\n    coolingFactor       : 0.95,\n\n    // Lower temperature threshold (below this point the layout will end)\n    minTemp             : 1.0\n  };\n\n\n  /**\n   * @brief       : constructor\n   * @arg options : object containing layout options\n   */\n  function CoseLayout(options) {\n    this.options = $$.util.extend({}, defaults, options);\n  }\n\n\n  /**\n   * @brief : runs the layout\n   */\n  CoseLayout.prototype.run = function() {\n    var options = this.options;\n    var cy      = options.cy;\n    var layout  = this;\n\n    layout.stopped = false;\n\n    layout.trigger({ type: 'layoutstart', layout: layout });\n\n    // Set DEBUG - Global variable\n    if (true === options.debug) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n\n    // Get start time\n    var startTime = new Date();\n\n    // Initialize layout info\n    var layoutInfo = createLayoutInfo(cy, layout, options);\n\n    // Show LayoutInfo contents if debugging\n    if (DEBUG) {\n      printLayoutInfo(layoutInfo);\n    }\n\n    // If required, randomize node positions\n    if (true === options.randomize) {\n      randomizePositions(layoutInfo, cy);\n    }\n\n    updatePositions(layoutInfo, cy, options);\n\n    var mainLoop = function(i){\n      if( layout.stopped ){\n        // logDebug(\"Layout manually stopped. Stopping computation in step \" + i);\n        return false;\n      }\n\n      // Do one step in the phisical simulation\n      step(layoutInfo, cy, options, i);\n\n      // Update temperature\n      layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;\n      // logDebug(\"New temperature: \" + layoutInfo.temperature);\n\n      if (layoutInfo.temperature < options.minTemp) {\n        // logDebug(\"Temperature drop below minimum threshold. Stopping computation in step \" + i);\n        return false;\n      }\n\n      return true;\n    };\n\n    var done = function(){\n      refreshPositions(layoutInfo, cy, options);\n\n      // Fit the graph if necessary\n      if (true === options.fit) {\n        cy.fit( options.padding );\n      }\n\n      // Get end time\n      var endTime = new Date();\n\n      console.info('Layout took ' + (endTime - startTime) + ' ms');\n\n      // Layout has finished\n      layout.one('layoutstop', options.stop);\n      layout.trigger({ type: 'layoutstop', layout: layout });\n    };\n\n    if( options.animate ){\n      var i = 0;\n      var frame = function(){\n\n        var f = 0;\n        var loopRet;\n        while( f < options.refresh && i < options.numIter ){\n          var loopRet = mainLoop(i);\n          if( loopRet === false ){ break; }\n\n          f++;\n          i++;\n        }\n\n        refreshPositions(layoutInfo, cy, options);\n        if( options.fit ){\n          cy.fit( options.padding );\n        }\n\n        if ( loopRet !== false && i + 1 < options.numIter ) {\n          $$.util.requestAnimationFrame( frame );\n        } else {\n          done();\n        }\n      };\n\n      $$.util.requestAnimationFrame( frame );\n    } else {\n      for (var i = 0; i < options.numIter; i++) {\n        if( mainLoop(i) === false ){ break; }\n      }\n\n      done();\n    }\n\n    return this; // chaining\n  };\n\n\n  /**\n   * @brief : called on continuous layouts to stop them before they finish\n   */\n  CoseLayout.prototype.stop = function(){\n    this.stopped = true;\n\n    return this; // chaining\n  };\n\n\n  /**\n   * @brief     : Creates an object which is contains all the data\n   *              used in the layout process\n   * @arg cy    : cytoscape.js object\n   * @return    : layoutInfo object initialized\n   */\n  var createLayoutInfo = function(cy, layout, options) {\n    // Shortcut\n    var edges = options.eles.edges();\n    var nodes = options.eles.nodes();\n\n    var layoutInfo   = {\n      layout       : layout,\n      layoutNodes  : [],\n      idToIndex    : {},\n      nodeSize     : nodes.size(),\n      graphSet     : [],\n      indexToGraph : [],\n      layoutEdges  : [],\n      edgeSize     : edges.size(),\n      temperature  : options.initialTemp,\n      clientWidth  : cy.width(),\n      clientHeight : cy.width(),\n      boundingBox  : $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n                       x1: 0, y1: 0, w: cy.width(), h: cy.height()\n                     } )\n    };\n\n    // Iterate over all nodes, creating layout nodes\n    for (var i = 0; i < layoutInfo.nodeSize; i++) {\n      var tempNode        = {};\n      tempNode.id         = nodes[i].data('id');\n      tempNode.parentId   = nodes[i].data('parent');\n      tempNode.children   = [];\n      tempNode.positionX  = nodes[i].position('x');\n      tempNode.positionY  = nodes[i].position('y');\n      tempNode.offsetX    = 0;\n      tempNode.offsetY    = 0;\n      tempNode.height     = nodes[i].height();\n      tempNode.width      = nodes[i].width();\n      tempNode.maxX       = tempNode.positionX + tempNode.width  / 2;\n      tempNode.minX       = tempNode.positionX - tempNode.width  / 2;\n      tempNode.maxY       = tempNode.positionY + tempNode.height / 2;\n      tempNode.minY       = tempNode.positionY - tempNode.height / 2;\n      tempNode.padLeft    = nodes[i]._private.style['padding-left'].pxValue;\n      tempNode.padRight   = nodes[i]._private.style['padding-right'].pxValue;\n      tempNode.padTop     = nodes[i]._private.style['padding-top'].pxValue;\n      tempNode.padBottom  = nodes[i]._private.style['padding-bottom'].pxValue;\n\n      // Add new node\n      layoutInfo.layoutNodes.push(tempNode);\n      // Add entry to id-index map\n      layoutInfo.idToIndex[tempNode.id] = i;\n    }\n\n    // Inline implementation of a queue, used for traversing the graph in BFS order\n    var queue = [];\n    var start = 0;   // Points to the start the queue\n    var end   = -1;  // Points to the end of the queue\n\n    var tempGraph = [];\n\n    // Second pass to add child information and\n    // initialize queue for hierarchical traversal\n    for (var i = 0; i < layoutInfo.nodeSize; i++) {\n      var n = layoutInfo.layoutNodes[i];\n      var p_id = n.parentId;\n      // Check if node n has a parent node\n      if (null != p_id) {\n      // Add node Id to parent's list of children\n      layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);\n      } else {\n      // If a node doesn't have a parent, then it's in the root graph\n      queue[++end] = n.id;\n      tempGraph.push(n.id);\n      }\n    }\n\n    // Add root graph to graphSet\n    layoutInfo.graphSet.push(tempGraph);\n\n    // Traverse the graph, level by level,\n    while (start <= end) {\n      // Get the node to visit and remove it from queue\n      var node_id  = queue[start++];\n      var node_ix  = layoutInfo.idToIndex[node_id];\n      var node     = layoutInfo.layoutNodes[node_ix];\n      var children = node.children;\n      if (children.length > 0) {\n      // Add children nodes as a new graph to graph set\n      layoutInfo.graphSet.push(children);\n      // Add children to que queue to be visited\n      for (var i = 0; i < children.length; i++) {\n        queue[++end] = children[i];\n      }\n      }\n    }\n\n    // Create indexToGraph map\n    for (var i = 0; i < layoutInfo.graphSet.length; i++) {\n      var graph = layoutInfo.graphSet[i];\n      for (var j = 0; j < graph.length; j++) {\n      var index = layoutInfo.idToIndex[graph[j]];\n      layoutInfo.indexToGraph[index] = i;\n      }\n    }\n\n    // Iterate over all edges, creating Layout Edges\n    for (var i = 0; i < layoutInfo.edgeSize; i++) {\n      var e = edges[i];\n      var tempEdge = {};\n      tempEdge.id       = e.data('id');\n      tempEdge.sourceId = e.data('source');\n      tempEdge.targetId = e.data('target');\n\n      // Compute ideal length\n      var idealLength = options.idealEdgeLength;\n\n      // Check if it's an inter graph edge\n      var sourceIx    = layoutInfo.idToIndex[tempEdge.sourceId];\n      var targetIx    = layoutInfo.idToIndex[tempEdge.targetId];\n      var sourceGraph = layoutInfo.indexToGraph[sourceIx];\n      var targetGraph = layoutInfo.indexToGraph[targetIx];\n\n      if (sourceGraph != targetGraph) {\n      // Find lowest common graph ancestor\n      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);\n\n      // Compute sum of node depths, relative to lca graph\n      var lcaGraph = layoutInfo.graphSet[lca];\n      var depth    = 0;\n\n      // Source depth\n      var tempNode = layoutInfo.layoutNodes[sourceIx];\n      while (-1 === $.inArray(tempNode.id, lcaGraph)) {\n        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];\n        depth++;\n      }\n\n      // Target depth\n      tempNode = layoutInfo.layoutNodes[targetIx];\n      while (-1 === $.inArray(tempNode.id, lcaGraph)) {\n        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];\n        depth++;\n      }\n\n      // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +\n        //  \". Index: \" + lca + \" Contents: \" + lcaGraph.toString() +\n        //  \". Depth: \" + depth);\n\n      // Update idealLength\n      idealLength *= depth * options.nestingFactor;\n      }\n\n      tempEdge.idealLength = idealLength;\n\n      layoutInfo.layoutEdges.push(tempEdge);\n    }\n\n    // Finally, return layoutInfo object\n    return layoutInfo;\n  };\n\n\n  /**\n   * @brief : This function finds the index of the lowest common\n   *          graph ancestor between 2 nodes in the subtree\n   *          (from the graph hierarchy induced tree) whose\n   *          root is graphIx\n   *\n   * @arg node1: node1's ID\n   * @arg node2: node2's ID\n   * @arg layoutInfo: layoutInfo object\n   *\n   */\n  var findLCA = function(node1, node2, layoutInfo) {\n    // Find their common ancester, starting from the root graph\n    var res = findLCA_aux(node1, node2, 0, layoutInfo);\n    if (2 > res.count) {\n      // If aux function couldn't find the common ancester,\n      // then it is the root graph\n      return 0;\n    } else {\n      return res.graph;\n    }\n  };\n\n\n  /**\n   * @brief          : Auxiliary function used for LCA computation\n   *\n   * @arg node1      : node1's ID\n   * @arg node2      : node2's ID\n   * @arg graphIx    : subgraph index\n   * @arg layoutInfo : layoutInfo object\n   *\n   * @return         : object of the form {count: X, graph: Y}, where:\n   *                   X is the number of ancesters (max: 2) found in\n   *                   graphIx (and it's subgraphs),\n   *                   Y is the graph index of the lowest graph containing\n   *                   all X nodes\n   */\n  var findLCA_aux = function(node1, node2, graphIx, layoutInfo) {\n    var graph = layoutInfo.graphSet[graphIx];\n    // If both nodes belongs to graphIx\n    if (-1 < $.inArray(node1, graph) && -1 < $.inArray(node2, graph)) {\n      return {count:2, graph:graphIx};\n    }\n\n    // Make recursive calls for all subgraphs\n    var c = 0;\n    for (var i = 0; i < graph.length; i++) {\n      var nodeId   = graph[i];\n      var nodeIx   = layoutInfo.idToIndex[nodeId];\n      var children = layoutInfo.layoutNodes[nodeIx].children;\n\n      // If the node has no child, skip it\n      if (0 === children.length) {\n      continue;\n      }\n\n      var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];\n      var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);\n      if (0 === result.count) {\n      // Neither node1 nor node2 are present in this subgraph\n      continue;\n      } else if (1 === result.count) {\n      // One of (node1, node2) is present in this subgraph\n      c++;\n      if (2 === c) {\n        // We've already found both nodes, no need to keep searching\n        break;\n      }\n      } else {\n      // Both nodes are present in this subgraph\n      return result;\n      }\n    }\n\n    return {count:c, graph:graphIx};\n  };\n\n\n  /**\n   * @brief: printsLayoutInfo into js console\n   *         Only used for debbuging\n   */\n  var printLayoutInfo = function(layoutInfo) {\n    if (!DEBUG) {\n      return;\n    }\n    console.debug(\"layoutNodes:\");\n    for (var i = 0; i < layoutInfo.nodeSize; i++) {\n      var n = layoutInfo.layoutNodes[i];\n      var s =\n      \"\\nindex: \"     + i +\n      \"\\nId: \"        + n.id +\n      \"\\nChildren: \"  + n.children.toString() +\n      \"\\nparentId: \"  + n.parentId  +\n      \"\\npositionX: \" + n.positionX +\n      \"\\npositionY: \" + n.positionY +\n      \"\\nOffsetX: \" + n.offsetX +\n      \"\\nOffsetY: \" + n.offsetY +\n      \"\\npadLeft: \" + n.padLeft +\n      \"\\npadRight: \" + n.padRight +\n      \"\\npadTop: \" + n.padTop +\n      \"\\npadBottom: \" + n.padBottom;\n\n      console.debug(s);\n    }\n\n    console.debug('idToIndex');\n    for (var i in layoutInfo.idToIndex) {\n      console.debug(\"Id: \" + i + \"\\nIndex: \" + layoutInfo.idToIndex[i]);\n    }\n\n    console.debug('Graph Set');\n    var set = layoutInfo.graphSet;\n    for (var i = 0; i < set.length; i ++) {\n      console.debug(\"Set : \" + i + \": \" + set[i].toString());\n    }\n\n    var s = 'IndexToGraph';\n    for (var i = 0; i < layoutInfo.indexToGraph.length; i ++) {\n      s += \"\\nIndex : \" + i + \" Graph: \"+ layoutInfo.indexToGraph[i];\n    }\n    console.debug(s);\n\n    s = 'Layout Edges';\n    for (var i = 0; i < layoutInfo.layoutEdges.length; i++) {\n      var e = layoutInfo.layoutEdges[i];\n      s += \"\\nEdge Index: \" + i + \" ID: \" + e.id +\n      \" SouceID: \" + e.sourceId + \" TargetId: \" + e.targetId +\n      \" Ideal Length: \" + e.idealLength;\n    }\n    console.debug(s);\n\n    s =  \"nodeSize: \" + layoutInfo.nodeSize;\n    s += \"\\nedgeSize: \" + layoutInfo.edgeSize;\n    s += \"\\ntemperature: \" + layoutInfo.temperature;\n    console.debug(s);\n\n    return;\n  };\n\n\n  /**\n   * @brief : Randomizes the position of all nodes\n   */\n  var randomizePositions = function(layoutInfo, cy) {\n    var width     = layoutInfo.clientWidth;\n    var height    = layoutInfo.clientHeight;\n\n    for (var i = 0; i < layoutInfo.nodeSize; i++) {\n      var n = layoutInfo.layoutNodes[i];\n      // No need to randomize compound nodes\n      if (true || 0 === n.children.length) {\n        n.positionX = Math.random() * width;\n        n.positionY = Math.random() * height;\n      }\n    }\n  };\n\n\n  /**\n   * @brief          : Updates the positions of nodes in the network\n   * @arg layoutInfo : LayoutInfo object\n   * @arg cy         : Cytoscape object\n   * @arg options    : Layout options\n   */\n  var refreshPositions = function(layoutInfo, cy, options) {\n    // var s = 'Refreshing positions';\n    // logDebug(s);\n\n    var layout = layoutInfo.layout;\n    var nodes = options.eles.nodes();\n    var bb = layoutInfo.boundingBox;\n    var coseBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };\n\n    if( options.boundingBox ){\n      nodes.forEach(function( node ){\n        var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];\n\n        coseBB.x1 = Math.min( coseBB.x1, lnode.positionX );\n        coseBB.x2 = Math.max( coseBB.x2, lnode.positionX );\n\n        coseBB.y1 = Math.min( coseBB.y1, lnode.positionY );\n        coseBB.y2 = Math.max( coseBB.y2, lnode.positionY );\n      });\n\n      coseBB.w = coseBB.x2 - coseBB.x1;\n      coseBB.h = coseBB.y2 - coseBB.y1;\n    }\n\n    nodes.positions(function(i, ele) {\n      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];\n      // s = \"Node: \" + lnode.id + \". Refreshed position: (\" +\n      // lnode.positionX + \", \" + lnode.positionY + \").\";\n      // logDebug(s);\n\n      if( options.boundingBox ){ // then add extra bounding box constraint\n        var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;\n        var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;\n\n        return {\n          x: bb.x1 + pctX * bb.w,\n          y: bb.y1 + pctY * bb.h\n        };\n      } else {\n        return {\n          x: lnode.positionX,\n          y: lnode.positionY\n        };\n      }\n    });\n\n    // Trigger layoutReady only on first call\n    if (true !== layoutInfo.ready) {\n      // s = 'Triggering layoutready';\n      // logDebug(s);\n      layoutInfo.ready = true;\n      layout.one('layoutready', options.ready);\n      layout.trigger({ type: 'layoutready', layout: this });\n    }\n  };\n\n\n  /**\n   * @brief          : Performs one iteration of the physical simulation\n   * @arg layoutInfo : LayoutInfo object already initialized\n   * @arg cy         : Cytoscape object\n   * @arg options    : Layout options\n   */\n  var step = function(layoutInfo, cy, options, step) {\n    // var s = \"\\n\\n###############################\";\n    // s += \"\\nSTEP: \" + step;\n    // s += \"\\n###############################\\n\";\n    // logDebug(s);\n\n    // Calculate node repulsions\n    calculateNodeForces(layoutInfo, cy, options);\n    // Calculate edge forces\n    calculateEdgeForces(layoutInfo, cy, options);\n    // Calculate gravity forces\n    calculateGravityForces(layoutInfo, cy, options);\n    // Propagate forces from parent to child\n    propagateForces(layoutInfo, cy, options);\n    // Update positions based on calculated forces\n    updatePositions(layoutInfo, cy, options);\n  };\n\n\n  /**\n   * @brief : Computes the node repulsion forces\n   */\n  var calculateNodeForces = function(layoutInfo, cy, options) {\n    // Go through each of the graphs in graphSet\n    // Nodes only repel each other if they belong to the same graph\n    // var s = 'calculateNodeForces';\n    // logDebug(s);\n    for (var i = 0; i < layoutInfo.graphSet.length; i ++) {\n      var graph    = layoutInfo.graphSet[i];\n      var numNodes = graph.length;\n\n      // s = \"Set: \" + graph.toString();\n      // logDebug(s);\n\n      // Now get all the pairs of nodes\n      // Only get each pair once, (A, B) = (B, A)\n      for (var j = 0; j < numNodes; j++) {\n      var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];\n      for (var k = j + 1; k < numNodes; k++) {\n        var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];\n        nodeRepulsion(node1, node2, layoutInfo, cy, options);\n      }\n      }\n    }\n  };\n\n\n  /**\n   * @brief : Compute the node repulsion forces between a pair of nodes\n   */\n  var nodeRepulsion = function(node1, node2, layoutInfo, cy, options) {\n    // var s = \"Node repulsion. Node1: \" + node1.id + \" Node2: \" + node2.id;\n\n    // Get direction of line connecting both node centers\n    var directionX = node2.positionX - node1.positionX;\n    var directionY = node2.positionY - node1.positionY;\n    // s += \"\\ndirectionX: \" + directionX + \", directionY: \" + directionY;\n\n    // If both centers are the same, apply a random force\n    if (0 === directionX && 0 === directionY) {\n      // s += \"\\nNodes have the same position.\";\n      return; // TODO\n    }\n\n    var overlap = nodesOverlap(node1, node2, directionX, directionY);\n\n    if (overlap > 0) {\n      // s += \"\\nNodes DO overlap.\";\n      // s += \"\\nOverlap: \" + overlap;\n      // If nodes overlap, repulsion force is proportional\n      // to the overlap\n      var force    = options.nodeOverlap * overlap;\n\n      // Compute the module and components of the force vector\n      var distance = Math.sqrt(directionX * directionX + directionY * directionY);\n      // s += \"\\nDistance: \" + distance;\n      var forceX   = force * directionX / distance;\n      var forceY   = force * directionY / distance;\n\n    } else {\n      // s += \"\\nNodes do NOT overlap.\";\n      // If there's no overlap, force is inversely proportional\n      // to squared distance\n\n      // Get clipping points for both nodes\n      var point1 = findClippingPoint(node1, directionX, directionY);\n      var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);\n\n      // Use clipping points to compute distance\n      var distanceX   = point2.x - point1.x;\n      var distanceY   = point2.y - point1.y;\n      var distanceSqr = distanceX * distanceX + distanceY * distanceY;\n      var distance    = Math.sqrt(distanceSqr);\n      // s += \"\\nDistance: \" + distance;\n\n      // Compute the module and components of the force vector\n      var force  = options.nodeRepulsion / distanceSqr;\n      var forceX = force * distanceX / distance;\n      var forceY = force * distanceY / distance;\n    }\n\n    // Apply force\n    node1.offsetX -= forceX;\n    node1.offsetY -= forceY;\n    node2.offsetX += forceX;\n    node2.offsetY += forceY;\n\n    // s += \"\\nForceX: \" + forceX + \" ForceY: \" + forceY;\n    // logDebug(s);\n\n    return;\n  };\n\n\n  /**\n   * @brief : Finds the point in which an edge (direction dX, dY) intersects\n   *          the rectangular bounding box of it's source/target node\n   */\n  var findClippingPoint = function(node, dX, dY) {\n\n    // Shorcuts\n    var X = node.positionX;\n    var Y = node.positionY;\n    var H = node.height;\n    var W = node.width;\n    var dirSlope     = dY / dX;\n    var nodeSlope    = H / W;\n\n    // var s = 'Computing clipping point of node ' + node.id +\n    //   \" . Height:  \" + H + \", Width: \" + W +\n    //   \"\\nDirection \" + dX + \", \" + dY;\n    //\n    // Compute intersection\n    var res = {};\n    do {\n      // Case: Vertical direction (up)\n      if (0 === dX && 0 < dY) {\n        res.x = X;\n        // s += \"\\nUp direction\";\n        res.y = Y + H / 2;\n        break;\n      }\n\n      // Case: Vertical direction (down)\n      if (0 === dX && 0 > dY) {\n        res.x = X;\n        res.y = Y + H / 2;\n        // s += \"\\nDown direction\";\n        break;\n      }\n\n      // Case: Intersects the right border\n      if (0 < dX &&\n      -1 * nodeSlope <= dirSlope &&\n      dirSlope <= nodeSlope) {\n        res.x = X + W / 2;\n        res.y = Y + (W * dY / 2 / dX);\n        // s += \"\\nRightborder\";\n        break;\n      }\n\n      // Case: Intersects the left border\n      if (0 > dX &&\n      -1 * nodeSlope <= dirSlope &&\n      dirSlope <= nodeSlope) {\n        res.x = X - W / 2;\n        res.y = Y - (W * dY / 2 / dX);\n        // s += \"\\nLeftborder\";\n        break;\n      }\n\n      // Case: Intersects the top border\n      if (0 < dY &&\n      ( dirSlope <= -1 * nodeSlope ||\n        dirSlope >= nodeSlope )) {\n        res.x = X + (H * dX / 2 / dY);\n        res.y = Y + H / 2;\n        // s += \"\\nTop border\";\n        break;\n      }\n\n      // Case: Intersects the bottom border\n      if (0 > dY &&\n      ( dirSlope <= -1 * nodeSlope ||\n        dirSlope >= nodeSlope )) {\n        res.x = X - (H * dX / 2 / dY);\n        res.y = Y - H / 2;\n        // s += \"\\nBottom border\";\n        break;\n      }\n\n    } while (false);\n\n    // s += \"\\nClipping point found at \" + res.x + \", \" + res.y;\n    // logDebug(s);\n    return res;\n  };\n\n\n  /**\n   * @brief  : Determines whether two nodes overlap or not\n   * @return : Amount of overlapping (0 => no overlap)\n   */\n  var nodesOverlap = function(node1, node2, dX, dY) {\n\n    if (dX > 0) {\n      var overlapX = node1.maxX - node2.minX;\n    } else {\n      var overlapX = node2.maxX - node1.minX;\n    }\n\n    if (dY > 0) {\n      var overlapY = node1.maxY - node2.minY;\n    } else {\n      var overlapY = node2.maxY - node1.minY;\n    }\n\n    if (overlapX >= 0 && overlapY >= 0) {\n      return Math.sqrt(overlapX * overlapX + overlapY * overlapY);\n    } else {\n      return 0;\n    }\n  };\n\n\n  /**\n   * @brief : Calculates all edge forces\n   */\n  var calculateEdgeForces = function(layoutInfo, cy, options) {\n    // Iterate over all edges\n    for (var i = 0; i < layoutInfo.edgeSize; i++) {\n      // Get edge, source & target nodes\n      var edge     = layoutInfo.layoutEdges[i];\n      var sourceIx = layoutInfo.idToIndex[edge.sourceId];\n      var source   = layoutInfo.layoutNodes[sourceIx];\n      var targetIx = layoutInfo.idToIndex[edge.targetId];\n      var target   = layoutInfo.layoutNodes[targetIx];\n\n      // Get direction of line connecting both node centers\n      var directionX = target.positionX - source.positionX;\n      var directionY = target.positionY - source.positionY;\n\n      // If both centers are the same, do nothing.\n      // A random force has already been applied as node repulsion\n      if (0 === directionX && 0 === directionY) {\n      return;\n      }\n\n      // Get clipping points for both nodes\n      var point1 = findClippingPoint(source, directionX, directionY);\n      var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);\n\n\n      var lx = point2.x - point1.x;\n      var ly = point2.y - point1.y;\n      var l  = Math.sqrt(lx * lx + ly * ly);\n\n      var force  = Math.pow(edge.idealLength - l, 2) / options.edgeElasticity;\n\n      if (0 !== l) {\n        var forceX = force * lx / l;\n        var forceY = force * ly / l;\n      } else {\n        var forceX = 0;\n        var forceY = 0;\n      }\n\n      // Add this force to target and source nodes\n      source.offsetX += forceX;\n      source.offsetY += forceY;\n      target.offsetX -= forceX;\n      target.offsetY -= forceY;\n\n      // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;\n      // s += \"\\nDistance: \" + l + \" Force: (\" + forceX + \", \" + forceY + \")\";\n      // logDebug(s);\n    }\n  };\n\n\n  /**\n   * @brief : Computes gravity forces for all nodes\n   */\n  var calculateGravityForces = function(layoutInfo, cy, options) {\n    // var s = 'calculateGravityForces';\n    // logDebug(s);\n    for (var i = 0; i < layoutInfo.graphSet.length; i ++) {\n      var graph    = layoutInfo.graphSet[i];\n      var numNodes = graph.length;\n\n      // s = \"Set: \" + graph.toString();\n      // logDebug(s);\n\n      // Compute graph center\n      if (0 === i) {\n        var centerX   = layoutInfo.clientHeight / 2;\n        var centerY   = layoutInfo.clientWidth  / 2;\n      } else {\n        // Get Parent node for this graph, and use its position as center\n        var temp    = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];\n        var parent  = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];\n        var centerX = parent.positionX;\n        var centerY = parent.positionY;\n      }\n      // s = \"Center found at: \" + centerX + \", \" + centerY;\n      // logDebug(s);\n\n      // Apply force to all nodes in graph\n      for (var j = 0; j < numNodes; j++) {\n        var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];\n        // s = \"Node: \" + node.id;\n        var dx = centerX - node.positionX;\n        var dy = centerY - node.positionY;\n        var d  = Math.sqrt(dx * dx + dy * dy);\n        if (d > 1.0) { // TODO: Use global variable for distance threshold\n          var fx = options.gravity * dx / d;\n          var fy = options.gravity * dy / d;\n          node.offsetX += fx;\n          node.offsetY += fy;\n          // s += \": Applied force: \" + fx + \", \" + fy;\n        } else {\n          // s += \": skypped since it's too close to center\";\n        }\n        // logDebug(s);\n      }\n    }\n  };\n\n\n  /**\n   * @brief          : This function propagates the existing offsets from\n   *                   parent nodes to its descendents.\n   * @arg layoutInfo : layoutInfo Object\n   * @arg cy         : cytoscape Object\n   * @arg options    : Layout options\n   */\n  var propagateForces = function(layoutInfo, cy, options) {\n    // Inline implementation of a queue, used for traversing the graph in BFS order\n    var queue = [];\n    var start = 0;   // Points to the start the queue\n    var end   = -1;  // Points to the end of the queue\n\n    // logDebug('propagateForces');\n\n    // Start by visiting the nodes in the root graph\n    queue.push.apply(queue, layoutInfo.graphSet[0]);\n    end += layoutInfo.graphSet[0].length;\n\n    // Traverse the graph, level by level,\n    while (start <= end) {\n      // Get the node to visit and remove it from queue\n      var nodeId    = queue[start++];\n      var nodeIndex = layoutInfo.idToIndex[nodeId];\n      var node      = layoutInfo.layoutNodes[nodeIndex];\n      var children  = node.children;\n\n      // We only need to process the node if it's compound\n      if (0 < children.length) {\n      var offX = node.offsetX;\n      var offY = node.offsetY;\n\n      // var s = \"Propagating offset from parent node : \" + node.id +\n      //   \". OffsetX: \" + offX + \". OffsetY: \" + offY;\n      // s += \"\\n Children: \" + children.toString();\n      // logDebug(s);\n\n      for (var i = 0; i < children.length; i++) {\n        var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]];\n        // Propagate offset\n        childNode.offsetX += offX;\n        childNode.offsetY += offY;\n        // Add children to queue to be visited\n        queue[++end] = children[i];\n      }\n\n      // Reset parent offsets\n      node.offsetX = 0;\n      node.offsetY = 0;\n      }\n\n    }\n  };\n\n\n  /**\n   * @brief : Updates the layout model positions, based on\n   *          the accumulated forces\n   */\n  var updatePositions = function(layoutInfo, cy, options) {\n    // var s = 'Updating positions';\n    // logDebug(s);\n\n    // Reset boundaries for compound nodes\n    for (var i = 0; i < layoutInfo.nodeSize; i++) {\n      var n = layoutInfo.layoutNodes[i];\n      if (0 < n.children.length) {\n        // logDebug(\"Resetting boundaries of compound node: \" + n.id);\n        n.maxX = undefined;\n        n.minX = undefined;\n        n.maxY = undefined;\n        n.minY = undefined;\n      }\n    }\n\n    for (var i = 0; i < layoutInfo.nodeSize; i++) {\n      var n = layoutInfo.layoutNodes[i];\n      if (0 < n.children.length) {\n        // No need to set compound node position\n        // logDebug(\"Skipping position update of node: \" + n.id);\n        continue;\n      }\n      // s = \"Node: \" + n.id + \" Previous position: (\" +\n      // n.positionX + \", \" + n.positionY + \").\";\n\n      // Limit displacement in order to improve stability\n      var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);\n      n.positionX += tempForce.x;\n      n.positionY += tempForce.y;\n      n.offsetX = 0;\n      n.offsetY = 0;\n      n.minX    = n.positionX - n.width;\n      n.maxX    = n.positionX + n.width;\n      n.minY    = n.positionY - n.height;\n      n.maxY    = n.positionY + n.height;\n      // s += \" New Position: (\" + n.positionX + \", \" + n.positionY + \").\";\n      // logDebug(s);\n\n      // Update ancestry boudaries\n      updateAncestryBoundaries(n, layoutInfo);\n    }\n\n    // Update size, position of compund nodes\n    for (var i = 0; i < layoutInfo.nodeSize; i++) {\n      var n = layoutInfo.layoutNodes[i];\n      if (0 < n.children.length) {\n        n.positionX = (n.maxX + n.minX) / 2;\n        n.positionY = (n.maxY + n.minY) / 2;\n        n.width     = n.maxX - n.minX;\n        n.height    = n.maxY - n.minY;\n        // s = \"Updating position, size of compound node \" + n.id;\n        // s += \"\\nPositionX: \" + n.positionX + \", PositionY: \" + n.positionY;\n        // s += \"\\nWidth: \" + n.width + \", Height: \" + n.height;\n        // logDebug(s);\n      }\n    }\n  };\n\n\n  /**\n   * @brief : Limits a force (forceX, forceY) to be not\n   *          greater (in modulo) than max.\n   8          Preserves force direction.\n   */\n  var limitForce = function(forceX, forceY, max) {\n    // var s = \"Limiting force: (\" + forceX + \", \" + forceY + \"). Max: \" + max;\n    var force = Math.sqrt(forceX * forceX + forceY * forceY);\n\n    if (force > max) {\n      var res = {\n      x : max * forceX / force,\n      y : max * forceY / force\n      };\n\n    } else {\n      var res = {\n      x : forceX,\n      y : forceY\n      };\n    }\n\n    // s += \".\\nResult: (\" + res.x + \", \" + res.y + \")\";\n    // logDebug(s);\n\n    return res;\n  };\n\n\n  /**\n   * @brief : Function used for keeping track of compound node\n   *          sizes, since they should bound all their subnodes.\n   */\n  var updateAncestryBoundaries = function(node, layoutInfo) {\n    // var s = \"Propagating new position/size of node \" + node.id;\n    var parentId = node.parentId;\n    if (null == parentId) {\n      // If there's no parent, we are done\n      // s += \". No parent node.\";\n      // logDebug(s);\n      return;\n    }\n\n    // Get Parent Node\n    var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];\n    var flag = false;\n\n    // MaxX\n    if (null == p.maxX || node.maxX + p.padRight > p.maxX) {\n      p.maxX = node.maxX + p.padRight;\n      flag = true;\n      // s += \"\\nNew maxX for parent node \" + p.id + \": \" + p.maxX;\n    }\n\n    // MinX\n    if (null == p.minX || node.minX - p.padLeft < p.minX) {\n      p.minX = node.minX - p.padLeft;\n      flag = true;\n      // s += \"\\nNew minX for parent node \" + p.id + \": \" + p.minX;\n    }\n\n    // MaxY\n    if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {\n      p.maxY = node.maxY + p.padBottom;\n      flag = true;\n      // s += \"\\nNew maxY for parent node \" + p.id + \": \" + p.maxY;\n    }\n\n    // MinY\n    if (null == p.minY || node.minY - p.padTop < p.minY) {\n      p.minY = node.minY - p.padTop;\n      flag = true;\n      // s += \"\\nNew minY for parent node \" + p.id + \": \" + p.minY;\n    }\n\n    // If updated boundaries, propagate changes upward\n    if (flag) {\n      // logDebug(s);\n      return updateAncestryBoundaries(p, layoutInfo);\n    }\n\n    // s += \". No changes in boundaries/position of parent node \" + p.id;\n    // logDebug(s);\n    return;\n  };\n\n\n  /**\n   * @brief : Logs a debug message in JS console, if DEBUG is ON\n   */\n  // var logDebug = function(text) {\n  //   if (DEBUG) {\n  //     console.debug(text);\n  //   }\n  // };\n\n\n  // register the layout\n  $$('layout', 'cose', CoseLayout);\n\n})(cytoscape);\n\n;(function($$){ 'use strict';\n\n  // default layout options\n  var defaults = {\n    // dagre algo options, uses default value on undefined\n    nodeSep: undefined, // the separation between adjacent nodes in the same rank\n    edgeSep: undefined, // the separation between adjacent edges in the same rank\n    rankSep: undefined, // the separation between adjacent nodes in the same rank\n    rankDir: undefined, // 'TB' for top to bottom flow, 'LR' for left to right\n    minLen: function( edge ){ return 1; }, // number of ranks to keep between the source and target of the edge\n    edgeWeight: function( edge ){ return 1; }, // higher weight edges are generally made shorter and straighter than lower weight edges\n\n    // general layout options\n    fit: true, // whether to fit to viewport\n    padding: 30, // fit padding\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    ready: function(){}, // on layoutready\n    stop: function(){} // on layoutstop\n  };\n\n  // constructor\n  // options : object containing layout options\n  function DagreLayout( options ){\n    this.options = $$.util.extend(true, {}, defaults, options);\n  }\n\n  // runs the layout\n  DagreLayout.prototype.run = function(){\n    var options = this.options;\n    var layout = this;\n\n    $$.util.require('dagre', function(dagre){\n\n      var cy = options.cy; // cy is automatically populated for us in the constructor\n      var eles = options.eles;\n\n      var getVal = function( ele, val ){\n        return $$.is.fn(val) ? val.apply( ele, [ ele ] ) : val;\n      };\n\n      var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n        x1: 0, y1: 0, w: cy.width(), h: cy.height()\n      } );\n\n      var g = new dagre.graphlib.Graph({\n        multigraph: true,\n        compound: true\n      });\n\n      var gObj = {};\n      var setGObj = function( name, val ){\n        if( val != null ){\n          gObj[ name ] = val;\n        }\n      };\n\n      setGObj( 'nodesep', options.nodeSep );\n      setGObj( 'edgesep', options.edgeSep );\n      setGObj( 'ranksep', options.rankSep );\n      setGObj( 'rankdir', options.rankDir );\n\n      g.setGraph( gObj );\n\n      g.setDefaultEdgeLabel(function() { return {}; });\n      g.setDefaultNodeLabel(function() { return {}; });\n\n      // add nodes to dagre\n      var nodes = eles.nodes();\n      for( var i = 0; i < nodes.length; i++ ){\n        var node = nodes[i];\n\n        g.setNode( node.id(), {\n          width: node.width(),\n          height: node.height(),\n          name: node.id()\n        } );\n\n        // console.log( g.node(node.id()) );\n      }\n\n      // set compound parents\n      for( var i = 0; i < nodes.length; i++ ){\n        var node = nodes[i];\n\n        if( node.isChild() ){\n          g.setParent( node.id(), node.parent().id() );\n        }\n      }\n\n      // add edges to dagre\n      var edges = eles.edges().stdFilter(function( edge ){\n        return !edge.source().isParent() && !edge.target().isParent(); // dagre can't handle edges on compound nodes\n      });\n      for( var i = 0; i < edges.length; i++ ){\n        var edge = edges[i];\n\n        g.setEdge( edge.source().id(), edge.target().id(), {\n          minlen: getVal( edge, options.minLen ),\n          weight: getVal( edge, options.edgeWeight ),\n          name: edge.id()\n        }, edge.id() );\n\n        // console.log( g.edge(edge.source().id(), edge.target().id(), edge.id()) );\n      }\n\n      dagre.layout( g );\n\n      var gNodeIds = g.nodes();\n      for( var i = 0; i < gNodeIds.length; i++ ){\n        var id = gNodeIds[i];\n        var n = g.node( id );\n\n        cy.getElementById(id).scratch().dagre = n;\n      }\n\n      var dagreBB;\n\n      if( options.boundingBox ){\n        dagreBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };\n        nodes.forEach(function( node ){\n          var dModel = node.scratch().dagre;\n\n          dagreBB.x1 = Math.min( dagreBB.x1, dModel.x );\n          dagreBB.x2 = Math.max( dagreBB.x2, dModel.x );\n\n          dagreBB.y1 = Math.min( dagreBB.y1, dModel.y );\n          dagreBB.y2 = Math.max( dagreBB.y2, dModel.y );\n        });\n\n        dagreBB.w = dagreBB.x2 - dagreBB.x1;\n        dagreBB.h = dagreBB.y2 - dagreBB.y1;\n      } else {\n        dagreBB = bb;\n      }\n\n      var constrainPos = function( p ){\n        if( options.boundingBox ){\n          var xPct = (p.x - dagreBB.x1) / dagreBB.w;\n          var yPct = (p.y - dagreBB.y1) / dagreBB.h;\n\n          return {\n            x: bb.x1 + xPct * bb.w,\n            y: bb.y1 + yPct * bb.h\n          };\n        } else {\n          return p;\n        }\n      };\n\n      nodes.layoutPositions(layout, options, function(){\n        var dModel = this.scratch().dagre;\n\n        return constrainPos({\n          x: dModel.x,\n          y: dModel.y\n        });\n      });\n\n    }); // require\n\n    return this; // chaining\n  };\n\n  // register the layout\n  $$('layout', 'dagre', DagreLayout);\n\n})(cytoscape);\n\n;(function($$){ 'use strict';\n\n  var defaults = {\n    fit: true, // whether to fit the viewport to the graph\n    padding: 30, // padding used on fit\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space\n    rows: undefined, // force num of rows in the grid\n    columns: undefined, // force num of cols in the grid\n    position: function( node ){}, // returns { row, col } for element\n    sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    ready: undefined, // callback on layoutready\n    stop: undefined // callback on layoutstop\n  };\n\n  function GridLayout( options ){\n    this.options = $$.util.extend({}, defaults, options);\n  }\n\n  GridLayout.prototype.run = function(){\n    var params = this.options;\n    var options = params;\n\n    var cy = params.cy;\n    var eles = options.eles;\n    var nodes = eles.nodes().not(':parent');\n\n    if( options.sort ){\n      nodes = nodes.sort( options.sort );\n    }\n\n    var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n      x1: 0, y1: 0, w: cy.width(), h: cy.height()\n    } );\n\n    if( bb.h === 0 || bb.w === 0){\n      nodes.layoutPositions(this, options, function(){\n        return { x: bb.x1, y: bb.y1 };\n      });\n\n    } else {\n\n      // width/height * splits^2 = cells where splits is number of times to split width\n      var cells = nodes.size();\n      var splits = Math.sqrt( cells * bb.h/bb.w );\n      var rows = Math.round( splits );\n      var cols = Math.round( bb.w/bb.h * splits );\n\n      var small = function(val){\n        if( val == null ){\n          return Math.min(rows, cols);\n        } else {\n          var min = Math.min(rows, cols);\n          if( min == rows ){\n            rows = val;\n          } else {\n            cols = val;\n          }\n        }\n      };\n\n      var large = function(val){\n        if( val == null ){\n          return Math.max(rows, cols);\n        } else {\n          var max = Math.max(rows, cols);\n          if( max == rows ){\n            rows = val;\n          } else {\n            cols = val;\n          }\n        }\n      };\n\n      // if rows or columns were set in options, use those values\n      if( options.rows != null && options.columns != null ){\n        rows = options.rows;\n        cols = options.columns;\n      } else if( options.rows != null && options.columns == null ){\n        rows = options.rows;\n        cols = Math.ceil( cells / rows );\n      } else if( options.rows == null && options.columns != null ){\n        cols = options.columns;\n        rows = Math.ceil( cells / cols );\n      }\n\n      // otherwise use the automatic values and adjust accordingly\n\n      // if rounding was up, see if we can reduce rows or columns\n      else if( cols * rows > cells ){\n        var sm = small();\n        var lg = large();\n\n        // reducing the small side takes away the most cells, so try it first\n        if( (sm - 1) * lg >= cells ){\n          small(sm - 1);\n        } else if( (lg - 1) * sm >= cells ){\n          large(lg - 1);\n        }\n      } else {\n\n        // if rounding was too low, add rows or columns\n        while( cols * rows < cells ){\n          var sm = small();\n          var lg = large();\n\n          // try to add to larger side first (adds less in multiplication)\n          if( (lg + 1) * sm >= cells ){\n            large(lg + 1);\n          } else {\n            small(sm + 1);\n          }\n        }\n      }\n\n      var cellWidth = bb.w / cols;\n      var cellHeight = bb.h / rows;\n\n      if( options.avoidOverlap ){\n        for( var i = 0; i < nodes.length; i++ ){\n          var node = nodes[i];\n          var w = node.outerWidth();\n          var h = node.outerHeight();\n\n          cellWidth = Math.max( cellWidth, w );\n          cellHeight = Math.max( cellHeight, h );\n        }\n      }\n\n      var cellUsed = {}; // e.g. 'c-0-2' => true\n\n      var used = function(row, col){\n        return cellUsed['c-' + row + '-' + col] ? true : false;\n      };\n\n      var use = function(row, col){\n        cellUsed['c-' + row + '-' + col] = true;\n      };\n\n      // to keep track of current cell position\n      var row = 0;\n      var col = 0;\n      var moveToNextCell = function(){\n        col++;\n        if( col >= cols ){\n          col = 0;\n          row++;\n        }\n      };\n\n      // get a cache of all the manual positions\n      var id2manPos = {};\n      for( var i = 0; i < nodes.length; i++ ){\n        var node = nodes[i];\n        var rcPos = options.position( node );\n\n        if( rcPos && (rcPos.row !== undefined || rcPos.col !== undefined) ){ // must have at least row or col def'd\n          var pos = {\n            row: rcPos.row,\n            col: rcPos.col\n          };\n\n          if( pos.col === undefined ){ // find unused col\n            pos.col = 0;\n\n            while( used(pos.row, pos.col) ){\n              pos.col++;\n            }\n          } else if( pos.row === undefined ){ // find unused row\n            pos.row = 0;\n\n            while( used(pos.row, pos.col) ){\n              pos.row++;\n            }\n          }\n\n          id2manPos[ node.id() ] = pos;\n          use( pos.row, pos.col );\n        }\n      }\n\n      var getPos = function(i, element){\n        var x, y;\n\n        if( element.locked() || element.isFullAutoParent() ){\n          return false;\n        }\n\n        // see if we have a manual position set\n        var rcPos = id2manPos[ element.id() ];\n        if( rcPos ){\n          x = rcPos.col * cellWidth + cellWidth/2 + bb.x1;\n          y = rcPos.row * cellHeight + cellHeight/2 + bb.y1;\n\n        } else { // otherwise set automatically\n\n          while( used(row, col) ){\n            moveToNextCell();\n          }\n\n          x = col * cellWidth + cellWidth/2 + bb.x1;\n          y = row * cellHeight + cellHeight/2 + bb.y1;\n          use( row, col );\n\n          moveToNextCell();\n        }\n\n        return { x: x, y: y };\n\n      };\n\n      nodes.layoutPositions( this, options, getPos );\n    }\n\n    return this; // chaining\n\n  };\n\n  $$('layout', 'grid', GridLayout);\n\n})( cytoscape );\n\n;(function($$){ 'use strict';\n\n  // default layout options\n  var defaults = {\n    ready: function(){}, // on layoutready\n    stop: function(){} // on layoutstop\n  };\n\n  // constructor\n  // options : object containing layout options\n  function NullLayout( options ){\n    this.options = $$.util.extend(true, {}, defaults, options);\n  }\n\n  // runs the layout\n  NullLayout.prototype.run = function(){\n    var options = this.options;\n    var eles = options.eles; // elements to consider in the layout\n    var layout = this;\n\n    // cy is automatically populated for us in the constructor\n    var cy = options.cy; // jshint ignore:line\n\n    layout.trigger('layoutstart');\n\n    // puts all nodes at (0, 0)\n    eles.nodes().positions(function(){\n      return {\n        x: 0,\n        y: 0\n      };\n    });\n\n    // trigger layoutready when each node has had its position set at least once\n    layout.one('layoutready', options.ready);\n    layout.trigger('layoutready');\n\n    // trigger layoutstop when the layout stops (e.g. finishes)\n    layout.one('layoutstop', options.stop);\n    layout.trigger('layoutstop');\n\n    return this; // chaining\n  };\n\n  // called on continuous layouts to stop them before they finish\n  NullLayout.prototype.stop = function(){\n    return this; // chaining\n  };\n\n  // register the layout\n  $$('layout', 'null', NullLayout);\n\n})(cytoscape);\n\n;(function($$){ 'use strict';\n\n  var defaults = {\n    positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }\n    zoom: undefined, // the zoom level to set (prob want fit = false if set)\n    pan: undefined, // the pan level to set (prob want fit = false if set)\n    fit: true, // whether to fit to viewport\n    padding: 30, // padding on fit\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    ready: undefined, // callback on layoutready\n    stop: undefined // callback on layoutstop\n  };\n\n  function PresetLayout( options ){\n    this.options = $$.util.extend(true, {}, defaults, options);\n  }\n\n  PresetLayout.prototype.run = function(){\n    var options = this.options;\n    var eles = options.eles;\n\n    var nodes = eles.nodes();\n    var posIsFn = $$.is.fn( options.positions );\n\n    function getPosition(node){\n      if( options.positions == null ){\n        return null;\n      }\n\n      if( posIsFn ){\n        return options.positions.apply( node, [ node ] );\n      }\n\n      var pos = options.positions[node._private.data.id];\n\n      if( pos == null ){\n        return null;\n      }\n\n      return pos;\n    }\n\n    nodes.layoutPositions(this, options, function(i, node){\n      var position = getPosition(node);\n\n      if( node.locked() || position == null ){\n        return false;\n      }\n\n      return position;\n    });\n\n    return this; // chaining\n  };\n\n  $$('layout', 'preset', PresetLayout);\n\n})(cytoscape);\n\n;(function($$){ 'use strict';\n\n  var defaults = {\n    fit: true, // whether to fit to viewport\n    padding: 30, // fit padding\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    ready: undefined, // callback on layoutready\n    stop: undefined // callback on layoutstop\n  };\n\n  function RandomLayout( options ){\n    this.options = $$.util.extend(true, {}, defaults, options);\n  }\n\n  RandomLayout.prototype.run = function(){\n    var options = this.options;\n    var cy = options.cy;\n    var eles = options.eles;\n    var nodes = eles.nodes().not(':parent');\n\n    var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n      x1: 0, y1: 0, w: cy.width(), h: cy.height()\n    } );\n\n    var getPos = function( i, node ){\n      return {\n        x: bb.x1 + Math.round( Math.random() * bb.w ),\n        y: bb.y1 + Math.round( Math.random() * bb.h )\n      };\n    };\n\n    nodes.layoutPositions( this, options, getPos );\n\n    return this; // chaining\n  };\n\n  // register the layout\n  $$(\n    'layout', // we're registering a layout\n    'random', // the layout name\n    RandomLayout // the layout prototype\n  );\n\n})(cytoscape);\n\n;( function( $$ ){ 'use strict';\n\n  /*\n   * This layout combines several algorithms:\n   *\n   * - It generates an initial position of the nodes by using the\n   *   Fruchterman-Reingold algorithm (doi:10.1002/spe.4380211102)\n   *\n   * - Finally it eliminates overlaps by using the method described by\n   *   Gansner and North (doi:10.1007/3-540-37623-2_28)\n   */\n\n  var defaults = {\n    animate: true, // whether to show the layout as it's running\n    ready: undefined, // Callback on layoutready\n    stop: undefined, // Callback on layoutstop\n    fit: true, // Reset viewport to fit default simulationBounds\n    minDist: 20, // Minimum distance between nodes\n    padding: 20, // Padding\n    expandingFactor: -1.0, // If the network does not satisfy the minDist\n    // criterium then it expands the network of this amount\n    // If it is set to -1.0 the amount of expansion is automatically\n    // calculated based on the minDist, the aspect ratio and the\n    // number of nodes\n    maxFruchtermanReingoldIterations: 50, // Maximum number of initial force-directed iterations\n    maxExpandIterations: 4, // Maximum number of expanding iterations\n    boundingBox: undefined // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  };\n\n  function SpreadLayout( options ) {\n    this.options = $$.util.extend( {}, defaults, options );\n  }\n\n  function cellCentroid( cell ) {\n    var hes = cell.halfedges;\n    var area = 0,\n      x = 0,\n      y = 0;\n    var p1, p2, f;\n\n    for( var i = 0; i < hes.length; ++i ) {\n      p1 = hes[ i ].getEndpoint();\n      p2 = hes[ i ].getStartpoint();\n\n      area += p1.x * p2.y;\n      area -= p1.y * p2.x;\n\n      f = p1.x * p2.y - p2.x * p1.y;\n      x += ( p1.x + p2.x ) * f;\n      y += ( p1.y + p2.y ) * f;\n    }\n\n    area /= 2;\n    f = area * 6;\n    return {\n      x: x / f,\n      y: y / f\n    };\n  }\n\n  function sitesDistance( ls, rs ) {\n    var dx = ls.x - rs.x;\n    var dy = ls.y - rs.y;\n    return Math.sqrt( dx * dx + dy * dy );\n  }\n\n  SpreadLayout.prototype.run = function() {\n\n    var layout = this;\n    // var self = this;\n    var options = this.options;\n\n    $$.util.requires(['foograph', 'Voronoi'], function(foograph, Voronoi){\n\n      var cy = options.cy;\n      // var allNodes = cy.nodes();\n      var nodes = cy.nodes();\n      //var allEdges = cy.edges();\n      var edges = cy.edges();\n      var cWidth = cy.width();\n      var cHeight = cy.height();\n      var simulationBounds = options.boundingBox ? $$.util.makeBoundingBox( options.boundingBox ) : null;\n      var padding = options.padding;\n      var simBBFactor = Math.max( 1, Math.log(nodes.length) * 0.8 );\n\n      if( nodes.length < 100 ){\n        simBBFactor /= 2;\n      }\n\n      layout.trigger( {\n        type: 'layoutstart',\n        layout: layout\n      } );\n\n      var simBB = {\n        x1: 0,\n        y1: 0,\n        x2: cWidth * simBBFactor,\n        y2: cHeight * simBBFactor\n      };\n\n      if( simulationBounds ) {\n        simBB.x1 = simulationBounds.x1;\n        simBB.y1 = simulationBounds.y1;\n        simBB.x2 = simulationBounds.x2;\n        simBB.y2 = simulationBounds.y2;\n      }\n\n      simBB.x1 += padding;\n      simBB.y1 += padding;\n      simBB.x2 -= padding;\n      simBB.y2 -= padding;\n\n      var width = simBB.x2 - simBB.x1;\n      var height = simBB.y2 - simBB.y1;\n\n      // Get start time\n      var startTime = Date.now();\n\n      // layout doesn't work with just 1 node\n      if( nodes.size() <= 1 ) {\n        nodes.positions( {\n          x: Math.round( ( simBB.x1 + simBB.x2 ) / 2 ),\n          y: Math.round( ( simBB.y1 + simBB.y2 ) / 2 )\n        } );\n\n        if( options.fit ) {\n          cy.fit( options.padding );\n        }\n\n        // Get end time\n        var endTime = Date.now();\n        console.info( \"Layout on \" + nodes.size() + \" nodes took \" + ( endTime - startTime ) + \" ms\" );\n\n        layout.one( \"layoutready\", options.ready );\n        layout.trigger( \"layoutready\" );\n\n        layout.one( \"layoutstop\", options.stop );\n        layout.trigger( \"layoutstop\" );\n\n        return;\n      }\n\n      // First I need to create the data structure to pass to the worker\n      var pData = {\n        'width': width,\n        'height': height,\n        'minDist': options.minDist,\n        'expFact': options.expandingFactor,\n        'expIt': 0,\n        'maxExpIt': options.maxExpandIterations,\n        'vertices': [],\n        'edges': [],\n        'startTime': startTime,\n        'maxFruchtermanReingoldIterations': options.maxFruchtermanReingoldIterations\n      };\n\n      nodes.each(\n        function( i, node ) {\n          var nodeId = this._private.data.id;\n          pData[ 'vertices' ].push( {\n            id: nodeId,\n            x: 0,\n            y: 0\n          } );\n        } );\n\n      edges.each(\n        function() {\n          var srcNodeId = this.source().id();\n          var tgtNodeId = this.target().id();\n          pData[ 'edges' ].push( {\n            src: srcNodeId,\n            tgt: tgtNodeId\n          } );\n        } );\n\n      //Decleration\n      var t1 = $$.Thread();\n      // And to add the required scripts\n      //EXTERNAL 1\n      t1.require( foograph, 'foograph' );\n      //EXTERNAL 2\n      t1.require( Voronoi );\n\n      //Local function\n      t1.require( sitesDistance );\n      t1.require( cellCentroid );\n\n      function setPositions( pData ){ //console.log('set posns')\n        // First we retrieve the important data\n        // var expandIteration = pData[ 'expIt' ];\n        var dataVertices = pData[ 'vertices' ];\n        var vertices = [];\n        for( var i = 0; i < dataVertices.length; ++i ) {\n          var dv = dataVertices[ i ];\n          vertices[ dv.id ] = {\n            x: dv.x,\n            y: dv.y\n          };\n        }\n        /*\n         * FINALLY:\n         *\n         * We position the nodes based on the calculation\n         */\n        nodes.positions(\n          function( i, node ) {\n            var id = node._private.data.id;\n            // var pos = node._private.position;\n            var vertex = vertices[ id ];\n\n            return {\n              x: Math.round( simBB.x1 + vertex.x ),\n              y: Math.round( simBB.y1 + vertex.y )\n            };\n          } );\n\n        if( options.fit ) {\n          cy.fit( options.padding );\n        }\n\n        cy.nodes().rtrigger( \"position\" );\n      }\n\n      var didLayoutReady = false;\n      t1.on('message', function(e){\n        var pData = e.message; //console.log('message', e)\n\n        if( !options.animate ){\n          return;\n        }\n\n        setPositions( pData );\n\n        if( !didLayoutReady ){\n          layout.trigger( \"layoutready\" );\n\n          didLayoutReady = true;\n        }\n      });\n\n      layout.one( \"layoutready\", options.ready );\n\n      t1.pass( pData ).run( function( pData ) {\n\n        foograph = eval('foograph');\n        Voronoi = eval('Voronoi');\n\n        // I need to retrieve the important data\n        var lWidth = pData[ 'width' ];\n        var lHeight = pData[ 'height' ];\n        var lMinDist = pData[ 'minDist' ];\n        var lExpFact = pData[ 'expFact' ];\n        var lMaxExpIt = pData[ 'maxExpIt' ];\n        var lMaxFruchtermanReingoldIterations = pData[ 'maxFruchtermanReingoldIterations' ];\n\n        // Prepare the data to output\n        var savePositions = function(){\n          pData[ 'width' ] = lWidth;\n          pData[ 'height' ] = lHeight;\n          pData[ 'expIt' ] = expandIteration;\n          pData[ 'expFact' ] = lExpFact;\n\n          pData[ 'vertices' ] = [];\n          for( var i = 0; i < fv.length; ++i ) {\n            pData[ 'vertices' ].push( {\n              id: fv[ i ].label,\n              x: fv[ i ].x,\n              y: fv[ i ].y\n            } );\n          }\n        };\n\n        var messagePositions = function(){\n          broadcast( pData );\n        };\n\n        /*\n         * FIRST STEP: Application of the Fruchterman-Reingold algorithm\n         *\n         * We use the version implemented by the foograph library\n         *\n         * Ref.: https://code.google.com/p/foograph/\n         */\n\n        // We need to create an instance of a graph compatible with the library\n        var frg = new foograph.Graph( \"FRgraph\", false );\n\n        var frgNodes = {};\n\n        // Then we have to add the vertices\n        var dataVertices = pData[ 'vertices' ];\n        for( var ni = 0; ni < dataVertices.length; ++ni ) {\n          var id = dataVertices[ ni ][ 'id' ];\n          var v = new foograph.Vertex( id, Math.round( Math.random() * lHeight ), Math.round( Math.random() * lHeight ) );\n          frgNodes[ id ] = v;\n          frg.insertVertex( v );\n        }\n\n        var dataEdges = pData[ 'edges' ];\n        for( var ei = 0; ei < dataEdges.length; ++ei ) {\n          var srcNodeId = dataEdges[ ei ][ 'src' ];\n          var tgtNodeId = dataEdges[ ei ][ 'tgt' ];\n          frg.insertEdge( \"\", 1, frgNodes[ srcNodeId ], frgNodes[ tgtNodeId ] );\n        }\n\n        var fv = frg.vertices;\n\n        // Then we apply the layout\n        var iterations = lMaxFruchtermanReingoldIterations;\n        var frLayoutManager = new foograph.ForceDirectedVertexLayout( lWidth, lHeight, iterations, false, lMinDist );\n\n        frLayoutManager.callback = function(){\n          savePositions();\n          messagePositions();\n        };\n\n        frLayoutManager.layout( frg );\n\n        savePositions();\n        messagePositions();\n\n        /*\n         * SECOND STEP: Tiding up of the graph.\n         *\n         * We use the method described by Gansner and North, based on Voronoi\n         * diagrams.\n         *\n         * Ref: doi:10.1007/3-540-37623-2_28\n         */\n\n        // We calculate the Voronoi diagram dor the position of the nodes\n        var voronoi = new Voronoi();\n        var bbox = {\n          xl: 0,\n          xr: lWidth,\n          yt: 0,\n          yb: lHeight\n        };\n        var vSites = [];\n        for( var i = 0; i < fv.length; ++i ) {\n          vSites[ fv[ i ].label ] = fv[ i ];\n        }\n\n        function checkMinDist( ee ) {\n          var infractions = 0;\n          // Then we check if the minimum distance is satisfied\n          for( var eei = 0; eei < ee.length; ++eei ) {\n            var e = ee[ eei ];\n            if( ( e.lSite != null ) && ( e.rSite != null ) && sitesDistance( e.lSite, e.rSite ) < lMinDist ) {\n              ++infractions;\n            }\n          }\n          return infractions;\n        }\n\n        var diagram = voronoi.compute( fv, bbox );\n\n        // Then we reposition the nodes at the centroid of their Voronoi cells\n        var cells = diagram.cells;\n        for( var i = 0; i < cells.length; ++i ) {\n          var cell = cells[ i ];\n          var site = cell.site;\n          var centroid = cellCentroid( cell );\n          var currv = vSites[ site.label ];\n          currv.x = centroid.x;\n          currv.y = centroid.y;\n        }\n\n        if( lExpFact < 0.0 ) {\n          // Calculates the expanding factor\n          lExpFact = Math.max( 0.05, Math.min( 0.10, lMinDist / Math.sqrt( ( lWidth * lHeight ) / fv.length ) * 0.5 ) );\n          //console.info(\"Expanding factor is \" + (options.expandingFactor * 100.0) + \"%\");\n        }\n\n        var prevInfractions = checkMinDist( diagram.edges );\n        //console.info(\"Initial infractions \" + prevInfractions);\n\n        var bStop = ( prevInfractions <= 0 );\n\n        var voronoiIteration = 0;\n        var expandIteration = 0;\n\n        // var initWidth = lWidth;\n\n        while( !bStop ) {\n          ++voronoiIteration;\n          for( var it = 0; it <= 4; ++it ) {\n            voronoi.recycle( diagram );\n            diagram = voronoi.compute( fv, bbox );\n\n            // Then we reposition the nodes at the centroid of their Voronoi cells\n            cells = diagram.cells;\n            for( var i = 0; i < cells.length; ++i ) {\n              var cell = cells[ i ];\n              var site = cell.site;\n              var centroid = cellCentroid( cell );\n              var currv = vSites[ site.label ];\n              currv.x = centroid.x;\n              currv.y = centroid.y;\n            }\n          }\n\n          var currInfractions = checkMinDist( diagram.edges );\n          //console.info(\"Current infractions \" + currInfractions);\n\n          if( currInfractions <= 0 ) {\n            bStop = true;\n          } else {\n            if( currInfractions >= prevInfractions || voronoiIteration >= 4 ) {\n              if( expandIteration >= lMaxExpIt ) {\n                bStop = true;\n              } else {\n                lWidth += lWidth * lExpFact;\n                lHeight += lHeight * lExpFact;\n                bbox = {\n                  xl: 0,\n                  xr: lWidth,\n                  yt: 0,\n                  yb: lHeight\n                };\n                ++expandIteration;\n                voronoiIteration = 0;\n                //console.info(\"Expanded to (\"+width+\",\"+height+\")\");\n              }\n            }\n          }\n          prevInfractions = currInfractions;\n\n          savePositions();\n          messagePositions();\n        }\n\n        savePositions();\n        return pData;\n\n      } ).then( function( pData ) {\n        // var expandIteration = pData[ 'expIt' ];\n        var dataVertices = pData[ 'vertices' ];\n\n        setPositions( pData );\n\n        // Get end time\n        var startTime = pData[ 'startTime' ];\n        var endTime = new Date();\n        console.info( \"Layout on \" + dataVertices.length + \" nodes took \" + ( endTime - startTime ) + \" ms\" );\n\n        layout.one( \"layoutstop\", options.stop );\n\n        if( !options.animate ){\n          layout.trigger( \"layoutready\" );\n        }\n\n        layout.trigger( \"layoutstop\" );\n\n        t1.stop();\n      } );\n\n    });\n\n    return this;\n  }; // run\n\n  SpreadLayout.prototype.stop = function() {};\n\n  $$( 'layout', 'spread', SpreadLayout );\n\n\n} )( cytoscape );\n\n;(function($$){ 'use strict';\n\n  var defaults = {\n    animate: true, // whether to show the layout as it's running\n    maxSimulationTime: 4000, // max length in ms to run the layout\n    ungrabifyWhileSimulating: false, // so you can't drag nodes during layout\n    fit: true, // whether to fit the viewport to the graph\n    padding: 30, // padding on fit\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    random: false, // whether to use random initial positions\n    infinite: false, // overrides all other options for a forces-all-the-time mode\n    ready: undefined, // callback on layoutready\n    stop: undefined, // callback on layoutstop\n\n    // springy forces\n    stiffness: 400,\n    repulsion: 400,\n    damping: 0.5\n  };\n\n  function SpringyLayout( options ){\n    this.options = $$.util.extend(true, {}, defaults, options);\n  }\n\n  SpringyLayout.prototype.run = function(){\n    var layout = this;\n    var self = this;\n    var options = this.options;\n\n    $$.util.require('Springy', function(Springy){\n\n      var simUpdatingPos = false;\n\n      var cy = options.cy;\n      layout.trigger({ type: 'layoutstart', layout: layout });\n\n      var eles = options.eles;\n      var nodes = eles.nodes().not(':parent');\n      var edges = eles.edges();\n\n      var bb = $$.util.makeBoundingBox( options.boundingBox ? options.boundingBox : {\n        x1: 0, y1: 0, w: cy.width(), h: cy.height()\n      } );\n\n      // make a new graph\n      var graph = new Springy.Graph();\n\n      // make some nodes\n      nodes.each(function(i, node){\n        node.scratch('springy', {\n          model: graph.newNode({\n            element: node\n          })\n        });\n      });\n\n      // connect them with edges\n      edges.each(function(i, edge){\n        var fdSrc = edge.source().scratch('springy').model;\n        var fdTgt = edge.target().scratch('springy').model;\n\n        edge.scratch('springy', {\n          model: graph.newEdge(fdSrc, fdTgt, {\n            element: edge\n          })\n        });\n      });\n\n      var sim = window.sim = new Springy.Layout.ForceDirected(graph, options.stiffness, options.repulsion, options.damping);\n\n      if( options.infinite ){\n        sim.minEnergyThreshold = -Infinity;\n      }\n\n      var currentBB = sim.getBoundingBox();\n      // var targetBB = {bottomleft: new Springy.Vector(-2, -2), topright: new Springy.Vector(2, 2)};\n\n      // convert to/from screen coordinates\n      var toScreen = function(p) {\n        currentBB = sim.getBoundingBox();\n\n        var size = currentBB.topright.subtract(currentBB.bottomleft);\n        var sx = p.subtract(currentBB.bottomleft).divide(size.x).x * bb.w + bb.x1;\n        var sy = p.subtract(currentBB.bottomleft).divide(size.y).y * bb.h + bb.x1;\n\n        return new Springy.Vector(sx, sy);\n      };\n\n      var fromScreen = function(s) {\n        currentBB = sim.getBoundingBox();\n\n        var size = currentBB.topright.subtract(currentBB.bottomleft);\n        var px = ((s.x - bb.x1) / bb.w) * size.x + currentBB.bottomleft.x;\n        var py = ((s.y - bb.y1) / bb.h) * size.y + currentBB.bottomleft.y;\n\n        return new Springy.Vector(px, py);\n      };\n\n      var movedNodes = cy.collection();\n\n      var numNodes = cy.nodes().size();\n      var drawnNodes = 1;\n      var fdRenderer = new Springy.Renderer(sim,\n        function clear() {\n          if( self.stopped ){ return; } // because springy is a buggy layout\n\n          if( movedNodes.length > 0 && options.animate ){\n            simUpdatingPos = true;\n\n            movedNodes.rtrigger('position');\n\n            if( options.fit ){\n              cy.fit( options.padding );\n            }\n\n            movedNodes = cy.collection();\n\n            simUpdatingPos = false;\n          }\n        },\n\n        function drawEdge(edge, p1, p2) {\n          // draw an edge\n        },\n\n        function drawNode(node, p) {\n          if( self.stopped ){ return; } // because springy is a buggy layout\n\n          var v = toScreen(p);\n          var element = node.data.element;\n\n          if( !element.locked() && !element.grabbed() ){\n              element._private.position = {\n                x: v.x,\n                y: v.y\n              };\n              movedNodes.merge(element);\n          } else {\n            //setLayoutPositionForElement(element);\n          }\n\n          if( drawnNodes == numNodes ){\n            layout.one('layoutready', options.ready);\n            layout.trigger({ type: 'layoutready', layout: layout });\n          }\n\n          drawnNodes++;\n\n        }\n      );\n\n      // set initial node points\n      nodes.each(function(i, ele){\n        if( !options.random ){\n          setLayoutPositionForElement(ele);\n        }\n      });\n\n      // update node positions when dragging\n      var dragHandler;\n      nodes.on('position', dragHandler = function(){\n        if( simUpdatingPos ){ return; }\n\n        setLayoutPositionForElement(this);\n      });\n\n      function setLayoutPositionForElement(element){\n        var fdId = element.scratch('springy').model.id;\n        var fdP = fdRenderer.layout.nodePoints[fdId].p;\n        var pos = element.position();\n        var positionInFd = (pos.x != null && pos.y != null) ? fromScreen(element.position()) : {\n          x: Math.random() * 4 - 2,\n          y: Math.random() * 4 - 2\n        };\n\n        fdP.x = positionInFd.x;\n        fdP.y = positionInFd.y;\n      }\n\n      var grabbableNodes = nodes.filter(\":grabbable\");\n\n      function start(){\n        self.stopped = false;\n\n        // disable grabbing if so set\n        if( options.ungrabifyWhileSimulating ){\n          grabbableNodes.ungrabify();\n        }\n\n        fdRenderer.start();\n      }\n\n      self.stopSystem = function(){\n        self.stopped = true;\n\n        graph.filterNodes(function(){\n          return false; // remove all nodes\n        });\n\n        if( options.ungrabifyWhileSimulating ){\n          grabbableNodes.grabify();\n        }\n\n        if( options.fit ){\n          cy.fit( options.padding );\n        }\n\n        nodes.off('drag position', dragHandler);\n\n        layout.one('layoutstop', options.stop);\n        layout.trigger({ type: 'layoutstop', layout: layout });\n\n        self.stopSystem = null;\n      };\n\n      start();\n      if( !options.infinite ){\n        setTimeout(function(){\n          self.stop();\n        }, options.maxSimulationTime);\n      }\n\n    }); // require\n\n    return this; // chaining\n  };\n\n  SpringyLayout.prototype.stop = function(){\n    if( this.stopSystem != null ){\n      this.stopSystem();\n    }\n\n    return this; // chaining\n  };\n\n  $$('layout', 'springy', SpringyLayout);\n\n\n})(cytoscape);\n\n;(function($$){ 'use strict';\n\n  function NullRenderer(options){\n    this.options = options;\n  }\n\n  NullRenderer.prototype.recalculateRenderedStyle = function(){\n  };\n\n  NullRenderer.prototype.notify = function(){\n    // the null renderer does nothing\n  };\n\n  $$('renderer', 'null', NullRenderer);\n\n})( cytoscape );\n","/*!\n * This file is part of Cytoscape.js 2.4.9.\n *\n * Cytoscape.js is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * Cytoscape.js is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with\n * Cytoscape.js. If not, see <http://www.gnu.org/licenses/>.\n */\nvar cytoscape;!function(e){\"use strict\";var t=cytoscape=function(){return cytoscape.init.apply(cytoscape,arguments)};t.version=\"2.4.9\",t.init=function(e){return void 0===e&&(e={}),t.is.plainObject(e)?new t.Core(e):t.is.string(e)?t.extension.apply(t.extension,arguments):void 0},t.fn={},\"undefined\"!=typeof module&&module.exports&&(module.exports=cytoscape),\"undefined\"!=typeof define&&define.amd&&define(\"cytoscape\",function(){return cytoscape}),e&&(e.cytoscape=cytoscape)}(\"undefined\"==typeof window?null:window),this.cytoscape=cytoscape,function(e){\"use strict\";var t=0,r=1,i=2,n=function(e){return this instanceof n?(this.id=\"Thenable/1.0.7\",this.state=t,this.fulfillValue=void 0,this.rejectReason=void 0,this.onFulfilled=[],this.onRejected=[],this.proxy={then:this.then.bind(this)},void(\"function\"==typeof e&&e.call(this,this.fulfill.bind(this),this.reject.bind(this)))):new n(e)};n.prototype={fulfill:function(e){return a(this,r,\"fulfillValue\",e)},reject:function(e){return a(this,i,\"rejectReason\",e)},then:function(e,t){var r=this,i=new n;return r.onFulfilled.push(l(e,i,\"fulfill\")),r.onRejected.push(l(t,i,\"reject\")),o(r),i.proxy}};var a=function(e,r,i,n){return e.state===t&&(e.state=r,e[i]=n,o(e)),e},o=function(e){e.state===r?s(e,\"onFulfilled\",e.fulfillValue):e.state===i&&s(e,\"onRejected\",e.rejectReason)},s=function(e,t,r){if(0!==e[t].length){var i=e[t];e[t]=[];var n=function(){for(var e=0;e<i.length;e++)i[e](r)};\"object\"==typeof process&&\"function\"==typeof process.nextTick?process.nextTick(n):\"function\"==typeof setImmediate?setImmediate(n):setTimeout(n,0)}},l=function(e,t,r){return function(i){if(\"function\"!=typeof e)t[r].call(t,i);else{var n;try{n=e(i)}catch(a){return void t.reject(a)}u(t,n)}}},u=function(e,t){if(e===t||e.proxy===t)return void e.reject(new TypeError(\"cannot resolve promise with itself\"));var r;if(\"object\"==typeof t&&null!==t||\"function\"==typeof t)try{r=t.then}catch(i){return void e.reject(i)}if(\"function\"!=typeof r)e.fulfill(t);else{var n=!1;try{r.call(t,function(r){n||(n=!0,r===t?e.reject(new TypeError(\"circular thenable chain\")):u(e,r))},function(t){n||(n=!0,e.reject(t))})}catch(i){n||e.reject(i)}}};e.Promise=\"undefined\"==typeof Promise?n:Promise,e.Promise.all=e.Promise.all||function(t){return new e.Promise(function(e,r){for(var i=new Array(t.length),n=0,a=function(r,a){i[r]=a,n++,n===t.length&&e(i)},o=0;o<t.length;o++)!function(e){var i=t[e],n=null!=i.then;if(n)i.then(function(t){a(e,t)},function(e){r(e)});else{var o=i;a(e,o)}}(o)})}}(cytoscape),function(e,t){\"use strict\";var r=\"string\",i=typeof{},n=\"function\";e.is={defined:function(e){return null!=e},string:function(e){return null!=e&&typeof e==r},fn:function(e){return null!=e&&typeof e===n},array:function(e){return Array.isArray?Array.isArray(e):null!=e&&e instanceof Array},plainObject:function(t){return null!=t&&typeof t===i&&!e.is.array(t)&&t.constructor===Object},object:function(e){return null!=e&&typeof e===i},number:function(e){return null!=e&&\"number\"==typeof e&&!isNaN(e)},integer:function(t){return e.is.number(t)&&Math.floor(t)===t},color:function(e){return null!=e&&\"string\"==typeof e&&\"\"!==$.Color(e).toString()},bool:function(e){return null!=e&&typeof e==typeof!0},elementOrCollection:function(t){return e.is.element(t)||e.is.collection(t)},element:function(t){return t instanceof e.Element&&t._private.single},collection:function(t){return t instanceof e.Collection&&!t._private.single},core:function(t){return t instanceof e.Core},style:function(t){return t instanceof e.Style},stylesheet:function(t){return t instanceof e.Stylesheet},event:function(t){return t instanceof e.Event},thread:function(t){return t instanceof e.Thread},fabric:function(t){return t instanceof e.Fabric},emptyString:function(t){return t?e.is.string(t)&&(\"\"===t||t.match(/^\\s+$/))?!0:!1:!0},nonemptyString:function(t){return t&&e.is.string(t)&&\"\"!==t&&!t.match(/^\\s+$/)?!0:!1},domElement:function(e){return\"undefined\"==typeof HTMLElement?!1:e instanceof HTMLElement},boundingBox:function(t){return e.is.plainObject(t)&&e.is.number(t.x1)&&e.is.number(t.x2)&&e.is.number(t.y1)&&e.is.number(t.y2)},promise:function(t){return e.is.object(t)&&e.is.fn(t.then)},touch:function(){return t&&(\"ontouchstart\"in t||t.DocumentTouch&&document instanceof DocumentTouch)},gecko:function(){return\"undefined\"!=typeof InstallTrigger||\"MozAppearance\"in document.documentElement.style},webkit:function(){return\"undefined\"!=typeof webkitURL||\"WebkitAppearance\"in document.documentElement.style},chromium:function(){return\"undefined\"!=typeof chrome},khtml:function(){return navigator.vendor.match(/kde/i)},khtmlEtc:function(){return e.is.khtml()||e.is.webkit()||e.is.chromium()},trident:function(){/*@cc_on!@*/\nreturn\"undefined\"!=typeof ActiveXObject||!1},windows:function(){return\"undefined\"!=typeof navigator&&navigator.appVersion.match(/Win/i)},mac:function(){return\"undefined\"!=typeof navigator&&navigator.appVersion.match(/Mac/i)},linux:function(){return\"undefined\"!=typeof navigator&&navigator.appVersion.match(/Linux/i)},unix:function(){return\"undefined\"!=typeof navigator&&navigator.appVersion.match(/X11/i)}}}(cytoscape,\"undefined\"==typeof window?null:window),function(e,t){\"use strict\";e.util={extend:function(){var t,r,i,n,a,o,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for(\"boolean\"==typeof s&&(c=s,s=arguments[1]||{},l=2),\"object\"==typeof s||e.is.fn(s)||(s={}),u===l&&(s=this,--l);u>l;l++)if(null!=(t=arguments[l]))for(r in t)i=s[r],n=t[r],s!==n&&(c&&n&&(e.is.plainObject(n)||(a=e.is.array(n)))?(a?(a=!1,o=i&&e.is.array(i)?i:[]):o=i&&e.is.plainObject(i)?i:{},s[r]=e.util.extend(c,o,n)):void 0!==n&&(s[r]=n));return s},require:function(r,i,n){var a;n=e.util.extend({msgIfNotFound:!0},n);var o=!1,s=function(e){o=!0,i(e)},l=function(e){t&&(a=t[r]),void 0!==a&&s(a),e&&e()},u=function(){o||c(d)},c=function(e){if(\"undefined\"!=typeof module&&module.exports&&require)try{a=require(r)}catch(t){}void 0!==a&&s(a),e&&e()},d=function(){o||h(p)},h=function(e){\"undefined\"!=typeof define&&define.amd&&require&&require([r],function(t){a=t,void 0!==a&&s(a),e&&e()},function(t){e&&e()})},p=function(){!o&&n.msgIfNotFound&&e.util.error(\"Cytoscape.js tried to pull in dependency `\"+r+\"` but no module (i.e. CommonJS, AMD, or window) was found\")};l(u)},requires:function(t,r){for(var i=[],n=[],a=function(){for(var e=0;e<t.length;e++)if(!n[e])return;r.apply(r,i)},o=0;o<t.length;o++)!function(){var r=t[o],s=o;e.util.require(r,function(e){i[s]=e,n[s]=!0,a()})}()},throttle:function(t,r,i){var n=!0,a=!0;return i===!1?n=!1:e.is.plainObject(i)&&(n=\"leading\"in i?i.leading:n,a=\"trailing\"in i?i.trailing:a),i=i||{},i.leading=n,i.maxWait=r,i.trailing=a,e.util.debounce(t,r,i)},now:function(){return+new Date},debounce:function(t,r,i){var n,a,o,s,l,u,c,d=0,h=!1,p=!0;if(e.is.fn(t)){if(r=Math.max(0,r)||0,i===!0){var v=!0;p=!1}else e.is.plainObject(i)&&(v=i.leading,h=\"maxWait\"in i&&(Math.max(r,i.maxWait)||0),p=\"trailing\"in i?i.trailing:p);var f=function(){var i=r-(e.util.now()-s);if(0>=i){a&&clearTimeout(a);var h=c;a=u=c=void 0,h&&(d=e.util.now(),o=t.apply(l,n),u||a||(n=l=null))}else u=setTimeout(f,i)},g=function(){u&&clearTimeout(u),a=u=c=void 0,(p||h!==r)&&(d=e.util.now(),o=t.apply(l,n),u||a||(n=l=null))};return function(){if(n=arguments,s=e.util.now(),l=this,c=p&&(u||!v),h===!1)var i=v&&!u;else{a||v||(d=s);var y=h-(s-d),m=0>=y;m?(a&&(a=clearTimeout(a)),d=s,o=t.apply(l,n)):a||(a=setTimeout(g,y))}return m&&u?u=clearTimeout(u):u||r===h||(u=setTimeout(f,r)),i&&(m=!0,o=t.apply(l,n)),!m||u||a||(n=l=null),o}}},error:function(e){if(!console)throw e;if(console.error)console.error.apply(console,arguments);else{if(!console.log)throw e;console.log.apply(console,arguments)}},clone:function(e){var t={};for(var r in e)t[r]=e[r];return t},copy:function(t){return null==t?t:e.is.array(t)?t.slice():e.is.plainObject(t)?e.util.clone(t):t},makeBoundingBox:function(e){if(null!=e.x1&&null!=e.y1){if(null!=e.x2&&null!=e.y2&&e.x2>=e.x1&&e.y2>=e.y1)return{x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2,w:e.x2-e.x1,h:e.y2-e.y1};if(null!=e.w&&null!=e.h&&e.w>=0&&e.h>=0)return{x1:e.x1,y1:e.y1,x2:e.x1+e.w,y2:e.y1+e.h,w:e.w,h:e.h}}},mapEmpty:function(e){var t=!0;if(null!=e)for(var r in e){t=!1;break}return t},pushMap:function(t){var r=e.util.getMap(t);null==r?e.util.setMap($.extend({},t,{value:[t.value]})):r.push(t.value)},setMap:function(t){for(var r,i=t.map,n=t.keys,a=n.length,o=0;a>o;o++){var r=n[o];e.is.plainObject(r)&&e.util.error(\"Tried to set map with object key\"),o<n.length-1?(null==i[r]&&(i[r]={}),i=i[r]):i[r]=t.value}},getMap:function(t){for(var r=t.map,i=t.keys,n=i.length,a=0;n>a;a++){var o=i[a];if(e.is.plainObject(o)&&e.util.error(\"Tried to get map with object key\"),r=r[o],null==r)return r}return r},deleteMap:function(t){for(var r=t.map,i=t.keys,n=i.length,a=t.keepChildren,o=0;n>o;o++){var s=i[o];e.is.plainObject(s)&&e.util.error(\"Tried to delete map with object key\");var l=o===t.keys.length-1;if(l)if(a)for(var u in r)a[u]||(r[u]=void 0);else r[s]=void 0;else r=r[s]}},capitalize:function(t){return e.is.emptyString(t)?t:t.charAt(0).toUpperCase()+t.substring(1)},trim:function(e){var t,r;for(t=0;t<e.length&&\" \"===e[t];t++);for(r=e.length-1;r>t&&\" \"===e[r];r--);return e.substring(t,r+1)},hex2tuple:function(e){if((4===e.length||7===e.length)&&\"#\"===e[0]){var t,r,i,n=4===e.length,a=16;return n?(t=parseInt(e[1]+e[1],a),r=parseInt(e[2]+e[2],a),i=parseInt(e[3]+e[3],a)):(t=parseInt(e[1]+e[2],a),r=parseInt(e[3]+e[4],a),i=parseInt(e[5]+e[6],a)),[t,r,i]}},hsl2tuple:function(t){function r(e,t,r){return 0>r&&(r+=1),r>1&&(r-=1),1/6>r?e+6*(t-e)*r:.5>r?t:2/3>r?e+(t-e)*(2/3-r)*6:e}var i,n,a,o,s,l,u,c,d=new RegExp(\"^\"+e.util.regex.hsla+\"$\").exec(t);if(d){if(n=parseInt(d[1]),0>n?n=(360- -1*n%360)%360:n>360&&(n%=360),n/=360,a=parseFloat(d[2]),0>a||a>100)return;if(a/=100,o=parseFloat(d[3]),0>o||o>100)return;if(o/=100,s=d[4],void 0!==s&&(s=parseFloat(s),0>s||s>1))return;if(0===a)l=u=c=Math.round(255*o);else{var h=.5>o?o*(1+a):o+a-o*a,p=2*o-h;l=Math.round(255*r(p,h,n+1/3)),u=Math.round(255*r(p,h,n)),c=Math.round(255*r(p,h,n-1/3))}i=[l,u,c,s]}return i},rgb2tuple:function(t){var r,i=new RegExp(\"^\"+e.util.regex.rgba+\"$\").exec(t);if(i){r=[];for(var n=[],a=1;3>=a;a++){var o=i[a];if(\"%\"===o[o.length-1]&&(n[a]=!0),o=parseFloat(o),n[a]&&(o=o/100*255),0>o||o>255)return;r.push(Math.floor(o))}var s=n[1]||n[2]||n[3],l=n[1]&&n[2]&&n[3];if(s&&!l)return;var u=i[4];if(void 0!==u){if(u=parseFloat(u),0>u||u>1)return;r.push(u)}}return r},colorname2tuple:function(t){return e.util.colors[t.toLowerCase()]},color2tuple:function(t){return(e.is.array(t)?t:null)||e.util.colorname2tuple(t)||e.util.hex2tuple(t)||e.util.rgb2tuple(t)||e.util.hsl2tuple(t)},tuple2hex:function(e){function t(e){var t=e.toString(16);return 1===t.length&&(t=\"0\"+t),t}var r=e[0],i=e[1],n=e[2];return\"#\"+t(r)+t(i)+t(n)},colors:{transparent:[0,0,0,0],aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],grey:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},memoize:function(e,t){var r=this,i={};return t||(t=function(){if(1===arguments.length)return arguments[0];for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);return e.join(\"$\")}),function(){var n,a=arguments,o=t.apply(r,a);return(n=i[o])||(n=i[o]=e.apply(r,a)),n}}},e.util.camel2dash=e.util.memoize(function(e){for(var t=[],r=0;r<e.length;r++){var i=e[r],n=i.toLowerCase(),a=i!==n;a?(t.push(\"-\"),t.push(n)):t.push(i)}var o=t.length===e.length;return o?e:t.join(\"\")}),e.util.dash2camel=e.util.memoize(function(e){for(var t=[],r=!1,i=0;i<e.length;i++){var n=e[i],a=\"-\"===n;a?r=!0:(r?t.push(n.toUpperCase()):t.push(n),r=!1)}return t.join(\"\")}),e.util.regex={},e.util.regex.number=\"(?:[-+]?(?:(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[Ee][+-]?\\\\d+)?))\",e.util.regex.rgba=\"rgb[a]?\\\\((\"+e.util.regex.number+\"[%]?)\\\\s*,\\\\s*(\"+e.util.regex.number+\"[%]?)\\\\s*,\\\\s*(\"+e.util.regex.number+\"[%]?)(?:\\\\s*,\\\\s*(\"+e.util.regex.number+\"))?\\\\)\",e.util.regex.rgbaNoBackRefs=\"rgb[a]?\\\\((?:\"+e.util.regex.number+\"[%]?)\\\\s*,\\\\s*(?:\"+e.util.regex.number+\"[%]?)\\\\s*,\\\\s*(?:\"+e.util.regex.number+\"[%]?)(?:\\\\s*,\\\\s*(?:\"+e.util.regex.number+\"))?\\\\)\",e.util.regex.hsla=\"hsl[a]?\\\\((\"+e.util.regex.number+\")\\\\s*,\\\\s*(\"+e.util.regex.number+\"[%])\\\\s*,\\\\s*(\"+e.util.regex.number+\"[%])(?:\\\\s*,\\\\s*(\"+e.util.regex.number+\"))?\\\\)\",e.util.regex.hslaNoBackRefs=\"hsl[a]?\\\\((?:\"+e.util.regex.number+\")\\\\s*,\\\\s*(?:\"+e.util.regex.number+\"[%])\\\\s*,\\\\s*(?:\"+e.util.regex.number+\"[%])(?:\\\\s*,\\\\s*(?:\"+e.util.regex.number+\"))?\\\\)\",e.util.regex.hex3=\"\\\\#[0-9a-fA-F]{3}\",e.util.regex.hex6=\"\\\\#[0-9a-fA-F]{6}\";var r=t?t.requestAnimationFrame||t.mozRequestAnimationFrame||t.webkitRequestAnimationFrame||t.msRequestAnimationFrame:null;r=r||function(e){e&&setTimeout(e,1e3/60)},e.util.requestAnimationFrame=function(e){r(e)}}(cytoscape,\"undefined\"==typeof window?null:window),function(e){\"use strict\";e.math={},e.math.signum=function(e){return e>0?1:0>e?-1:0},e.math.distance=function(e,t){var r=t.x-e.x,i=t.y-e.y;return Math.sqrt(r*r+i*i)},e.math.qbezierAt=function(e,t,r,i){return(1-i)*(1-i)*e+2*(1-i)*i*t+i*i*r},e.math.qbezierPtAt=function(t,r,i,n){return{x:e.math.qbezierAt(t.x,r.x,i.x,n),y:e.math.qbezierAt(t.y,r.y,i.y,n)}},e.math.boundingBoxesIntersect=function(e,t){return e.x1>t.x2?!1:t.x1>e.x2?!1:e.x2<t.x1?!1:t.x2<e.x1?!1:e.y2<t.y1?!1:t.y2<e.y1?!1:e.y1>t.y2?!1:t.y1>e.y2?!1:!0},e.math.inBoundingBox=function(e,t,r){return e.x1<=t&&t<=e.x2&&e.y1<=r&&r<=e.y2},e.math.pointInBoundingBox=function(e,t){return this.inBoundingBox(e,t.x,t.y)},e.math.roundRectangleIntersectLine=function(e,t,r,i,n,a,o){var s,l=this.getRoundRectangleRadius(n,a),u=n/2,c=a/2,d=r-u+l-o,h=i-c-o,p=r+u-l+o,v=h;if(s=this.finiteLinesIntersect(e,t,r,i,d,h,p,v,!1),s.length>0)return s;var f=r+u+o,g=i-c+l-o,y=f,m=i+c-l+o;if(s=this.finiteLinesIntersect(e,t,r,i,f,g,y,m,!1),s.length>0)return s;var x=r-u+l-o,b=i+c+o,w=r+u-l+o,_=b;if(s=this.finiteLinesIntersect(e,t,r,i,x,b,w,_,!1),s.length>0)return s;var E=r-u-o,S=i-c+l-o,D=E,k=i+c-l+o;if(s=this.finiteLinesIntersect(e,t,r,i,E,S,D,k,!1),s.length>0)return s;var T,P=r-u+l,C=i-c+l;if(T=this.intersectLineCircle(e,t,r,i,P,C,l+o),T.length>0&&T[0]<=P&&T[1]<=C)return[T[0],T[1]];var M=r+u-l,B=i-c+l;if(T=this.intersectLineCircle(e,t,r,i,M,B,l+o),T.length>0&&T[0]>=M&&T[1]<=B)return[T[0],T[1]];var N=r+u-l,I=i+c-l;if(T=this.intersectLineCircle(e,t,r,i,N,I,l+o),T.length>0&&T[0]>=N&&T[1]>=I)return[T[0],T[1]];var O=r-u+l,z=i+c-l;return T=this.intersectLineCircle(e,t,r,i,O,z,l+o),T.length>0&&T[0]<=O&&T[1]>=z?[T[0],T[1]]:[]},e.math.roundRectangleIntersectBox=function(e,t,r,i,n,a,o,s,l){var u=this.getRoundRectangleRadius(n,a),c=o-n/2-l,d=s-a/2+u-l,h=o+n/2+l,p=s+a/2-u+l,v=o-n/2+u-l,f=s-a/2-l,g=o+n/2-u+l,y=s+a/2+l,m=Math.min(e,r),x=Math.max(e,r),b=Math.min(t,i),w=Math.max(t,i);return c>x?!1:m>h?!1:f>w?!1:b>y?!1:c>=m&&x>=c&&d>=b&&w>=d?!0:h>=m&&x>=h&&d>=b&&w>=d?!0:h>=m&&x>=h&&p>=b&&w>=p?!0:c>=m&&x>=c&&p>=b&&w>=p?!0:m>=c&&h>=m&&b>=d&&p>=b?!0:x>=c&&h>=x&&b>=d&&p>=b?!0:x>=c&&h>=x&&w>=d&&p>=w?!0:m>=c&&h>=m&&w>=d&&p>=w?!0:v>=m&&x>=v&&f>=b&&w>=f?!0:g>=m&&x>=g&&f>=b&&w>=f?!0:g>=m&&x>=g&&y>=b&&w>=y?!0:v>=m&&x>=v&&y>=b&&w>=y?!0:m>=v&&g>=m&&b>=f&&y>=b?!0:x>=v&&g>=x&&b>=f&&y>=b?!0:x>=v&&g>=x&&w>=f&&y>=w?!0:m>=v&&g>=m&&w>=f&&y>=w?!0:this.boxIntersectEllipse(m,b,x,w,l,2*u,2*u,v+l,d+l)?!0:this.boxIntersectEllipse(m,b,x,w,l,2*u,2*u,g-l,d+l)?!0:this.boxIntersectEllipse(m,b,x,w,l,2*u,2*u,g-l,p-l)?!0:this.boxIntersectEllipse(m,b,x,w,l,2*u,2*u,v+l,p-l)?!0:!1},e.math.checkInBoundingCircle=function(e,t,r,i,n,a,o,s){return e=(e-o)/(n+i),t=(t-s)/(a+i),r>=e*e+t*t},e.math.boxInBezierVicinity=function(e,t,r,i,n,a,o,s,l,u,c){var d=.25*n+.5*o+.25*l,h=.25*a+.5*s+.25*u,p=Math.min(e,r)-c,v=Math.min(t,i)-c,f=Math.max(e,r)+c,g=Math.max(t,i)+c;if(n>=p&&f>=n&&a>=v&&g>=a)return 1;if(l>=p&&f>=l&&u>=v&&g>=u)return 1;if(d>=p&&f>=d&&h>=v&&g>=h)return 1;if(o>=p&&f>=o&&s>=v&&g>=s)return 1;var y=Math.min(n,d,l),m=Math.min(a,h,u),x=Math.max(n,d,l),b=Math.max(a,h,u);return y>f||p>x||m>g||v>b?0:1},e.math.checkBezierInBox=function(t,r,i,n,a,o,s,l,u,c,d){function h(d){var h=e.math.qbezierAt(a,s,u,d),p=e.math.qbezierAt(o,l,c,d);return h>=t&&i>=h&&p>=r&&n>=p}for(var p=0;1>=p;p+=.25)if(!h(p))return!1;return!0},e.math.checkStraightEdgeInBox=function(e,t,r,i,n,a,o,s,l){return n>=e&&r>=n&&o>=e&&r>=o&&a>=t&&i>=a&&s>=t&&i>=s},e.math.checkStraightEdgeCrossesBox=function(e,t,r,i,n,a,o,s,l){var u,c,d=Math.min(e,r)-l,h=Math.min(t,i)-l,p=Math.max(e,r)+l,v=Math.max(t,i)+l,f=o-n,g=n,y=s-a,m=a;if(Math.abs(f)<1e-4)return n>=d&&p>=n&&Math.min(a,s)<=h&&Math.max(a,s)>=v;var x=(d-g)/f;if(x>0&&1>=x&&(u=y*x+m,u>=h&&v>=u))return!0;var b=(p-g)/f;if(b>0&&1>=b&&(u=y*b+m,u>=h&&v>=u))return!0;var w=(h-m)/y;if(w>0&&1>=w&&(c=f*w+g,c>=d&&p>=c))return!0;var _=(v-m)/y;return _>0&&1>=_&&(c=f*_+g,c>=d&&p>=c)?!0:!1},e.math.checkBezierCrossesBox=function(e,t,r,i,n,a,o,s,l,u,c){var d=Math.min(e,r)-c,h=Math.min(t,i)-c,p=Math.max(e,r)+c,v=Math.max(t,i)+c;if(n>=d&&p>=n&&a>=h&&v>=a)return!0;if(l>=d&&p>=l&&u>=h&&v>=u)return!0;var f=n-2*o+l,g=-2*n+2*o,y=n,m=[];if(Math.abs(f)<1e-4){var x=(d-n)/g,b=(p-n)/g;m.push(x,b)}else{var w,_,E=g*g-4*f*(y-d);if(E>0){var S=Math.sqrt(E);w=(-g+S)/(2*f),_=(-g-S)/(2*f),m.push(w,_)}var D,k,T=g*g-4*f*(y-p);if(T>0){var S=Math.sqrt(T);D=(-g+S)/(2*f),k=(-g-S)/(2*f),m.push(D,k)}}m.sort(function(e,t){return e-t});var P=a-2*s+u,C=-2*a+2*s,M=a,B=[];if(Math.abs(P)<1e-4){var N=(h-a)/C,I=(v-a)/C;B.push(N,I)}else{var O,z,L=C*C-4*P*(M-h);if(L>0){var S=Math.sqrt(L);O=(-C+S)/(2*P),z=(-C-S)/(2*P),B.push(O,z)}var R,V,A=C*C-4*P*(M-v);if(A>0){var S=Math.sqrt(A);R=(-C+S)/(2*P),V=(-C-S)/(2*P),B.push(R,V)}}B.sort(function(e,t){return e-t});for(var X=0;X<m.length;X+=2)for(var F=1;F<B.length;F+=2)if(m[X]<B[F]&&B[F]>=0&&m[X]<=1&&m[X+1]>B[F-1]&&B[F-1]<=1&&m[X+1]>=0)return!0;return!1},e.math.inLineVicinity=function(e,t,r,i,n,a,o){var s=o,l=Math.min(r,n),u=Math.max(r,n),c=Math.min(i,a),d=Math.max(i,a);return e>=l-s&&u+s>=e&&t>=c-s&&d+s>=t},e.math.inBezierVicinity=function(e,t,r,i,n,a,o,s,l){var u={x1:Math.min(r,o,n),x2:Math.max(r,o,n),y1:Math.min(i,s,a),y2:Math.max(i,s,a)};return e<u.x1||e>u.x2||t<u.y1||t>u.y2?!1:!0},e.math.solveCubic=function(e,t,r,i,n){t/=e,r/=e,i/=e;var a,o,s,l,u,c,d,h;return o=(3*r-t*t)/9,s=-(27*i)+t*(9*r-2*(t*t)),s/=54,a=o*o*o+s*s,n[1]=0,d=t/3,a>0?(u=s+Math.sqrt(a),u=0>u?-Math.pow(-u,1/3):Math.pow(u,1/3),c=s-Math.sqrt(a),c=0>c?-Math.pow(-c,1/3):Math.pow(c,1/3),n[0]=-d+u+c,d+=(u+c)/2,n[4]=n[2]=-d,d=Math.sqrt(3)*(-c+u)/2,n[3]=d,void(n[5]=-d)):(n[5]=n[3]=0,0===a?(h=0>s?-Math.pow(-s,1/3):Math.pow(s,1/3),n[0]=-d+2*h,void(n[4]=n[2]=-(h+d))):(o=-o,l=o*o*o,l=Math.acos(s/Math.sqrt(l)),h=2*Math.sqrt(o),n[0]=-d+h*Math.cos(l/3),n[2]=-d+h*Math.cos((l+2*Math.PI)/3),void(n[4]=-d+h*Math.cos((l+4*Math.PI)/3))))},e.math.sqDistanceToQuadraticBezier=function(e,t,r,i,n,a,o,s){var l=1*r*r-4*r*n+2*r*o+4*n*n-4*n*o+o*o+i*i-4*i*a+2*i*s+4*a*a-4*a*s+s*s,u=9*r*n-3*r*r-3*r*o-6*n*n+3*n*o+9*i*a-3*i*i-3*i*s-6*a*a+3*a*s,c=3*r*r-6*r*n+r*o-r*e+2*n*n+2*n*e-o*e+3*i*i-6*i*a+i*s-i*t+2*a*a+2*a*t-s*t,d=1*r*n-r*r+r*e-n*e+i*a-i*i+i*t-a*t,h=[];this.solveCubic(l,u,c,d,h);for(var p=1e-7,v=[],f=0;6>f;f+=2)Math.abs(h[f+1])<p&&h[f]>=0&&h[f]<=1&&v.push(h[f]);v.push(1),v.push(0);for(var g,y,m,x,b=-1,w=0;w<v.length;w++)y=Math.pow(1-v[w],2)*r+2*(1-v[w])*v[w]*n+v[w]*v[w]*o,m=Math.pow(1-v[w],2)*i+2*(1-v[w])*v[w]*a+v[w]*v[w]*s,x=Math.pow(y-e,2)+Math.pow(m-t,2),b>=0?b>x&&(b=x,g=v[w]):(b=x,g=v[w]);return b},e.math.sqDistanceToFiniteLine=function(e,t,r,i,n,a){var o=[e-r,t-i],s=[n-r,a-i],l=s[0]*s[0]+s[1]*s[1],u=o[0]*o[0]+o[1]*o[1],c=o[0]*s[0]+o[1]*s[1],d=c*c/l;return 0>c?u:d>l?(e-n)*(e-n)+(t-a)*(t-a):u-d},e.math.pointInsidePolygon=function(e,t,r,i,n,a,o,s,l){var u=new Array(r.length),c=Math.asin(s[1]/Math.sqrt(s[0]*s[0]+s[1]*s[1]));s[0]<0?c+=Math.PI/2:c=-c-Math.PI/2;for(var d=Math.cos(-c),h=Math.sin(-c),p=0;p<u.length/2;p++)u[2*p]=a/2*(r[2*p]*d-r[2*p+1]*h),u[2*p+1]=o/2*(r[2*p+1]*d+r[2*p]*h),u[2*p]+=i,u[2*p+1]+=n;var v;if(l>0){var f=this.expandPolygon(u,-l);v=this.joinLines(f)}else v=u;for(var g,y,m,x,b,w=0,_=0,p=0;p<v.length/2;p++)if(g=v[2*p],y=v[2*p+1],p+1<v.length/2?(m=v[2*(p+1)],x=v[2*(p+1)+1]):(m=v[2*(p+1-v.length/2)],x=v[2*(p+1-v.length/2)+1]),g==e&&m==e);else{if(!(g>=e&&e>=m||e>=g&&m>=e))continue;b=(e-g)/(m-g)*(x-y)+y,b>t&&w++,t>b&&_++}return w%2===0?!1:!0},e.math.joinLines=function(e){for(var t,r,i,n,a,o,s,l,u=new Array(e.length/2),c=0;c<e.length/4;c++){t=e[4*c],r=e[4*c+1],i=e[4*c+2],n=e[4*c+3],c<e.length/4-1?(a=e[4*(c+1)],o=e[4*(c+1)+1],s=e[4*(c+1)+2],l=e[4*(c+1)+3]):(a=e[0],o=e[1],s=e[2],l=e[3]);var d=this.finiteLinesIntersect(t,r,i,n,a,o,s,l,!0);u[2*c]=d[0],u[2*c+1]=d[1]}return u},e.math.expandPolygon=function(e,t){for(var r,i,n,a,o=new Array(2*e.length),s=0;s<e.length/2;s++){r=e[2*s],i=e[2*s+1],s<e.length/2-1?(n=e[2*(s+1)],a=e[2*(s+1)+1]):(n=e[0],a=e[1]);var l=a-i,u=-(n-r),c=Math.sqrt(l*l+u*u),d=l/c,h=u/c;o[4*s]=r+d*t,o[4*s+1]=i+h*t,o[4*s+2]=n+d*t,o[4*s+3]=a+h*t}return o},e.math.intersectLineEllipse=function(e,t,r,i,n,a){var o=r-e,s=i-t;o/=n,s/=a;var l=Math.sqrt(o*o+s*s),u=l-1;if(0>u)return[];var c=u/l;return[(r-e)*c+e,(i-t)*c+t]},e.math.dotProduct=function(e,t){if(2!=e.length||2!=t.length)throw\"dot product: arguments are not vectors\";return e[0]*t[0]+e[1]*t[1]},e.math.intersectLineCircle=function(e,t,r,i,n,a,o){var s=[r-e,i-t],l=[n,a],u=[e-n,t-a],c=s[0]*s[0]+s[1]*s[1],d=2*(u[0]*s[0]+u[1]*s[1]),l=u[0]*u[0]+u[1]*u[1]-o*o,h=d*d-4*c*l;if(0>h)return[];var p=(-d+Math.sqrt(h))/(2*c),v=(-d-Math.sqrt(h))/(2*c),f=Math.min(p,v),g=Math.max(p,v),y=[];if(f>=0&&1>=f&&y.push(f),g>=0&&1>=g&&y.push(g),0===y.length)return[];var m=y[0]*s[0]+e,x=y[0]*s[1]+t;if(y.length>1){if(y[0]==y[1])return[m,x];var b=y[1]*s[0]+e,w=y[1]*s[1]+t;return[m,x,b,w]}return[m,x]},e.math.findCircleNearPoint=function(e,t,r,i,n){var a=i-e,o=n-t,s=Math.sqrt(a*a+o*o),l=a/s,u=o/s;return[e+l*r,t+u*r]},e.math.findMaxSqDistanceToOrigin=function(e){for(var t,r=1e-6,i=0;i<e.length/2;i++)t=e[2*i]*e[2*i]+e[2*i+1]*e[2*i+1],t>r&&(r=t);return r},e.math.finiteLinesIntersect=function(e,t,r,i,n,a,o,s,l){var u=(o-n)*(t-a)-(s-a)*(e-n),c=(r-e)*(t-a)-(i-t)*(e-n),d=(s-a)*(r-e)-(o-n)*(i-t);if(0!==d){var h=u/d,p=c/d;return h>=0&&1>=h&&p>=0&&1>=p?[e+h*(r-e),t+h*(i-t)]:l?[e+h*(r-e),t+h*(i-t)]:[]}return 0===u||0===c?[e,r,o].sort()[1]===o?[o,s]:[e,r,n].sort()[1]===n?[n,a]:[n,o,r].sort()[1]===r?[r,i]:[]:[]},e.math.boxIntersectEllipse=function(e,t,r,i,n,a,o,s,l){if(e>r){var u=e;e=r,r=u}if(t>i){var c=t;t=i,i=c}var d=[s-a/2-n,l],h=[s+a/2+n,l],p=[s,l-o/2-n],v=[s,l+o/2+n];return r<d[0]?!1:e>h[0]?!1:t>v[1]?!1:i<p[1]?!1:e<=h[0]&&h[0]<=r&&t<=h[1]&&h[1]<=i?!0:e<=d[0]&&d[0]<=r&&t<=d[1]&&d[1]<=i?!0:e<=p[0]&&p[0]<=r&&t<=p[1]&&p[1]<=i?!0:e<=v[0]&&v[0]<=r&&t<=v[1]&&v[1]<=i?!0:(e=(e-s)/(a/2+n),r=(r-s)/(a/2+n),t=(t-l)/(o/2+n),i=(i-l)/(o/2+n),1>=e*e+t*t?!0:1>=r*r+t*t?!0:1>=r*r+i*i?!0:1>=e*e+i*i?!0:!1)},e.math.boxIntersectPolygon=function(t,r,i,n,a,o,s,l,u,c,d){if(t>i){var h=t;t=i,i=h}if(r>n){var p=r;r=n,n=p}var v=new Array(a.length),f=Math.asin(c[1]/Math.sqrt(c[0]*c[0]+c[1]*c[1]));c[0]<0?f+=Math.PI/2:f=-f-Math.PI/2;for(var g=Math.cos(-f),y=Math.sin(-f),m=0;m<v.length/2;m++)v[2*m]=o/2*(a[2*m]*g-a[2*m+1]*y),v[2*m+1]=s/2*(a[2*m+1]*g+a[2*m]*y),v[2*m]+=l,v[2*m+1]+=u;for(var x=v[0],b=v[0],w=v[1],_=v[1],m=1;m<v.length/2;m++)v[2*m]>b&&(b=v[2*m]),v[2*m]<x&&(x=v[2*m]),v[2*m+1]>_&&(_=v[2*m+1]),v[2*m+1]<w&&(w=v[2*m+1]);if(x-d>i)return!1;if(t>b+d)return!1;if(w-d>n)return!1;if(r>_+d)return!1;var E;if(d>0){var S=e.math.expandPolygon(v,-d);E=e.math.joinLines(S)}else E=v;for(var m=0;m<v.length/2;m++)if(t<=v[2*m]&&v[2*m]<=i&&r<=v[2*m+1]&&v[2*m+1]<=n)return!0;for(var m=0;m<E.length/2;m++){var D,k,T=E[2*m],P=E[2*m+1];if(m<E.length/2-1?(D=E[2*(m+1)],k=E[2*(m+1)+1]):(D=E[0],k=E[1]),e.math.finiteLinesIntersect(T,P,D,k,t,r,i,r,!1).length>0)return!0;if(e.math.finiteLinesIntersect(T,P,D,k,t,n,i,n,!1).length>0)return!0;if(e.math.finiteLinesIntersect(T,P,D,k,t,r,t,n,!1).length>0)return!0;if(e.math.finiteLinesIntersect(T,P,D,k,i,r,i,n,!1).length>0)return!0}return!1},e.math.polygonIntersectLine=function(t,r,i,n,a,o,s,l){for(var u,c=[],d=new Array(i.length),h=0;h<d.length/2;h++)d[2*h]=i[2*h]*o+n,d[2*h+1]=i[2*h+1]*s+a;var p;if(l>0){var v=e.math.expandPolygon(d,-l);p=e.math.joinLines(v)}else p=d;for(var f,g,y,m,h=0;h<p.length/2;h++)f=p[2*h],g=p[2*h+1],h<p.length/2-1?(y=p[2*(h+1)],m=p[2*(h+1)+1]):(y=p[0],m=p[1]),u=this.finiteLinesIntersect(t,r,n,a,f,g,y,m),0!==u.length&&c.push(u[0],u[1]);return c},e.math.shortenIntersection=function(e,t,r){var i=[e[0]-t[0],e[1]-t[1]],n=Math.sqrt(i[0]*i[0]+i[1]*i[1]),a=(n-r)/n;return 0>a&&(a=1e-5),[t[0]+a*i[0],t[1]+a*i[1]]},e.math.generateUnitNgonPointsFitToSquare=function(t,r){var i=e.math.generateUnitNgonPoints(t,r);return i=e.math.fitPolygonToSquare(i)},e.math.fitPolygonToSquare=function(e){for(var t,r,i=e.length/2,n=1/0,a=1/0,o=-(1/0),s=-(1/0),l=0;i>l;l++)t=e[2*l],r=e[2*l+1],n=Math.min(n,t),o=Math.max(o,t),a=Math.min(a,r),s=Math.max(s,r);for(var u=2/(o-n),c=2/(s-a),l=0;i>l;l++)t=e[2*l]=e[2*l]*u,r=e[2*l+1]=e[2*l+1]*c,n=Math.min(n,t),o=Math.max(o,t),a=Math.min(a,r),s=Math.max(s,r);if(-1>a)for(var l=0;i>l;l++)r=e[2*l+1]=e[2*l+1]+(-1-a);return e},e.math.generateUnitNgonPoints=function(e,t){var r=1/e*2*Math.PI,i=e%2===0?Math.PI/2+r/2:Math.PI/2;i+=t;for(var n,a,o,s=new Array(2*e),l=0;e>l;l++)n=l*r+i,a=s[2*l]=Math.cos(n),o=s[2*l+1]=Math.sin(-n);return s},e.math.getRoundRectangleRadius=function(e,t){return Math.min(e/4,t/4,8)}}(cytoscape),function(e){\"use strict\";function t(t,r,i){var n={};switch(n[r]=i,t){case\"core\":case\"collection\":e.fn[t](n)}if(\"layout\"===t){for(var o=i.prototype,s=[],l=0;l<s.length;l++){var u=s[l];o[u]=o[u]||function(){return this}}o.start&&!o.run?o.run=function(){return this.start(),this}:!o.start&&o.run&&(o.start=function(){return this.run(),this}),o.stop||(o.stop=function(){var e=this.options;return e&&e.animate&&e.eles.stop(),this}),o.on=e.define.on({layout:!0}),o.one=e.define.on({layout:!0,unbindSelfOnTrigger:!0}),o.once=e.define.on({layout:!0,unbindAllBindersOnTrigger:!0}),o.off=e.define.off({layout:!0}),o.trigger=e.define.trigger({layout:!0}),e.define.eventAliasesOn(o)}return e.util.setMap({map:a,keys:[t,r],value:i})}function r(t,r){return e.util.getMap({map:a,keys:[t,r]})}function i(t,r,i,n,a){return e.util.setMap({map:o,keys:[t,r,i,n],value:a})}function n(t,r,i,n){return e.util.getMap({map:o,keys:[t,r,i,n]})}var a={};e.extensions=a;var o={};e.modules=o,e.extension=function(){return 2==arguments.length?r.apply(this,arguments):3==arguments.length?t.apply(this,arguments):4==arguments.length?n.apply(this,arguments):5==arguments.length?i.apply(this,arguments):void e.util.error(\"Invalid extension access syntax\")}}(cytoscape),function(e,t){\"use strict\";var r=function(e){var t=e[0]._cyreg=e[0]._cyreg||{};return t};t.registerJquery=function(e){e&&(e.fn.cytoscape||(e.fn.cytoscape=function(i){var n=e(this);if(\"get\"===i)return r(n).cy;if(t.is.fn(i)){var a=i,o=r(n).cy;if(o&&o.isReady())o.trigger(\"ready\",[],a);else{var s=r(n),l=s.readies=s.readies||[];l.push(a)}}else if(t.is.plainObject(i))return n.each(function(){var t=e.extend({},i,{container:e(this)[0]});cytoscape(t)})},e.cytoscape=cytoscape,null==e.fn.cy&&null==e.cy&&(e.fn.cy=e.fn.cytoscape,e.cy=e.cytoscape)))},t.registerJquery(e)}(\"undefined\"!=typeof jQuery?jQuery:null,cytoscape),function(e){\"use strict\";function t(){return!1}function r(){return!0}e.Event=function(i,n){return this instanceof e.Event?(i&&i.type?(this.originalEvent=i,this.type=i.type,this.isDefaultPrevented=i.defaultPrevented?r:t):this.type=i,n&&(this.type=void 0!==n.type?n.type:this.type,this.cy=n.cy,this.cyTarget=n.cyTarget,this.cyPosition=n.cyPosition,this.cyRenderedPosition=n.cyRenderedPosition,this.namespace=n.namespace,this.layout=n.layout,this.data=n.data,this.message=n.message),void(this.timeStamp=i&&i.timeStamp||+new Date)):new e.Event(i,n)},e.Event.prototype={preventDefault:function(){this.isDefaultPrevented=r;var e=this.originalEvent;e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){this.isPropagationStopped=r;var e=this.originalEvent;e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=r,this.stopPropagation()},isDefaultPrevented:t,isPropagationStopped:t,isImmediatePropagationStopped:t}}(cytoscape),function(e){\"use strict\";e.define={data:function(t){var r={field:\"data\",bindingEvent:\"data\",allowBinding:!1,allowSetting:!1,allowGetting:!1,settingEvent:\"data\",settingTriggersEvent:!1,triggerFnName:\"trigger\",immutableKeys:{},updateStyle:!1,onSet:function(e){},canSet:function(e){return!0}};return t=e.util.extend({},r,t),function(r,i){var n=t,a=this,o=void 0!==a.length,s=o?a:[a],l=o?a[0]:a;if(e.is.string(r)){if(n.allowGetting&&void 0===i){var u;return l&&(u=l._private[n.field][r]),u}if(n.allowSetting&&void 0!==i){var c=!n.immutableKeys[r];if(c){for(var d=0,h=s.length;h>d;d++)n.canSet(s[d])&&(s[d]._private[n.field][r]=i);n.updateStyle&&a.updateStyle(),n.onSet(a),n.settingTriggersEvent&&a[n.triggerFnName](n.settingEvent)}}}else if(n.allowSetting&&e.is.plainObject(r)){var p,v,f=r;for(p in f){v=f[p];var c=!n.immutableKeys[p];if(c)for(var d=0,h=s.length;h>d;d++)n.canSet(s[d])&&(s[d]._private[n.field][p]=v)}n.updateStyle&&a.updateStyle(),n.onSet(a),n.settingTriggersEvent&&a[n.triggerFnName](n.settingEvent)}else if(n.allowBinding&&e.is.fn(r)){var g=r;a.bind(n.bindingEvent,g)}else if(n.allowGetting&&void 0===r){var u;return l&&(u=l._private[n.field]),u}return a}},removeData:function(t){var r={field:\"data\",event:\"data\",triggerFnName:\"trigger\",triggerEvent:!1,immutableKeys:{}};return t=e.util.extend({},r,t),function(r){var i=t,n=this,a=void 0!==n.length,o=a?n:[n];if(e.is.string(r)){for(var s=r.split(/\\s+/),l=s.length,u=0;l>u;u++){var c=s[u];if(!e.is.emptyString(c)){var d=!i.immutableKeys[c];if(d)for(var h=0,p=o.length;p>h;h++)o[h]._private[i.field][c]=void 0}}i.triggerEvent&&n[i.triggerFnName](i.event)}else if(void 0===r){for(var h=0,p=o.length;p>h;h++){var v=o[h]._private[i.field];for(var c in v){var f=!i.immutableKeys[c];f&&(v[c]=void 0)}}i.triggerEvent&&n[i.triggerFnName](i.event)}return n}},event:{regex:/(\\w+)(\\.\\w+)?/,optionalTypeRegex:/(\\w+)?(\\.\\w+)?/,falseCallback:function(){return!1}},on:function(t){var r={unbindSelfOnTrigger:!1,unbindAllBindersOnTrigger:!1};return t=e.util.extend({},r,t),function(r,i,n,a){var o=this,s=void 0!==o.length,l=s?o:[o],u=e.is.string(r),c=t;if(e.is.plainObject(i)?(a=n,n=i,i=void 0):(e.is.fn(i)||i===!1)&&(a=i,n=void 0,i=void 0),(e.is.fn(n)||n===!1)&&(a=n,n=void 0),!e.is.fn(a)&&a!==!1&&u)return o;if(u){var d={};d[r]=a,r=d}for(var h in r)if(a=r[h],a===!1&&(a=e.define.event.falseCallback),e.is.fn(a)){h=h.split(/\\s+/);for(var p=0;p<h.length;p++){var v=h[p];if(!e.is.emptyString(v)){var f=v.match(e.define.event.regex);if(f)for(var g=f[1],y=f[2]?f[2]:void 0,m={callback:a,data:n,delegated:i?!0:!1,selector:i,selObj:new e.Selector(i),type:g,namespace:y,unbindSelfOnTrigger:c.unbindSelfOnTrigger,unbindAllBindersOnTrigger:c.unbindAllBindersOnTrigger,binders:l},x=0;x<l.length;x++){var b=l[x]._private;b.listeners=b.listeners||[],b.listeners.push(m)}}}}return o}},eventAliasesOn:function(t){var r=t;r.addListener=r.listen=r.bind=r.on,r.removeListener=r.unlisten=r.unbind=r.off,r.emit=r.trigger,r.pon=r.promiseOn=function(t,r){var i=this,n=Array.prototype.slice.call(arguments,0);return new e.Promise(function(e,t){var r=function(t){i.off.apply(i,o),e(t)},a=n.concat([r]),o=a.concat([]);i.on.apply(i,a)})}},off:function(t){var r={};return t=e.util.extend({},r,t),function(t,r,i){var n=this,a=void 0!==n.length,o=a?n:[n],s=e.is.string(t);if(0===arguments.length){for(var l=0;l<o.length;l++)o[l]._private.listeners=[];return n}if((e.is.fn(r)||r===!1)&&(i=r,r=void 0),s){var u={};u[t]=i,t=u}for(var c in t){i=t[c],i===!1&&(i=e.define.event.falseCallback),c=c.split(/\\s+/);for(var d=0;d<c.length;d++){var h=c[d];if(!e.is.emptyString(h)){var p=h.match(e.define.event.optionalTypeRegex);if(p)for(var v=p[1]?p[1]:void 0,f=p[2]?p[2]:void 0,l=0;l<o.length;l++)for(var g=o[l]._private.listeners=o[l]._private.listeners||[],y=0;y<g.length;y++){var m=g[y],x=!f||f===m.namespace,b=!v||m.type===v,w=!i||i===m.callback,_=x&&b&&w;_&&(g.splice(y,1),y--)}}}}return n}},trigger:function(t){var r={};return t=e.util.extend({},r,t),function(r,i,n){var a=this,o=void 0!==a.length,s=o?a:[a],l=e.is.string(r),u=e.is.plainObject(r),c=e.is.event(r),d=this._private.cy||(e.is.core(this)?this:null),h=d?d.hasCompoundNodes():!1;if(l){var p=r.split(/\\s+/);r=[];for(var v=0;v<p.length;v++){var f=p[v];if(!e.is.emptyString(f)){var g=f.match(e.define.event.regex),y=g[1],m=g[2]?g[2]:void 0;r.push({type:y,namespace:m})}}}else if(u){var x=r;r=[x]}i?e.is.array(i)||(i=[i]):i=[];for(var v=0;v<r.length;v++)for(var b=r[v],w=0;w<s.length;w++){var f,_=s[w],E=_._private.listeners=_._private.listeners||[],S=e.is.element(_),D=S||t.layout;if(c?(f=b,f.cyTarget=f.cyTarget||_,f.cy=f.cy||d):f=new e.Event(b,{cyTarget:_,cy:d,namespace:b.namespace}),b.layout&&(f.layout=b.layout),t.layout&&(f.layout=_),f.cyPosition){var k=f.cyPosition,T=d.zoom(),P=d.pan();f.cyRenderedPosition={x:k.x*T+P.x,y:k.y*T+P.y}}n&&(E=[{namespace:f.namespace,type:f.type,callback:n}]);for(var C=0;C<E.length;C++){var M=E[C],B=!M.namespace||M.namespace===f.namespace,N=M.type===f.type,I=M.delegated?_!==f.cyTarget&&e.is.element(f.cyTarget)&&M.selObj.matches(f.cyTarget):!0,O=B&&N&&I;if(O){var z=[f];if(z=z.concat(i),M.data?f.data=M.data:f.data=void 0,(M.unbindSelfOnTrigger||M.unbindAllBindersOnTrigger)&&(E.splice(C,1),C--),M.unbindAllBindersOnTrigger)for(var L=M.binders,R=0;R<L.length;R++){var V=L[R];if(V&&V!==_)for(var A=V._private.listeners,X=0;X<A.length;X++){var F=A[X];F===M&&(A.splice(X,1),X--)}}var Y=M.delegated?f.cyTarget:_,q=M.callback.apply(Y,z);\n(q===!1||f.isPropagationStopped())&&(D=!1,q===!1&&(f.stopPropagation(),f.preventDefault()))}}if(D){var j=h?_._private.parent:null,$=null!=j&&0!==j.length;$?(j=j[0],j.trigger(f)):d.trigger(f)}}return a}},animated:function(t){var r={};return t=e.util.extend({},r,t),function(){var e=this,t=void 0!==e.length,r=t?e:[e],i=this._private.cy||this;if(!i.styleEnabled())return!1;var n=r[0];return n?n._private.animation.current.length>0:void 0}},clearQueue:function(t){var r={};return t=e.util.extend({},r,t),function(){var e=this,t=void 0!==e.length,r=t?e:[e],i=this._private.cy||this;if(!i.styleEnabled())return this;for(var n=0;n<r.length;n++){var a=r[n];a._private.animation.queue=[]}return this}},delay:function(t){var r={};return t=e.util.extend({},r,t),function(e,t){var r=this._private.cy||this;return r.styleEnabled()?(this.animate({delay:e},{duration:e,complete:t}),this):this}},animate:function(t){var r={};return t=e.util.extend({},r,t),function(e,t){var r=this,i=void 0!==r.length,n=i?r:[r],a=this._private.cy||this,o=!i,s=!o;if(!a.styleEnabled())return this;var l,u=+new Date,c=a.style();switch(void 0===t&&(t={}),void 0===t.duration&&(t.duration=400),t.duration){case\"slow\":t.duration=600;break;case\"fast\":t.duration=200}var d=!0;if(e)for(var h in e){d=!1;break}if(d)return this;if(s&&(e.style=c.getPropsList(e.style||e.css),e.css=void 0),e.renderedPosition&&s){var p=e.renderedPosition,v=a.pan(),f=a.zoom();e.position={x:(p.x-v.x)/f,y:(p.y-v.y)/f}}if(e.panBy&&o){var g=e.panBy,y=a.pan();e.pan={x:y.x+g.x,y:y.y+g.y}}var m=e.center||e.centre;if(m&&o){var x=a.getCenterPan(m.eles,e.zoom);x&&(e.pan=x)}if(e.fit&&o){var b=e.fit,w=a.getFitViewport(b.eles||b.boundingBox,b.padding);w&&(e.pan=w.pan,e.zoom=w.zoom)}for(var h=0;h<n.length;h++){var _=n[h];l=_.animated()&&(void 0===t.queue||t.queue)?_._private.animation.queue:_._private.animation.current,l.push({properties:e,duration:t.duration,params:t,callTime:u})}return s&&a.addToAnimationPool(this),this}},stop:function(t){var r={};return t=e.util.extend({},r,t),function(e,t){var r=this,i=void 0!==r.length,n=i?r:[r],a=this._private.cy||this;if(!a.styleEnabled())return this;for(var o=0;o<n.length;o++){for(var s=n[o],l=s._private.animation.current,u=0;u<l.length;u++){var c=l[u];t&&(c.duration=0)}e&&(s._private.animation.queue=[]),t||(s._private.animation.current=[])}return a.notify({collection:this,type:\"draw\"}),this}}}}(cytoscape),function(e){\"use strict\";e.fn.selector=function(t,r){for(var i in t){var n=t[i];e.Selector.prototype[i]=n}},e.Selector=function(t,r){if(!(this instanceof e.Selector))return new e.Selector(t,r);void 0===r&&void 0!==t&&(r=t,t=void 0);var i=this;if(i._private={selectorText:null,invalid:!0},!r||e.is.string(r)&&r.match(/^\\s*$/))null==t?i.length=0:(i[0]=o(),i[0].group=t,i.length=1);else if(e.is.element(r)){var n=new e.Collection(i.cy(),[r]);i[0]=o(),i[0].collection=n,i.length=1}else if(e.is.collection(r))i[0]=o(),i[0].collection=r,i.length=1;else if(e.is.fn(r))i[0]=o(),i[0].filter=r,i.length=1;else{if(!e.is.string(r))return void e.util.error(\"A selector must be created from a string; found \"+r);var a=null,o=function(){return{classes:[],colonSelectors:[],data:[],group:null,ids:[],meta:[],collection:null,filter:null,parent:null,ancestor:null,subject:null,child:null,descendant:null}},s={metaChar:\"[\\\\!\\\\\\\"\\\\#\\\\$\\\\%\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\.\\\\/\\\\:\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\[\\\\]\\\\^\\\\`\\\\{\\\\|\\\\}\\\\~]\",comparatorOp:\"=|\\\\!=|>|>=|<|<=|\\\\$=|\\\\^=|\\\\*=\",boolOp:\"\\\\?|\\\\!|\\\\^\",string:'\"(?:\\\\\\\\\"|[^\"])+\"|'+\"'(?:\\\\\\\\'|[^'])+'\",number:e.util.regex.number,meta:\"degree|indegree|outdegree\",separator:\"\\\\s*,\\\\s*\",descendant:\"\\\\s+\",child:\"\\\\s+>\\\\s+\",subject:\"\\\\$\"};s.variable=\"(?:[\\\\w-]|(?:\\\\\\\\\"+s.metaChar+\"))+\",s.value=s.string+\"|\"+s.number,s.className=s.variable,s.id=s.variable;for(var l=function(e){return e.replace(new RegExp(\"\\\\\\\\(\"+s.metaChar+\")\",\"g\"),function(e,t,r,i){return t})},u=s.comparatorOp.split(\"|\"),c=0;c<u.length;c++){var d=u[c];s.comparatorOp+=\"|@\"+d}for(var u=s.comparatorOp.split(\"|\"),c=0;c<u.length;c++){var d=u[c];d.indexOf(\"!\")>=0||\"=\"!==d&&(s.comparatorOp+=\"|\\\\!\"+d)}var h=[{name:\"group\",query:!0,regex:\"(node|edge|\\\\*)\",populate:function(e){this.group=\"*\"==e?e:e+\"s\"}},{name:\"state\",query:!0,regex:\"(:selected|:unselected|:locked|:unlocked|:visible|:hidden|:transparent|:grabbed|:free|:removed|:inside|:grabbable|:ungrabbable|:animated|:unanimated|:selectable|:unselectable|:orphan|:nonorphan|:parent|:child|:loop|:simple|:active|:inactive|:touch|:backgrounding|:nonbackgrounding)\",populate:function(e){this.colonSelectors.push(e)}},{name:\"id\",query:!0,regex:\"\\\\#(\"+s.id+\")\",populate:function(e){this.ids.push(l(e))}},{name:\"className\",query:!0,regex:\"\\\\.(\"+s.className+\")\",populate:function(e){this.classes.push(l(e))}},{name:\"dataExists\",query:!0,regex:\"\\\\[\\\\s*(\"+s.variable+\")\\\\s*\\\\]\",populate:function(e){this.data.push({field:l(e)})}},{name:\"dataCompare\",query:!0,regex:\"\\\\[\\\\s*(\"+s.variable+\")\\\\s*(\"+s.comparatorOp+\")\\\\s*(\"+s.value+\")\\\\s*\\\\]\",populate:function(e,t,r){var i=null!=new RegExp(\"^\"+s.string+\"$\").exec(r);r=i?r.substring(1,r.length-1):parseFloat(r),this.data.push({field:l(e),operator:t,value:r})}},{name:\"dataBool\",query:!0,regex:\"\\\\[\\\\s*(\"+s.boolOp+\")\\\\s*(\"+s.variable+\")\\\\s*\\\\]\",populate:function(e,t){this.data.push({field:l(t),operator:e})}},{name:\"metaCompare\",query:!0,regex:\"\\\\[\\\\[\\\\s*(\"+s.meta+\")\\\\s*(\"+s.comparatorOp+\")\\\\s*(\"+s.number+\")\\\\s*\\\\]\\\\]\",populate:function(e,t,r){this.meta.push({field:l(e),operator:t,value:parseFloat(r)})}},{name:\"nextQuery\",separator:!0,regex:s.separator,populate:function(){i[++c]=o(),a=null}},{name:\"child\",separator:!0,regex:s.child,populate:function(){var e=o();e.parent=this,e.subject=a,i[c]=e}},{name:\"descendant\",separator:!0,regex:s.descendant,populate:function(){var e=o();e.ancestor=this,e.subject=a,i[c]=e}},{name:\"subject\",modifier:!0,regex:s.subject,populate:function(){return null!=a&&this.subject!=this?(e.util.error(\"Redefinition of subject in selector `\"+r+\"`\"),!1):(a=this,void(this.subject=this))}}];i._private.selectorText=r;var p=r,c=0,v=function(t){for(var r,i,n,a=0;a<h.length;a++){var o=h[a],s=o.name;if(!e.is.fn(t)||t(s,o)){var l=p.match(new RegExp(\"^\"+o.regex));if(null!=l){i=l,r=o,n=s;var u=l[0];p=p.substring(u.length);break}}}return{expr:r,match:i,name:n}},f=function(){var e=p.match(/^\\s+/);if(e){var t=e[0];p=p.substring(t.length)}};for(i[0]=o(),f();;){var g=v();if(null==g.expr)return void e.util.error(\"The selector `\"+r+\"`is invalid\");for(var y=[],m=1;m<g.match.length;m++)y.push(g.match[m]);var x=g.expr.populate.apply(i[c],y);if(x===!1)return;if(p.match(/^\\s*$/))break}i.length=c+1;for(var m=0;m<i.length;m++){var b=i[m];if(null!=b.subject){for(;b.subject!=b;)if(null!=b.parent){var w=b.parent,_=b;_.parent=null,w.child=_,b=w}else{if(null==b.ancestor){e.util.error(\"When adjusting references for the selector `\"+b+\"`, neither parent nor ancestor was found\");break}var E=b.ancestor,S=b;S.ancestor=null,E.descendant=S,b=E}i[m]=b.subject}}if(null!=t)for(var m=0;m<i.length;m++){if(null!=i[m].group&&i[m].group!=t)return void e.util.error(\"Group `\"+i[m].group+\"` conflicts with implicit group `\"+t+\"` in selector `\"+r+\"`\");i[m].group=t}}i._private.invalid=!1},e.selfn=e.Selector.prototype,e.selfn.size=function(){return this.length},e.selfn.eq=function(e){return this[e]},e.selfn.find=function(){};var t=function(r,i){if(null!=r.group&&\"*\"!=r.group&&r.group!=i._private.group)return!1;for(var n=i.cy(),a=!0,o=0;o<r.colonSelectors.length;o++){var s=r.colonSelectors[o];switch(s){case\":selected\":a=i.selected();break;case\":unselected\":a=!i.selected();break;case\":selectable\":a=i.selectable();break;case\":unselectable\":a=!i.selectable();break;case\":locked\":a=i.locked();break;case\":unlocked\":a=!i.locked();break;case\":visible\":a=i.visible();break;case\":hidden\":a=!i.visible();break;case\":transparent\":a=i.transparent();break;case\":grabbed\":a=i.grabbed();break;case\":free\":a=!i.grabbed();break;case\":removed\":a=i.removed();break;case\":inside\":a=!i.removed();break;case\":grabbable\":a=i.grabbable();break;case\":ungrabbable\":a=!i.grabbable();break;case\":animated\":a=i.animated();break;case\":unanimated\":a=!i.animated();break;case\":parent\":a=i.isNode()&&i.children().nonempty();break;case\":child\":case\":nonorphan\":a=i.isNode()&&i.parent().nonempty();break;case\":orphan\":a=i.isNode()&&i.parent().empty();break;case\":loop\":a=i.isEdge()&&i.data(\"source\")===i.data(\"target\");break;case\":simple\":a=i.isEdge()&&i.data(\"source\")!==i.data(\"target\");break;case\":active\":a=i.active();break;case\":inactive\":a=!i.active();break;case\":touch\":a=e.is.touch();break;case\":backgrounding\":a=i.backgrounding();break;case\":nonbackgrounding\":a=!i.backgrounding()}if(!a)break}if(!a)return!1;for(var l=!0,o=0;o<r.ids.length;o++){var u=r.ids[o],c=i._private.data.id;if(l=l&&u==c,!l)break}if(!l)return!1;for(var d=!0,o=0;o<r.classes.length;o++){var h=r.classes[o];if(d=d&&i.hasClass(h),!d)break}if(!d)return!1;var p=function(t){for(var i=!0,n=0;n<r[t.name].length;n++){var a,o=r[t.name][n],s=o.operator,l=o.value,u=o.field;if(null!=s&&null!=l){var c=t.fieldValue(u),d=e.is.string(c)||e.is.number(c)?\"\"+c:\"\",h=\"\"+l,p=!1;s.indexOf(\"@\")>=0&&(d=d.toLowerCase(),h=h.toLowerCase(),s=s.replace(\"@\",\"\"),p=!0);var v=!1,f=!1;switch(s.indexOf(\"!\")>=0&&(s=s.replace(\"!\",\"\"),v=!0),p&&(l=h.toLowerCase(),c=d.toLowerCase()),s){case\"*=\":a=d.search(h)>=0;break;case\"$=\":a=null!=new RegExp(h+\"$\").exec(d);break;case\"^=\":a=null!=new RegExp(\"^\"+h).exec(d);break;case\"=\":a=c===l;break;case\"!=\":a=c!==l;break;case\">\":a=v?l>=c:c>l,f=!0;break;case\">=\":a=v?l>c:c>=l,f=!0;break;case\"<\":a=v?c>=l:l>c,f=!0;break;case\"<=\":a=v?c>l:l>=c,f=!0;break;default:a=!1}}else if(null!=s)switch(s){case\"?\":a=t.fieldTruthy(u);break;case\"!\":a=!t.fieldTruthy(u);break;case\"^\":a=t.fieldUndefined(u)}else a=!t.fieldUndefined(u);if(v&&!f&&(a=!a,f=!0),!a){i=!1;break}}return i},v=p({name:\"data\",fieldValue:function(e){return i._private.data[e]},fieldRef:function(e){return\"element._private.data.\"+e},fieldUndefined:function(e){return void 0===i._private.data[e]},fieldTruthy:function(e){return i._private.data[e]?!0:!1}});if(!v)return!1;var f=p({name:\"meta\",fieldValue:function(e){return i[e]()},fieldRef:function(e){return\"element.\"+e+\"()\"},fieldUndefined:function(e){return null==i[e]()},fieldTruthy:function(e){return i[e]()?!0:!1}});if(!f)return!1;if(null!=r.collection){var g=null!=r.collection._private.ids[i.id()];if(!g)return!1}if(null!=r.filter&&0===i.collection().filter(r.filter).size())return!1;var y=function(e,r){if(null!=e){var i=!1;if(!n.hasCompoundNodes())return!1;r=r();for(var a=0;a<r.length;a++)if(t(e,r[a])){i=!0;break}return i}return!0};return y(r.parent,function(){return i.parent()})&&y(r.ancestor,function(){return i.parents()})&&y(r.child,function(){return i.children()})&&y(r.descendant,function(){return i.descendants()})?!0:!1};e.selfn.filter=function(r){var i=this,n=r.cy();if(i._private.invalid)return new e.Collection(n);var a=function(e,r){for(var n=0;n<i.length;n++){var a=i[n];if(t(a,r))return!0}return!1};null==i._private.selectorText&&(a=function(){return!0});var o=r.filter(a);return o},e.selfn.matches=function(e){var r=this;if(r._private.invalid)return!1;for(var i=0;i<r.length;i++){var n=r[i];if(t(n,e))return!0}return!1},e.selfn.toString=e.selfn.selector=function(){for(var t=\"\",r=function(t,r){return e.is.string(t)?r?'\"'+t+'\"':t:\"\"},i=function(e){var t=\"\";e.subject===e&&(t+=\"$\");var a=r(e.group);t+=a.substring(0,a.length-1);for(var o=0;o<e.data.length;o++){var s=e.data[o];t+=s.value?\"[\"+s.field+r(s.operator)+r(s.value,!0)+\"]\":\"[\"+r(s.operator)+s.field+\"]\"}for(var o=0;o<e.meta.length;o++){var l=e.meta[o];t+=\"[[\"+l.field+r(l.operator)+r(l.value,!0)+\"]]\"}for(var o=0;o<e.colonSelectors.length;o++){var u=e.colonSelectors[n];t+=u}for(var o=0;o<e.ids.length;o++){var u=\"#\"+e.ids[n];t+=u}for(var o=0;o<e.classes.length;o++){var u=\".\"+e.classes[n];t+=u}return null!=e.parent&&(t=i(e.parent)+\" > \"+t),null!=e.ancestor&&(t=i(e.ancestor)+\" \"+t),null!=e.child&&(t+=\" > \"+i(e.child)),null!=e.descendant&&(t+=\" \"+i(e.descendant)),t},n=0;n<this.length;n++){var a=this[n];t+=i(a),this.length>1&&n<this.length-1&&(t+=\", \")}return t}}(cytoscape),function(e){\"use strict\";e.Style=function(t){return this instanceof e.Style?e.is.core(t)?(this._private={cy:t,coreStyle:{},newStyle:!0},this.length=0,void this.addDefaultStylesheet()):void e.util.error(\"A style must have a core reference\"):new e.Style(t)},e.style=e.Style,e.styfn=e.Style.prototype,e.fn.style=function(t,r){for(var i in t){var n=t[i];e.Style.prototype=n}},function(){var t=e.util.regex.number,r=e.util.regex.rgbaNoBackRefs,i=e.util.regex.hslaNoBackRefs,n=e.util.regex.hex3,a=e.util.regex.hex6,o=function(e){return\"^\"+e+\"\\\\s*\\\\(\\\\s*([\\\\w\\\\.]+)\\\\s*\\\\)$\"},s=function(e){return\"^\"+e+\"\\\\s*\\\\(([\\\\w\\\\.]+)\\\\s*\\\\,\\\\s*(\"+t+\")\\\\s*\\\\,\\\\s*(\"+t+\")\\\\s*,\\\\s*(\"+t+\"|\\\\w+|\"+r+\"|\"+i+\"|\"+n+\"|\"+a+\")\\\\s*\\\\,\\\\s*(\"+t+\"|\\\\w+|\"+r+\"|\"+i+\"|\"+n+\"|\"+a+\")\\\\)$\"};e.style.types={time:{number:!0,min:0,units:\"s|ms\",implicitUnits:\"ms\"},percent:{number:!0,min:0,max:100,units:\"%\"},zeroOneNumber:{number:!0,min:0,max:1,unitless:!0},nOneOneNumber:{number:!0,min:-1,max:1,unitless:!0},nonNegativeInt:{number:!0,min:0,integer:!0,unitless:!0},position:{enums:[\"parent\",\"origin\"]},autoSize:{number:!0,min:0,enums:[\"auto\"]},number:{number:!0},size:{number:!0,min:0},bgSize:{number:!0,min:0,allowPercent:!0},bgWH:{number:!0,min:0,allowPercent:!0,enums:[\"auto\"]},bgPos:{number:!0,allowPercent:!0},bgRepeat:{enums:[\"repeat\",\"repeat-x\",\"repeat-y\",\"no-repeat\"]},bgFit:{enums:[\"none\",\"contain\",\"cover\"]},bgClip:{enums:[\"none\",\"node\"]},color:{color:!0},lineStyle:{enums:[\"solid\",\"dotted\",\"dashed\"]},borderStyle:{enums:[\"solid\",\"dotted\",\"dashed\",\"double\"]},curveStyle:{enums:[\"bezier\",\"unbundled-bezier\",\"haystack\"]},fontFamily:{regex:'^([\\\\w- \\\\\"]+(?:\\\\s*,\\\\s*[\\\\w- \\\\\"]+)*)$'},fontVariant:{enums:[\"small-caps\",\"normal\"]},fontStyle:{enums:[\"italic\",\"normal\",\"oblique\"]},fontWeight:{enums:[\"normal\",\"bold\",\"bolder\",\"lighter\",\"100\",\"200\",\"300\",\"400\",\"500\",\"600\",\"800\",\"900\",100,200,300,400,500,600,700,800,900]},textDecoration:{enums:[\"none\",\"underline\",\"overline\",\"line-through\"]},textTransform:{enums:[\"none\",\"uppercase\",\"lowercase\"]},textWrap:{enums:[\"none\",\"wrap\"]},textBackgroundShape:{enums:[\"rectangle\",\"roundrectangle\"]},nodeShape:{enums:[\"rectangle\",\"roundrectangle\",\"ellipse\",\"triangle\",\"square\",\"pentagon\",\"hexagon\",\"heptagon\",\"octagon\",\"star\",\"diamond\",\"vee\",\"rhomboid\"]},compoundIncludeLabels:{enums:[\"include\",\"exclude\"]},arrowShape:{enums:[\"tee\",\"triangle\",\"triangle-tee\",\"triangle-backcurve\",\"half-triangle-overshot\",\"square\",\"circle\",\"diamond\",\"none\"]},arrowFill:{enums:[\"filled\",\"hollow\"]},display:{enums:[\"element\",\"none\"]},visibility:{enums:[\"hidden\",\"visible\"]},valign:{enums:[\"top\",\"center\",\"bottom\"]},halign:{enums:[\"left\",\"center\",\"right\"]},text:{string:!0},data:{mapping:!0,regex:o(\"data\")},layoutData:{mapping:!0,regex:o(\"layoutData\")},scratch:{mapping:!0,regex:o(\"scratch\")},mapData:{mapping:!0,regex:s(\"mapData\")},mapLayoutData:{mapping:!0,regex:s(\"mapLayoutData\")},mapScratch:{mapping:!0,regex:s(\"mapScratch\")},fn:{mapping:!0,fn:!0},url:{regex:\"^url\\\\s*\\\\(\\\\s*([^\\\\s]+)\\\\s*\\\\s*\\\\)|none|(.+)$\"},propList:{propList:!0},angle:{number:!0,units:\"deg|rad\"},textRotation:{enums:[\"none\",\"autorotate\"]}};var l=e.style.types,u=e.style.properties=[{name:\"text-valign\",type:l.valign},{name:\"text-halign\",type:l.halign},{name:\"color\",type:l.color},{name:\"content\",type:l.text},{name:\"text-outline-color\",type:l.color},{name:\"text-outline-width\",type:l.size},{name:\"text-outline-opacity\",type:l.zeroOneNumber},{name:\"text-opacity\",type:l.zeroOneNumber},{name:\"text-background-color\",type:l.color},{name:\"text-background-opacity\",type:l.zeroOneNumber},{name:\"text-border-opacity\",type:l.zeroOneNumber},{name:\"text-border-color\",type:l.color},{name:\"text-border-width\",type:l.size},{name:\"text-border-style\",type:l.borderStyle},{name:\"text-background-shape\",type:l.textBackgroundShape},{name:\"text-transform\",type:l.textTransform},{name:\"text-wrap\",type:l.textWrap},{name:\"text-max-width\",type:l.size},{name:\"font-family\",type:l.fontFamily},{name:\"font-style\",type:l.fontStyle},{name:\"font-weight\",type:l.fontWeight},{name:\"font-size\",type:l.size},{name:\"min-zoomed-font-size\",type:l.size},{name:\"edge-text-rotation\",type:l.textRotation},{name:\"display\",type:l.display},{name:\"visibility\",type:l.visibility},{name:\"opacity\",type:l.zeroOneNumber},{name:\"z-index\",type:l.nonNegativeInt},{name:\"overlay-padding\",type:l.size},{name:\"overlay-color\",type:l.color},{name:\"overlay-opacity\",type:l.zeroOneNumber},{name:\"shadow-blur\",type:l.size},{name:\"shadow-color\",type:l.color},{name:\"shadow-opacity\",type:l.zeroOneNumber},{name:\"shadow-offset-x\",type:l.number},{name:\"shadow-offset-y\",type:l.number},{name:\"text-shadow-blur\",type:l.size},{name:\"text-shadow-color\",type:l.color},{name:\"text-shadow-opacity\",type:l.zeroOneNumber},{name:\"text-shadow-offset-x\",type:l.number},{name:\"text-shadow-offset-y\",type:l.number},{name:\"transition-property\",type:l.propList},{name:\"transition-duration\",type:l.time},{name:\"transition-delay\",type:l.time},{name:\"height\",type:l.autoSize},{name:\"width\",type:l.autoSize},{name:\"shape\",type:l.nodeShape},{name:\"background-color\",type:l.color},{name:\"background-opacity\",type:l.zeroOneNumber},{name:\"background-blacken\",type:l.nOneOneNumber},{name:\"border-color\",type:l.color},{name:\"border-opacity\",type:l.zeroOneNumber},{name:\"border-width\",type:l.size},{name:\"border-style\",type:l.borderStyle},{name:\"background-image\",type:l.url},{name:\"background-image-opacity\",type:l.zeroOneNumber},{name:\"background-position-x\",type:l.bgPos},{name:\"background-position-y\",type:l.bgPos},{name:\"background-repeat\",type:l.bgRepeat},{name:\"background-fit\",type:l.bgFit},{name:\"background-clip\",type:l.bgClip},{name:\"background-width\",type:l.bgWH},{name:\"background-height\",type:l.bgWH},{name:\"padding-left\",type:l.size},{name:\"padding-right\",type:l.size},{name:\"padding-top\",type:l.size},{name:\"padding-bottom\",type:l.size},{name:\"position\",type:l.position},{name:\"compound-sizing-wrt-labels\",type:l.compoundIncludeLabels},{name:\"line-style\",type:l.lineStyle},{name:\"line-color\",type:l.color},{name:\"control-point-step-size\",type:l.size},{name:\"control-point-distance\",type:l.number},{name:\"control-point-weight\",type:l.zeroOneNumber},{name:\"curve-style\",type:l.curveStyle},{name:\"haystack-radius\",type:l.zeroOneNumber},{name:\"source-arrow-shape\",type:l.arrowShape},{name:\"target-arrow-shape\",type:l.arrowShape},{name:\"mid-source-arrow-shape\",type:l.arrowShape},{name:\"mid-target-arrow-shape\",type:l.arrowShape},{name:\"source-arrow-color\",type:l.color},{name:\"target-arrow-color\",type:l.color},{name:\"mid-source-arrow-color\",type:l.color},{name:\"mid-target-arrow-color\",type:l.color},{name:\"source-arrow-fill\",type:l.arrowFill},{name:\"target-arrow-fill\",type:l.arrowFill},{name:\"mid-source-arrow-fill\",type:l.arrowFill},{name:\"mid-target-arrow-fill\",type:l.arrowFill},{name:\"selection-box-color\",type:l.color},{name:\"selection-box-opacity\",type:l.zeroOneNumber},{name:\"selection-box-border-color\",type:l.color},{name:\"selection-box-border-width\",type:l.size},{name:\"active-bg-color\",type:l.color},{name:\"active-bg-opacity\",type:l.zeroOneNumber},{name:\"active-bg-size\",type:l.size},{name:\"outside-texture-bg-color\",type:l.color},{name:\"outside-texture-bg-opacity\",type:l.zeroOneNumber}];e.style.pieBackgroundN=16,u.push({name:\"pie-size\",type:l.bgSize});for(var c=1;c<=e.style.pieBackgroundN;c++)u.push({name:\"pie-\"+c+\"-background-color\",type:l.color}),u.push({name:\"pie-\"+c+\"-background-size\",type:l.percent}),u.push({name:\"pie-\"+c+\"-background-opacity\",type:l.zeroOneNumber});for(var c=0;c<u.length;c++){var d=u[c];u[d.name]=d}}(),e.styfn.addDefaultStylesheet=function(){var e=\"Helvetica\",t=\"normal\",r=\"normal\",i=\"#000\",n=\"none\",a=16,o=9999;this.selector(\"node, edge\").css({\"text-valign\":\"top\",\"text-halign\":\"center\",color:i,\"text-outline-color\":\"#000\",\"text-outline-width\":0,\"text-outline-opacity\":1,\"text-opacity\":1,\"text-decoration\":\"none\",\"text-transform\":n,\"text-wrap\":\"none\",\"text-max-width\":o,\"text-background-color\":\"#000\",\"text-background-opacity\":0,\"text-border-opacity\":0,\"text-border-width\":0,\"text-border-style\":\"solid\",\"text-border-color\":\"#000\",\"text-background-shape\":\"rectangle\",\"font-family\":e,\"font-style\":t,\"font-weight\":r,\"font-size\":a,\"min-zoomed-font-size\":0,\"edge-text-rotation\":\"none\",visibility:\"visible\",display:\"element\",opacity:1,\"z-index\":0,content:\"\",\"overlay-opacity\":0,\"overlay-color\":\"#000\",\"overlay-padding\":10,\"shadow-opacity\":0,\"shadow-color\":\"#000\",\"shadow-blur\":10,\"shadow-offset-x\":0,\"shadow-offset-y\":0,\"text-shadow-opacity\":0,\"text-shadow-color\":\"#000\",\"text-shadow-blur\":5,\"text-shadow-offset-x\":0,\"text-shadow-offset-y\":0,\"transition-property\":\"none\",\"transition-duration\":0,\"transition-delay\":0,\"background-blacken\":0,\"background-color\":\"#888\",\"background-opacity\":1,\"background-image\":\"none\",\"background-image-opacity\":1,\"background-position-x\":\"50%\",\"background-position-y\":\"50%\",\"background-repeat\":\"no-repeat\",\"background-fit\":\"none\",\"background-clip\":\"node\",\"background-width\":\"auto\",\"background-height\":\"auto\",\"border-color\":\"#000\",\"border-opacity\":1,\"border-width\":0,\"border-style\":\"solid\",height:30,width:30,shape:\"ellipse\",\"padding-top\":0,\"padding-bottom\":0,\"padding-left\":0,\"padding-right\":0,position:\"origin\",\"compound-sizing-wrt-labels\":\"include\",\"pie-size\":\"100%\",\"pie-1-background-color\":\"black\",\"pie-2-background-color\":\"black\",\"pie-3-background-color\":\"black\",\"pie-4-background-color\":\"black\",\"pie-5-background-color\":\"black\",\"pie-6-background-color\":\"black\",\"pie-7-background-color\":\"black\",\"pie-8-background-color\":\"black\",\"pie-9-background-color\":\"black\",\"pie-10-background-color\":\"black\",\"pie-11-background-color\":\"black\",\"pie-12-background-color\":\"black\",\"pie-13-background-color\":\"black\",\"pie-14-background-color\":\"black\",\"pie-15-background-color\":\"black\",\"pie-16-background-color\":\"black\",\"pie-1-background-size\":\"0%\",\"pie-2-background-size\":\"0%\",\"pie-3-background-size\":\"0%\",\"pie-4-background-size\":\"0%\",\"pie-5-background-size\":\"0%\",\"pie-6-background-size\":\"0%\",\"pie-7-background-size\":\"0%\",\"pie-8-background-size\":\"0%\",\"pie-9-background-size\":\"0%\",\"pie-10-background-size\":\"0%\",\"pie-11-background-size\":\"0%\",\"pie-12-background-size\":\"0%\",\"pie-13-background-size\":\"0%\",\"pie-14-background-size\":\"0%\",\"pie-15-background-size\":\"0%\",\"pie-16-background-size\":\"0%\",\"pie-1-background-opacity\":1,\"pie-2-background-opacity\":1,\"pie-3-background-opacity\":1,\"pie-4-background-opacity\":1,\"pie-5-background-opacity\":1,\"pie-6-background-opacity\":1,\"pie-7-background-opacity\":1,\"pie-8-background-opacity\":1,\"pie-9-background-opacity\":1,\"pie-10-background-opacity\":1,\"pie-11-background-opacity\":1,\"pie-12-background-opacity\":1,\"pie-13-background-opacity\":1,\"pie-14-background-opacity\":1,\"pie-15-background-opacity\":1,\"pie-16-background-opacity\":1,\"source-arrow-shape\":\"none\",\"mid-source-arrow-shape\":\"none\",\"target-arrow-shape\":\"none\",\"mid-target-arrow-shape\":\"none\",\"source-arrow-color\":\"#ddd\",\"mid-source-arrow-color\":\"#ddd\",\"target-arrow-color\":\"#ddd\",\"mid-target-arrow-color\":\"#ddd\",\"source-arrow-fill\":\"filled\",\"mid-source-arrow-fill\":\"filled\",\"target-arrow-fill\":\"filled\",\"mid-target-arrow-fill\":\"filled\",\"line-style\":\"solid\",\"line-color\":\"#ddd\",\"control-point-step-size\":40,\"control-point-weight\":.5,\"curve-style\":\"bezier\",\"haystack-radius\":.8}).selector(\"$node > node\").css({width:\"auto\",height:\"auto\",shape:\"rectangle\",\"background-opacity\":.5,\"padding-top\":10,\"padding-right\":10,\"padding-left\":10,\"padding-bottom\":10}).selector(\"edge\").css({width:1}).selector(\":active\").css({\"overlay-color\":\"black\",\"overlay-padding\":10,\"overlay-opacity\":.25}).selector(\"core\").css({\"selection-box-color\":\"#ddd\",\"selection-box-opacity\":.65,\"selection-box-border-color\":\"#aaa\",\"selection-box-border-width\":1,\"active-bg-color\":\"black\",\"active-bg-opacity\":.15,\"active-bg-size\":30,\"outside-texture-bg-color\":\"#000\",\"outside-texture-bg-opacity\":.125}),this.defaultLength=this.length},e.styfn.clear=function(){for(var e=0;e<this.length;e++)this[e]=void 0;return this.length=0,this._private.newStyle=!0,this},e.styfn.resetToDefault=function(){return this.clear(),this.addDefaultStylesheet(),this},e.styfn.core=function(){return this._private.coreStyle},e.styfn.parse=function(t,r,i,n){var a,o=[t,r,i,n].join(\"$\"),s=this.propCache=this.propCache||{};return(a=s[o])||(a=s[o]=this.parseImpl(t,r,i,n)),e.util.copy(a)},e.styfn.parseImpl=function(t,r,i,n){t=e.util.camel2dash(t);var a=e.style.properties[t],o=r,s=e.style.types;if(!a)return null;if(void 0===r||null===r)return null;var l=e.is.string(r);l&&(r=e.util.trim(r));var u=a.type;if(!u)return null;if(i&&(\"\"===r||null===r))return{name:t,value:r,bypass:!0,deleteBypass:!0};var c=t.match(/pie-(\\d+)-background-size/);if(e.is.fn(r))return{name:t,value:r,strValue:\"fn\",mapped:s.fn,bypass:i,hasPie:c};var d,h,p,v,f,g;if(!l||n);else{if((d=new RegExp(s.data.regex).exec(r))||(p=new RegExp(s.layoutData.regex).exec(r))||(f=new RegExp(s.scratch.regex).exec(r))){if(i)return!1;var y;return y=d?s.data:p?s.layoutData:s.scratch,d=d||p||f,{name:t,value:d,strValue:\"\"+r,mapped:y,field:d[1],bypass:i,hasPie:c}}if((h=new RegExp(s.mapData.regex).exec(r))||(v=new RegExp(s.mapLayoutData.regex).exec(r))||(g=new RegExp(s.mapScratch.regex).exec(r))){if(i)return!1;var y;if(y=h?s.mapData:v?s.mapLayoutData:s.mapScratch,h=h||v||g,!u.color&&!u.number)return!1;var m=this.parse(t,h[4]);if(!m||m.mapped)return!1;var x=this.parse(t,h[5]);if(!x||x.mapped)return!1;if(m.value===x.value)return!1;if(u.color){var b=m.value,w=x.value,_=!(b[0]!==w[0]||b[1]!==w[1]||b[2]!==w[2]||b[3]!==w[3]&&(null!=b[3]&&1!==b[3]||null!=w[3]&&1!==w[3]));if(_)return!1}return{name:t,value:h,strValue:\"\"+r,mapped:y,field:h[1],fieldMin:parseFloat(h[2]),fieldMax:parseFloat(h[3]),valueMin:m.value,valueMax:x.value,bypass:i,hasPie:c}}}if(u.number){var E,S=\"px\";if(u.units&&(E=u.units),u.implicitUnits&&(S=u.implicitUnits),!u.unitless)if(l){var D=\"px|em\"+(u.allowPercent?\"|\\\\%\":\"\");E&&(D=E);var k=r.match(\"^(\"+e.util.regex.number+\")(\"+D+\")?$\");k&&(r=k[1],E=k[2]||S)}else(!E||u.implicitUnits)&&(E=S);if(r=parseFloat(r),isNaN(r)&&void 0===u.enums)return null;if(isNaN(r)&&void 0!==u.enums){r=o;for(var T=0;T<u.enums.length;T++){var P=u.enums[T];if(P===r)return{name:t,value:r,strValue:\"\"+r,bypass:i}}return null}if(u.integer&&!e.is.integer(r))return null;if(void 0!==u.min&&r<u.min||void 0!==u.max&&r>u.max)return null;var C={name:t,value:r,strValue:\"\"+r+(E?E:\"\"),units:E,bypass:i,hasPie:c&&null!=r&&0!==r&&\"\"!==r};return u.unitless||\"px\"!==E&&\"em\"!==E||(C.pxValue=\"px\"!==E&&E?this.getEmSizeInPixels()*r:r),(\"ms\"===E||\"s\"===E)&&(C.msValue=\"ms\"===E?r:1e3*r),C}if(u.propList){var M=[],B=\"\"+r;if(\"none\"===B);else{for(var N=B.split(\",\"),T=0;T<N.length;T++){var I=e.util.trim(N[T]);e.style.properties[I]&&M.push(I)}if(0===M.length)return null}return{name:t,value:M,strValue:0===M.length?\"none\":M.join(\", \"),bypass:i}}if(u.color){var O=e.util.color2tuple(r);return O?{name:t,value:O,strValue:\"\"+r,bypass:i}:null}if(u.enums){for(var T=0;T<u.enums.length;T++){var P=u.enums[T];if(P===r)return{name:t,value:r,strValue:\"\"+r,bypass:i}}return null}if(u.regex){var z=new RegExp(u.regex),L=z.exec(r);return L?{name:t,value:L,strValue:\"\"+r,bypass:i}:null}return u.string?{name:t,value:r,strValue:\"\"+r,bypass:i}:null},e.styfn.selector=function(t){var r=\"core\"===t?null:new e.Selector(t),i=this.length++;return this[i]={selector:r,properties:[],mappedProperties:[],index:i},this},e.styfn.css=function(){var t=arguments;switch(t.length){case 1:for(var r=t[0],i=0;i<e.style.properties.length;i++){var n=e.style.properties[i],a=r[n.name];void 0===a&&(a=r[e.util.dash2camel(n.name)]),void 0!==a&&this.cssRule(n.name,a)}break;case 2:this.cssRule(t[0],t[1])}return this},e.styfn.style=e.styfn.css,e.styfn.cssRule=function(e,t){var r=this.parse(e,t);if(r){var i=this.length-1;this[i].properties.push(r),this[i].properties[r.name]=r,r.hasPie&&(this._private.hasPie=!0),r.mapped&&this[i].mappedProperties.push(r);var n=!this[i].selector;n&&(this._private.coreStyle[r.name]=r)}return this}}(cytoscape),function(e){\"use strict\";e.styfn.apply=function(e){var t=this;t._private.newStyle&&(this._private.contextStyles={},this._private.propDiffs={});for(var r=0;r<e.length;r++){var i=e[r],n=t.getContextMeta(i),a=t.getContextStyle(n),o=t.applyContextStyle(n,a,i);t.updateTransitions(i,o.diffProps),t.updateStyleHints(i)}t._private.newStyle=!1},e.styfn.getPropertiesDiff=function(e,t){var r=this,i=r._private.propDiffs=r._private.propDiffs||{},n=e+\"-\"+t,a=i[n];if(a)return a;for(var o=[],s={},l=0;l<r.length;l++){var u=r[l],c=\"t\"===e[l],d=\"t\"===t[l],h=c!==d,p=u.mappedProperties.length>0;if(h||p){var v;h&&p?v=u.properties:h?v=u.properties:p&&(v=u.mappedProperties);for(var f=0;f<v.length;f++){for(var g=v[f],y=g.name,m=!1,x=l+1;x<r.length;x++){var b=r[x],w=\"t\"===t[x];if(w&&(m=null!=b.properties[g.name]))break}s[y]||m||(s[y]=!0,o.push(y))}}}return i[n]=o,o},e.styfn.getContextMeta=function(e){var t,r=this,i=\"\",n=e._private.styleCxtKey||\"\";r._private.newStyle&&(n=\"\");for(var a=0;a<r.length;a++){var o=r[a],s=o.selector&&o.selector.matches(e);i+=s?\"t\":\"f\"}return t=r.getPropertiesDiff(n,i),e._private.styleCxtKey=i,{key:i,diffPropNames:t}},e.styfn.getContextStyle=function(e){var t=e.key,r=this,i=this._private.contextStyles=this._private.contextStyles||{};if(i[t])return i[t];for(var n={_private:{key:t}},a=0;a<r.length;a++){var o=r[a],s=\"t\"===t[a];if(s)for(var l=0;l<o.properties.length;l++){var u=o.properties[l],c=n[u.name]=u;c.context=o}}return i[t]=n,n},e.styfn.applyContextStyle=function(e,t,r){for(var i=this,n=e.diffPropNames,a={},o=0;o<n.length;o++){var s=n[o],l=t[s],u=r._private.style[s];if(l&&u!==l){var c=a[s]={prev:u};i.applyParsedProperty(r,l),c.next=r._private.style[s],c.next&&c.next.bypass&&(c.next=c.next.bypassed)}}return{diffProps:a}},e.styfn.updateStyleHints=function(t){var r=t._private,i=this,n=r.style,a=!1;if(\"nodes\"===r.group&&i._private.hasPie)for(var o=1;o<=e.style.pieBackgroundN;o++){var s=r.style[\"pie-\"+o+\"-background-size\"].value;if(s>0){a=!0;break}}r.hasPie=a;var l=n[\"text-transform\"].strValue,u=n.content.strValue,c=n[\"font-style\"].strValue,s=n[\"font-size\"].pxValue+\"px\",d=n[\"font-family\"].strValue,h=n[\"font-weight\"].strValue,p=n[\"text-valign\"].strValue,v=n[\"text-valign\"].strValue,f=n[\"text-outline-width\"].pxValue,g=n[\"text-wrap\"].strValue,y=n[\"text-max-width\"].pxValue;r.labelKey=c+\"$\"+s+\"$\"+d+\"$\"+h+\"$\"+u+\"$\"+l+\"$\"+p+\"$\"+v+\"$\"+f+\"$\"+g+\"$\"+y,r.fontKey=c+\"$\"+h+\"$\"+s+\"$\"+d;var m=n.width.pxValue,x=n.height.pxValue,b=n[\"border-width\"].pxValue;if(r.boundingBoxKey=m+\"$\"+x+\"$\"+b,\"edges\"===t._private.group){var w=n[\"control-point-step-size\"].pxValue,_=n[\"control-point-distance\"]?n[\"control-point-distance\"].pxValue:void 0,E=n[\"control-point-weight\"].value,S=n[\"curve-style\"].strValue;r.boundingBoxKey+=\"$\"+w+\"$\"+_+\"$\"+E+\"$\"+S}r.styleKey=Date.now()},e.styfn.applyParsedProperty=function(t,r){var i,n,a=r,o=t._private.style,s=e.style.types,l=e.style.properties[a.name].type,u=a.bypass,c=o[a.name],d=c&&c.bypass,h=t._private;if((\"height\"===r.name||\"width\"===r.name)&&t.isNode()){if(\"auto\"===r.value&&!t.isParent())return!1;\"auto\"!==r.value&&t.isParent()&&(a=r=this.parse(r.name,\"auto\",u))}if(u&&a.deleteBypass){var p=o[a.name];return p?p.bypass&&p.bypassed?(o[a.name]=p.bypassed,!0):!1:!0}var v=function(){e.util.error(\"Do not assign mappings to elements without corresponding data (e.g. ele `\"+t.id()+\"` for property `\"+a.name+\"` with data field `\"+a.field+\"`); try a `[\"+a.field+\"]` selector to limit scope to elements with `\"+a.field+\"` defined\")};switch(a.mapped){case s.mapData:case s.mapLayoutData:case s.mapScratch:var i,f=a.mapped===s.mapLayoutData,g=a.mapped===s.mapScratch,y=a.field.split(\".\");i=g||f?h.scratch:h.data;for(var m=0;m<y.length&&i;m++){var x=y[m];i=i[x]}var b;if(b=e.is.number(i)?(i-a.fieldMin)/(a.fieldMax-a.fieldMin):0,0>b?b=0:b>1&&(b=1),l.color){var w=a.valueMin[0],_=a.valueMax[0],E=a.valueMin[1],S=a.valueMax[1],D=a.valueMin[2],k=a.valueMax[2],T=null==a.valueMin[3]?1:a.valueMin[3],P=null==a.valueMax[3]?1:a.valueMax[3],C=[Math.round(w+(_-w)*b),Math.round(E+(S-E)*b),Math.round(D+(k-D)*b),Math.round(T+(P-T)*b)];\nn={bypass:a.bypass,name:a.name,value:C,strValue:\"rgb(\"+C[0]+\", \"+C[1]+\", \"+C[2]+\")\"}}else{if(!l.number)return!1;var M=a.valueMin+(a.valueMax-a.valueMin)*b;n=this.parse(a.name,M,a.bypass,!0)}n||(n=this.parse(a.name,c.strValue,a.bypass,!0)),n||v(),n.mapping=a,a=n;break;case s.data:case s.layoutData:case s.scratch:var i,f=a.mapped===s.layoutData,g=a.mapped===s.scratch,y=a.field.split(\".\");if(i=g||f?h.scratch:h.data)for(var m=0;m<y.length;m++){var x=y[m];i=i[x]}if(n=this.parse(a.name,i,a.bypass,!0),!n){var B=c?c.strValue:\"\";n=this.parse(a.name,B,a.bypass,!0)}n||v(),n.mapping=a,a=n;break;case s.fn:var N=a.value,I=N(t);n=this.parse(a.name,I,a.bypass,!0),n.mapping=a,a=n;break;case void 0:break;default:return!1}return u?(d?a.bypassed=c.bypassed:a.bypassed=c,o[a.name]=a):d?c.bypassed=a:o[a.name]=a,!0},e.styfn.update=function(){var e=this._private.cy,t=e.elements();t.updateStyle()},e.styfn.updateMappers=function(t){for(var r=0;r<t.length;r++){for(var i=t[r],n=i._private.style,a=0;a<e.style.properties.length;a++){var o=e.style.properties[a],s=n[o.name];if(s&&s.mapping){var l=s.mapping;this.applyParsedProperty(i,l)}}this.updateStyleHints(i)}},e.styfn.updateTransitions=function(t,r,i){var n=this,a=t._private.style,o=a[\"transition-property\"].value,s=a[\"transition-duration\"].msValue,l=a[\"transition-delay\"].msValue,u={};if(o.length>0&&s>0){for(var c=!1,d=0;d<o.length;d++){var h=o[d],p=a[h],v=r[h];if(v){var f,g=v.prev,y=g,m=null!=v.next?v.next:p,x=!1,b=1e-6;y&&(e.is.number(y.pxValue)&&e.is.number(m.pxValue)?(x=m.pxValue-y.pxValue,f=y.pxValue+b*x):e.is.number(y.value)&&e.is.number(m.value)?(x=m.value-y.value,f=y.value+b*x):e.is.array(y.value)&&e.is.array(m.value)&&(x=y.value[0]!==m.value[0]||y.value[1]!==m.value[1]||y.value[2]!==m.value[2],f=y.strValue),x&&(u[h]=m.strValue,this.applyBypass(t,h,f),c=!0))}}if(!c)return;t._private.transitioning=!0,t.stop(),l>0&&t.delay(l),t.animate({css:u},{duration:s,queue:!1,complete:function(){i||n.removeBypasses(t,o),t._private.transitioning=!1}})}else t._private.transitioning&&(t.stop(),this.removeBypasses(t,o),t._private.transitioning=!1)}}(cytoscape),function(e){\"use strict\";e.styfn.applyBypass=function(t,r,i,n){var a=[],o=!0;if(\"*\"===r||\"**\"===r){if(void 0!==i)for(var s=0;s<e.style.properties.length;s++){var l=e.style.properties[s],r=l.name,u=this.parse(r,i,!0);u&&a.push(u)}}else if(e.is.string(r)){var u=this.parse(r,i,!0);u&&a.push(u)}else{if(!e.is.plainObject(r))return!1;var c=r;n=i;for(var s=0;s<e.style.properties.length;s++){var l=e.style.properties[s],r=l.name,i=c[r];if(void 0===i&&(i=c[e.util.dash2camel(r)]),void 0!==i){var u=this.parse(r,i,!0);u&&a.push(u)}}}if(0===a.length)return!1;for(var d=!1,s=0;s<t.length;s++){for(var h,p=t[s],v=p._private.style,f={},g=0;g<a.length;g++){var l=a[g];if(n){var y=v[l.name];h=f[l.name]={prev:y}}d=this.applyParsedProperty(p,l)||d,n&&(h.next=v[l.name])}n&&this.updateTransitions(p,f,o)}return d},e.styfn.overrideBypass=function(t,r,i){r=e.util.camel2dash(r);for(var n=0;n<t.length;n++){var a=t[n],o=a._private.style[r],s=e.style.properties[r].type.color;o.bypass?(o.value=i,null!=o.pxValue&&(o.pxValue=i),s?o.strValue=\"rgb(\"+o.value.join(\",\")+\")\":o.strValue=\"\"+i):this.applyBypass(a,r,i)}},e.styfn.removeAllBypasses=function(t,r){for(var i=!0,n=0;n<t.length;n++){for(var a=t[n],o={},s=a._private.style,l=0;l<e.style.properties.length;l++){var u=e.style.properties[l],c=u.name,d=\"\",h=this.parse(c,d,!0),p=s[u.name],v=o[u.name]={prev:p};this.applyParsedProperty(a,h),v.next=s[u.name]}r&&this.updateTransitions(a,o,i)}},e.styfn.removeBypasses=function(t,r,i){for(var n=!0,a=0;a<t.length;a++){for(var o=t[a],s={},l=o._private.style,u=0;u<r.length;u++){var c=r[u],d=e.style.properties[c],h=\"\",p=this.parse(c,h,!0),v=l[d.name],f=s[d.name]={prev:v};this.applyParsedProperty(o,p),f.next=l[d.name]}i&&this.updateTransitions(o,s,n)}}}(cytoscape),function(e,t){\"use strict\";e.styfn.getEmSizeInPixels=function(){var e=this._private.cy,r=e.container();if(t&&r&&t.getComputedStyle){var i=t.getComputedStyle(r).getPropertyValue(\"font-size\"),n=parseFloat(i);return n}return 1},e.styfn.containerCss=function(e){var r=this._private.cy,i=r.container();return t&&i&&t.getComputedStyle?t.getComputedStyle(i).getPropertyValue(e):void 0},e.styfn.containerProperty=function(e){var t=this.containerCss(e),r=this.parse(e,t);return r},e.styfn.containerPropertyAsString=function(e){var t=this.containerProperty(e);return t?t.strValue:void 0}}(cytoscape,\"undefined\"==typeof window?null:window),function(e){\"use strict\";e.styfn.getRenderedStyle=function(t){var t=t[0];if(t){for(var r={},i=t._private.style,n=this._private.cy,a=n.zoom(),o=0;o<e.style.properties.length;o++){var s=e.style.properties[o],l=i[s.name];if(l){var u=l.unitless?l.strValue:l.pxValue*a+\"px\";r[s.name]=u,r[e.util.dash2camel(s.name)]=u}}return r}},e.styfn.getRawStyle=function(t){var t=t[0];if(t){for(var r={},i=t._private.style,n=0;n<e.style.properties.length;n++){var a=e.style.properties[n],o=i[a.name];o&&(r[a.name]=o.strValue,r[e.util.dash2camel(a.name)]=o.strValue)}return r}},e.styfn.getValueStyle=function(t){var r,i={},n=e.is.element(t);if(r=n?t._private.style:t)for(var a=0;a<e.style.properties.length;a++){var o=e.style.properties[a],s=r[o.name]||r[e.util.dash2camel(o.name)];void 0!==s&&(s=e.is.plainObject(s)?this.parse(o.name,s.strValue):this.parse(o.name,s)),s&&(i[o.name]=s,i[e.util.dash2camel(o.name)]=s)}return i},e.styfn.getPropsList=function(t){var r=[],i=t,n=e.style.properties;if(i)for(var a in i){var o=i[a],s=n[a]||n[e.util.camel2dash(a)],l=this.parse(s.name,o);r.push(l)}return r}}(cytoscape),function(e){\"use strict\";e.style.applyFromJson=function(e,t){for(var r=0;r<t.length;r++){var i=t[r],n=i.selector,a=i.style||i.css;e.selector(n);for(var o in a){var s=a[o];e.css(o,s)}}return e},e.style.fromJson=function(t,r){var i=new e.Style(t);return e.style.applyFromJson(i,r),i},e.styfn.fromJson=function(t){var r=this;return r.resetToDefault(),e.style.applyFromJson(r,t),r},e.styfn.json=function(){for(var e=[],t=this.defaultLength;t<this.length;t++){for(var r=this[t],i=r.selector,n=r.properties,a={},o=0;o<n.length;o++){var s=n[o];a[s.name]=s.strValue}e.push({selector:i?i.toString():\"core\",style:a})}return e}}(cytoscape),function(e){\"use strict\";e.style.applyFromString=function(t,r){function i(){l=l.length>a.length?l.substr(a.length):\"\"}function n(){o=o.length>s.length?o.substr(s.length):\"\"}var a,o,s,l=\"\"+r;for(l=l.replace(/[\\/][*](\\s|.)+?[*][\\/]/g,\"\");;){var u=l.match(/^\\s*$/);if(u)break;var c=l.match(/^\\s*((?:.|\\s)+?)\\s*\\{((?:.|\\s)+?)\\}/);if(!c){e.util.error(\"Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: \"+l);break}a=c[0];var d=c[1];if(\"core\"!==d){var h=new e.Selector(d);if(h._private.invalid){e.util.error(\"Skipping parsing of block: Invalid selector found in string stylesheet: \"+d),i();continue}}var p=c[2],v=!1;o=p;for(var f=[];;){var u=o.match(/^\\s*$/);if(u)break;var g=o.match(/^\\s*(.+?)\\s*:\\s*(.+?)\\s*;/);if(!g){e.util.error(\"Skipping parsing of block: Invalid formatting of style property and value definitions found in:\"+p),v=!0;break}s=g[0];var y=g[1],m=g[2],x=e.style.properties[y];if(x){var b=t.parse(y,m);b?(f.push({name:y,val:m}),n()):(e.util.error(\"Skipping property: Invalid property definition in: \"+s),n())}else e.util.error(\"Skipping property: Invalid property name in: \"+s),n()}if(v){i();break}t.selector(d);for(var w=0;w<f.length;w++){var x=f[w];t.css(x.name,x.val)}i()}return t},e.style.fromString=function(t,r){var i=new e.Style(t);return e.style.applyFromString(i,r),i},e.styfn.fromString=function(t){var r=this;return r.resetToDefault(),e.style.applyFromString(r,t),r}}(cytoscape),function(e){\"use strict\";e.stylesheet=e.Stylesheet=function(){return this instanceof e.Stylesheet?void(this.length=0):new e.Stylesheet},e.sheetfn=e.Stylesheet.prototype,e.sheetfn.selector=function(e){var t=this.length++;return this[t]={selector:e,properties:[]},this},e.sheetfn.css=function(t,r){var i=this.length-1;if(e.is.string(t))this[i].properties.push({name:t,value:r});else if(e.is.plainObject(t))for(var n=t,a=0;a<e.style.properties.length;a++){var o=e.style.properties[a],s=n[o.name];if(void 0===s&&(s=n[e.util.dash2camel(o.name)]),void 0!==s){var t=o.name,r=s;this[i].properties.push({name:t,value:r})}}return this},e.sheetfn.style=e.sheetfn.css,e.sheetfn.generateStyle=function(t){for(var r=new e.Style(t),i=0;i<this.length;i++){var n=this[i],a=n.selector,o=n.properties;r.selector(a);for(var s=0;s<o.length;s++){var l=o[s];r.css(l.name,l.value)}}return r}}(cytoscape),function(e,t){\"use strict\";e.Thread=function(t){return this instanceof e.Thread?(this._private={requires:[],files:[],queue:null,pass:[]},void(t&&this.run(t))):new e.Thread(t)},e.thread=e.Thread,e.thdfn=e.Thread.prototype,e.fn.thread=function(t,r){for(var i in t){var n=t[i];e.Thread.prototype[i]=n}};var r=function(t){var r=e.is.fn(t)?t.toString():'JSON.parse(\"'+JSON.stringify(t)+'\")';return r},i=function(t){var n,o;e.is.object(t)&&t.fn?(n=a(t.fn,t.name),o=t.name,t=t.fn):e.is.fn(t)?(n=t.toString(),o=t.name):e.is.string(t)?n=t:e.is.object(t)&&(n=t.proto?\"\":t.name+\" = {};\",o=t.name,t=t.obj),n+=\"\\n\";var s=function(e,t){if(e.prototype){var r=!1;for(var a in e.prototype){r=!0;break}r&&(n+=i({name:t,obj:e,proto:!0},e))}};if(t.prototype&&null!=o)for(var l in t.prototype){var u=\"\",c=t.prototype[l],d=r(c),h=o+\".prototype.\"+l;u+=h+\" = \"+d+\";\\n\",u&&(n+=u),s(c,h)}if(!e.is.string(t))for(var l in t){var p=\"\";if(t.hasOwnProperty(l)){var c=t[l],d=r(c),h=o+'[\"'+l+'\"]';p+=h+\" = \"+d+\";\\n\"}p&&(n+=p),s(c,h)}return n},n=function(t){return e.is.string(t)&&t.match(/\\.js$/)};e.fn.thread({require:function(t,r){return n(t)?(this._private.files.push(t),this):(r&&(e.is.fn(t)?(r=r||t.name,t={name:r,fn:t}):t={name:r,obj:t}),this._private.requires.push(t),this)},pass:function(e){return this._private.pass.push(e),this},run:function(r,n){var a=this,o=this._private;if(n=n||o.pass.shift(),o.stopped)return void e.util.error(\"Attempted to run a stopped thread!  Start a new thread or do not stop the existing thread and reuse it.\");if(o.running)return o.queue=o.queue.then(function(){return a.run(r,n)});var s=null!=t,l=\"undefined\"!=typeof module;a.trigger(\"run\");var u=new e.Promise(function(u,c){o.running=!0;var d=o.ran,h=e.is.string(r)?r:r.toString(),p=\"\\n\"+o.requires.map(function(e){return i(e)}).concat(o.files.map(function(e){if(s){var r=function(e){return e.match(/^\\.\\//)||e.match(/^\\.\\./)?t.location.origin+t.location.pathname+e:e.match(/^\\//)?t.location.origin+\"/\"+e:e};return'importScripts(\"'+r(e)+'\");'}return l?'eval( require(\"fs\").readFileSync(\"'+e+'\", { encoding: \"utf8\" }) );':void 0})).concat([\"( function(){\",\"var ret = (\"+h+\")(\"+JSON.stringify(n)+\");\",\"if( ret !== undefined ){ resolve(ret); }\",\"} )()\\n\"]).join(\"\\n\");if(o.requires=[],o.files=[],s){var v,f;if(!d){var g=p+\"\";p=[\"function broadcast(m){ return message(m); };\",\"function message(m){ postMessage(m); };\",\"function listen(fn){\",'  self.addEventListener(\"message\", function(m){ ','    if( typeof m === \"object\" && (m.data.$$eval || m.data === \"$$start\") ){',\"    } else { \",\"      fn( m.data );\",\"    }\",\"  });\",\"};\",'self.addEventListener(\"message\", function(m){  if( m.data.$$eval ){ eval( m.data.$$eval ); }  });',\"function resolve(v){ postMessage({ $$resolve: v }); };\",\"function reject(v){ postMessage({ $$reject: v }); };\"].join(\"\\n\"),p+=g,v=new Blob([p],{type:\"application/javascript\"}),f=t.URL.createObjectURL(v)}var y=o.webworker=o.webworker||new Worker(f);d&&y.postMessage({$$eval:p});var m;y.addEventListener(\"message\",m=function(t){var r=e.is.object(t)&&e.is.object(t.data);r&&\"$$resolve\"in t.data?(y.removeEventListener(\"message\",m),u(t.data.$$resolve)):r&&\"$$reject\"in t.data?(y.removeEventListener(\"message\",m),c(t.data.$$reject)):a.trigger(new e.Event(t,{type:\"message\",message:t.data}))},!1),d||y.postMessage(\"$$start\")}else if(l){var m,x=require(\"path\"),b=require(\"child_process\"),w=o.child=o.child||b.fork(x.join(__dirname,\"thread-node-fork\"));w.on(\"message\",m=function(t){e.is.object(t)&&\"$$resolve\"in t?(w.removeListener(\"message\",m),u(t.$$resolve)):e.is.object(t)&&\"$$reject\"in t?(w.removeListener(\"message\",m),c(t.$$reject)):a.trigger(new e.Event({},{type:\"message\",message:t}))}),w.send({$$eval:p})}else e.error(\"Tried to create thread but no underlying tech found!\")}).then(function(e){return o.running=!1,o.ran=!0,a.trigger(\"ran\"),e});return null==o.queue&&(o.queue=u),u},message:function(e){var t=this._private;return t.webworker&&t.webworker.postMessage(e),t.child&&t.child.send(e),this},stop:function(){var e=this._private;return e.webworker&&e.webworker.terminate(),e.child&&e.child.kill(),e.stopped=!0,this.trigger(\"stop\")},stopped:function(){return this._private.stopped}});var a=function(e,t){var r=e.toString();return r=r.replace(/function.*\\(/,\"function \"+t+\"(\")},o=function(e){return e=e||{},function(t,r){var i=a(t,\"_$_$_\"+e.name);return this.require(i),this.run([\"function( data ){\",\"  var origResolve = resolve;\",\"  var res = [];\",\"  \",\"  resolve = function( val ){\",\"    res.push( val );\",\"  };\",\"  \",\"  var ret = data.\"+e.name+\"( _$_$_\"+e.name+(arguments.length>1?\", \"+JSON.stringify(r):\"\")+\" );\",\"  \",\"  resolve = origResolve;\",\"  resolve( res.length > 0 ? res : ret );\",\"}\"].join(\"\\n\"))}};e.fn.thread({reduce:o({name:\"reduce\"}),reduceRight:o({name:\"reduceRight\"}),map:o({name:\"map\"})});var s=e.thdfn;s.promise=s.run,s.terminate=s.halt=s.stop,s.include=s.require,e.worker=e.Worker=e.Thread,e.fn.thread({on:e.define.on(),one:e.define.on({unbindSelfOnTrigger:!0}),off:e.define.off(),trigger:e.define.trigger()}),e.define.eventAliasesOn(e.thdfn)}(cytoscape,\"undefined\"==typeof window?null:window),function(e,t){\"use strict\";e.Fabric=function(t){if(!(this instanceof e.Fabric))return new e.Fabric(t);this._private={pass:[]};var r=4;e.is.number(t),t=\"undefined\"!=typeof navigator&&null!=navigator.hardwareConcurrency?navigator.hardwareConcurrency:\"undefined\"!=typeof module?require(\"os\").cpus().length:r;for(var i=0;t>i;i++)this[i]=e.Thread();this.length=t},e.fabric=e.Fabric,e.fabfn=e.Fabric.prototype,e.fn.fabric=function(t,r){for(var i in t){var n=t[i];e.Fabric.prototype[i]=n}},e.fn.fabric({require:function(e,t){for(var r=0;r<this.length;r++){var i=this[r];i.require(e,t)}return this},random:function(){var e=Math.round((this.length-1)*Math.random()),t=this[e];return t},run:function(e){var t=this._private.pass.shift();return this.random().pass(t).run(e)},message:function(e){return this.random().message(e)},broadcast:function(e){for(var t=0;t<this.length;t++){var r=this[t];r.message(e)}return this},stop:function(){for(var e=0;e<this.length;e++){var t=this[e];t.stop()}return this},pass:function(t){var r=this._private.pass;return e.is.array(t)?r.push(t):e.util.error(\"Only arrays or collections may be used with fabric.pass()\"),this},spreadSize:function(){var e=Math.ceil(this._private.pass[0].length/this.length);return e=Math.max(1,e)},spread:function(t){for(var r=this,i=r._private,n=r.spreadSize(),a=i.pass.shift().concat([]),o=[],s=0;s<this.length;s++){var l=this[s],u=a.splice(0,n),c=l.pass(u).run(t);o.push(c);var d=0===a.length;if(d)break}return e.Promise.all(o).then(function(e){for(var t=[],r=0,i=0;i<e.length;i++)for(var n=e[i],a=0;a<n.length;a++){var o=n[a];t[r++]=o}return t})},map:function(e){var t=this;return t.require(e,\"_$_$_fabmap\"),t.spread(function(e){var t=[],r=resolve;resolve=function(e){t.push(e)};for(var i=0;i<e.length;i++){var n=t.length,a=_$_$_fabmap(e[i]),o=n===t.length;o&&t.push(a)}return resolve=r,t})},filter:function(e){var t=this._private,r=t.pass[0];return this.map(e).then(function(e){for(var t=[],i=0;i<r.length;i++){var n=r[i],a=e[i];a&&t.push(n)}return t})},sort:function(e){var t=this,r=this._private.pass[0].length,i=this.spreadSize();return e=e||function(e,t){return t>e?-1:e>t?1:0},t.require(e,\"_$_$_cmp\"),t.spread(function(e){var t=e.sort(_$_$_cmp);resolve(t)}).then(function(t){for(var n=function(i,n,a){n=Math.min(n,r),a=Math.min(a,r);for(var o=i,s=n,l=[],u=o;a>u;u++){var c=t[i],d=t[n];s>i&&(n>=a||e(c,d)<=0)?(l.push(c),i++):(l.push(d),n++)}for(var u=0;u<l.length;u++){var h=o+u;t[h]=l[u]}},a=i;r>a;a*=2)for(var o=0;r>o;o+=2*a)n(o,o+a,o+2*a);return t})}});var r=function(e){return e=e||{},function(t,r){var i=this._private.pass.shift();return this.random().pass(i)[e.threadFn](t,r)}};e.fn.fabric({randomMap:r({threadFn:\"map\"}),reduce:r({threadFn:\"reduce\"}),reduceRight:r({threadFn:\"reduceRight\"})});var i=e.fabfn;i.promise=i.run,i.terminate=i.halt=i.stop,i.include=i.require,e.fn.fabric({on:e.define.on(),one:e.define.on({unbindSelfOnTrigger:!0}),off:e.define.off(),trigger:e.define.trigger()}),e.define.eventAliasesOn(e.fabfn)}(cytoscape,\"undefined\"==typeof window?null:window),function(e,t){\"use strict\";var r={},i=e.util.copy(r);e.defaults=function(t){r=e.util.extend({},i,t)},e.fn.core=function(t,r){for(var i in t){var n=t[i];e.Core.prototype[i]=n}},e.Core=function(i){if(!(this instanceof e.Core))return new e.Core(i);var n=this;i=e.util.extend({},r,i);var a=i.container,o=a?a._cyreg:null;if(o=o||{},o&&o.cy){if(a)for(;a.firstChild;)a.removeChild(a.firstChild);o.cy.notify({type:\"destroy\"}),o={}}var s=o.readies=o.readies||[];a&&(a._cyreg=o),o.cy=n;var l=void 0!==t&&void 0!==a&&!i.headless,u=i;u.layout=e.util.extend({name:l?\"grid\":\"null\"},u.layout),u.renderer=e.util.extend({name:l?\"canvas\":\"null\"},u.renderer);var c=function(e,t,r){return void 0!==t?t:void 0!==r?r:e},d=this._private={container:u.container,ready:!1,initrender:!1,options:u,elements:[],id2index:{},listeners:[],onRenders:[],aniEles:e.Collection(this),scratch:{},layout:null,renderer:null,notificationsEnabled:!0,minZoom:1e-50,maxZoom:1e50,zoomingEnabled:c(!0,u.zoomingEnabled),userZoomingEnabled:c(!0,u.userZoomingEnabled),panningEnabled:c(!0,u.panningEnabled),userPanningEnabled:c(!0,u.userPanningEnabled),boxSelectionEnabled:c(!1,u.boxSelectionEnabled),autolock:c(!1,u.autolock,u.autolockNodes),autoungrabify:c(!1,u.autoungrabify,u.autoungrabifyNodes),autounselectify:c(!1,u.autounselectify),styleEnabled:void 0===u.styleEnabled?l:u.styleEnabled,zoom:e.is.number(u.zoom)?u.zoom:1,pan:{x:e.is.plainObject(u.pan)&&e.is.number(u.pan.x)?u.pan.x:0,y:e.is.plainObject(u.pan)&&e.is.number(u.pan.y)?u.pan.y:0},animation:{current:[],queue:[]},hasCompoundNodes:!1,deferredExecQueue:[]},h=u.selectionType;void 0===h||\"additive\"!==h&&\"single\"!==h?d.selectionType=\"single\":d.selectionType=h,e.is.number(u.minZoom)&&e.is.number(u.maxZoom)&&u.minZoom<u.maxZoom?(d.minZoom=u.minZoom,d.maxZoom=u.maxZoom):e.is.number(u.minZoom)&&void 0===u.maxZoom?d.minZoom=u.minZoom:e.is.number(u.maxZoom)&&void 0===u.minZoom&&(d.maxZoom=u.maxZoom);var p=function(t){for(var r=!1,i=0;i<v.length;i++){var n=v[i];if(e.is.promise(n)){r=!0;break}}return r?e.Promise.all(v).then(t):void t(v)},v=[u.style,u.elements];p(function(t){var r=t[0],i=t[1];d.styleEnabled&&n.setStyle(r),n.initRenderer(e.util.extend({hideEdgesOnViewport:u.hideEdgesOnViewport,hideLabelsOnViewport:u.hideLabelsOnViewport,textureOnViewport:u.textureOnViewport,wheelSensitivity:e.is.number(u.wheelSensitivity)&&u.wheelSensitivity>0?u.wheelSensitivity:1,motionBlur:void 0===u.motionBlur?!0:u.motionBlur,motionBlurOpacity:void 0===u.motionBlurOpacity?.05:u.motionBlurOpacity,pixelRatio:e.is.number(u.pixelRatio)&&u.pixelRatio>0?u.pixelRatio:\"auto\"===u.pixelRatio?void 0:1,desktopTapThreshold:void 0===u.desktopTapThreshold?4:u.desktopTapThreshold,touchTapThreshold:void 0===u.touchTapThreshold?8:u.touchTapThreshold},u.renderer)),u.initrender&&(n.on(\"initrender\",u.initrender),n.on(\"initrender\",function(){n._private.initrender=!0})),n.load(i,function(){n.startAnimationLoop(),n._private.ready=!0,e.is.fn(u.ready)&&n.on(\"ready\",u.ready);for(var t=0;t<s.length;t++){var r=s[t];n.on(\"ready\",r)}o&&(o.readies=[]),n.trigger(\"ready\")},u.done)})},e.corefn=e.Core.prototype,e.fn.core({isReady:function(){return this._private.ready},ready:function(e){this.isReady()?this.trigger(\"ready\",[],e):this.on(\"ready\",e)},initrender:function(){return this._private.initrender},destroy:function(){this.notify({type:\"destroy\"});var e=this.container(),t=e.parentNode;if(t)try{t.removeChild(e)}catch(r){}return this},getElementById:function(t){var r=this._private.id2index[t];return void 0!==r?this._private.elements[r]:new e.Collection(this)},selectionType:function(){return this._private.selectionType},hasCompoundNodes:function(){return this._private.hasCompoundNodes},styleEnabled:function(){return this._private.styleEnabled},addToPool:function(e){for(var t=this._private.elements,r=this._private.id2index,i=0;i<e.length;i++){var n=e[i],a=n._private.data.id,o=r[a],s=void 0!==o;s||(o=t.length,t.push(n),r[a]=o,n._private.index=o)}return this},removeFromPool:function(e){for(var t=this._private.elements,r=this._private.id2index,i=0;i<e.length;i++){var n=e[i],a=n._private.data.id,o=r[a],s=void 0!==o;if(s){this._private.id2index[a]=void 0,t.splice(o,1);for(var l=o;l<t.length;l++){var u=t[l]._private.data.id;r[u]--,t[l]._private.index--}}}},container:function(){return this._private.container},options:function(){return e.util.copy(this._private.options)},json:function(e){var t={},r=this;return t.elements={},r.elements().each(function(e,r){var i=r.group();t.elements[i]||(t.elements[i]=[]),t.elements[i].push(r.json())}),this._private.styleEnabled&&(t.style=r.style().json()),t.zoomingEnabled=r._private.zoomingEnabled,t.userZoomingEnabled=r._private.userZoomingEnabled,t.zoom=r._private.zoom,t.minZoom=r._private.minZoom,t.maxZoom=r._private.maxZoom,t.panningEnabled=r._private.panningEnabled,t.userPanningEnabled=r._private.userPanningEnabled,t.pan=r._private.pan,t.boxSelectionEnabled=r._private.boxSelectionEnabled,t.layout=r._private.options.layout,t.renderer=r._private.options.renderer,t.hideEdgesOnViewport=r._private.options.hideEdgesOnViewport,t.hideLabelsOnViewport=r._private.options.hideLabelsOnViewport,t.textureOnViewport=r._private.options.textureOnViewport,t.wheelSensitivity=r._private.options.wheelSensitivity,t.motionBlur=r._private.options.motionBlur,t},defer:function(e){var t=this,r=t._private,i=r.deferredExecQueue;i.push(e),r.deferredTimeout||(r.deferredTimeout=setTimeout(function(){for(;i.length>0;)i.shift()();r.deferredTimeout=null},0))}})}(cytoscape,\"undefined\"==typeof window?null:window),function(e,t){\"use strict\";function r(e){var t=!document||\"interactive\"!==document.readyState&&\"complete\"!==document.readyState?r:e;setTimeout(t,9,e)}e.fn.core({add:function(t){var r,i=this;if(e.is.elementOrCollection(t)){var n=t;if(n._private.cy===i)r=n.restore();else{for(var a=[],o=0;o<n.length;o++){var s=n[o];a.push(s.json())}r=new e.Collection(i,a)}}else if(e.is.array(t)){var a=t;r=new e.Collection(i,a)}else if(e.is.plainObject(t)&&(e.is.array(t.nodes)||e.is.array(t.edges))){for(var l=t,a=[],u=[\"nodes\",\"edges\"],o=0,c=u.length;c>o;o++){var d=u[o],h=l[d];if(e.is.array(h))for(var p=0,v=h.length;v>p;p++){var f=h[p];f.group=d,a.push(f)}}r=new e.Collection(i,a)}else{var f=t;r=new e.Element(i,f).collection()}return r},remove:function(t){if(e.is.elementOrCollection(t))t=t;else if(e.is.string(t)){var r=t;t=this.$(r)}return t.remove()},load:function(i,n,a){function o(){s.one(\"layoutready\",function(e){s.notifications(!0),s.trigger(e),s.notify({type:\"load\",collection:s.elements()}),s.one(\"load\",n),s.trigger(\"load\")}).one(\"layoutstop\",function(){s.one(\"done\",a),s.trigger(\"done\")});var t=e.util.extend({},s._private.options.layout);t.eles=s.$(),s.layout(t)}var s=this;s.notifications(!1);var l=s.elements();return l.length>0&&l.remove(),null!=i&&(e.is.plainObject(i)||e.is.array(i))&&s.add(i),t?r(o):o(),this}})}(cytoscape,\"undefined\"==typeof window?null:window),function(e,t){\"use strict\";e.fn.core({animated:e.define.animated(),clearQueue:e.define.clearQueue(),delay:e.define.delay(),animate:e.define.animate(),stop:e.define.stop(),addToAnimationPool:function(e){var t=this;t.styleEnabled()&&t._private.aniEles.merge(e)},startAnimationLoop:function(){function r(){e.util.requestAnimationFrame(function(e){i(e),r()})}function i(t){function r(r,i){var l=r._private.animation.current,u=r._private.animation.queue,c=!1;if(0===l.length){var d=u.length>0?u.shift():null;d&&(d.callTime=t,l.push(d))}for(var h=[],p=l.length-1;p>=0;p--){var v=l[p];v.started||(n(r,v),s=!0),a(r,v,t,i),v.done&&(h.push(v),l.splice(p,1)),c=!0}for(var p=0;p<h.length;p++){var v=h[p],f=v.params.complete;e.is.fn(f)&&f.apply(r,[t])}return i||0!==l.length||0!==u.length||o.push(r),c}t=+new Date;for(var i=l._private.aniEles,o=[],s=!1,u=0;u<i.length;u++){var c=i[u];r(c)}var d=r(l,!0);if(i.length>0||d){var h;if(i.length>0){var p=i.updateCompoundBounds();h=p.length>0?i.add(p):i}l.notify({type:s?\"style\":\"draw\",collection:h})}i.unmerge(o)}function n(t,r){var i=e.is.core(t),n=!i,a=t,o=l._private.style;if(n)var s=a._private.position,u={x:s.x,y:s.y},c=o.getValueStyle(a);if(i)var d=l._private.pan,h={x:d.x,y:d.y},p=l._private.zoom;r.started=!0,r.startTime=Date.now(),r.startPosition=u,r.startStyle=c,r.startPan=h,r.startZoom=p}function a(t,r,i,n){var a,u=l._private.style,c=r.properties,d=r.params,h=r.startTime,p=!n;if(a=0===r.duration?1:Math.min(1,(i-h)/r.duration),0>a?a=0:a>1&&(a=1),null==c.delay){var v=r.startPosition,f=c.position,g=t._private.position;f&&p&&(o(v.x,f.x)&&(g.x=s(v.x,f.x,a)),o(v.y,f.y)&&(g.y=s(v.y,f.y,a)));var y=r.startPan,m=c.pan,x=t._private.pan,b=null!=m&&n;b&&(o(y.x,m.x)&&(x.x=s(y.x,m.x,a)),o(y.y,m.y)&&(x.y=s(y.y,m.y,a)),t.trigger(\"pan\"));var w=r.startZoom,_=c.zoom,E=null!=_&&n;E&&(o(w,_)&&(t._private.zoom=s(w,_,a)),t.trigger(\"zoom\")),(b||E)&&t.trigger(\"viewport\");var S=c.style||c.css;if(S&&p)for(var D=0;D<S.length;D++){var k=S[D].name,T=S[D],P=T,C=r.startStyle[k],M=s(C,P,a);u.overrideBypass(t,k,M)}}return e.is.fn(d.step)&&d.step.apply(t,[i]),a>=1&&(r.done=!0),a}function o(t,r){return null==t||null==r?!1:e.is.number(t)&&e.is.number(r)?!0:t&&r?!0:!1}function s(t,r,i){0>i?i=0:i>1&&(i=1);var n,a;if(n=null!=t.pxValue||null!=t.value?null!=t.pxValue?t.pxValue:t.value:t,a=null!=r.pxValue||null!=r.value?null!=r.pxValue?r.pxValue:r.value:r,e.is.number(n)&&e.is.number(a))return n+(a-n)*i;if(e.is.number(n[0])&&e.is.number(a[0])){var o=n,s=a,l=function(e,t){var r=t-e,n=e;return Math.round(i*r+n)},u=l(o[0],s[0]),c=l(o[1],s[1]),d=l(o[2],s[2]);return[u,c,d]}return void 0}var l=this;l.styleEnabled()&&t&&r()}})}(cytoscape,\"undefined\"==typeof window?null:window),function(e){\"use strict\";e.fn.core({data:e.define.data({field:\"data\",bindingEvent:\"data\",allowBinding:!0,allowSetting:!0,settingEvent:\"data\",settingTriggersEvent:!0,triggerFnName:\"trigger\",allowGetting:!0}),removeData:e.define.removeData({field:\"data\",event:\"data\",triggerFnName:\"trigger\",triggerEvent:!0}),scratch:e.define.data({field:\"scratch\",allowBinding:!1,allowSetting:!0,settingTriggersEvent:!1,allowGetting:!0}),removeScratch:e.define.removeData({field:\"scratch\",triggerEvent:!1})})}(cytoscape),function(e){\"use strict\";e.fn.core({on:e.define.on(),one:e.define.on({unbindSelfOnTrigger:!0}),once:e.define.on({unbindAllBindersOnTrigger:!0}),off:e.define.off(),trigger:e.define.trigger()}),e.define.eventAliasesOn(e.corefn)}(cytoscape),function(e){\"use strict\";e.fn.core({png:function(e){var t=this._private.renderer;return e=e||{},t.png(e)},jpg:function(e){var t=this._private.renderer;return e=e||{},e.bg=e.bg||\"#fff\",t.jpg(e)}}),e.corefn.jpeg=e.corefn.jpg}(cytoscape),function(e){\"use strict\";e.fn.core({layout:function(t){var r;return null==t&&(t=e.util.extend({},this._private.options.layout),t.eles=this.$()),r=this.initLayout(t),r.run(),this},makeLayout:function(e){return this.initLayout(e)},initLayout:function(t){if(null==t)return void e.util.error(\"Layout options must be specified to make a layout\");if(null==t.name)return void e.util.error(\"A `name` must be specified to make a layout\");var r=t.name,i=e.extension(\"layout\",r);if(null==i)return void e.util.error(\"Can not apply layout: No such layout `\"+r+\"` found; did you include its JS file?\");t.eles=null!=t.eles?t.eles:this.$(),e.is.string(t.eles)&&(t.eles=this.$(t.eles));var n=new i(e.util.extend({},t,{cy:this}));return e.is.plainObject(n._private)||(n._private={}),n._private.cy=this,n._private.listeners=[],n}}),e.corefn.createLayout=e.corefn.makeLayout}(cytoscape),function(e){\"use strict\";e.fn.core({notify:function(e){if(this._private.batchingNotify){var t=this._private.batchNotifyEles,r=this._private.batchNotifyTypes;if(e.collection)for(var i=0;i<e.collection.length;i++){var n=e.collection[i];t.ids[n._private.id]||t.push(n)}return void(r.ids[e.type]||r.push(e.type))}if(this._private.notificationsEnabled){var a=this.renderer();a.notify(e)}},notifications:function(e){var t=this._private;return void 0===e?t.notificationsEnabled:void(t.notificationsEnabled=e?!0:!1)},noNotifications:function(e){this.notifications(!1),e(),this.notifications(!0)},startBatch:function(){var e=this._private;return e.batchingStyle=e.batchingNotify=!0,e.batchStyleEles=[],e.batchNotifyEles=[],e.batchNotifyTypes=[],e.batchStyleEles.ids={},e.batchNotifyEles.ids={},e.batchNotifyTypes.ids={},this},endBatch:function(){var t=this._private;return t.batchingStyle=!1,new e.Collection(this,t.batchStyleEles).updateStyle(),t.batchingNotify=!1,this.notify({type:t.batchNotifyTypes,collection:t.batchNotifyEles}),this},batch:function(e){return this.startBatch(),e(),this.endBatch(),this},batchData:function(e){var t=this;return this.batch(function(){for(var r in e){var i=e[r],n=t.getElementById(r);n.data(i)}})}})}(cytoscape),function(e){\"use strict\";e.fn.core({renderTo:function(e,t,r,i){var n=this._private.renderer;return n.renderTo(e,t,r,i),this},renderer:function(){return this._private.renderer},forceRender:function(){return this.notify({type:\"draw\"}),this},resize:function(){return this.notify({type:\"resize\"}),this.trigger(\"resize\"),this},initRenderer:function(t){var r=this,i=e.extension(\"renderer\",t.name);return null==i?void e.util.error(\"Can not initialise: No such renderer `%s` found; did you include its JS file?\",t.name):void(this._private.renderer=new i(e.util.extend({},t,{cy:r,style:r._private.style})))},triggerOnRender:function(){for(var e=this._private.onRenders,t=0;t<e.length;t++){var r=e[t];r()}return this},onRender:function(e){return this._private.onRenders.push(e),this},offRender:function(e){var t=this._private.onRenders;if(null==e)return this._private.onRenders=[],this;for(var r=0;r<t.length;r++){var i=t[r];if(e===i){t.splice(r,1);break}}return this}})}(cytoscape),function(e){\"use strict\";e.fn.core({collection:function(t){return e.is.string(t)?this.$(t):e.is.elementOrCollection(t)?t.collection():e.is.array(t)?new e.Collection(this,t):new e.Collection(this)},nodes:function(e){var t=this.$(function(){return this.isNode()});return e?t.filter(e):t},edges:function(e){var t=this.$(function(){return this.isEdge()});return e?t.filter(e):t},$:function(t){var r=new e.Collection(this,this._private.elements);return t?r.filter(t):r}}),e.corefn.elements=e.corefn.filter=e.corefn.$}(cytoscape),function(e){\"use strict\";e.fn.core({style:function(e){if(e){var t=this.setStyle(e);t.update()}return this._private.style},setStyle:function(t){var r=this._private;return e.is.stylesheet(t)?r.style=t.generateStyle(this):e.is.array(t)?r.style=e.style.fromJson(this,t):e.is.string(t)?r.style=e.style.fromString(this,t):r.style=new e.Style(this),r.style}})}(cytoscape),function(e){\"use strict\";e.fn.core({autolock:function(e){return void 0===e?this._private.autolock:(this._private.autolock=e?!0:!1,this)},autoungrabify:function(e){return void 0===e?this._private.autoungrabify:(this._private.autoungrabify=e?!0:!1,this)},autounselectify:function(e){return void 0===e?this._private.autounselectify:(this._private.autounselectify=e?!0:!1,this)},panningEnabled:function(e){return void 0===e?this._private.panningEnabled:(this._private.panningEnabled=e?!0:!1,this)},userPanningEnabled:function(e){return void 0===e?this._private.userPanningEnabled:(this._private.userPanningEnabled=e?!0:!1,this)},zoomingEnabled:function(e){return void 0===e?this._private.zoomingEnabled:(this._private.zoomingEnabled=e?!0:!1,this)},userZoomingEnabled:function(e){return void 0===e?this._private.userZoomingEnabled:(this._private.userZoomingEnabled=e?!0:!1,\nthis)},boxSelectionEnabled:function(e){return void 0===e?this._private.boxSelectionEnabled:(this._private.boxSelectionEnabled=e?!0:!1,this)},pan:function(){var t,r,i,n,a,o=arguments,s=this._private.pan;switch(o.length){case 0:return s;case 1:if(e.is.string(o[0]))return t=o[0],s[t];if(e.is.plainObject(o[0])){if(!this._private.panningEnabled)return this;i=o[0],n=i.x,a=i.y,e.is.number(n)&&(s.x=n),e.is.number(a)&&(s.y=a),this.trigger(\"pan viewport\")}break;case 2:if(!this._private.panningEnabled)return this;t=o[0],r=o[1],\"x\"!==t&&\"y\"!==t||!e.is.number(r)||(s[t]=r),this.trigger(\"pan viewport\")}return this.notify({type:\"viewport\"}),this},panBy:function(t){var r,i,n,a,o,s=arguments,l=this._private.pan;if(!this._private.panningEnabled)return this;switch(s.length){case 1:e.is.plainObject(s[0])&&(n=s[0],a=n.x,o=n.y,e.is.number(a)&&(l.x+=a),e.is.number(o)&&(l.y+=o),this.trigger(\"pan viewport\"));break;case 2:r=s[0],i=s[1],\"x\"!==r&&\"y\"!==r||!e.is.number(i)||(l[r]+=i),this.trigger(\"pan viewport\")}return this.notify({type:\"viewport\"}),this},fit:function(e,t){var r=this.getFitViewport(e,t);if(r){var i=this._private;i.zoom=r.zoom,i.pan=r.pan,this.trigger(\"pan zoom viewport\"),this.notify({type:\"viewport\"})}return this},getFitViewport:function(t,r){if(e.is.number(t)&&void 0===r&&(r=t,t=void 0),this._private.panningEnabled&&this._private.zoomingEnabled){var i;if(e.is.string(t)){var n=t;t=this.$(n)}else if(e.is.boundingBox(t)){var a=t;i={x1:a.x1,y1:a.y1,x2:a.x2,y2:a.y2},i.w=i.x2-i.x1,i.h=i.y2-i.y1}else e.is.elementOrCollection(t)||(t=this.elements());i=i||t.boundingBox();var o,s=this.width(),l=this.height();if(r=e.is.number(r)?r:0,!isNaN(s)&&!isNaN(l)&&s>0&&l>0&&!isNaN(i.w)&&!isNaN(i.h)&&i.w>0&&i.h>0){o=Math.min((s-2*r)/i.w,(l-2*r)/i.h),o=o>this._private.maxZoom?this._private.maxZoom:o,o=o<this._private.minZoom?this._private.minZoom:o;var u={x:(s-o*(i.x1+i.x2))/2,y:(l-o*(i.y1+i.y2))/2};return{zoom:o,pan:u}}}},minZoom:function(t){return void 0===t?this._private.minZoom:(e.is.number(t)&&(this._private.minZoom=t),this)},maxZoom:function(t){return void 0===t?this._private.maxZoom:(e.is.number(t)&&(this._private.maxZoom=t),this)},zoom:function(t){var r,i;if(void 0===t)return this._private.zoom;if(e.is.number(t))i=t;else if(e.is.plainObject(t)){if(i=t.level,t.position){var n=t.position,a=this._private.pan,o=this._private.zoom;r={x:n.x*o+a.x,y:n.y*o+a.y}}else t.renderedPosition&&(r=t.renderedPosition);if(r&&!this._private.panningEnabled)return this}if(!this._private.zoomingEnabled)return this;if(!e.is.number(i)||r&&(!e.is.number(r.x)||!e.is.number(r.y)))return this;if(i=i>this._private.maxZoom?this._private.maxZoom:i,i=i<this._private.minZoom?this._private.minZoom:i,r){var s=this._private.pan,l=this._private.zoom,u=i,c={x:-u/l*(r.x-s.x)+r.x,y:-u/l*(r.y-s.y)+r.y};this._private.zoom=i,this._private.pan=c;var d=s.x!==c.x||s.y!==c.y;this.trigger(\" zoom \"+(d?\" pan \":\"\")+\" viewport \")}else this._private.zoom=i,this.trigger(\"zoom viewport\");return this.notify({type:\"viewport\"}),this},viewport:function(t){var r=this._private,i=!0,n=!0,a=[],o=!1,s=!1;if(!t)return this;if(e.is.number(t.zoom)||(i=!1),e.is.plainObject(t.pan)||(n=!1),!i&&!n)return this;if(i){var l=t.zoom;l<r.minZoom||l>r.maxZoom||!r.zoomingEnabled?o=!0:(r.zoom=l,a.push(\"zoom\"))}if(n&&(!o||!t.cancelOnFailedZoom)&&r.panningEnabled){var u=t.pan;e.is.number(u.x)&&(r.pan.x=u.x,s=!1),e.is.number(u.y)&&(r.pan.y=u.y,s=!1),s||a.push(\"pan\")}return a.length>0&&(a.push(\"viewport\"),this.trigger(a.join(\" \")),this.notify({type:\"viewport\"})),this},center:function(e){var t=this.getCenterPan(e);return t&&(this._private.pan=t,this.trigger(\"pan viewport\"),this.notify({type:\"viewport\"})),this},getCenterPan:function(t,r){if(this._private.panningEnabled){if(e.is.string(t)){var i=t;t=this.elements(i)}else e.is.elementOrCollection(t)||(t=this.elements());var n=t.boundingBox(),a=this.width(),o=this.height();r=void 0===r?this._private.zoom:r;var s={x:(a-r*(n.x1+n.x2))/2,y:(o-r*(n.y1+n.y2))/2};return s}},reset:function(){return this._private.panningEnabled&&this._private.zoomingEnabled?(this.viewport({pan:{x:0,y:0},zoom:1}),this):this},width:function(){var e=this._private.container;return e?e.clientWidth:1},height:function(){var e=this._private.container;return e?e.clientHeight:1},extent:function(){var e=this._private.pan,t=this._private.zoom,r=this.renderedExtent(),i={x1:(r.x1-e.x)/t,x2:(r.x2-e.x)/t,y1:(r.y1-e.y)/t,y2:(r.y2-e.y)/t};return i.w=i.x2-i.x1,i.h=i.y2-i.y1,i},renderedExtent:function(){var e=this.width(),t=this.height();return{x1:0,y1:0,x2:e,y2:t,w:e,h:t}}}),e.corefn.centre=e.corefn.center,e.corefn.autolockNodes=e.corefn.autolock,e.corefn.autoungrabifyNodes=e.corefn.autoungrabify}(cytoscape),function(e){\"use strict\";e.fn.collection=e.fn.eles=function(t,r){for(var i in t){var n=t[i];e.Collection.prototype[i]=n}};var t={prefix:{nodes:\"n\",edges:\"e\"},id:{nodes:0,edges:0},generate:function(t,r,i){var n=e.is.element(r)?r._private:r,a=n.group,o=null!=i?i:this.prefix[a]+this.id[a];if(t.getElementById(o).empty())this.id[a]++;else for(;!t.getElementById(o).empty();)o=this.prefix[a]+ ++this.id[a];return o}};e.Element=function(t,r,i){if(!(this instanceof e.Element))return new e.Element(t,r,i);var n=this;if(i=void 0===i||i?!0:!1,void 0===t||void 0===r||!e.is.core(t))return void e.util.error(\"An element must have a core reference and parameters set\");if(\"nodes\"!==r.group&&\"edges\"!==r.group)return void e.util.error(\"An element must be of type `nodes` or `edges`; you specified `\"+r.group+\"`\");if(this.length=1,this[0]=this,this._private={cy:t,single:!0,data:r.data||{},position:r.position||{},autoWidth:void 0,autoHeight:void 0,listeners:[],group:r.group,style:{},rstyle:{},styleCxts:[],removed:!0,selected:r.selected?!0:!1,selectable:void 0===r.selectable?!0:r.selectable?!0:!1,locked:r.locked?!0:!1,grabbed:!1,grabbable:void 0===r.grabbable?!0:r.grabbable?!0:!1,active:!1,classes:{},animation:{current:[],queue:[]},rscratch:{},scratch:r.scratch||{},edges:[],children:[]},r.renderedPosition){var a=r.renderedPosition,o=t.pan(),s=t.zoom();this._private.position={x:(a.x-o.x)/s,y:(a.y-o.y)/s}}if(e.is.string(r.classes))for(var l=r.classes.split(/\\s+/),u=0,c=l.length;c>u;u++){var d=l[u];d&&\"\"!==d&&(n._private.classes[d]=!0)}r.css&&t.style().applyBypass(this,r.css),(void 0===i||i)&&this.restore()},e.Collection=function(r,i,n){if(!(this instanceof e.Collection))return new e.Collection(r,i);if(void 0===r||!e.is.core(r))return void e.util.error(\"A collection must have a reference to the core\");var a={},o={},s=!1;if(i){if(i.length>0&&e.is.plainObject(i[0])&&!e.is.element(i[0])){s=!0;for(var l=[],u={},c=0,d=i.length;d>c;c++){var h=i[c];null==h.data&&(h.data={});var p=h.data;if(null==p.id)p.id=t.generate(r,h);else if(0!==r.getElementById(p.id).length||u[p.id])continue;var v=new e.Element(r,h,!1);l.push(v),u[p.id]=!0}i=l}}else i=[];this.length=0;for(var c=0,d=i.length;d>c;c++){var f=i[c];if(f){var g=f._private.data.id;(!n||n.unique&&!a[g])&&(a[g]=f,o[g]=this.length,this[this.length]=f,this.length++)}}this._private={cy:r,ids:a,indexes:o},s&&this.restore()},e.elefn=e.elesfn=e.Element.prototype=e.Collection.prototype,e.elesfn.cy=function(){return this._private.cy},e.elesfn.element=function(){return this[0]},e.elesfn.collection=function(){return e.is.collection(this)?this:new e.Collection(this._private.cy,[this])},e.elesfn.unique=function(){return new e.Collection(this._private.cy,this,{unique:!0})},e.elesfn.getElementById=function(t){var r=this._private.cy,i=this._private.ids[t];return i?i:e.Collection(r)},e.elesfn.json=function(){var t=this.element();if(null==t)return void 0;var r=t._private,i=e.util.copy({data:r.data,position:r.position,group:r.group,bypass:r.bypass,removed:r.removed,selected:r.selected,selectable:r.selectable,locked:r.locked,grabbed:r.grabbed,grabbable:r.grabbable,classes:\"\"}),n=[];for(var a in r.classes)r.classes[a]&&n.push(a);for(var o=0;o<n.length;o++){var a=n[o];i.classes+=a+(o<n.length-1?\" \":\"\")}return i},e.elesfn.jsons=function(){for(var e=[],t=0;t<this.length;t++){var r=this[t],i=r.json();e.push(i)}return e},e.elesfn.clone=function(){for(var t=this.cy(),r=[],i=0;i<this.length;i++){var n=this[i],a=n.json(),o=new e.Element(t,a,!1);r.push(o)}return new e.Collection(t,r)},e.elesfn.copy=e.elesfn.clone,e.elesfn.restore=function(r){var i=this,n=[],a=i.cy();void 0===r&&(r=!0);for(var o=[],s=[],l=[],u=0,c=0,d=0,h=i.length;h>d;d++){var p=i[d];p.isNode()?(s.push(p),u++):(l.push(p),c++)}o=s.concat(l);for(var d=0,h=o.length;h>d;d++){var p=o[d];if(p.removed()){var v=p._private,f=v.data;if(void 0===f.id)f.id=t.generate(a,p);else if(e.is.number(f.id))f.id=\"\"+f.id;else{if(e.is.emptyString(f.id)||!e.is.string(f.id)){e.util.error(\"Can not create element with invalid string ID `\"+f.id+\"`\");continue}if(0!==a.getElementById(f.id).length){e.util.error(\"Can not create second element with ID `\"+f.id+\"`\");continue}}var g=f.id;if(p.isNode()){var y=p,m=v.position;null==m.x&&(m.x=0),null==m.y&&(m.y=0)}if(p.isEdge()){for(var x=p,b=[\"source\",\"target\"],w=b.length,_=!1,E=0;w>E;E++){var S=b[E],D=f[S];e.is.number(D)&&(D=f[S]=\"\"+f[S]),null==D||\"\"===D?(e.util.error(\"Can not create edge `\"+g+\"` with unspecified \"+S),_=!0):a.getElementById(D).empty()&&(e.util.error(\"Can not create edge `\"+g+\"` with nonexistant \"+S+\" `\"+D+\"`\"),_=!0)}if(_)continue;var k=a.getElementById(f.source),T=a.getElementById(f.target);k._private.edges.push(x),T._private.edges.push(x),x._private.source=k,x._private.target=T}v.ids={},v.ids[g]=p,v.removed=!1,a.addToPool(p),n.push(p)}}for(var d=0;u>d;d++){var y=o[d],f=y._private.data;e.is.number(f.parent)&&(f.parent=\"\"+f.parent);var P=f.parent,C=null!=P;if(C){var M=a.getElementById(P);if(M.empty())f.parent=void 0;else{for(var B=!1,N=M;!N.empty();){if(y.same(N)){B=!0,f.parent=void 0;break}N=N.parent()}B||(M[0]._private.children.push(y),y._private.parent=M[0],a._private.hasCompoundNodes=!0)}}}if(n=new e.Collection(a,n),n.length>0){var I=n.add(n.connectedNodes()).add(n.parent());I.updateStyle(r),r?n.rtrigger(\"add\"):n.trigger(\"add\")}return i},e.elesfn.removed=function(){var e=this[0];return e&&e._private.removed},e.elesfn.inside=function(){var e=this[0];return e&&!e._private.removed},e.elesfn.remove=function(t){function r(e){for(var t=e._private.edges,r=0;r<t.length;r++)n(t[r])}function i(e){for(var t=e._private.children,r=0;r<t.length;r++)n(t[r])}function n(e){var t=c[e.id()];t||(c[e.id()]=!0,e.isNode()?(u.push(e),r(e),i(e)):u.unshift(e))}function a(e,t){for(var r=e._private.edges,i=0;i<r.length;i++){var n=r[i];if(t===n){r.splice(i,1);break}}}function o(e,t){t=t[0],e=e[0];for(var r=e._private.children,i=0;i<r.length;i++)if(r[i][0]===t[0]){r.splice(i,1);break}}var s=this,l=[],u=[],c={},d=s._private.cy;void 0===t&&(t=!0);for(var h=0,p=s.length;p>h;h++){var v=s[h];n(v)}for(var h=0;h<u.length;h++){var v=u[h];if(v._private.removed=!0,d.removeFromPool(v),l.push(v),v.isEdge()){var f=v.source()[0],g=v.target()[0];a(f,v),a(g,v)}else{var y=v.parent();0!==y.length&&o(y,v)}}var m=d._private.elements;d._private.hasCompoundNodes=!1;for(var h=0;h<m.length;h++){var v=m[h];if(v.isParent()){d._private.hasCompoundNodes=!0;break}}var x=new e.Collection(this.cy(),l);x.size()>0&&(t&&this.cy().notify({type:\"remove\",collection:x}),x.trigger(\"remove\"));for(var b={},h=0;h<u.length;h++){var v=u[h],w=\"nodes\"===v._private.group,_=v._private.data.parent;if(w&&void 0!==_&&!b[_]){b[_]=!0;var y=d.getElementById(_);y&&0!==y.length&&!y._private.removed&&0===y.children().length&&y.updateStyle()}}return this},e.elesfn.move=function(e){var t=this._private.cy;if(void 0!==e.source||void 0!==e.target){var r=e.source,i=e.target,n=t.getElementById(r).length>0,a=t.getElementById(i).length>0;if(n||a){var o=this.jsons();this.remove();for(var s=0;s<o.length;s++){var l=o[s];\"edges\"===l.group&&(n&&(l.data.source=r),a&&(l.data.target=i))}return t.add(o)}}else if(void 0!==e.parent){var u=e.parent,c=null===u||t.getElementById(u).length>0;if(c){var o=this.jsons(),d=this.descendants(),h=d.merge(d.add(this).connectedEdges());this.remove();for(var s=0;s<this.length;s++){var l=o[s];\"nodes\"===l.group&&(l.data.parent=null===u?void 0:u)}}return t.add(o).merge(h.restore())}return this}}(cytoscape),function(e){\"use strict\";var t=e.is,r=function(e){return e={bfs:e.bfs||!e.dfs,dfs:e.dfs||!e.bfs},function(r,i,n){var a,o,s;t.plainObject(r)&&!t.elementOrCollection(r)&&(a=r,r=a.roots,i=a.visit,n=a.directed,o=a.std,s=a.thisArg),n=2!==arguments.length||t.fn(i)?n:i,i=t.fn(i)?i:function(){};for(var l,u=this._private.cy,c=r=t.string(r)?this.filter(r):r,d=[],h=[],p={},v={},f={},g=0,y=this.nodes(),m=this.edges(),x=0;x<c.length;x++)c[x].isNode()&&(d.unshift(c[x]),e.bfs&&(f[c[x].id()]=!0,h.push(c[x])),v[c[x].id()]=0);for(;0!==d.length;){var c=e.bfs?d.shift():d.pop();if(e.dfs){if(f[c.id()])continue;f[c.id()]=!0,h.push(c)}var b,w=v[c.id()],_=p[c.id()],E=null==_?void 0:_.connectedNodes().not(c)[0];if(b=o?i.call(s,c,_,E,g++,w):i.call(c,g++,w,c,_,E),b===!0){l=c;break}if(b===!1)break;for(var S=c.connectedEdges(n?function(){return this.data(\"source\")===c.id()}:void 0).intersect(m),x=0;x<S.length;x++){var D=S[x],k=D.connectedNodes(function(){return this.id()!==c.id()}).intersect(y);0===k.length||f[k.id()]||(k=k[0],d.push(k),e.bfs&&(f[k.id()]=!0,h.push(k)),p[k.id()]=D,v[k.id()]=v[c.id()]+1)}}for(var T=[],x=0;x<h.length;x++){var P=h[x],C=p[P.id()];C&&T.push(C),T.push(P)}return{path:u.collection(T,{unique:!0}),found:u.collection(l)}}};e.fn.eles({breadthFirstSearch:r({bfs:!0}),depthFirstSearch:r({dfs:!0}),kruskal:function(t){function r(e){for(var t=0;t<n.length;t++){var r=n[t];if(r.anySame(e))return{eles:r,index:t}}}t=e.is.fn(t)?t:function(){return 1};for(var i=new e.Collection(this._private.cy,[]),n=[],a=this.nodes(),o=0;o<a.length;o++)n.push(a[o].collection());for(var s=this.edges(),l=s.toArray().sort(function(e,r){var i=t.call(e,e),n=t.call(r,r);return i-n}),o=0;o<l.length;o++){var u=l[o],c=u.source()[0],d=u.target()[0],h=r(c),p=r(d);h.index!==p.index&&(i=i.add(u),n[h.index]=h.eles.add(p.eles),n.splice(p.index,1))}return a.add(i)},dijkstra:function(t,r,i){var n;e.is.plainObject(t)&&!e.is.elementOrCollection(t)&&(n=t,t=n.root,r=n.weight,i=n.directed);var a=this._private.cy;r=e.is.fn(r)?r:function(){return 1};for(var o=e.is.string(t)?this.filter(t)[0]:t[0],s={},l={},u={},c=this.edges().filter(function(){return!this.isLoop()}),d=this.nodes(),h=[],p=0;p<d.length;p++)s[d[p].id()]=d[p].same(o)?0:1/0,h.push(d[p]);var v=function(e){return s[e.id()]};h=new e.Collection(a,h);for(var f=e.Minheap(a,h,v),g=function(e,t){for(var n,a=(i?e.edgesTo(t):e.edgesWith(t)).intersect(c),o=1/0,s=0;s<a.length;s++){var l=a[s],u=r.apply(l,[l]);(o>u||!n)&&(o=u,n=l)}return{edge:n,dist:o}};f.size()>0;){var y=f.pop(),m=y.value,x=y.id,b=a.getElementById(x);if(u[x]=m,m===Math.Infinite)break;for(var w=b.neighborhood().intersect(d),p=0;p<w.length;p++){var _=w[p],E=_.id(),S=g(b,_),D=m+S.dist;D<f.getValueById(E)&&(f.edit(E,D),l[E]={node:b,edge:S.edge})}}return{distanceTo:function(t){var r=e.is.string(t)?d.filter(t)[0]:t[0];return u[r.id()]},pathTo:function(t){var r=e.is.string(t)?d.filter(t)[0]:t[0],i=[],n=r;if(r.length>0)for(i.unshift(r);l[n.id()];){var o=l[n.id()];i.unshift(o.edge),i.unshift(o.node),n=o.node}return new e.Collection(a,i)}}}}),e.elesfn.bfs=e.elesfn.breadthFirstSearch,e.elesfn.dfs=e.elesfn.depthFirstSearch,e.elesfn.stdBfs=e.elesfn.stdBreadthFirstSearch,e.elesfn.stdDfs=e.elesfn.stdDepthFirstSearch}(cytoscape),function(e){\"use strict\";e.fn.eles({aStar:function(t){t=t||{};var r=function(e,t,i,a){if(e==t)return a.push(n.getElementById(t)),a;if(t in i){var o=i[t],s=p[t];return a.push(n.getElementById(t)),a.push(n.getElementById(s)),r(e,o,i,a)}return void 0},i=function(e,t){if(0===e.length)return void 0;for(var r=0,i=t[e[0]],n=1;n<e.length;n++){var a=t[e[n]];i>a&&(i=a,r=n)}return r},n=this._private.cy;if(null==t||null==t.root)return void 0;var a=e.is.string(t.root)?this.filter(t.root)[0]:t.root[0];if(null==t.goal)return void 0;var o=e.is.string(t.goal)?this.filter(t.goal)[0]:t.goal[0];if(null!=t.heuristic&&e.is.fn(t.heuristic))var s=t.heuristic;else var s=function(){return 0};if(null!=t.weight&&e.is.fn(t.weight))var l=t.weight;else var l=function(e){return 1};if(null!=t.directed)var u=t.directed;else var u=!1;var c=[],d=[a.id()],h={},p={},v={},f={};v[a.id()]=0,f[a.id()]=s(a);for(var g=this.edges().stdFilter(function(e){return!e.isLoop()}),y=this.nodes(),m=0;d.length>0;){var x=i(d,f),b=n.getElementById(d[x]);if(m++,b.id()==o.id()){var w=r(a.id(),o.id(),h,[]);return w.reverse(),{found:!0,distance:v[b.id()],path:new e.Collection(n,w),steps:m}}c.push(b.id()),d.splice(x,1);var _=b.connectedEdges();u&&(_=_.stdFilter(function(e){return e.data(\"source\")===b.id()})),_=_.intersect(g);for(var E=0;E<_.length;E++){var S=_[E],D=S.connectedNodes().stdFilter(function(e){return e.id()!==b.id()}).intersect(y);if(-1==c.indexOf(D.id())){var k=v[b.id()]+l.apply(S,[S]);-1!=d.indexOf(D.id())?k<v[D.id()]&&(v[D.id()]=k,f[D.id()]=k+s(D),h[D.id()]=b.id()):(v[D.id()]=k,f[D.id()]=k+s(D),d.push(D.id()),h[D.id()]=b.id(),p[D.id()]=S.id())}}}return{found:!1,distance:void 0,path:void 0,steps:m}},floydWarshall:function(t){t=t||{};var r=this._private.cy;if(null!=t.weight&&e.is.fn(t.weight))var i=t.weight;else var i=function(e){return 1};if(null!=t.directed)var n=t.directed;else var n=!1;for(var a=this.edges().stdFilter(function(e){return!e.isLoop()}),o=this.nodes(),s=o.length,l={},u=0;s>u;u++)l[o[u].id()]=u;for(var c=[],u=0;s>u;u++){for(var d=new Array(s),h=0;s>h;h++)u==h?d[h]=0:d[h]=1/0;c.push(d)}var p=[],v=[],f=function(e){for(var t=0;s>t;t++){for(var r=new Array(s),i=0;s>i;i++)r[i]=void 0;e.push(r)}};f(p),f(v);for(var u=0;u<a.length;u++){var g=l[a[u].source().id()],y=l[a[u].target().id()],m=i.apply(a[u],[a[u]]);c[g][y]>m&&(c[g][y]=m,p[g][y]=y,v[g][y]=a[u])}if(!n)for(var u=0;u<a.length;u++){var g=l[a[u].target().id()],y=l[a[u].source().id()],m=i.apply(a[u],[a[u]]);c[g][y]>m&&(c[g][y]=m,p[g][y]=y,v[g][y]=a[u])}for(var x=0;s>x;x++)for(var u=0;s>u;u++)for(var h=0;s>h;h++)c[u][x]+c[x][h]<c[u][h]&&(c[u][h]=c[u][x]+c[x][h],p[u][h]=p[u][x]);for(var b=[],u=0;s>u;u++)b.push(o[u].id());var w={distance:function(t,i){if(e.is.string(t))var n=r.filter(t)[0].id();else var n=t.id();if(e.is.string(i))var a=r.filter(i)[0].id();else var a=i.id();return c[l[n]][l[a]]},path:function(t,i){var n=function(e,t,i,n,a){if(e===t)return r.getElementById(n[e]);if(void 0===i[e][t])return void 0;for(var o=[r.getElementById(n[e])],s=e;e!==t;){s=e,e=i[e][t];var l=a[s][e];o.push(l),o.push(r.getElementById(n[e]))}return o};if(e.is.string(t))var a=r.filter(t)[0].id();else var a=t.id();if(e.is.string(i))var o=r.filter(i)[0].id();else var o=i.id();var s=n(l[a],l[o],p,b,v);return new e.Collection(r,s)}};return w},bellmanFord:function(t){if(t=t||{},null!=t.weight&&e.is.fn(t.weight))var r=t.weight;else var r=function(e){return 1};if(null!=t.directed)var i=t.directed;else var i=!1;if(null==t.root)return void e.util.error(\"options.root required\");if(e.is.string(t.root))var n=this.filter(t.root)[0];else var n=t.root[0];for(var a=this._private.cy,o=this.edges().stdFilter(function(e){return!e.isLoop()}),s=this.nodes(),l=s.length,u={},c=0;l>c;c++)u[s[c].id()]=c;for(var d=[],h=[],p=[],c=0;l>c;c++)s[c].id()===n.id()?d[c]=0:d[c]=1/0,h[c]=void 0;for(var v=!1,c=1;l>c;c++){v=!1;for(var f=0;f<o.length;f++){var g=u[o[f].source().id()],y=u[o[f].target().id()],m=r.apply(o[f],[o[f]]),x=d[g]+m;if(x<d[y]&&(d[y]=x,h[y]=g,p[y]=o[f],v=!0),!i){var x=d[y]+m;x<d[g]&&(d[g]=x,h[g]=y,p[g]=o[f],v=!0)}}if(!v)break}if(v)for(var f=0;f<o.length;f++){var g=u[o[f].source().id()],y=u[o[f].target().id()],m=r.apply(o[f],[o[f]]);if(d[g]+m<d[y])return e.util.error(\"Error: graph contains a negative weigth cycle!\"),{pathTo:void 0,distanceTo:void 0,hasNegativeWeightCycle:!0}}for(var b=[],c=0;l>c;c++)b.push(s[c].id());var w={distanceTo:function(t){if(e.is.string(t))var r=a.filter(t)[0].id();else var r=t.id();return d[u[r]]},pathTo:function(t){var r=function(e,t,r,i,n,o){for(;;){if(n.push(a.getElementById(i[r])),n.push(o[r]),t===r)return n;var s=e[r];if(\"undefined\"==typeof s)return void 0;r=s}};if(e.is.string(t))var i=a.filter(t)[0].id();else var i=t.id();var o=[],s=r(h,u[n.id()],u[i],b,o,p);return null!=s&&s.reverse(),new e.Collection(a,s)},hasNegativeWeightCycle:!1};return w},kargerStein:function(t){t=t||{};var r=function(e,t,r){for(var i=r[e],n=i[1],a=i[2],o=t[n],s=t[a],l=r.filter(function(e){return t[e[1]]===o&&t[e[2]]===s?!1:t[e[1]]===s&&t[e[2]]===o?!1:!0}),u=0;u<l.length;u++){var c=l[u];c[1]===s?(l[u]=c.slice(0),l[u][1]=o):c[2]===s&&(l[u]=c.slice(0),l[u][2]=o)}for(var u=0;u<t.length;u++)t[u]===s&&(t[u]=o);return l},i=function(e,t,n,a){if(a>=n)return t;var o=Math.floor(Math.random()*t.length),s=r(o,e,t);return i(e,s,n-1,a)},n=this._private.cy,a=this.edges().stdFilter(function(e){return!e.isLoop()}),o=this.nodes(),s=o.length,l=a.length,u=Math.ceil(Math.pow(Math.log(s)/Math.LN2,2)),c=Math.floor(s/Math.sqrt(2));if(2>s)return void e.util.error(\"At least 2 nodes are required for KargerSteing algorithm!\");for(var d={},h=0;s>h;h++)d[o[h].id()]=h;for(var p=[],h=0;l>h;h++){var v=a[h];p.push([h,d[v.source().id()],d[v.target().id()]])}for(var f,g=1/0,y=[],h=0;s>h;h++)y.push(h);for(var m=0;u>=m;m++){var x=y.slice(0),b=i(x,p,s,c),w=x.slice(0),_=i(x,b,c,2),E=i(w,b,c,2);_.length<=E.length&&_.length<g?(g=_.length,f=[_,x]):E.length<=_.length&&E.length<g&&(g=E.length,f=[E,w])}for(var S=f[0].map(function(e){return a[e[0]]}),D=[],k=[],T=f[1][0],h=0;h<f[1].length;h++){var P=f[1][h];P===T?D.push(o[h]):k.push(o[h])}var C={cut:new e.Collection(n,S),partition1:new e.Collection(n,D),partition2:new e.Collection(n,k)};return C},pageRank:function(t){t=t||{};var r=function(e){for(var t=e.length,r=0,i=0;t>i;i++)r+=e[i];for(var i=0;t>i;i++)e[i]=e[i]/r};if(null!=t&&null!=t.dampingFactor)var i=t.dampingFactor;else var i=.8;if(null!=t&&null!=t.precision)var n=t.precision;else var n=1e-6;if(null!=t&&null!=t.iterations)var a=t.iterations;else var a=200;if(null!=t&&null!=t.weight&&e.is.fn(t.weight))var o=t.weight;else var o=function(e){return 1};for(var s=this._private.cy,l=this.edges().stdFilter(function(e){return!e.isLoop()}),u=this.nodes(),c=u.length,d=l.length,h={},p=0;c>p;p++)h[u[p].id()]=p;for(var v=[],f=[],g=(1-i)/c,p=0;c>p;p++){for(var y=[],m=0;c>m;m++)y.push(0);v.push(y),f.push(0)}for(var p=0;d>p;p++){var x=l[p],b=h[x.source().id()],w=h[x.target().id()],_=o.apply(x,[x]);v[w][b]+=_,f[b]+=_}for(var E=1/c+g,m=0;c>m;m++)if(0===f[m])for(var p=0;c>p;p++)v[p][m]=E;else for(var p=0;c>p;p++)v[p][m]=v[p][m]/f[m]+g;for(var S,D=[],k=[],p=0;c>p;p++)D.push(1),k.push(0);for(var T=0;a>T;T++){for(var P=k.slice(0),p=0;c>p;p++)for(var m=0;c>m;m++)P[p]+=v[p][m]*D[m];r(P),S=D,D=P;for(var C=0,p=0;c>p;p++)C+=Math.pow(S[p]-D[p],2);if(n>C)break}var M={rank:function(t){if(e.is.string(t))var r=s.filter(t)[0].id();else var r=t.id();return D[h[r]]}};return M},degreeCentralityNormalized:function(t){if(t=t||{},null!=t.directed)var r=t.directed;else var r=!1;var i=this.nodes(),n=i.length;if(r){for(var a={},o={},s=0,l=0,u=0;n>u;u++){var c=i[u],d=this.degreeCentrality(e.util.extend({},t,{root:c}));s<d.indegree&&(s=d.indegree),l<d.outdegree&&(l=d.outdegree),a[c.id()]=d.indegree,o[c.id()]=d.outdegree}return{indegree:function(t){if(e.is.string(t))var t=cy.filter(t)[0].id();else var t=t.id();return a[t]/s},outdegree:function(t){if(e.is.string(t))var t=cy.filter(t)[0].id();else var t=t.id();return o[t]/l}}}for(var h={},p=0,u=0;n>u;u++){var c=i[u],d=this.degreeCentrality(e.util.extend({},t,{root:c}));p<d.degree&&(p=d.degree),h[c.id()]=d.degree}return{degree:function(t){if(e.is.string(t))var t=cy.filter(t)[0].id();else var t=t.id();return h[t]/p}}},degreeCentrality:function(t){t=t||{};var r=this;if(null==t||null==t.root)return void 0;var i=e.is.string(t.root)?this.filter(t.root)[0]:t.root[0];if(null!=t.weight&&e.is.fn(t.weight))var n=t.weight;else var n=function(e){return 1};if(null!=t.directed)var a=t.directed;else var a=!1;if(null!=t.alpha&&e.is.number(t.alpha))var o=t.alpha;else o=0;if(a){for(var s=i.connectedEdges('edge[target = \"'+i.id()+'\"]').intersection(r),l=i.connectedEdges('edge[source = \"'+i.id()+'\"]').intersection(r),u=s.length,c=l.length,d=0,h=0,p=0;p<s.length;p++){var v=s[p];d+=n.apply(v,[v])}for(var p=0;p<l.length;p++){var v=l[p];h+=n.apply(v,[v])}return{indegree:Math.pow(u,1-o)*Math.pow(d,o),outdegree:Math.pow(c,1-o)*Math.pow(h,o)}}for(var f=i.connectedEdges().intersection(r),g=f.length,y=0,p=0;p<f.length;p++){var v=f[p];y+=n.apply(v,[v])}return{degree:Math.pow(g,1-o)*Math.pow(y,o)}},closenessCentralityNormalized:function(t){t=t||{};var r=t.harmonic;void 0===r&&(r=!0);for(var i={},n=0,a=this.nodes(),o=this.floydWarshall({weight:t.weight,directed:t.directed}),s=0;s<a.length;s++){for(var l=0,u=0;u<a.length;u++)if(s!=u){var c=o.distance(a[s],a[u]);l+=r?1/c:c}r||(l=1/l),l>n&&(n=l),i[a[s].id()]=l}return{closeness:function(t){if(e.is.string(t))var t=cy.filter(t)[0].id();else var t=t.id();return i[t]/n}}},closenessCentrality:function(t){if(t=t||{},null==t.root)return void e.util.error(\"options.root required\");if(e.is.string(t.root))var r=this.filter(t.root)[0];else var r=t.root[0];if(null!=t.weight&&e.is.fn(t.weight))var i=t.weight;else var i=function(){return 1};if(null!=t.directed&&e.is.bool(t.directed))var n=t.directed;else var n=!1;var a=t.harmonic;void 0===a&&(a=!0);for(var o=this.dijkstra({root:r,weight:i,directed:n}),s=0,l=this.nodes(),u=0;u<l.length;u++)if(l[u].id()!=r.id()){var c=o.distanceTo(l[u]);s+=a?1/c:c}return a?s:1/s},betweennessCentrality:function(t){if(t=t||{},null!=t.weight&&e.is.fn(t.weight))var r=t.weight,i=!0;else var i=!1;if(null!=t.directed&&e.is.bool(t.directed))var n=t.directed;else var n=!1;for(var a=function(e,t){e.unshift(t);for(var r=0;f[e[r]]<f[e[r+1]]&&r<e.length-1;r++){var i=e[r];e[r]=e[r+1],e[r+1]=i}},o=this._private.cy,s=this.nodes(),l={},u={},c=0;c<s.length;c++)n?l[s[c].id()]=s[c].outgoers(\"node\"):l[s[c].id()]=s[c].openNeighborhood(\"node\");for(var c=0;c<s.length;c++)u[s[c].id()]=0;for(var d=0;d<s.length;d++){for(var h=[],p={},v={},f={},g=[],c=0;c<s.length;c++)p[s[c].id()]=[],v[s[c].id()]=0,f[s[c].id()]=Number.POSITIVE_INFINITY;for(v[s[d].id()]=1,f[s[d].id()]=0,g.unshift(s[d].id());g.length>0;){var y=g.pop();h.push(y),i?l[y].forEach(function(e){if(o.$(\"#\"+y).edgesTo(e).length>0)var t=o.$(\"#\"+y).edgesTo(e)[0];else var t=e.edgesTo(\"#\"+y)[0];var i=r.apply(t,[t]);f[e.id()]>f[y]+i&&(f[e.id()]=f[y]+i,g.indexOf(e.id())<0?a(g,e.id()):(g.splice(g.indexOf(e.id()),1),a(g,e.id())),v[e.id()]=0,p[e.id()]=[]),f[e.id()]==f[y]+i&&(v[e.id()]=v[e.id()]+v[y],p[e.id()].push(y))}):l[y].forEach(function(e){f[e.id()]==Number.POSITIVE_INFINITY&&(g.unshift(e.id()),f[e.id()]=f[y]+1),f[e.id()]==f[y]+1&&(v[e.id()]=v[e.id()]+v[y],p[e.id()].push(y))})}for(var m={},c=0;c<s.length;c++)m[s[c].id()]=0;for(;h.length>0;){var x=h.pop();p[x].forEach(function(e){m[e]=m[e]+v[e]/v[x]*(1+m[x]),x!=s[d].id()&&(u[x]=u[x]+m[x])})}}var b=0;for(var w in u)b<u[w]&&(b=u[w]);var _={betweenness:function(t){if(e.is.string(t))var t=o.filter(t)[0].id();else var t=t.id();return u[t]},betweennessNormalized:function(t){if(e.is.string(t))var t=o.filter(t)[0].id();else var t=t.id();return u[t]/b}};return _.betweennessNormalised=_.betweennessNormalized,_}}),e.elesfn.dc=e.elesfn.degreeCentrality,e.elesfn.dcn=e.elesfn.degreeCentralityNormalised=e.elesfn.degreeCentralityNormalized,e.elesfn.cc=e.elesfn.closenessCentrality,e.elesfn.ccn=e.elesfn.closenessCentralityNormalised=e.elesfn.closenessCentralityNormalized,e.elesfn.bc=e.elesfn.betweennessCentrality}(cytoscape),function(e){\"use strict\";e.fn.eles({animated:e.define.animated(),clearQueue:e.define.clearQueue(),delay:e.define.delay(),animate:e.define.animate(),stop:e.define.stop()})}(cytoscape),function(e){\"use strict\";e.fn.eles({addClass:function(t){t=t.split(/\\s+/);for(var r=this,i=[],n=0;n<t.length;n++){var a=t[n];if(!e.is.emptyString(a))for(var o=0;o<r.length;o++){var s=r[o],l=s._private.classes[a];s._private.classes[a]=!0,l||i.push(s)}}return i.length>0&&new e.Collection(this._private.cy,i).updateStyle().trigger(\"class\"),r},hasClass:function(e){var t=this[0];return null!=t&&t._private.classes[e]?!0:!1},toggleClass:function(t,r){for(var i=t.split(/\\s+/),n=this,a=[],o=0,s=n.length;s>o;o++)for(var l=n[o],u=0;u<i.length;u++){var c=i[u];if(!e.is.emptyString(c)){var d=l._private.classes[c],h=r||void 0===r&&!d;h?(l._private.classes[c]=!0,d||a.push(l)):(l._private.classes[c]=!1,d&&a.push(l))}}return a.length>0&&new e.Collection(this._private.cy,a).updateStyle().trigger(\"class\"),n},removeClass:function(t){t=t.split(/\\s+/);for(var r=this,i=[],n=0;n<r.length;n++)for(var a=r[n],o=0;o<t.length;o++){var s=t[o];if(s&&\"\"!==s){var l=a._private.classes[s];a._private.classes[s]=void 0,l&&i.push(a)}}return i.length>0&&new e.Collection(r._private.cy,i).updateStyle(),r.trigger(\"class\"),r},flashClass:function(e,t){var r=this;if(null==t)t=250;else if(0===t)return r;return r.addClass(e),setTimeout(function(){r.removeClass(e)},t),r}})}(cytoscape),function(e){\"use strict\";e.fn.eles({allAre:function(e){return this.filter(e).length===this.length},is:function(e){return this.filter(e).length>0},some:function(e,t){for(var r=0;r<this.length;r++){var i=t?e.apply(t,[this[r],r,this]):e(this[r],r,this);if(i)return!0}return!1},every:function(e,t){for(var r=0;r<this.length;r++){var i=t?e.apply(t,[this[r],r,this]):e(this[r],r,this);if(!i)return!1}return!0},same:function(e){return e=this.cy().collection(e),this.length!==e.length?!1:this.intersect(e).length===this.length},anySame:function(e){return e=this.cy().collection(e),this.intersect(e).length>0},allAreNeighbors:function(e){return e=this.cy().collection(e),this.neighborhood().intersect(e).length===e.length}}),e.elesfn.allAreNeighbours=e.elesfn.allAreNeighbors}(cytoscape),function(e){\"use strict\";e.fn.eles({parent:function(t){for(var r=[],i=this._private.cy,n=0;n<this.length;n++){var a=this[n],o=i.getElementById(a._private.data.parent);o.size()>0&&r.push(o)}return new e.Collection(i,r,{unique:!0}).filter(t)},parents:function(t){for(var r=[],i=this.parent();i.nonempty();){for(var n=0;n<i.length;n++){var a=i[n];r.push(a)}i=i.parent()}return new e.Collection(this.cy(),r,{unique:!0}).filter(t)},commonAncestors:function(e){for(var t,r=0;r<this.length;r++){var i=this[r],n=i.parents();t=t||n,t=t.intersect(n)}return t.filter(e)},orphans:function(e){return this.stdFilter(function(e){return e.isNode()&&e.parent().empty()}).filter(e)},nonorphans:function(e){return this.stdFilter(function(e){return e.isNode()&&e.parent().nonempty()}).filter(e)},children:function(t){for(var r=[],i=0;i<this.length;i++){var n=this[i];r=r.concat(n._private.children)}return new e.Collection(this.cy(),r,{unique:!0}).filter(t)},siblings:function(e){return this.parent().children().not(this).filter(e)},isParent:function(){var e=this[0];return e?0!==e._private.children.length:void 0},isChild:function(){var e=this[0];return e?void 0!==e._private.data.parent&&0!==e.parent().length:void 0},descendants:function(t){function r(e){for(var t=0;t<e.length;t++){var n=e[t];i.push(n),n.children().nonempty()&&r(n.children())}}var i=[];return r(this.children()),new e.Collection(this.cy(),i,{unique:!0}).filter(t)}}),e.elesfn.ancestors=e.elesfn.parents}(cytoscape),function(e){\"use strict\";var t=1,r=0;e.fn.eles({data:e.define.data({field:\"data\",bindingEvent:\"data\",allowBinding:!0,allowSetting:!0,settingEvent:\"data\",settingTriggersEvent:!0,triggerFnName:\"trigger\",allowGetting:!0,immutableKeys:{id:!0,source:!0,target:!0,parent:!0},updateStyle:!0}),removeData:e.define.removeData({field:\"data\",event:\"data\",triggerFnName:\"trigger\",triggerEvent:!0,immutableKeys:{id:!0,source:!0,target:!0,parent:!0},updateStyle:!0}),scratch:e.define.data({field:\"scratch\",bindingEvent:\"scratch\",allowBinding:!0,allowSetting:!0,settingEvent:\"scratch\",settingTriggersEvent:!0,triggerFnName:\"trigger\",allowGetting:!0,updateStyle:!0}),removeScratch:e.define.removeData({field:\"scratch\",event:\"scratch\",triggerFnName:\"trigger\",triggerEvent:!0,updateStyle:!0}),rscratch:e.define.data({field:\"rscratch\",allowBinding:!1,allowSetting:!0,settingTriggersEvent:!1,\nallowGetting:!0}),removeRscratch:e.define.removeData({field:\"rscratch\",triggerEvent:!1}),id:function(){var e=this[0];return e?e._private.data.id:void 0},position:e.define.data({field:\"position\",bindingEvent:\"position\",allowBinding:!0,allowSetting:!0,settingEvent:\"position\",settingTriggersEvent:!0,triggerFnName:\"rtrigger\",allowGetting:!0,validKeys:[\"x\",\"y\"],onSet:function(e){var t=e.updateCompoundBounds();t.rtrigger(\"position\")},canSet:function(e){return!e.locked()}}),silentPosition:e.define.data({field:\"position\",bindingEvent:\"position\",allowBinding:!1,allowSetting:!0,settingEvent:\"position\",settingTriggersEvent:!1,triggerFnName:\"trigger\",allowGetting:!0,validKeys:[\"x\",\"y\"],onSet:function(e){e.updateCompoundBounds()},canSet:function(e){return!e.locked()}}),positions:function(t,r){if(e.is.plainObject(t))this.position(t);else if(e.is.fn(t)){for(var i=t,n=0;n<this.length;n++){var a=this[n],t=i.apply(a,[n,a]);if(t&&!a.locked()){var o=a._private.position;o.x=t.x,o.y=t.y}}var s=this.updateCompoundBounds(),l=s.length>0?this.add(s):this;r?l.trigger(\"position\"):l.rtrigger(\"position\")}return this},silentPositions:function(e){return this.positions(e,!0)},updateCompoundBounds:function(){function t(e){var t=e.children(),r=e._private.style,n=\"include\"===r[\"compound-sizing-wrt-labels\"].value,a=t.boundingBox({includeLabels:n,includeEdges:!0}),o={top:r[\"padding-top\"].pxValue,bottom:r[\"padding-bottom\"].pxValue,left:r[\"padding-left\"].pxValue,right:r[\"padding-right\"].pxValue},s=e._private.position,l=!1;\"auto\"===r.width.value&&(e._private.autoWidth=a.w+o.left+o.right,s.x=(a.x1+a.x2-o.left+o.right)/2,l=!0),\"auto\"===r.height.value&&(e._private.autoHeight=a.h+o.top+o.bottom,s.y=(a.y1+a.y2-o.top+o.bottom)/2,l=!0),l&&i.push(e)}var r=this.cy();if(!r.styleEnabled()||!r.hasCompoundNodes())return r.collection();for(var i=[],n=this.parent();n.nonempty();){for(var a=0;a<n.length;a++){var o=n[a];t(o)}n=n.parent()}return new e.Collection(r,i)},renderedPosition:function(t,r){var i=this[0],n=this.cy(),a=n.zoom(),o=n.pan(),s=e.is.plainObject(t)?t:void 0,l=void 0!==s||void 0!==r&&e.is.string(t);if(i&&i.isNode()){if(!l){var u=i._private.position;return s={x:u.x*a+o.x,y:u.y*a+o.y},void 0===t?s:s[t]}for(var c=0;c<this.length;c++){var i=this[c];void 0!==r?i._private.position[t]=(r-o[t])/a:void 0!==s&&(i._private.position={x:(s.x-o.x)/a,y:(s.y-o.y)/a})}this.rtrigger(\"position\")}else if(!l)return void 0;return this},relativePosition:function(t,r){var i=this[0],n=this.cy(),a=e.is.plainObject(t)?t:void 0,o=void 0!==a||void 0!==r&&e.is.string(t),s=n.hasCompoundNodes();if(i&&i.isNode()){if(!o){var l=i._private.position,u=s?i.parent():null,c=u&&u.length>0,d=c;c&&(u=u[0]);var h=d?u._private.position:{x:0,y:0};return a={x:l.x-h.x,y:l.y-h.y},void 0===t?a:a[t]}for(var p=0;p<this.length;p++){var i=this[p],u=s?i.parent():null,c=u&&u.length>0,d=c;c&&(u=u[0]);var h=d?u._private.position:{x:0,y:0};void 0!==r?i._private.position[t]=r+h[t]:void 0!==a&&(i._private.position={x:a.x+h.x,y:a.y+h.y})}this.rtrigger(\"position\")}else if(!o)return void 0;return this},width:function(){var e=this[0],t=e._private.cy,r=t._private.styleEnabled;if(e){if(r){var i=e._private.style.width;return\"auto\"===i.strValue?e._private.autoWidth:i.pxValue}return 1}},outerWidth:function(){var e=this[0],i=e._private.cy,n=i._private.styleEnabled;if(e){if(n){var a=e._private.style,o=\"auto\"===a.width.strValue?e._private.autoWidth:a.width.pxValue,s=a[\"border-width\"]?a[\"border-width\"].pxValue*t+r:0;return o+s}return 1}},renderedWidth:function(){var e=this[0];if(e){var t=e.width();return t*this.cy().zoom()}},renderedOuterWidth:function(){var e=this[0];if(e){var t=e.outerWidth();return t*this.cy().zoom()}},height:function(){var e=this[0],t=e._private.cy,r=t._private.styleEnabled;if(e&&\"nodes\"===e._private.group){if(r){var i=e._private.style.height;return\"auto\"===i.strValue?e._private.autoHeight:i.pxValue}return 1}},outerHeight:function(){var e=this[0],i=e._private.cy,n=i._private.styleEnabled;if(e&&\"nodes\"===e._private.group){if(!n)return 1;var a=e._private.style,o=\"auto\"===a.height.strValue?e._private.autoHeight:a.height.pxValue,s=a[\"border-width\"]?a[\"border-width\"].pxValue*t+r:0;return o+s}},renderedHeight:function(){var e=this[0];if(e&&\"nodes\"===e._private.group){var t=e.height();return t*this.cy().zoom()}},renderedOuterHeight:function(){var e=this[0];if(e&&\"nodes\"===e._private.group){var t=e.outerHeight();return t*this.cy().zoom()}},renderedBoundingBox:function(e){var t=this.boundingBox(e),r=this.cy(),i=r.zoom(),n=r.pan(),a=t.x1*i+n.x,o=t.x2*i+n.x,s=t.y1*i+n.y,l=t.y2*i+n.y;return{x1:a,x2:o,y1:s,y2:l,w:o-a,h:l-s}},boundingBox:function(e){var t=this,r=t._private.cy,i=r._private,n=i.styleEnabled;e=e||{};var a=void 0===e.includeNodes?!0:e.includeNodes,o=void 0===e.includeEdges?!0:e.includeEdges,s=void 0===e.includeLabels?!0:e.includeLabels;n&&i.renderer.recalculateRenderedStyle(this);for(var l=1/0,u=-(1/0),c=1/0,d=-(1/0),h=0;h<t.length;h++){var p,v,f,g,y,m,x=t[h],b=x._private,w=b.style,_=n?b.style.display.value:\"element\",E=\"nodes\"===b.group,S=!1;if(\"none\"!==_){if(E&&a){S=!0;var D=b.position;y=D.x,m=D.y;var k=x.outerWidth(),T=k/2,P=x.outerHeight(),C=P/2;p=y-T,v=y+T,f=m-C,g=m+C,l=l>p?p:l,u=v>u?v:u,c=c>f?f:c,d=g>d?g:d}else if(x.isEdge()&&o){S=!0;var M=b.source,B=M._private,N=B.position,I=b.target,O=I._private,z=O.position,L=b.rstyle||{},k=0,R=0;if(n&&(k=w.width.pxValue,R=k/2),p=N.x,v=z.x,f=N.y,g=z.y,p>v){var V=p;p=v,v=V}if(f>g){var V=f;f=g,g=V}if(p-=R,v+=R,f-=R,g+=R,l=l>p?p:l,u=v>u?v:u,c=c>f?f:c,d=g>d?g:d,n)for(var A=L.bezierPts||[],X=0;X<A.length;X++){var F=A[X];p=F.x-R,v=F.x+R,f=F.y-R,g=F.y+R,l=l>p?p:l,u=v>u?v:u,c=c>f?f:c,d=g>d?g:d}if(n&&\"haystack\"===w[\"curve-style\"].strValue){var Y=b.rscratch.haystackPts;if(p=Y[0],f=Y[1],v=Y[2],g=Y[3],p>v){var V=p;p=v,v=V}if(f>g){var V=f;f=g,g=V}l=l>p?p:l,u=v>u?v:u,c=c>f?f:c,d=g>d?g:d}}if(n){var w=x._private.style,L=x._private.rstyle,q=w.content.strValue,j=w[\"font-size\"],$=w[\"text-halign\"],W=w[\"text-valign\"],H=L.labelWidth,Z=L.labelHeight,U=L.labelX,G=L.labelY;if(S&&s&&q&&j&&null!=Z&&null!=H&&null!=U&&null!=G&&$&&W){var K,J,Q,ee,te=Z,re=H;if(x.isEdge())K=U-re/2,J=U+re/2,Q=G-te/2,ee=G+te/2;else{switch($.value){case\"left\":K=U-re,J=U;break;case\"center\":K=U-re/2,J=U+re/2;break;case\"right\":K=U,J=U+re}switch(W.value){case\"top\":Q=G-te,ee=G;break;case\"center\":Q=G-te/2,ee=G+te/2;break;case\"bottom\":Q=G,ee=G+te}}l=l>K?K:l,u=J>u?J:u,c=c>Q?Q:c,d=ee>d?ee:d}}}}var ie=function(e){return e===1/0||e===-(1/0)?0:e};return l=ie(l),u=ie(u),c=ie(c),d=ie(d),{x1:l,x2:u,y1:c,y2:d,w:u-l,h:d-c}}});var i=e.elesfn;i.attr=i.data,i.removeAttr=i.removeData,i.modelPosition=i.point=i.position,i.modelPositions=i.points=i.positions,i.renderedPoint=i.renderedPosition,i.relativePoint=i.relativePosition,i.boundingbox=i.boundingBox,i.renderedBoundingbox=i.renderedBoundingBox}(cytoscape),function(e){\"use strict\";function t(e){return function(t){var r=this;if(void 0===t&&(t=!0),0!==r.length&&r.isNode()&&!r.removed()){for(var i=0,n=r[0],a=n._private.edges,o=0;o<a.length;o++){var s=a[o];(t||!s.isLoop())&&(i+=e(n,s))}return i}}}function r(e,t){return function(r){for(var i,n=this.nodes(),a=0;a<n.length;a++){var o=n[a],s=o[e](r);void 0===s||void 0!==i&&!t(s,i)||(i=s)}return i}}e.fn.eles({degree:t(function(e,t){return t.source().same(t.target())?2:1}),indegree:t(function(e,t){return t.target().same(e)?1:0}),outdegree:t(function(e,t){return t.source().same(e)?1:0})}),e.fn.eles({minDegree:r(\"degree\",function(e,t){return t>e}),maxDegree:r(\"degree\",function(e,t){return e>t}),minIndegree:r(\"indegree\",function(e,t){return t>e}),maxIndegree:r(\"indegree\",function(e,t){return e>t}),minOutdegree:r(\"outdegree\",function(e,t){return t>e}),maxOutdegree:r(\"outdegree\",function(e,t){return e>t})}),e.fn.eles({totalDegree:function(e){for(var t=0,r=this.nodes(),i=0;i<r.length;i++)t+=r[i].degree(e);return t}})}(cytoscape),function(e){\"use strict\";e.fn.eles({on:e.define.on(),one:e.define.on({unbindSelfOnTrigger:!0}),once:e.define.on({unbindAllBindersOnTrigger:!0}),off:e.define.off(),trigger:e.define.trigger(),rtrigger:function(e,t){return 0!==this.length?(this.cy().notify({type:e,collection:this}),this.trigger(e,t),this):void 0}}),e.define.eventAliasesOn(e.elesfn)}(cytoscape),function(e){\"use strict\";e.fn.eles({nodes:function(e){return this.filter(function(e,t){return t.isNode()}).filter(e)},edges:function(e){return this.filter(function(e,t){return t.isEdge()}).filter(e)},filter:function(t){var r=this._private.cy;if(e.is.fn(t)){for(var i=[],n=0;n<this.length;n++){var a=this[n];t.apply(a,[n,a])&&i.push(a)}return new e.Collection(r,i)}return e.is.string(t)||e.is.elementOrCollection(t)?new e.Selector(t).filter(this):void 0===t?this:new e.Collection(r)},not:function(t){var r=this._private.cy;if(t){e.is.string(t)&&(t=this.filter(t));for(var i=[],n=0;n<this.length;n++){var a=this[n],o=t._private.ids[a.id()];o||i.push(a)}return new e.Collection(r,i)}return this},absoluteComplement:function(){var e=this._private.cy;return e.elements().not(this)},intersect:function(t){var r=this._private.cy;if(e.is.string(t)){var i=t;return this.filter(i)}for(var n=[],a=this,o=t,s=this.length<t.length,l=s?o._private.ids:a._private.ids,u=s?a:o,c=0;c<u.length;c++){var d=u[c]._private.data.id,h=l[d];h&&n.push(h)}return new e.Collection(r,n)},xor:function(t){var r=this._private.cy;e.is.string(t)&&(t=r.$(t));var i=[],n=this,a=t,o=function(e,t){for(var r=0;r<e.length;r++){var n=e[r],a=n._private.data.id,o=t._private.ids[a];o||i.push(n)}};return o(n,a),o(a,n),new e.Collection(r,i)},diff:function(t){var r=this._private.cy;e.is.string(t)&&(t=r.$(t));var i=[],n=[],a=[],o=this,s=t,l=function(e,t,r){for(var i=0;i<e.length;i++){var n=e[i],o=n._private.data.id,s=t._private.ids[o];s?a.push(n):r.push(n)}};return l(o,s,i),l(s,o,n),{left:new e.Collection(r,i,{unique:!0}),right:new e.Collection(r,n,{unique:!0}),both:new e.Collection(r,a,{unique:!0})}},add:function(t){var r=this._private.cy;if(!t)return this;if(e.is.string(t)){var i=t;t=r.elements(i)}for(var n=[],a=0;a<this.length;a++)n.push(this[a]);for(var a=0;a<t.length;a++){var o=!this._private.ids[t[a].id()];o&&n.push(t[a])}return new e.Collection(r,n)},merge:function(t){var r=this._private,i=r.cy;if(!t)return this;if(e.is.string(t)){var n=t;t=i.elements(n)}for(var a=0;a<t.length;a++){var o=t[a],s=o.id(),l=!r.ids[s];if(l){var u=this.length++;this[u]=o,r.ids[s]=o,r.indexes[s]=u}}return this},unmergeOne:function(e){e=e[0];var t=this._private,r=e.id(),i=t.indexes[r];if(null==i)return this;this[i]=void 0,t.ids[r]=void 0,t.indexes[r]=void 0;var n=i===this.length-1;if(this.length>1&&!n){var a=this.length-1,o=this[a];this[a]=void 0,this[i]=o,t.indexes[o.id()]=i}return this.length--,this},unmerge:function(t){var r=this._private.cy;if(!t)return this;if(e.is.string(t)){var i=t;t=r.elements(i)}for(var n=0;n<t.length;n++)this.unmergeOne(t[n]);return this},map:function(e,t){for(var r=[],i=this,n=0;n<i.length;n++){var a=i[n],o=t?e.apply(t,[a,n,i]):e(a,n,i);r.push(o)}return r},stdFilter:function(t,r){for(var i=[],n=this,a=this._private.cy,o=0;o<n.length;o++){var s=n[o],l=r?t.apply(r,[s,o,n]):t(s,o,n);l&&i.push(s)}return new e.Collection(a,i)},max:function(e,t){for(var r,i=-(1/0),n=this,a=0;a<n.length;a++){var o=n[a],s=t?e.apply(t,[o,a,n]):e(o,a,n);s>i&&(i=s,r=o)}return{value:i,ele:r}},min:function(e,t){for(var r,i=1/0,n=this,a=0;a<n.length;a++){var o=n[a],s=t?e.apply(t,[o,a,n]):e(o,a,n);i>s&&(i=s,r=o)}return{value:i,ele:r}}});var t=e.elesfn;t.u=t[\"|\"]=t[\"+\"]=t.union=t.or=t.add,t[\"\\\\\"]=t[\"!\"]=t[\"-\"]=t.difference=t.relativeComplement=t.not,t.n=t[\"&\"]=t[\".\"]=t.and=t.intersection=t.intersect,t[\"^\"]=t[\"(+)\"]=t[\"(-)\"]=t.symmetricDifference=t.symdiff=t.xor,t.fnFilter=t.filterFn=t.stdFilter,t.complement=t.abscomp=t.absoluteComplement}(cytoscape),function(e){\"use strict\";e.fn.eles({isNode:function(){return\"nodes\"===this.group()},isEdge:function(){return\"edges\"===this.group()},isLoop:function(){return this.isEdge()&&this.source().id()===this.target().id()},isSimple:function(){return this.isEdge()&&this.source().id()!==this.target().id()},group:function(){var e=this[0];return e?e._private.group:void 0}})}(cytoscape),function(e){\"use strict\";e.fn.eles({each:function(t){if(e.is.fn(t))for(var r=0;r<this.length;r++){var i=this[r],n=t.apply(i,[r,i]);if(n===!1)break}return this},forEach:function(t,r){if(e.is.fn(t))for(var i=0;i<this.length;i++){var n=this[i],a=r?t.apply(r,[n,i,this]):t(n,i,this);if(a===!1)break}return this},toArray:function(){for(var e=[],t=0;t<this.length;t++)e.push(this[t]);return e},slice:function(t,r){var i=[],n=this.length;null==r&&(r=n),null==t&&(t=0),0>t&&(t=n+t),0>r&&(r=n+r);for(var a=t;a>=0&&r>a&&n>a;a++)i.push(this[a]);return new e.Collection(this.cy(),i)},size:function(){return this.length},eq:function(t){return this[t]||new e.Collection(this.cy())},first:function(){return this[0]||new e.Collection(this.cy())},last:function(){return this[this.length-1]||new e.Collection(this.cy())},empty:function(){return 0===this.length},nonempty:function(){return!this.empty()},sort:function(t){if(!e.is.fn(t))return this;var r=this.cy(),i=this.toArray().sort(t);return new e.Collection(r,i)},sortByZIndex:function(){return this.sort(e.Collection.zIndexSort)},zDepth:function(){var e=this[0];if(!e)return void 0;var t=e._private,r=t.group;if(\"nodes\"===r){var i=t.data.parent?e.parents().size():0;return e.isParent()?i:Number.MAX_VALUE}var n=t.source,a=t.target,o=n.zDepth(),s=a.zDepth();return Math.max(o,s,0)}}),e.Collection.zIndexSort=function(e,t){var r=e.cy(),i=e._private,n=t._private,a=i.style[\"z-index\"].value-n.style[\"z-index\"].value,o=0,s=0,l=r.hasCompoundNodes(),u=\"nodes\"===i.group,c=\"edges\"===i.group,d=\"nodes\"===n.group,h=\"edges\"===n.group;l&&(o=e.zDepth(),s=t.zDepth());var p=o-s,v=0===p;return v?u&&h?1:c&&d?-1:0===a?i.index-n.index:a:p}}(cytoscape),function(e){\"use strict\";e.fn.eles({layoutPositions:function(t,r,i){var n=this.nodes(),a=this.cy();if(t.trigger({type:\"layoutstart\",layout:t}),r.animate){for(var o=0;o<n.length;o++){var s=n[o],l=o===n.length-1,u=i.call(s,o,s),c=s.position();e.is.number(c.x)&&e.is.number(c.y)||s.silentPosition({x:0,y:0}),s.animate({position:u},{duration:r.animationDuration,step:l?function(){r.fit&&a.fit(r.eles,r.padding)}:void 0,complete:l?function(){null!=r.zoom&&a.zoom(r.zoom),r.pan&&a.pan(r.pan),r.fit&&a.fit(r.eles,r.padding),t.one(\"layoutstop\",r.stop),t.trigger({type:\"layoutstop\",layout:t})}:void 0})}t.one(\"layoutready\",r.ready),t.trigger({type:\"layoutready\",layout:t})}else n.positions(i),r.fit&&a.fit(r.eles,r.padding),null!=r.zoom&&a.zoom(r.zoom),r.pan&&a.pan(r.pan),t.one(\"layoutready\",r.ready),t.trigger({type:\"layoutready\",layout:t}),t.one(\"layoutstop\",r.stop),t.trigger({type:\"layoutstop\",layout:t});return this},layout:function(t){var r=this.cy();return r.layout(e.util.extend({},t,{eles:this})),this},makeLayout:function(t){var r=this.cy();return r.makeLayout(e.util.extend({},t,{eles:this}))}}),e.elesfn.createLayout=e.elesfn.makeLayout}(cytoscape),function(e){\"use strict\";e.fn.eles({updateStyle:function(e){var t=this._private.cy;if(!t.styleEnabled())return this;if(t._private.batchingStyle){for(var r=t._private.batchStyleEles,i=0;i<this.length;i++){var n=this[i];r.ids[n._private.id]||r.push(n)}return this}var a=t.style();e=e||void 0===e?!0:!1,a.apply(this);var o=this.updateCompoundBounds(),s=o.length>0?this.add(o):this;return e?s.rtrigger(\"style\"):s.trigger(\"style\"),this},updateMappers:function(e){var t=this._private.cy,r=t.style();if(e=e||void 0===e?!0:!1,!t.styleEnabled())return this;r.updateMappers(this);var i=this.updateCompoundBounds(),n=i.length>0?this.add(i):this;return e?n.rtrigger(\"style\"):n.trigger(\"style\"),this},renderedCss:function(e){var t=this.cy();if(!t.styleEnabled())return this;var r=this[0];if(r){var i=r.cy().style().getRenderedStyle(r);return void 0===e?i:i[e]}},css:function(t,r){var i=this.cy();if(!i.styleEnabled())return this;var n=!1,a=i.style();if(e.is.plainObject(t)){var o=t;a.applyBypass(this,o,n);var s=this.updateCompoundBounds(),l=s.length>0?this.add(s):this;l.rtrigger(\"style\")}else if(e.is.string(t)){if(void 0===r){var u=this[0];return u?u._private.style[t].strValue:void 0}a.applyBypass(this,t,r,n);var s=this.updateCompoundBounds(),l=s.length>0?this.add(s):this;l.rtrigger(\"style\")}else if(void 0===t){var u=this[0];return u?a.getRawStyle(u):void 0}return this},removeCss:function(e){var t=this.cy();if(!t.styleEnabled())return this;var r=!1,i=t.style(),n=this;if(void 0===e)for(var a=0;a<n.length;a++){var o=n[a];i.removeAllBypasses(o,r)}else{e=e.split(/\\s+/);for(var a=0;a<n.length;a++){var o=n[a];i.removeBypasses(o,e,r)}}var s=this.updateCompoundBounds(),l=s.length>0?this.add(s):this;return l.rtrigger(\"style\"),this},show:function(){return this.css(\"display\",\"element\"),this},hide:function(){return this.css(\"display\",\"none\"),this},visible:function(){var e=this.cy();if(!e.styleEnabled())return!0;var t=this[0],r=e.hasCompoundNodes();if(t){var i=t._private.style;if(\"visible\"!==i.visibility.value||\"element\"!==i.display.value)return!1;if(\"nodes\"===t._private.group){if(!r)return!0;var n=t._private.data.parent?t.parents():null;if(n)for(var a=0;a<n.length;a++){var o=n[a],s=o._private.style,l=s.visibility.value,u=s.display.value;if(\"visible\"!==l||\"element\"!==u)return!1}return!0}var c=t._private.source,d=t._private.target;return c.visible()&&d.visible()}},hidden:function(){var e=this[0];return e?!e.visible():void 0},effectiveOpacity:function(){var e=this.cy();if(!e.styleEnabled())return 1;var t=e.hasCompoundNodes(),r=this[0];if(r){var i=r._private,n=i.style.opacity.value;if(!t)return n;var a=i.data.parent?r.parents():null;if(a)for(var o=0;o<a.length;o++){var s=a[o],l=s._private.style.opacity.value;n=l*n}return n}},transparent:function(){var e=this.cy();if(!e.styleEnabled())return!1;var t=this[0],r=t.cy().hasCompoundNodes();return t?r?0===t.effectiveOpacity():0===t._private.style.opacity.value:void 0},isFullAutoParent:function(){var e=this.cy();if(!e.styleEnabled())return!1;var t=this[0];if(t){var r=\"auto\"===t._private.style.width.value,i=\"auto\"===t._private.style.height.value;return t.isParent()&&r&&i}},backgrounding:function(){var e=this.cy();if(!e.styleEnabled())return!1;var t=this[0];return t._private.backgrounding?!0:!1}}),e.elesfn.bypass=e.elesfn.style=e.elesfn.css,e.elesfn.renderedStyle=e.elesfn.renderedCss,e.elesfn.removeBypass=e.elesfn.removeStyle=e.elesfn.removeCss}(cytoscape),function(e){\"use strict\";function t(t){return function(){var r=arguments,i=[];if(2===r.length){var n=r[0],a=r[1];this.bind(t.event,n,a)}else if(1===r.length){var a=r[0];this.bind(t.event,a)}else if(0===r.length){for(var o=0;o<this.length;o++){var s=this[o],l=!t.ableField||s._private[t.ableField],u=s._private[t.field]!=t.value;if(t.overrideAble){var c=t.overrideAble(s);if(void 0!==c&&(l=c,!c))return this}l&&(s._private[t.field]=t.value,u&&i.push(s))}var d=e.Collection(this.cy(),i);d.updateStyle(),d.trigger(t.event)}return this}}function r(r){e.elesfn[r.field]=function(){var e=this[0];if(e){if(r.overrideField){var t=r.overrideField(e);if(void 0!==t)return t}return e._private[r.field]}},e.elesfn[r.on]=t({event:r.on,field:r.field,ableField:r.ableField,overrideAble:r.overrideAble,value:!0}),e.elesfn[r.off]=t({event:r.off,field:r.field,ableField:r.ableField,overrideAble:r.overrideAble,value:!1})}r({field:\"locked\",overrideField:function(e){return e.cy().autolock()?!0:void 0},on:\"lock\",off:\"unlock\"}),r({field:\"grabbable\",overrideField:function(e){return e.cy().autoungrabify()?!1:void 0},on:\"grabify\",off:\"ungrabify\"}),r({field:\"selected\",ableField:\"selectable\",overrideAble:function(e){return e.cy().autounselectify()?!1:void 0},on:\"select\",off:\"unselect\"}),r({field:\"selectable\",overrideField:function(e){return e.cy().autounselectify()?!1:void 0},on:\"selectify\",off:\"unselectify\"}),e.elesfn.deselect=e.elesfn.unselect,e.elesfn.grabbed=function(){var e=this[0];return e?e._private.grabbed:void 0},r({field:\"active\",on:\"activate\",off:\"unactivate\"}),e.elesfn.inactive=function(){var e=this[0];return e?!e._private.active:void 0}}(cytoscape),function(e){\"use strict\";function t(t){return function(r){for(var i=[],n=this._private.cy,a=0;a<this.length;a++){var o=this[a],s=o._private[t.attr];s&&i.push(s)}return new e.Collection(n,i,{unique:!0}).filter(r)}}function r(t){return function(r){var i=[],n=this._private.cy,a=t||{};e.is.string(r)&&(r=n.$(r));for(var o=this._private.ids,s=r._private.ids,l=0;l<r.length;l++)for(var u=r[l]._private.edges,c=0;c<u.length;c++){var d=u[c],h=d._private.data,p=o[h.source]&&s[h.target],v=s[h.source]&&o[h.target],f=p||v;if(f){if(a.thisIs){if(\"source\"===a.thisIs&&!p)continue;if(\"target\"===a.thisIs&&!v)continue}i.push(d)}}return new e.Collection(n,i,{unique:!0})}}function i(t){var r={codirected:!1};return t=e.util.extend({},r,t),function(r){for(var i=this._private.cy,n=[],a=this.edges(),o=t,s=0;s<a.length;s++)for(var l=a[s],u=l.source()[0],c=u.id(),d=l.target()[0],h=d.id(),p=u._private.edges,v=0;v<p.length;v++){var f=p[v],g=f._private.data,y=g.target,m=g.source,x=y===h&&m===c,b=c===y&&h===m;(o.codirected&&x||!o.codirected&&(x||b))&&n.push(f)}return new e.Collection(i,n,{unique:!0}).filter(r)}}e.fn.eles({roots:function(t){for(var r=this,i=[],n=0;n<r.length;n++){var a=r[n];if(a.isNode()){var o=a.connectedEdges(function(){return this.data(\"target\")===a.id()&&this.data(\"source\")!==a.id()}).length>0;o||i.push(a)}}return new e.Collection(this._private.cy,i,{unique:!0}).filter(t)},leaves:function(t){for(var r=this,i=[],n=0;n<r.length;n++){var a=r[n];if(a.isNode()){var o=a.connectedEdges(function(){return this.data(\"source\")===a.id()&&this.data(\"target\")!==a.id()}).length>0;o||i.push(a)}}return new e.Collection(this._private.cy,i,{unique:!0}).filter(t)},outgoers:function(t){for(var r=this,i=[],n=0;n<r.length;n++){var a=r[n],o=a.id();if(a.isNode())for(var s=a._private.edges,l=0;l<s.length;l++){var u=s[l],c=u._private.data.source,d=u._private.data.target;c===o&&d!==o&&(i.push(u),i.push(u.target()[0]))}}return new e.Collection(this._private.cy,i,{unique:!0}).filter(t)},successors:function(t){for(var r=this,i=[],n={};;){var a=r.outgoers();if(0===a.length)break;for(var o=!1,s=0;s<a.length;s++){var l=a[s],u=l.id();n[u]||(n[u]=!0,i.push(l),o=!0)}if(!o)break;r=a}return new e.Collection(this._private.cy,i,{unique:!0}).filter(t)},incomers:function(t){for(var r=this,i=[],n=0;n<r.length;n++){var a=r[n],o=a.id();if(a.isNode())for(var s=a._private.edges,l=0;l<s.length;l++){var u=s[l],c=u._private.data.source,d=u._private.data.target;d===o&&c!==o&&(i.push(u),i.push(u.source()[0]))}}return new e.Collection(this._private.cy,i,{unique:!0}).filter(t)},predecessors:function(t){for(var r=this,i=[],n={};;){var a=r.incomers();if(0===a.length)break;for(var o=!1,s=0;s<a.length;s++){var l=a[s],u=l.id();n[u]||(n[u]=!0,i.push(l),o=!0)}if(!o)break;r=a}return new e.Collection(this._private.cy,i,{unique:!0}).filter(t)}}),e.fn.eles({neighborhood:function(t){for(var r=[],i=this._private.cy,n=this.nodes(),a=0;a<n.length;a++)for(var o=n[a],s=o.connectedEdges(),l=0;l<s.length;l++){var u=s[l],c=u.connectedNodes().not(o);c.length>0&&r.push(c[0]),r.push(u[0])}return new e.Collection(i,r,{unique:!0}).filter(t)},closedNeighborhood:function(e){return this.neighborhood().add(this).filter(e)},openNeighborhood:function(e){return this.neighborhood(e)}}),e.elesfn.neighbourhood=e.elesfn.neighborhood,e.elesfn.closedNeighbourhood=e.elesfn.closedNeighborhood,e.elesfn.openNeighbourhood=e.elesfn.openNeighborhood,e.fn.eles({source:function(e){var t,r=this[0];return r&&(t=r._private.source),t&&e?t.filter(e):t},target:function(e){var t,r=this[0];return r&&(t=r._private.target),t&&e?t.filter(e):t},sources:t({attr:\"source\"}),targets:t({attr:\"target\"})}),e.fn.eles({edgesWith:r(),edgesTo:r({thisIs:\"source\"})}),e.fn.eles({connectedEdges:function(t){for(var r=[],i=this._private.cy,n=this,a=0;a<n.length;a++){var o=n[a];if(o.isNode())for(var s=o._private.edges,l=0;l<s.length;l++){var u=s[l];r.push(u)}}return new e.Collection(i,r,{unique:!0}).filter(t)},connectedNodes:function(t){for(var r=[],i=this._private.cy,n=this,a=0;a<n.length;a++){var o=n[a];o.isEdge()&&(r.push(o.source()[0]),r.push(o.target()[0]))}return new e.Collection(i,r,{unique:!0}).filter(t)},parallelEdges:i(),codirectedEdges:i({codirected:!0})})}(cytoscape),function(e){\"use strict\";e.fn.eles({fit:function(){},center:function(){}})}(cytoscape),function(e){\"use strict\";e.Minheap=function(t,r,i){return new e.Heap(t,r,e.Heap.minHeapComparator,i)},e.Maxheap=function(t,r,i){return new e.Heap(t,r,e.Heap.maxHeapComparator,i)},e.Heap=function(t,r,i,n){if(\"undefined\"!=typeof i&&\"undefined\"!=typeof r){\"undefined\"==typeof n&&(n=e.Heap.idFn);var a,o,s,l=[],u={},c=[],d=0;for(r=this.getArgumentAsCollection(r,t),s=r.length,d=0;s>d;d+=1){if(l.push(n.call(t,r[d],d,r)),a=r[d].id(),u.hasOwnProperty(a))throw\"ERROR: Multiple items with the same id found: \"+a;u[a]=d,c.push(a)}for(this._private={cy:t,heap:l,pointers:u,elements:c,comparator:i,extractor:n,length:s},d=Math.floor(s/2);d>=0;d-=1)o=this.heapify(d);return o}},e.Heap.idFn=function(e){return e.id()},e.Heap.minHeapComparator=function(e,t){return e>=t},e.Heap.maxHeapComparator=function(e,t){return t>=e},e.fn.heap=function(t,r){for(var i in t){var n=t[i];e.Heap.prototype[i]=n}},e.heapfn=e.Heap.prototype,e.heapfn.size=function(){return this._private.length},e.heapfn.getArgumentAsCollection=function(t,r){var i;if(\"undefined\"==typeof r&&(r=this._private.cy),e.is.elementOrCollection(t))i=t;else{for(var n=[],a=[].concat.apply([],[t]),o=0;o<a.length;o++){var s=a[o],l=r.getElementById(s);l.length>0&&n.push(l)}i=new e.Collection(r,n)}return i},e.heapfn.isHeap=function(){var e,t,r,i,n,a=this._private.heap,o=a.length,s=this._private.comparator;for(e=0;o>e;e+=1)if(t=2*e+1,r=t+1,i=o>t?s(a[t],a[e]):!0,n=o>r?s(a[r],a[e]):!0,!i||!n)return!1;return!0},e.heapfn.heapSwap=function(e,t){var r=this._private.heap,i=this._private.pointers,n=this._private.elements,a=r[e],o=n[e],s=n[e],l=n[t];r[e]=r[t],n[e]=n[t],i[s]=t,i[l]=e,r[t]=a,n[t]=o},e.heapfn.heapify=function(e,t){var r,i,n,a,o,s,l,u=0,c=!1;for(\"undefined\"==typeof t&&(t=!0),r=this._private.heap,u=r.length,s=this._private.comparator,i=e;!c;)t?(n=2*i+1,a=n+1,o=i,u>n&&!s(r[n],r[o])&&(o=n),u>a&&!s(r[a],r[o])&&(o=a),c=o===i,c||(this.heapSwap(o,i),i=o)):(l=Math.floor((i-1)/2),o=i,c=0>l||s(r[o],r[l]),c||(this.heapSwap(o,l),i=l))},e.heapfn.insert=function(e){var t,r,i,n,a,o=this.getArgumentAsCollection(e),s=o.length;for(a=0;s>a;a+=1){if(t=o[a],r=this._private.heap.length,i=this._private.extractor(t),n=t.id(),this._private.pointers.hasOwnProperty(n))throw\"ERROR: Multiple items with the same id found: \"+n;this._private.heap.push(i),this._private.elements.push(n),this._private.pointers[n]=r,this.heapify(r,!1)}this._private.length=this._private.heap.length},e.heapfn.getValueById=function(e){if(this._private.pointers.hasOwnProperty(e)){var t=this._private.pointers[e];return this._private.heap[t]}},e.heapfn.contains=function(e){for(var t=this.getArgumentAsCollection(e),r=0;r<t.length;r+=1){var i=t[r].id();if(!this._private.pointers.hasOwnProperty(i))return!1}return!0},e.heapfn.top=function(){return this._private.length>0?{value:this._private.heap[0],id:this._private.elements[0]}:void 0},e.heapfn.pop=function(){if(this._private.length>0){var e,t,r,i=this.top(),n=this._private.length-1;return this.heapSwap(0,n),e=this._private.elements[n],t=this._private.heap[n],r=e,this._private.heap.pop(),this._private.elements.pop(),this._private.length=this._private.heap.length,this._private.pointers[r]=void 0,this.heapify(0),i}},e.heapfn.findDirectionHeapify=function(e){var t=Math.floor((e-1)/2),r=this._private.heap,i=0>t||this._private.comparator(r[e],r[t]);this.heapify(e,i)},e.heapfn.edit=function(t,r){for(var i=this.getArgumentAsCollection(t),n=0;n<i.length;n+=1){var a=i[n].id(),o=this._private.pointers[a],s=this._private.heap[o];e.is.number(r)?this._private.heap[o]=r:e.is.fn(r)&&(this._private.heap[o]=r.call(this._private.cy,s,o)),this.findDirectionHeapify(o)}},e.heapfn.remove=function(e){for(var t=this.getArgumentAsCollection(e),r=0;r<t.length;r+=1){var i,n,a,o=t[r].id(),s=this._private.pointers[o],l=this._private.length-1;s!==l&&this.heapSwap(s,l),i=this._private.elements[l],n=this._private.heap[l],a=i,this._private.heap.pop(),this._private.elements.pop(),this._private.length=this._private.heap.length,this._private.pointers[a]=void 0,this.findDirectionHeapify(s)}return n}}(cytoscape),function(e){\"use strict\";function t(e){this.options=e,this.data={select:[void 0,void 0,void 0,void 0,0],renderer:this,cy:e.cy,container:e.cy.container(),canvases:new Array(t.CANVAS_LAYERS),contexts:new Array(t.CANVAS_LAYERS),canvasNeedsRedraw:new Array(t.CANVAS_LAYERS),bufferCanvases:new Array(t.BUFFER_COUNT),bufferContexts:new Array(t.CANVAS_LAYERS)},this.hoverData={down:null,last:null,downTime:null,triggerMode:null,dragging:!1,initialPan:[null,null],capture:!1},this.timeoutData={panTimeout:null},this.dragData={possibleDragElements:[]},this.touchData={start:null,capture:!1,startPosition:[null,null,null,null,null,null],singleTouchStartTime:null,singleTouchMoved:!0,now:[null,null,null,null,null,null],earlier:[null,null,null,null,null,null]},this.zoomData={freeToZoom:!1,lastPointerX:null},this.redraws=0,this.showFps=e.showFps,this.bindings=[],this.data.canvasContainer=document.createElement(\"div\");var r=this.data.canvasContainer.style;r.position=\"absolute\",r.zIndex=\"0\",r.overflow=\"hidden\",this.data.container.appendChild(this.data.canvasContainer);for(var i=0;i<t.CANVAS_LAYERS;i++)this.data.canvases[i]=document.createElement(\"canvas\"),this.data.contexts[i]=this.data.canvases[i].getContext(\"2d\"),this.data.canvases[i].style.position=\"absolute\",this.data.canvases[i].setAttribute(\"data-id\",\"layer\"+i),this.data.canvases[i].style.zIndex=String(t.CANVAS_LAYERS-i),this.data.canvasContainer.appendChild(this.data.canvases[i]),this.data.canvasNeedsRedraw[i]=!1;this.data.topCanvas=this.data.canvases[0],this.data.canvases[t.NODE].setAttribute(\"data-id\",\"layer\"+t.NODE+\"-node\"),this.data.canvases[t.SELECT_BOX].setAttribute(\"data-id\",\"layer\"+t.SELECT_BOX+\"-selectbox\"),this.data.canvases[t.DRAG].setAttribute(\"data-id\",\"layer\"+t.DRAG+\"-drag\");for(var i=0;i<t.BUFFER_COUNT;i++)this.data.bufferCanvases[i]=document.createElement(\"canvas\"),this.data.bufferContexts[i]=this.data.bufferCanvases[i].getContext(\"2d\"),this.data.bufferCanvases[i].style.position=\"absolute\",this.data.bufferCanvases[i].setAttribute(\"data-id\",\"buffer\"+i),this.data.bufferCanvases[i].style.zIndex=String(-i-1),this.data.bufferCanvases[i].style.visibility=\"hidden\";this.hideEdgesOnViewport=e.hideEdgesOnViewport,this.hideLabelsOnViewport=e.hideLabelsOnViewport,this.textureOnViewport=e.textureOnViewport,this.wheelSensitivity=e.wheelSensitivity,this.motionBlurEnabled=e.motionBlur,this.forcedPixelRatio=e.pixelRatio,this.motionBlur=!0,this.motionBlurOpacity=e.motionBlurOpacity,this.motionBlurTransparency=1-this.motionBlurOpacity,this.motionBlurPxRatio=1,this.mbPxRBlurry=1,this.minMbLowQualFrames=4,this.fullQualityMb=!1,this.clearedForMotionBlur=[],this.desktopTapThreshold=e.desktopTapThreshold,this.desktopTapThreshold2=e.desktopTapThreshold*e.desktopTapThreshold,this.touchTapThreshold=e.touchTapThreshold,this.touchTapThreshold2=e.touchTapThreshold*e.touchTapThreshold,this.tapholdDuration=500,this.load()}t.CANVAS_LAYERS=3,t.SELECT_BOX=0,t.DRAG=1,t.NODE=2,t.BUFFER_COUNT=3,t.TEXTURE_BUFFER=0,t.MOTIONBLUR_BUFFER_NODE=1,t.MOTIONBLUR_BUFFER_DRAG=2,t.panOrBoxSelectDelay=400;var r=\"undefined\"!=typeof Path2D;t.usePaths=function(){return r},t.prototype.notify=function(r){var i;i=e.is.array(r.type)?r.type:[r.type];for(var n=0;n<i.length;n++){var a=i[n];switch(a){case\"destroy\":return void this.destroy();case\"add\":case\"remove\":case\"load\":this.updateNodesCache(),this.updateEdgesCache();break;case\"viewport\":this.data.canvasNeedsRedraw[t.SELECT_BOX]=!0;break;case\"style\":this.updateCachedZSortedEles()}(\"load\"===a||\"resize\"===a)&&(this.invalidateContainerClientCoordsCache(),this.matchCanvasSize(this.data.container))}this.data.canvasNeedsRedraw[t.NODE]=!0,this.data.canvasNeedsRedraw[t.DRAG]=!0,\nthis.redraw()},t.prototype.destroy=function(){this.destroyed=!0;for(var e=0;e<this.bindings.length;e++){var t=this.bindings[e],r=t;r.target.removeEventListener(r.event,r.handler,r.useCapture)}if(this.removeObserver&&this.removeObserver.disconnect(),this.labelCalcDiv)try{document.body.removeChild(this.labelCalcDiv)}catch(i){}};for(var i in e.math)t.prototype[i]=e.math[i];e(\"renderer\",\"canvas\",t)}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t.prototype,i=t.arrowShapes={};t.arrowShapeHeight=.3;var n=function(e,t,r,i,n,a,o,s){var l=r-n/2,u=r+n/2,c=i-a/2,d=i+a/2;return e>=l&&u>=e&&t>=c&&d>=t},a=function(e,t,r,i,n){i=-i;var a=e*Math.cos(i)-t*Math.sin(i),o=e*Math.sin(i)+t*Math.cos(i),s=a*r,l=o*r,u=s+n.x,c=l+n.y;return{x:u,y:c}};i.arrow={_points:[-.15,-.3,0,0,.15,-.3],collide:function(t,r,n,a,o,s,l,u){var c=i.arrow._points;return e.math.pointInsidePolygon(t,r,c,n,a,o,s,l,u)},roughCollide:n,draw:function(e,t,r,n){for(var o=i.arrow._points,s=0;s<o.length/2;s++){var l=a(o[2*s],o[2*s+1],t,r,n);e.lineTo(l.x,l.y)}},spacing:function(e){return 0},gap:function(e){return 2*e._private.style.width.pxValue}},i.triangle=i.arrow,i[\"triangle-backcurve\"]={_ctrlPt:[0,-.15],collide:function(t,r,n,a,o,s,l,u){var c=i.triangle._points;return e.math.pointInsidePolygon(t,r,c,n,a,o,s,l,u)},roughCollide:n,draw:function(e,t,r,n){for(var o,s=i.triangle._points,l=0;l<s.length/2;l++){var u=a(s[2*l],s[2*l+1],t,r,n);0===l&&(o=u),e.lineTo(u.x,u.y)}var c=this._ctrlPt,d=a(c[0],c[1],t,r,n);e.quadraticCurveTo(d.x,d.y,o.x,o.y)},spacing:function(e){return 0},gap:function(e){return e._private.style.width.pxValue}},i[\"triangle-tee\"]={_points:[-.15,-.3,0,0,.15,-.3,-.15,-.3],_pointsTee:[-.15,-.4,-.15,-.5,.15,-.5,.15,-.4],collide:function(t,r,n,a,o,s,l,u){var c=i[\"triangle-tee\"]._points,d=i[\"triangle-tee\"]._pointsTee,h=e.math.pointInsidePolygon(t,r,d,n,a,o,s,l,u)||e.math.pointInsidePolygon(t,r,c,n,a,o,s,l,u);return h},roughCollide:n,draw:function(e,t,r,n){for(var o=i[\"triangle-tee\"]._points,s=0;s<o.length/2;s++){var l=a(o[2*s],o[2*s+1],t,r,n);e.lineTo(l.x,l.y)}var u=i[\"triangle-tee\"]._pointsTee,c=a(u[0],u[1],t,r,n);e.moveTo(c.x,c.y);for(var s=0;s<u.length/2;s++){var l=a(u[2*s],u[2*s+1],t,r,n);e.lineTo(l.x,l.y)}},spacing:function(e){return 0},gap:function(e){return 2*e._private.style.width.pxValue}},i[\"half-triangle-overshot\"]={_points:[0,-.25,-.5,-.25,.5,.25],leavePathOpen:!0,matchEdgeWidth:!0,collide:function(t,r,i,n,a,o,s,l){var u=this._points;return e.math.pointInsidePolygon(t,r,u,i,n,a,o,s,l)},roughCollide:n,draw:function(e,t,r,i){for(var n=this._points,o=0;o<n.length/2;o++){var s=a(n[2*o],n[2*o+1],t,r,i);e.lineTo(s.x,s.y)}},spacing:function(e){return 0},gap:function(e){return 2*e._private.style.width.pxValue}},i.none={collide:function(e,t,r,i,n,a,o,s){return!1},roughCollide:function(e,t,r,i,n,a,o,s){return!1},draw:function(e){},spacing:function(e){return 0},gap:function(e){return 0}},i.circle={_baseRadius:.15,collide:function(e,t,r,n,a,o,s,l){if(a!=o){var u=(o+l)/(a+l);return t/=u,n/=u,Math.pow(r-e,2)+Math.pow(n-t,2)<=Math.pow((a+l)*i.circle._baseRadius,2)}return Math.pow(r-e,2)+Math.pow(n-t,2)<=Math.pow((a+l)*i.circle._baseRadius,2)},roughCollide:n,draw:function(e,t,r,n){e.arc(n.x,n.y,i.circle._baseRadius*t,0,2*Math.PI,!1)},spacing:function(e){return r.getArrowWidth(e._private.style.width.pxValue)*i.circle._baseRadius},gap:function(e){return 2*e._private.style.width.pxValue}},i.inhibitor={_points:[-.25,0,-.25,-.1,.25,-.1,.25,0],collide:function(t,r,n,a,o,s,l,u){var c=i.inhibitor._points;return e.math.pointInsidePolygon(t,r,c,n,a,o,s,l,u)},roughCollide:n,draw:function(e,t,r,n){for(var o=i.inhibitor._points,s=0;s<o.length/2;s++){var l=a(o[2*s],o[2*s+1],t,r,n);e.lineTo(l.x,l.y)}},spacing:function(e){return 1},gap:function(e){return 1}},i.tee=i.inhibitor,i.square={_points:[-.15,0,.15,0,.15,-.3,-.15,-.3],collide:function(t,r,n,a,o,s,l,u){var c=i.square._points;return e.math.pointInsidePolygon(t,r,c,n,a,o,s,l,u)},roughCollide:n,draw:function(e,t,r,n){for(var o=i.square._points,s=0;s<o.length/2;s++){var l=a(o[2*s],o[2*s+1],t,r,n);e.lineTo(l.x,l.y)}},spacing:function(e){return 0},gap:function(e){return 2*e._private.style.width.pxValue}},i.diamond={_points:[-.15,-.15,0,-.3,.15,-.15,0,0],collide:function(t,r,n,a,o,s,l,u){var c=i.diamond._points;return e.math.pointInsidePolygon(t,r,c,n,a,o,s,l,u)},roughCollide:n,draw:function(e,t,r,n){for(var o=i.diamond._points,s=0;s<o.length/2;s++){var l=a(o[2*s],o[2*s+1],t,r,n);e.lineTo(l.x,l.y)}},spacing:function(e){return 0},gap:function(e){return e._private.style.width.pxValue}}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t.prototype;r.getCachedNodes=function(){var e=this.data,t=this.data.cy;return null==e.cache&&(e.cache={}),null==e.cache.cachedNodes&&(e.cache.cachedNodes=t.nodes()),e.cache.cachedNodes},r.updateNodesCache=function(){var e=this.data,t=this.data.cy;null==e.cache&&(e.cache={}),e.cache.cachedNodes=t.nodes()},r.getCachedEdges=function(){var e=this.data,t=this.data.cy;return null==e.cache&&(e.cache={}),null==e.cache.cachedEdges&&(e.cache.cachedEdges=t.edges()),e.cache.cachedEdges},r.updateEdgesCache=function(){var e=this.data,t=this.data.cy;null==e.cache&&(e.cache={}),e.cache.cachedEdges=t.edges()}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t.prototype;r.projectIntoViewport=function(e,t){var r=this.findContainerClientCoords(),i=r[0],n=r[1],a=e-i,o=t-n;return a-=this.data.cy.pan().x,o-=this.data.cy.pan().y,a/=this.data.cy.zoom(),o/=this.data.cy.zoom(),[a,o]},r.findContainerClientCoords=function(){var e=this.data.container,t=this.containerBB=this.containerBB||e.getBoundingClientRect();return[t.left,t.top,t.right-t.left,t.bottom-t.top]},r.invalidateContainerClientCoordsCache=function(){this.containerBB=null},r.findNearestElement=function(r,i,n,a){function o(e){var a=e.outerWidth()+2*v,o=e.outerHeight()+2*v,s=a/2,u=o/2,d=e._private.position;if(d.x-s<=r&&r<=d.x+s&&d.y-u<=i&&i<=d.y+u){var h=!n||e.visible()&&!e.transparent();if(n&&!h)return;var p=t.nodeShapes[l.getNodeShape(e)];e._private.style[\"border-width\"].pxValue/2;p.checkPoint(r,i,0,a,o,d.x,d.y)&&c.push(e)}}function s(a){var s,u,d=a._private.rscratch,v=a._private.style,f=v.width.pxValue/2+p,g=f*f,y=2*f,m=a._private.source,x=a._private.target,b=!1,w=function(){if(void 0!==u)return u;if(!n)return u=!0,!0;var e=a.visible()&&!a.transparent();return e?(u=!0,!0):(u=!1,!1)};if(\"self\"===d.edgeType||\"compound\"===d.edgeType)((b=e.math.inBezierVicinity(r,i,d.startX,d.startY,d.cp2ax,d.cp2ay,d.selfEdgeMidX,d.selfEdgeMidY,g))&&w()&&g>(s=e.math.sqDistanceToQuadraticBezier(r,i,d.startX,d.startY,d.cp2ax,d.cp2ay,d.selfEdgeMidX,d.selfEdgeMidY))||(b=e.math.inBezierVicinity(r,i,d.selfEdgeMidX,d.selfEdgeMidY,d.cp2cx,d.cp2cy,d.endX,d.endY,g))&&w()&&g>(s=e.math.sqDistanceToQuadraticBezier(r,i,d.selfEdgeMidX,d.selfEdgeMidY,d.cp2cx,d.cp2cy,d.endX,d.endY)))&&c.push(a);else if(\"haystack\"===d.edgeType){var _=v[\"haystack-radius\"].value,E=_/2,S=x._private.position,D=x.width(),k=x.height(),T=m._private.position,P=m.width(),C=m.height(),M=T.x+d.source.x*P*E,B=T.y+d.source.y*C*E,N=S.x+d.target.x*D*E,I=S.y+d.target.y*k*E;(b=e.math.inLineVicinity(r,i,M,B,N,I,y))&&w()&&g>(s=e.math.sqDistanceToFiniteLine(r,i,M,B,N,I))&&c.push(a)}else\"straight\"===d.edgeType?(b=e.math.inLineVicinity(r,i,d.startX,d.startY,d.endX,d.endY,y))&&w()&&g>(s=e.math.sqDistanceToFiniteLine(r,i,d.startX,d.startY,d.endX,d.endY))&&c.push(a):\"bezier\"===d.edgeType&&(b=e.math.inBezierVicinity(r,i,d.startX,d.startY,d.cp2x,d.cp2y,d.endX,d.endY,g))&&w()&&g>(s=e.math.sqDistanceToQuadraticBezier(r,i,d.startX,d.startY,d.cp2x,d.cp2y,d.endX,d.endY))&&c.push(a);if(b&&w()&&0===c.length||c[c.length-1]!==a){var O=t.arrowShapes[v[\"source-arrow-shape\"].value],z=t.arrowShapes[v[\"target-arrow-shape\"].value],m=m||a._private.source,x=x||a._private.target,S=x._private.position,T=m._private.position,L=l.getArrowWidth(v.width.pxValue),R=l.getArrowHeight(v.width.pxValue),V=L,A=R;(O.roughCollide(r,i,d.arrowStartX,d.arrowStartY,L,R,[d.arrowStartX-T.x,d.arrowStartY-T.y],p)&&O.collide(r,i,d.arrowStartX,d.arrowStartY,L,R,[d.arrowStartX-T.x,d.arrowStartY-T.y],p)||z.roughCollide(r,i,d.arrowEndX,d.arrowEndY,V,A,[d.arrowEndX-S.x,d.arrowEndY-S.y],p)&&z.collide(r,i,d.arrowEndX,d.arrowEndY,V,A,[d.arrowEndX-S.x,d.arrowEndY-S.y],p))&&c.push(a)}h&&c.length>0&&c[c.length-1]===a&&(o(m),o(x))}for(var l=this,u=this.getCachedZSortedEles(),c=[],d=this.data.cy.zoom(),h=this.data.cy.hasCompoundNodes(),p=(a?24:8)/d,v=(a?8:2)/d,f=u.length-1;f>=0;f--){var g=u[f];if(c.length>0)break;\"nodes\"===g._private.group?o(u[f]):s(u[f])}return c.length>0?c[c.length-1]:null},r.getAllInBox=function(r,i,n,a){var o=this.getCachedNodes(),s=this.getCachedEdges(),l=[],u=Math.min(r,n),c=Math.max(r,n),d=Math.min(i,a),h=Math.max(i,a);r=u,n=c,i=d,a=h;for(var p,v=0;v<o.length;v++){var f=o[v]._private.position,g=this.getNodeShape(o[v]),y=this.getNodeWidth(o[v]),m=this.getNodeHeight(o[v]),x=o[v]._private.style[\"border-width\"].pxValue/2,b=t.nodeShapes[g];b.intersectBox(r,i,n,a,y,m,f.x,f.y,x)&&l.push(o[v])}for(var v=0;v<s.length;v++){var w=s[v]._private.rscratch;if(\"self\"==s[v]._private.rscratch.edgeType&&((p=e.math.boxInBezierVicinity(r,i,n,a,w.startX,w.startY,w.cp2ax,w.cp2ay,w.endX,w.endY,s[v]._private.style.width.pxValue))&&(2==p||1==p&&e.math.checkBezierInBox(r,i,n,a,w.startX,w.startY,w.cp2ax,w.cp2ay,w.endX,w.endY,s[v]._private.style.width.pxValue))||(p=e.math.boxInBezierVicinity(r,i,n,a,w.startX,w.startY,w.cp2cx,w.cp2cy,w.endX,w.endY,s[v]._private.style.width.pxValue))&&(2==p||1==p&&e.math.checkBezierInBox(r,i,n,a,w.startX,w.startY,w.cp2cx,w.cp2cy,w.endX,w.endY,s[v]._private.style.width.pxValue)))&&l.push(s[v]),\"bezier\"==w.edgeType&&(p=e.math.boxInBezierVicinity(r,i,n,a,w.startX,w.startY,w.cp2x,w.cp2y,w.endX,w.endY,s[v]._private.style.width.pxValue))&&(2==p||1==p&&e.math.checkBezierInBox(r,i,n,a,w.startX,w.startY,w.cp2x,w.cp2y,w.endX,w.endY,s[v]._private.style.width.pxValue))&&l.push(s[v]),\"straight\"==w.edgeType&&(p=e.math.boxInBezierVicinity(r,i,n,a,w.startX,w.startY,.5*w.startX+.5*w.endX,.5*w.startY+.5*w.endY,w.endX,w.endY,s[v]._private.style.width.pxValue))&&(2==p||1==p&&e.math.checkStraightEdgeInBox(r,i,n,a,w.startX,w.startY,w.endX,w.endY,s[v]._private.style.width.pxValue))&&l.push(s[v]),\"haystack\"==w.edgeType){var _=s[v].target()[0],E=_.position(),S=s[v].source()[0],D=S.position(),k=D.x+w.source.x,T=D.y+w.source.y,P=E.x+w.target.x,C=E.y+w.target.y,M=k>=r&&n>=k&&T>=i&&a>=T,B=P>=r&&n>=P&&C>=i&&a>=C;M&&B&&l.push(s[v])}}return l},r.getNodeWidth=function(e){return e.width()},r.getNodeHeight=function(e){return e.height()},r.getNodeShape=function(e){var t=e._private.style.shape.value;return e.isParent()?\"rectangle\"===t||\"roundrectangle\"===t?t:\"rectangle\":t},r.getNodePadding=function(e){var t=e._private.style[\"padding-left\"].pxValue,r=e._private.style[\"padding-right\"].pxValue,i=e._private.style[\"padding-top\"].pxValue,n=e._private.style[\"padding-bottom\"].pxValue;return isNaN(t)&&(t=0),isNaN(r)&&(r=0),isNaN(i)&&(i=0),isNaN(n)&&(n=0),{left:t,right:r,top:i,bottom:n}},r.zOrderSort=e.Collection.zIndexSort,r.updateCachedZSortedEles=function(){this.getCachedZSortedEles(!0)},r.getCachedZSortedEles=function(e){var t=this.lastZOrderCachedNodes,r=this.lastZOrderCachedEdges,i=this.getCachedNodes(),n=this.getCachedEdges(),a=[];if(!e&&t&&r&&t===i&&r===n)a=this.cachedZSortedEles;else{for(var o=0;o<i.length;o++){var s=i[o];(s.animated()||s.visible()&&!s.transparent())&&a.push(s)}for(var o=0;o<n.length;o++){var l=n[o];(l.animated()||l.visible()&&!l.transparent())&&a.push(l)}a.sort(this.zOrderSort),this.cachedZSortedEles=a}return this.lastZOrderCachedNodes=i,this.lastZOrderCachedEdges=n,a},r.projectBezier=function(t){function r(e){a.push({x:i(e[0],e[2],e[4],.05),y:i(e[1],e[3],e[5],.05)}),a.push({x:i(e[0],e[2],e[4],.25),y:i(e[1],e[3],e[5],.25)}),a.push({x:i(e[0],e[2],e[4],.4),y:i(e[1],e[3],e[5],.4)});var t={x:i(e[0],e[2],e[4],.5),y:i(e[1],e[3],e[5],.5)};a.push(t),\"self\"===n.edgeType||\"compound\"===n.edgeType?(n.midX=n.selfEdgeMidX,n.midY=n.selfEdgeMidY):(n.midX=t.x,n.midY=t.y),a.push({x:i(e[0],e[2],e[4],.6),y:i(e[1],e[3],e[5],.6)}),a.push({x:i(e[0],e[2],e[4],.75),y:i(e[1],e[3],e[5],.75)}),a.push({x:i(e[0],e[2],e[4],.95),y:i(e[1],e[3],e[5],.95)})}var i=e.math.qbezierAt,n=t._private.rscratch,a=t._private.rstyle.bezierPts=[];\"self\"===n.edgeType?(r([n.startX,n.startY,n.cp2ax,n.cp2ay,n.selfEdgeMidX,n.selfEdgeMidY]),r([n.selfEdgeMidX,n.selfEdgeMidY,n.cp2cx,n.cp2cy,n.endX,n.endY])):\"bezier\"===n.edgeType&&r([n.startX,n.startY,n.cp2x,n.cp2y,n.endX,n.endY])},r.recalculateNodeLabelProjection=function(e){var t=e._private.style.content.strValue;if(t&&!t.match(/^\\s+$/)){var r,i,n=e.outerWidth(),a=e.outerHeight(),o=e._private.position,s=e._private.style[\"text-halign\"].strValue,l=e._private.style[\"text-valign\"].strValue,u=e._private.rscratch,c=e._private.rstyle;switch(s){case\"left\":r=o.x-n/2;break;case\"right\":r=o.x+n/2;break;default:r=o.x}switch(l){case\"top\":i=o.y-a/2;break;case\"bottom\":i=o.y+a/2;break;default:i=o.y}u.labelX=r,u.labelY=i,c.labelX=r,c.labelY=i,this.applyLabelDimensions(e)}},r.recalculateEdgeLabelProjection=function(t){var r=t._private.style.content.strValue;if(r&&!r.match(/^\\s+$/)){var i,n,a,o,s=t._private,l=s.rscratch,u=s.rstyle;if(\"self\"==l.edgeType)a=l.selfEdgeMidX,o=l.selfEdgeMidY;else if(\"straight\"==l.edgeType)a=(l.startX+l.endX)/2,o=(l.startY+l.endY)/2;else if(\"bezier\"==l.edgeType)a=e.math.qbezierAt(l.startX,l.cp2x,l.endX,.5),o=e.math.qbezierAt(l.startY,l.cp2y,l.endY,.5);else if(\"haystack\"==l.edgeType){var c=l.haystackPts;a=(c[0]+c[2])/2,o=(c[1]+c[3])/2}i=a,n=o,l.labelX=i,l.labelY=n,u.labelX=i,u.labelY=n,this.applyLabelDimensions(t)}},r.applyLabelDimensions=function(e){var t=e._private.rscratch,r=e._private.rstyle,i=this.getLabelText(e),n=this.calculateLabelDimensions(e,i);r.labelWidth=n.width,t.labelWidth=n.width,r.labelHeight=n.height,t.labelHeight=n.height},r.getLabelText=function(e){var t=e._private.style,r=e._private.style.content.strValue,i=t[\"text-transform\"].value,n=e._private.rscratch;if(\"none\"==i||(\"uppercase\"==i?r=r.toUpperCase():\"lowercase\"==i&&(r=r.toLowerCase())),\"wrap\"===t[\"text-wrap\"].value){if(n.labelWrapKey===n.labelKey)return n.labelWrapCachedText;for(var a=r.split(\"\\n\"),o=t[\"text-max-width\"].pxValue,s=[],l=0;l<a.length;l++){var u=a[l],c=this.calculateLabelDimensions(e,u,\"line=\"+u),d=c.width;if(d>o){for(var h=u.split(/\\s+/),p=\"\",v=0;v<h.length;v++){var f=h[v],g=0===p.length?f:p+\" \"+f,y=this.calculateLabelDimensions(e,g,\"testLine=\"+g),m=y.width;o>=m?p+=f+\" \":(s.push(p),p=f+\" \")}p.match(/^\\s+$/)||s.push(p)}else s.push(u)}n.labelWrapCachedLines=s,n.labelWrapCachedText=r=s.join(\"\\n\"),n.labelWrapKey=n.labelKey}return r},r.calculateLabelDimensions=function(e,t,r){var i=this,n=e._private.style,a=n[\"font-style\"].strValue,o=n[\"font-size\"].pxValue+\"px\",s=n[\"font-family\"].strValue,l=n[\"font-weight\"].strValue,u=e._private.labelKey;r&&(u+=\"$@$\"+r);var c=i.labelDimCache||(i.labelDimCache={});if(c[u])return c[u];var d=this.labelCalcDiv;d||(d=this.labelCalcDiv=document.createElement(\"div\"),document.body.appendChild(d));var h=d.style;return h.fontFamily=s,h.fontStyle=a,h.fontSize=o,h.fontWeight=l,h.position=\"absolute\",h.left=\"-9999px\",h.top=\"-9999px\",h.zIndex=\"-1\",h.visibility=\"hidden\",h.pointerEvents=\"none\",h.padding=\"0\",h.lineHeight=\"1\",\"wrap\"===n[\"text-wrap\"].value?h.whiteSpace=\"pre\":h.whiteSpace=\"normal\",d.textContent=t,c[u]={width:d.clientWidth,height:d.clientHeight},c[u]},r.recalculateRenderedStyle=function(e){for(var t=[],r=[],i={},n=0;n<e.length;n++){var a=e[n],o=a._private,s=o.style,l=o.rscratch,u=o.rstyle,c=o.data.id,d=null!=l.boundingBoxKey&&o.boundingBoxKey===l.boundingBoxKey,h=null!=l.labelKey&&o.labelKey===l.labelKey,p=d&&h;if(\"nodes\"===a._private.group){var v=o.position,f=null!=u.nodeX&&null!=u.nodeY&&v.x===u.nodeX&&v.y===u.nodeY,g=null!=u.nodeW&&u.nodeW===s.width.pxValue,y=null!=u.nodeH&&u.nodeH===s.height.pxValue;f&&p&&g&&y||r.push(a),u.nodeX=v.x,u.nodeY=v.y,u.nodeW=s.width.pxValue,u.nodeH=s.height.pxValue}else{var m=a._private.source._private.position,x=a._private.target._private.position,b=null!=u.srcX&&null!=u.srcY&&m.x===u.srcX&&m.y===u.srcY,w=null!=u.tgtX&&null!=u.tgtY&&x.x===u.tgtX&&x.y===u.tgtY,_=b&&w;if(!_||!p){var E=o.style[\"curve-style\"].value;if(\"bezier\"===E){if(!i[c]){t.push(a),i[c]=!0;for(var S=a.parallelEdges(),n=0;n<S.length;n++){var D=S[n],k=D._private.data.id;i[k]||(t.push(D),i[k]=!0)}}}else t.push(a)}u.srcX=m.x,u.srcY=m.y,u.tgtX=x.x,u.tgtY=x.y}l.boundingBoxKey=o.boundingBoxKey,l.labelKey=o.labelKey}this.recalculateEdgeProjections(t),this.recalculateLabelProjections(r,t)},r.recalculateLabelProjections=function(e,t){for(var r=0;r<e.length;r++)this.recalculateNodeLabelProjection(e[r]);for(var r=0;r<t.length;r++)this.recalculateEdgeLabelProjection(t[r])},r.recalculateEdgeProjections=function(e){this.findEdgeControlPoints(e)},r.findEdgeControlPoints=function(r){if(r&&0!==r.length){for(var i,n=this.data.cy,a=n.hasCompoundNodes(),o={},s=[],l=[],u=0;u<r.length;u++){var c=r[u],d=c._private.style,h=\"unbundled-bezier\"===d[\"curve-style\"].value;if(\"none\"!==d.display.value)if(\"haystack\"!==d[\"curve-style\"].value){var p=c._private.data.source,v=c._private.data.target;i=p>v?v+\"-\"+p:p+\"-\"+v,h&&(i=\"unbundled\"+c._private.data.id),null==o[i]&&(o[i]=[],s.push(i)),o[i].push(c),h&&(o[i].hasUnbundled=!0)}else l.push(c)}for(var f,g,y,m,x,b,w,_,E,S,D,k,T,P,C=0;C<s.length;C++){i=s[C];var M=o[i];if(M.sort(function(e,t){return e._private.index-t._private.index}),f=M[0]._private.source,g=M[0]._private.target,f._private.data.id>g._private.data.id){var B=f;f=g,g=B}if(y=f._private.position,m=g._private.position,x=this.getNodeWidth(f),b=this.getNodeHeight(f),w=this.getNodeWidth(g),_=this.getNodeHeight(g),E=t.nodeShapes[this.getNodeShape(f)],S=t.nodeShapes[this.getNodeShape(g)],D=f._private.style[\"border-width\"].pxValue,k=g._private.style[\"border-width\"].pxValue,P=!1,M.length>1&&f!==g||M.hasUnbundled){var N=E.intersectLine(y.x,y.y,x,b,m.x,m.y,D/2),I=S.intersectLine(m.x,m.y,w,_,y.x,y.y,k/2),O={x1:N[0],x2:I[0],y1:N[1],y2:I[1]},z=I[1]-N[1],L=I[0]-N[0],R=Math.sqrt(L*L+z*z),V={x:L,y:z},A={x:V.x/R,y:V.y/R};T={x:-A.y,y:A.x},(S.checkPoint(N[0],N[1],k/2,w,_,m.x,m.y)||E.checkPoint(I[0],I[1],D/2,x,b,y.x,y.y))&&(T={},P=!0)}for(var c,X,u=0;u<M.length;u++){c=M[u],X=c._private.rscratch;var F=X.lastEdgeIndex,Y=u,q=X.lastNumEdges,j=M.length,$=c._private.style,W=$[\"control-point-step-size\"].pxValue,H=void 0!==$[\"control-point-distance\"]?$[\"control-point-distance\"].pxValue:void 0,Z=$[\"control-point-weight\"].value,h=\"unbundled-bezier\"===$[\"curve-style\"].value,U=c._private.source!==f;U&&h&&(H*=-1);var G=X.lastSrcCtlPtX,K=y.x,J=X.lastSrcCtlPtY,Q=y.y,ee=X.lastSrcCtlPtW,te=f.outerWidth(),re=X.lastSrcCtlPtH,ie=f.outerHeight(),ne=X.lastTgtCtlPtX,ae=m.x,oe=X.lastTgtCtlPtY,se=m.y,le=X.lastTgtCtlPtW,ue=g.outerWidth(),ce=X.lastTgtCtlPtH,de=g.outerHeight(),he=X.lastW,pe=$[\"control-point-step-size\"].pxValue;if(P?X.badBezier=!0:X.badBezier=!1,G!==K||J!==Q||ee!==te||re!==ie||ne!==ae||oe!==se||le!==ue||ce!==de||he!==pe||!(F===Y&&q===j||h)){if(X.lastSrcCtlPtX=K,X.lastSrcCtlPtY=Q,X.lastSrcCtlPtW=te,X.lastSrcCtlPtH=ie,X.lastTgtCtlPtX=ae,X.lastTgtCtlPtY=se,X.lastTgtCtlPtW=ue,X.lastTgtCtlPtH=de,X.lastEdgeIndex=Y,X.lastNumEdges=j,X.lastWidth=pe,f===g){X.edgeType=\"self\";var ve=u,fe=W;h&&(ve=0,fe=H),X.cp2ax=y.x,X.cp2ay=y.y-(1+Math.pow(b,1.12)/100)*fe*(ve/3+1),X.cp2cx=y.x-(1+Math.pow(x,1.12)/100)*fe*(ve/3+1),X.cp2cy=y.y,X.selfEdgeMidX=(X.cp2ax+X.cp2cx)/2,X.selfEdgeMidY=(X.cp2ay+X.cp2cy)/2}else if(a&&(f.isParent()||f.isChild()||g.isParent()||g.isChild())&&(f.parents().anySame(g)||g.parents().anySame(f))){X.edgeType=\"compound\",X.badBezier=!1;var ve=u,fe=W;h&&(ve=0,fe=H);var ge=50,ye={x:y.x-x/2,y:y.y-b/2},me={x:m.x-w/2,y:m.y-_/2},xe=1;X.cp2ax=ye.x,X.compoundStretchA=Math.max(xe,Math.log(.01*x)),X.cp2ay=ye.y-(1+Math.pow(ge,1.12)/100)*fe*(ve/3+1)*X.compoundStretchA,X.compoundStretchB=Math.max(xe,Math.log(.01*w)),X.cp2cx=me.x-(1+Math.pow(ge,1.12)/100)*fe*(ve/3+1)*X.compoundStretchB,X.cp2cy=me.y,X.selfEdgeMidX=(X.cp2ax+X.cp2cx)/2,X.selfEdgeMidY=(X.cp2ay+X.cp2cy)/2}else if(M.length%2!==1||u!==Math.floor(M.length/2)||h){var be,we=(.5-M.length/2+u)*W,_e=e.math.signum(we);be=h?H:void 0!==H?_e*H:void 0;var Ee=void 0!==be?be:we,Se=1-Z,De=Z;U&&(Se=Z,De=1-Z);var ke={x:O.x1*Se+O.x2*De,y:O.y1*Se+O.y2*De};X.edgeType=\"bezier\",X.cp2x=ke.x+T.x*Ee,X.cp2y=ke.y+T.y*Ee}else X.edgeType=\"straight\";this.findEndpoints(c);var Te=!e.is.number(X.startX)||!e.is.number(X.startY),Pe=!e.is.number(X.arrowStartX)||!e.is.number(X.arrowStartY),Ce=!e.is.number(X.endX)||!e.is.number(X.endY),Me=!e.is.number(X.arrowEndX)||!e.is.number(X.arrowEndY),Be=3,Ne=this.getArrowWidth(c._private.style.width.pxValue)*t.arrowShapeHeight,Ie=Be*Ne,Oe=e.math.distance({x:X.cp2x,y:X.cp2y},{x:X.startX,y:X.startY}),ze=Ie>Oe,Le=e.math.distance({x:X.cp2x,y:X.cp2y},{x:X.endX,y:X.endY}),Re=Ie>Le;if(\"bezier\"===X.edgeType){var Ve=!1;if(Te||Pe||ze){Ve=!0;var Ae={x:X.cp2x-y.x,y:X.cp2y-y.y},Xe=Math.sqrt(Ae.x*Ae.x+Ae.y*Ae.y),Fe={x:Ae.x/Xe,y:Ae.y/Xe},Ye=Math.max(x,b),qe={x:X.cp2x+2*Fe.x*Ye,y:X.cp2y+2*Fe.y*Ye},je=E.intersectLine(y.x,y.y,x,b,qe.x,qe.y,D/2);ze?(X.cp2x=X.cp2x+Fe.x*(Ie-Oe),X.cp2y=X.cp2y+Fe.y*(Ie-Oe)):(X.cp2x=je[0]+Fe.x*Ie,X.cp2y=je[1]+Fe.y*Ie)}if(Ce||Me||Re){Ve=!0;var Ae={x:X.cp2x-m.x,y:X.cp2y-m.y},Xe=Math.sqrt(Ae.x*Ae.x+Ae.y*Ae.y),Fe={x:Ae.x/Xe,y:Ae.y/Xe},Ye=Math.max(x,b),qe={x:X.cp2x+2*Fe.x*Ye,y:X.cp2y+2*Fe.y*Ye},$e=S.intersectLine(m.x,m.y,w,_,qe.x,qe.y,k/2);Re?(X.cp2x=X.cp2x+Fe.x*(Ie-Le),X.cp2y=X.cp2y+Fe.y*(Ie-Le)):(X.cp2x=$e[0]+Fe.x*Ie,X.cp2y=$e[1]+Fe.y*Ie)}Ve&&this.findEndpoints(c)}else\"straight\"===X.edgeType&&(X.midX=(K+ae)/2,X.midY=(Q+se)/2);this.projectBezier(c),this.recalculateEdgeLabelProjection(c)}}}for(var u=0;u<l.length;u++){var c=l[u],We=c._private,He=We.rscratch,X=He;if(!He.haystack){var Ze=2*Math.random()*Math.PI;He.source={x:Math.cos(Ze),y:Math.sin(Ze)};var Ze=2*Math.random()*Math.PI;He.target={x:Math.cos(Ze),y:Math.sin(Ze)}}var f=We.source,g=We.target,y=f._private.position,m=g._private.position,x=f.width(),w=g.width(),b=f.height(),_=g.height(),Ye=d[\"haystack-radius\"].value,Ue=Ye/2;X.haystackPts=[X.source.x*x*Ue+y.x,X.source.y*b*Ue+y.y,X.target.x*w*Ue+m.x,X.target.y*_*Ue+m.y],He.edgeType=\"haystack\",He.haystack=!0,this.recalculateEdgeLabelProjection(c)}return o}},r.findEndpoints=function(r){var i,n=r.source()[0],a=r.target()[0],o=r._private.style[\"target-arrow-shape\"].value,s=r._private.style[\"source-arrow-shape\"].value,l=a._private.style[\"border-width\"].pxValue,u=n._private.style[\"border-width\"].pxValue,c=r._private.rscratch;if(\"self\"==c.edgeType||\"compound\"==c.edgeType){var d=[c.cp2cx,c.cp2cy];i=t.nodeShapes[this.getNodeShape(a)].intersectLine(a._private.position.x,a._private.position.y,this.getNodeWidth(a),this.getNodeHeight(a),d[0],d[1],l/2);var h=e.math.shortenIntersection(i,d,t.arrowShapes[o].spacing(r)),p=e.math.shortenIntersection(i,d,t.arrowShapes[o].gap(r));c.endX=p[0],c.endY=p[1],c.arrowEndX=h[0],c.arrowEndY=h[1];var d=[c.cp2ax,c.cp2ay];i=t.nodeShapes[this.getNodeShape(n)].intersectLine(n._private.position.x,n._private.position.y,this.getNodeWidth(n),this.getNodeHeight(n),d[0],d[1],u/2);var v=e.math.shortenIntersection(i,d,t.arrowShapes[s].spacing(r)),f=e.math.shortenIntersection(i,d,t.arrowShapes[s].gap(r));c.startX=f[0],c.startY=f[1],c.arrowStartX=v[0],c.arrowStartY=v[1]}else if(\"straight\"==c.edgeType){i=t.nodeShapes[this.getNodeShape(a)].intersectLine(a._private.position.x,a._private.position.y,this.getNodeWidth(a),this.getNodeHeight(a),n.position().x,n.position().y,l/2),0===i.length?c.noArrowPlacement=!0:c.noArrowPlacement=!1;var h=e.math.shortenIntersection(i,[n.position().x,n.position().y],t.arrowShapes[o].spacing(r)),p=e.math.shortenIntersection(i,[n.position().x,n.position().y],t.arrowShapes[o].gap(r));c.endX=p[0],c.endY=p[1],c.arrowEndX=h[0],c.arrowEndY=h[1],i=t.nodeShapes[this.getNodeShape(n)].intersectLine(n._private.position.x,n._private.position.y,this.getNodeWidth(n),this.getNodeHeight(n),a.position().x,a.position().y,u/2),0===i.length?c.noArrowPlacement=!0:c.noArrowPlacement=!1;var v=e.math.shortenIntersection(i,[a.position().x,a.position().y],t.arrowShapes[s].spacing(r)),f=e.math.shortenIntersection(i,[a.position().x,a.position().y],t.arrowShapes[s].gap(r));c.startX=f[0],c.startY=f[1],c.arrowStartX=v[0],c.arrowStartY=v[1],e.is.number(c.startX)&&e.is.number(c.startY)&&e.is.number(c.endX)&&e.is.number(c.endY)?c.badLine=!1:c.badLine=!0}else if(\"bezier\"==c.edgeType){var d=[c.cp2x,c.cp2y];i=t.nodeShapes[this.getNodeShape(a)].intersectLine(a._private.position.x,a._private.position.y,this.getNodeWidth(a),this.getNodeHeight(a),d[0],d[1],l/2);var h=e.math.shortenIntersection(i,d,t.arrowShapes[o].spacing(r)),p=e.math.shortenIntersection(i,d,t.arrowShapes[o].gap(r));c.endX=p[0],c.endY=p[1],c.arrowEndX=h[0],c.arrowEndY=h[1],i=t.nodeShapes[this.getNodeShape(n)].intersectLine(n._private.position.x,n._private.position.y,this.getNodeWidth(n),this.getNodeHeight(n),d[0],d[1],u/2);var v=e.math.shortenIntersection(i,d,t.arrowShapes[s].spacing(r)),f=e.math.shortenIntersection(i,d,t.arrowShapes[s].gap(r));c.startX=f[0],c.startY=f[1],c.arrowStartX=v[0],c.arrowStartY=v[1]}else if(c.isArcEdge)return},r.findEdges=function(e){for(var t=this.getCachedEdges(),r={},i=[],n=0;n<e.length;n++)r[e[n]._private.data.id]=e[n];for(var n=0;n<t.length;n++)(r[t[n]._private.data.source]||r[t[n]._private.data.target])&&i.push(t[n]);return i},r.getArrowWidth=r.getArrowHeight=function(e){var t=this.arrowWidthCache=this.arrowWidthCache||{},r=t[e];return r?r:(r=Math.max(Math.pow(13.37*e,.9),29),t[e]=r,r)}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t.prototype;r.drawEdge=function(e,r,i){var n=r._private.rscratch,a=t.usePaths();if(!n.badBezier&&(\"bezier\"!==n.edgeType&&\"straight\"!==n.edgeType||!isNaN(n.startX))){var o=r._private.style;if(!(o.width.pxValue<=0)){var s=o[\"overlay-padding\"].pxValue,l=o[\"overlay-opacity\"].value,u=o[\"overlay-color\"].value;if(i){if(0===l)return;this.strokeStyle(e,u[0],u[1],u[2],l),e.lineCap=\"round\",\"self\"!=r._private.rscratch.edgeType||a||(e.lineCap=\"butt\")}else{var c=o[\"line-color\"].value;this.strokeStyle(e,c[0],c[1],c[2],o.opacity.value),e.lineCap=\"butt\"}var d,h,p,v;p=d=r._private.source,v=h=r._private.target;var f=o.width.pxValue+(i?2*s:0),g=i?\"solid\":o[\"line-style\"].value;e.lineWidth=f;var y=o[\"shadow-blur\"].pxValue,m=o[\"shadow-opacity\"].value,x=o[\"shadow-color\"].value,b=o[\"shadow-offset-x\"].pxValue,w=o[\"shadow-offset-y\"].pxValue;if(this.shadowStyle(e,x,i?0:m,y,b,w),\"haystack\"===n.edgeType)this.drawStyledEdge(r,e,n.haystackPts,g,f);else if(\"self\"===n.edgeType||\"compound\"===n.edgeType){var _=r._private.rscratch,E=[_.startX,_.startY,_.cp2ax,_.cp2ay,_.selfEdgeMidX,_.selfEdgeMidY,_.selfEdgeMidX,_.selfEdgeMidY,_.cp2cx,_.cp2cy,_.endX,_.endY];this.drawStyledEdge(r,e,E,g,f)}else if(\"straight\"===n.edgeType){var S=h._private.position.x-d._private.position.x,D=h._private.position.y-d._private.position.y,k=n.endX-n.startX,T=n.endY-n.startY;if(0>S*k+D*T)n.straightEdgeTooShort=!0;else{var _=n;this.drawStyledEdge(r,e,[_.startX,_.startY,_.endX,_.endY],g,f),n.straightEdgeTooShort=!1}}else{var _=n;this.drawStyledEdge(r,e,[_.startX,_.startY,_.cp2x,_.cp2y,_.endX,_.endY],g,f)}\"haystack\"===n.edgeType?this.drawArrowheads(e,r,i):n.noArrowPlacement!==!0&&void 0!==n.startX&&this.drawArrowheads(e,r,i),this.shadowStyle(e,\"transparent\",0)}}},r.drawStyledEdge=function(e,r,i,n,a){var o,s=e._private.rscratch,l=r,u=!1,c=t.usePaths();if(c){for(var d=i,h=s.pathCacheKey&&d.length===s.pathCacheKey.length,p=h,v=0;p&&v<d.length;v++)s.pathCacheKey[v]!==d[v]&&(p=!1);p?(o=r=s.pathCache,u=!0):(o=r=new Path2D,s.pathCacheKey=d,s.pathCache=o)}if(l.setLineDash)switch(n){case\"dotted\":l.setLineDash([1,1]);break;case\"dashed\":l.setLineDash([6,3]);break;case\"solid\":l.setLineDash([])}u||(r.beginPath&&r.beginPath(),r.moveTo(i[0],i[1]),6!==i.length||s.badBezier?12!==i.length||s.badBezier?4!==i.length||s.badLine||r.lineTo(i[2],i[3]):(r.quadraticCurveTo(i[2],i[3],i[4],i[5]),r.quadraticCurveTo(i[8],i[9],i[10],i[11])):r.quadraticCurveTo(i[2],i[3],i[4],i[5])),r=l,c?r.stroke(o):r.stroke(),r.setLineDash&&r.setLineDash([])},r.drawArrowheads=function(e,t,r){function i(r,i,n,a,o){var s=f[r+\"-arrow-shape\"].value;if(\"none\"!==s){var l=e.globalCompositeOperation,u=\"hollow\"===f[r+\"-arrow-fill\"].value?\"both\":\"filled\",c=f[r+\"-arrow-fill\"].value;\"half-triangle-overshot\"===s&&(c=\"hollow\",u=\"hollow\"),(1!==f.opacity.value||\"hollow\"===c)&&(e.globalCompositeOperation=\"destination-out\",d.fillStyle(e,255,255,255,1),d.strokeStyle(e,255,255,255,1),d.drawArrowShape(t,r,e,u,f.width.pxValue,f[r+\"-arrow-shape\"].value,i,n,a,o),e.globalCompositeOperation=l);var h=f[r+\"-arrow-color\"].value;d.fillStyle(e,h[0],h[1],h[2],f.opacity.value),d.strokeStyle(e,h[0],h[1],h[2],f.opacity.value),d.drawArrowShape(t,r,e,c,f.width.pxValue,f[r+\"-arrow-shape\"].value,i,n,a,o)}}if(!r){var n,a,o,s,l,u,c=t._private.rscratch,d=this,h=\"haystack\"===c.edgeType,p=t.source().position(),v=t.target().position();h?(o=c.haystackPts[0],s=c.haystackPts[1],l=c.haystackPts[2],u=c.haystackPts[3]):(o=c.arrowStartX,s=c.arrowStartY,l=c.arrowEndX,u=c.arrowEndY);var f=t._private.style;n=o-p.x,a=s-p.y,h||isNaN(o)||isNaN(s)||isNaN(n)||isNaN(a)||i(\"source\",o,s,n,a);var g=c.midX,y=c.midY;h&&(g=(o+l)/2,y=(s+u)/2),n=o-l,a=s-u,\"self\"===c.edgeType&&(n=1,a=-1),isNaN(g)||isNaN(y)||i(\"mid-target\",g,y,n,a),n*=-1,a*=-1,isNaN(g)||isNaN(y)||i(\"mid-source\",g,y,n,a),n=l-v.x,a=u-v.y,h||isNaN(l)||isNaN(u)||isNaN(n)||isNaN(a)||i(\"target\",l,u,n,a)}},r.drawArrowShape=function(e,r,i,n,a,o,s,l,u,c){var d,h=t.usePaths(),p=e._private.rscratch,v=!1,f=i,g={x:s,y:l},y=Math.asin(c/Math.sqrt(u*u+c*c));0>u?y+=Math.PI/2:y=-(Math.PI/2+y);var m=this.getArrowWidth(a),x=t.arrowShapes[o];if(h){var b=m+\"$\"+o+\"$\"+y+\"$\"+s+\"$\"+l;p.arrowPathCacheKey=p.arrowPathCacheKey||{},p.arrowPathCache=p.arrowPathCache||{};var w=p.arrowPathCacheKey[r]===b;w?(d=i=p.arrowPathCache[r],v=!0):(d=i=new Path2D,p.arrowPathCacheKey[r]=b,p.arrowPathCache[r]=d)}i.beginPath&&i.beginPath(),v||x.draw(i,m,y,g),!x.leavePathOpen&&i.closePath&&i.closePath(),i=f,(\"filled\"===n||\"both\"===n)&&(h?i.fill(d):i.fill()),(\"hollow\"===n||\"both\"===n)&&(i.lineWidth=x.matchEdgeWidth?a:1,i.lineJoin=\"miter\",h?i.stroke(d):i.stroke())}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t.prototype;r.getCachedImage=function(e,t){var r=this,i=r.imageCache=r.imageCache||{};if(i[e]&&i[e].image)return i[e].image;var n=i[e]=i[e]||{},a=n.image=new Image;return a.addEventListener(\"load\",t),a.src=e,a},r.safeDrawImage=function(e,r,i,n,a,o,s,l,u,c){var d=this;try{e.drawImage(r,i,n,a,o,s,l,u,c)}catch(h){d.data.canvasNeedsRedraw[t.NODE]=!0,d.data.canvasNeedsRedraw[t.DRAG]=!0,d.drawingImage=!0,d.redraw()}},r.drawInscribedImage=function(e,r,i){var n=this,a=i._private.position.x,o=i._private.position.y,s=i._private.style,l=s[\"background-fit\"].value,u=s[\"background-position-x\"],c=s[\"background-position-y\"],d=s[\"background-repeat\"].value,h=i.width(),p=i.height(),v=i._private.rscratch,f=s[\"background-clip\"].value,g=\"node\"===f,y=s[\"background-image-opacity\"].value,m=r.width,x=r.height;if(0!==m&&0!==x){var b=s[\"background-width\"];\"auto\"!==b.value&&(m=\"%\"===b.units?b.value/100*h:b.pxValue);var w=s[\"background-height\"];if(\"auto\"!==w.value&&(x=\"%\"===w.units?w.value/100*p:w.pxValue),0!==m&&0!==x){if(\"contain\"===l){var _=Math.min(h/m,p/x);m*=_,x*=_}else if(\"cover\"===l){var _=Math.max(h/m,p/x);m*=_,x*=_}var E=a-h/2;E+=\"%\"===u.units?(h-m)*u.value/100:u.pxValue;var S=o-p/2;S+=\"%\"===c.units?(p-x)*c.value/100:c.pxValue,v.pathCache&&(E-=a,S-=o,a=0,o=0);var D=e.globalAlpha;if(e.globalAlpha=y,\"no-repeat\"===d)g&&(e.save(),v.pathCache?e.clip(v.pathCache):(t.nodeShapes[n.getNodeShape(i)].drawPath(e,a,o,h,p),e.clip())),n.safeDrawImage(e,r,0,0,r.width,r.height,E,S,m,x),g&&e.restore();else{var k=e.createPattern(r,d);e.fillStyle=k,t.nodeShapes[n.getNodeShape(i)].drawPath(e,a,o,h,p),e.translate(E,S),e.fill(),e.translate(-E,-S)}e.globalAlpha=D}}}}(cytoscape),function(e){\"use strict\";function t(e,t,r,i,n,a){var a=a||5;e.beginPath(),\ne.moveTo(t+a,r),e.lineTo(t+i-a,r),e.quadraticCurveTo(t+i,r,t+i,r+a),e.lineTo(t+i,r+n-a),e.quadraticCurveTo(t+i,r+n,t+i-a,r+n),e.lineTo(t+a,r+n),e.quadraticCurveTo(t,r+n,t,r+n-a),e.lineTo(t,r+a),e.quadraticCurveTo(t,r,t+a,r),e.closePath(),e.fill()}var r=e(\"renderer\",\"canvas\"),i=r.prototype;i.drawEdgeText=function(t,r){var i=r._private.style.content.strValue;if(i&&!i.match(/^\\s+$/)&&(!this.hideEdgesOnViewport||!(this.dragData.didDrag||this.pinching||this.hoverData.dragging||this.data.wheel||this.swipePanning))){var n=r._private.style[\"font-size\"].pxValue*r.cy().zoom(),a=r._private.style[\"min-zoomed-font-size\"].pxValue;if(!(a>n)){t.textAlign=\"center\",t.textBaseline=\"middle\";var o=r._private.rscratch;if(e.is.number(o.labelX)&&e.is.number(o.labelY)){var s,l,u,c=r._private.style,d=\"autorotate\"===c[\"edge-text-rotation\"].strValue;if(d){switch(o.edgeType){case\"haystack\":l=o.haystackPts[2]-o.haystackPts[0],u=o.haystackPts[3]-o.haystackPts[1];break;default:l=o.endX-o.startX,u=o.endY-o.startY}s=Math.atan(u/l),t.translate(o.labelX,o.labelY),t.rotate(s),this.drawText(t,r,0,0),t.rotate(-s),t.translate(-o.labelX,-o.labelY)}else this.drawText(t,r,o.labelX,o.labelY)}}}},i.drawNodeText=function(t,r){var i=r._private.style.content.strValue;if(i&&!i.match(/^\\s+$/)){var n=r._private.style[\"font-size\"].pxValue*r.cy().zoom(),a=r._private.style[\"min-zoomed-font-size\"].pxValue;if(!(a>n)){var o=r._private.style[\"text-halign\"].strValue,s=r._private.style[\"text-valign\"].strValue,l=r._private.rscratch;if(e.is.number(l.labelX)&&e.is.number(l.labelY)){switch(o){case\"left\":t.textAlign=\"right\";break;case\"right\":t.textAlign=\"left\";break;default:t.textAlign=\"center\"}switch(s){case\"top\":t.textBaseline=\"bottom\";break;case\"bottom\":t.textBaseline=\"top\";break;default:t.textBaseline=\"middle\"}this.drawText(t,r,l.labelX,l.labelY)}}}},i.getFontCache=function(e){var t;this.fontCaches=this.fontCaches||[];for(var r=0;r<this.fontCaches.length;r++)if(t=this.fontCaches[r],t.context===e)return t;return t={context:e},this.fontCaches.push(t),t},i.setupTextStyle=function(e,t){var r=t.effectiveOpacity(),i=t._private.style,n=i[\"font-style\"].strValue,a=i[\"font-size\"].pxValue+\"px\",o=i[\"font-family\"].strValue,s=i[\"font-weight\"].strValue,l=i[\"text-opacity\"].value*i.opacity.value*r,u=i[\"text-outline-opacity\"].value*l,c=i.color.value,d=i[\"text-outline-color\"].value,h=i[\"text-shadow-blur\"].pxValue,p=i[\"text-shadow-opacity\"].value,v=i[\"text-shadow-color\"].value,f=i[\"text-shadow-offset-x\"].pxValue,g=i[\"text-shadow-offset-y\"].pxValue,y=t._private.fontKey,m=this.getFontCache(e);m.key!==y&&(e.font=n+\" \"+s+\" \"+a+\" \"+o,m.key=y);var x=this.getLabelText(t);return e.lineJoin=\"round\",this.fillStyle(e,c[0],c[1],c[2],l),this.strokeStyle(e,d[0],d[1],d[2],u),this.shadowStyle(e,v,p,h,f,g),x},i.drawText=function(e,r,i,n){var a=r._private,o=a.style,s=a.rstyle,l=a.rscratch,u=r.effectiveOpacity();if(0!==u&&0!==o[\"text-opacity\"].value){var c=this.setupTextStyle(e,r),d=o[\"text-halign\"].value,h=o[\"text-valign\"].value;if(r.isEdge()&&(d=\"center\",h=\"center\"),null!=c&&!isNaN(i)&&!isNaN(n)){var p=o[\"text-background-opacity\"].value,v=o[\"text-border-opacity\"].value,f=o[\"text-border-width\"].pxValue;if(p>0||f>0&&v>0){var g=4+f/2;r.isNode()&&(\"top\"===h?n-=g:\"bottom\"===h&&(n+=g),\"left\"===d?i-=g:\"right\"===d&&(i+=g));var y=s.labelWidth,m=s.labelHeight,x=i;d&&(\"center\"==d?x-=y/2:\"left\"==d&&(x-=y));var b=n;if(r.isNode()?\"top\"==h?b-=m:\"center\"==h&&(b-=m/2):b-=m/2,\"autorotate\"===o[\"edge-text-rotation\"].strValue?(n=0,y+=4,x=i-y/2,b=n-m/2):(x-=g,b-=g,m+=2*g,y+=2*g),p>0){var w=e.fillStyle,_=o[\"text-background-color\"].value;e.fillStyle=\"rgba(\"+_[0]+\",\"+_[1]+\",\"+_[2]+\",\"+p*u+\")\";var E=o[\"text-background-shape\"].strValue;\"roundrectangle\"==E?t(e,x,b,y,m,2):e.fillRect(x,b,y,m),e.fillStyle=w}if(f>0&&v>0){var S=e.strokeStyle,D=e.lineWidth,k=o[\"text-border-color\"].value,T=o[\"text-border-style\"].value;if(e.strokeStyle=\"rgba(\"+k[0]+\",\"+k[1]+\",\"+k[2]+\",\"+v*u+\")\",e.lineWidth=f,e.setLineDash)switch(T){case\"dotted\":e.setLineDash([1,1]);break;case\"dashed\":e.setLineDash([4,2]);break;case\"double\":e.lineWidth=f/4,e.setLineDash([]);break;case\"solid\":e.setLineDash([])}if(e.strokeRect(x,b,y,m),\"double\"===T){var P=f/2;e.strokeRect(x+P,b+P,y-2*P,m-2*P)}e.setLineDash&&e.setLineDash([]),e.lineWidth=D,e.strokeStyle=S}}var C=2*o[\"text-outline-width\"].pxValue;if(C>0&&(e.lineWidth=C),\"wrap\"===o[\"text-wrap\"].value){var M=l.labelWrapCachedLines,B=s.labelHeight/M.length;switch(h){case\"top\":n-=(M.length-1)*B;break;case\"bottom\":break;default:case\"center\":n-=(M.length-1)*B/2}for(var N=0;N<M.length;N++)C>0&&e.strokeText(M[N],i,n),e.fillText(M[N],i,n),n+=B}else C>0&&e.strokeText(c,i,n),e.fillText(c,i,n);this.shadowStyle(e,\"transparent\",0)}}}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t.prototype;r.drawNode=function(e,r,i){var n,a,o=this,s=r._private.style,l=r._private.rscratch,u=r._private,c=u.position;if(void 0!==c.x&&void 0!==c.y){var d,h=t.usePaths(),p=e,v=!1,f=s[\"overlay-padding\"].pxValue,g=s[\"overlay-opacity\"].value,y=s[\"overlay-color\"].value;if(!i||0!==g){var m=r.effectiveOpacity();if(0!==m)if(n=this.getNodeWidth(r),a=this.getNodeHeight(r),e.lineWidth=s[\"border-width\"].pxValue,void 0!==i&&i)g>0&&(this.fillStyle(e,y[0],y[1],y[2],g),t.nodeShapes.roundrectangle.drawPath(e,r._private.position.x,r._private.position.y,n+2*f,a+2*f),e.fill());else{var x,b=s[\"background-image\"].value[2]||s[\"background-image\"].value[1];if(void 0!==b){x=this.getCachedImage(b,function(){o.data.canvasNeedsRedraw[t.NODE]=!0,o.data.canvasNeedsRedraw[t.DRAG]=!0,o.drawingImage=!0,o.redraw()});var w=u.backgrounding;u.backgrounding=!x.complete,w!==u.backgrounding&&r.updateStyle(!1)}var _=s[\"background-color\"].value,E=s[\"border-color\"].value,S=s[\"border-style\"].value;this.fillStyle(e,_[0],_[1],_[2],s[\"background-opacity\"].value*m),this.strokeStyle(e,E[0],E[1],E[2],s[\"border-opacity\"].value*m);var D=s[\"shadow-blur\"].pxValue,k=s[\"shadow-opacity\"].value,T=s[\"shadow-color\"].value,P=s[\"shadow-offset-x\"].pxValue,C=s[\"shadow-offset-y\"].pxValue;if(this.shadowStyle(e,T,k,D,P,C),e.lineJoin=\"miter\",e.setLineDash)switch(S){case\"dotted\":e.setLineDash([1,1]);break;case\"dashed\":e.setLineDash([4,2]);break;case\"solid\":case\"double\":e.setLineDash([])}var M=s.shape.strValue;if(h){var B=M+\"$\"+n+\"$\"+a;e.translate(c.x,c.y),l.pathCacheKey===B?(d=e=l.pathCache,v=!0):(d=e=new Path2D,l.pathCacheKey=B,l.pathCache=d)}if(!v){var N=c;h&&(N={x:0,y:0}),t.nodeShapes[this.getNodeShape(r)].drawPath(e,N.x,N.y,n,a)}e=p,h?e.fill(d):e.fill(),this.shadowStyle(e,\"transparent\",0),void 0!==b&&x.complete&&this.drawInscribedImage(e,x,r);var I=s[\"background-blacken\"].value,O=s[\"border-width\"].pxValue;if(this.hasPie(r)&&(this.drawPie(e,r,m),(0!==I||0!==O)&&(h||t.nodeShapes[this.getNodeShape(r)].drawPath(e,c.x,c.y,n,a))),I>0?(this.fillStyle(e,0,0,0,I),h?e.fill(d):e.fill()):0>I&&(this.fillStyle(e,255,255,255,-I),h?e.fill(d):e.fill()),O>0&&(h?e.stroke(d):e.stroke(),\"double\"===S)){e.lineWidth=s[\"border-width\"].pxValue/3;var z=e.globalCompositeOperation;e.globalCompositeOperation=\"destination-out\",h?e.stroke(d):e.stroke(),e.globalCompositeOperation=z}h&&e.translate(-c.x,-c.y),e.setLineDash&&e.setLineDash([])}}}},r.hasPie=function(e){return e=e[0],e._private.hasPie},r.drawPie=function(r,i,n){i=i[0];var a=i._private,o=a.style,s=o[\"pie-size\"],l=this.getNodeWidth(i),u=this.getNodeHeight(i),c=a.position.x,d=a.position.y,h=Math.min(l,u)/2,p=0,v=t.usePaths();v&&(c=0,d=0),\"%\"===s.units?h=h*s.value/100:void 0!==s.pxValue&&(h=s.pxValue/2);for(var f=1;f<=e.style.pieBackgroundN;f++){var g=o[\"pie-\"+f+\"-background-size\"].value,y=o[\"pie-\"+f+\"-background-color\"].value,m=o[\"pie-\"+f+\"-background-opacity\"].value*n,x=g/100;x+p>1&&(x=1-p);var b=1.5*Math.PI+2*Math.PI*p,w=2*Math.PI*x,_=b+w;0===g||p>=1||p+x>1||(r.beginPath(),r.moveTo(c,d),r.arc(c,d,h,b,_),r.closePath(),this.fillStyle(r,y[0],y[1],y[2],m),r.fill(),p+=x)}}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t,i=t.prototype;i.getPixelRatio=function(){var e=this.data.contexts[0];if(null!=this.forcedPixelRatio)return this.forcedPixelRatio;var t=e.backingStorePixelRatio||e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1;return(window.devicePixelRatio||1)/t},i.paintCache=function(e){for(var t,r=this.paintCaches=this.paintCaches||[],i=!0,n=0;n<r.length;n++)if(t=r[n],t.context===e){i=!1;break}return i&&(t={context:e},r.push(t)),t},i.fillStyle=function(e,t,r,i,n){e.fillStyle=\"rgba(\"+t+\",\"+r+\",\"+i+\",\"+n+\")\"},i.strokeStyle=function(e,t,r,i,n){e.strokeStyle=\"rgba(\"+t+\",\"+r+\",\"+i+\",\"+n+\")\"},i.shadowStyle=function(e,t,r,i,n,a){var o=this.data.cy.zoom(),s=this.paintCache(e);(0!==s.shadowOpacity||0!==r)&&(s.shadowOpacity=r,r>0?(e.shadowBlur=i*o,e.shadowColor=\"rgba(\"+t[0]+\",\"+t[1]+\",\"+t[2]+\",\"+r+\")\",e.shadowOffsetX=n*o,e.shadowOffsetY=a*o):(e.shadowBlur=0,e.shadowColor=\"transparent\"))},i.matchCanvasSize=function(e){var i=this.data,n=e.clientWidth,a=e.clientHeight,o=this.getPixelRatio(),s=this.motionBlurPxRatio;(e===this.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE]||e===this.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG])&&(o=s);var l,u=n*o,c=a*o;if(u!==this.canvasWidth||c!==this.canvasHeight){this.fontCaches=null;var d=i.canvasContainer;d.style.width=n+\"px\",d.style.height=a+\"px\";for(var h=0;h<t.CANVAS_LAYERS;h++)l=i.canvases[h],(l.width!==u||l.height!==c)&&(l.width=u,l.height=c,l.style.width=n+\"px\",l.style.height=a+\"px\");for(var h=0;h<t.BUFFER_COUNT;h++)l=i.bufferCanvases[h],(l.width!==u||l.height!==c)&&(l.width=u,l.height=c,l.style.width=n+\"px\",l.style.height=a+\"px\");this.textureMult=1,1>=o&&(l=i.bufferCanvases[t.TEXTURE_BUFFER],this.textureMult=2,l.width=u*this.textureMult,l.height=c*this.textureMult),this.canvasWidth=u,this.canvasHeight=c}},i.renderTo=function(e,t,r,i){this.redraw({forcedContext:e,forcedZoom:t,forcedPan:r,drawAllLayers:!0,forcedPxRatio:i})},i.timeToRender=function(){return this.redrawTotalTime/this.redrawCount},t.minRedrawLimit=1e3/60,t.maxRedrawLimit=1e3,t.motionBlurDelay=100,i.redraw=function(i){function n(){function i(e,t,r,i,n){var a=e.globalCompositeOperation;e.globalCompositeOperation=\"destination-out\",c.fillStyle(e,255,255,255,c.motionBlurTransparency),e.fillRect(t,r,i,n),e.globalCompositeOperation=a}function n(e,t){var n,s,d,h;/*!r.fullQualityMb &&*/c.clearingMotionBlur||e!==p.bufferContexts[r.MOTIONBLUR_BUFFER_NODE]&&e!==p.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG]?(n=T,s=D,d=c.canvasWidth,h=c.canvasHeight):(n={x:k.x*y,y:k.y*y},s=S*y,d=c.canvasWidth*y,h=c.canvasHeight*y),e.setTransform(1,0,0,1,0,0),\"motionBlur\"===t?i(e,0,0,d,h):a||void 0!==t&&!t||e.clearRect(0,0,d,h),o||(e.translate(n.x,n.y),e.scale(s,s)),u&&e.translate(u.x,u.y),l&&e.scale(l,l)}function b(e,t){for(var r=e.eles,i=0;i<r.length;i++){var n=r[i];n.isNode()?(c.drawNode(t,n),F||c.drawNodeText(t,n),c.drawNode(t,n,!0)):X||(c.drawEdge(t,n),F||c.drawEdgeText(t,n),c.drawEdge(t,n,!0))}}c.textureDrawLastFrame&&!f&&(v[r.NODE]=!0,v[r.SELECT_BOX]=!0);var _=c.getCachedEdges(),E=h.style()._private.coreStyle,S=h.zoom(),D=void 0!==l?l:S,k=h.pan(),T={x:k.x,y:k.y},C={zoom:S,pan:{x:k.x,y:k.y}},M=c.prevViewport,B=void 0===M||C.zoom!==M.zoom||C.pan.x!==M.pan.x||C.pan.y!==M.pan.y;B||x&&!m||(c.motionBlurPxRatio=1),u&&(T=u),D*=d,T.x*=d,T.y*=d;var N={drag:{nodes:[],edges:[],eles:[]},nondrag:{nodes:[],edges:[],eles:[]}};if(f||(c.textureDrawLastFrame=!1),f){c.textureDrawLastFrame=!0;var I;if(!c.textureCache){c.textureCache={},I=c.textureCache.bb=h.elements().boundingBox(),c.textureCache.texture=c.data.bufferCanvases[t.TEXTURE_BUFFER];var O=c.data.bufferContexts[t.TEXTURE_BUFFER];O.setTransform(1,0,0,1,0,0),O.clearRect(0,0,c.canvasWidth*c.textureMult,c.canvasHeight*c.textureMult),c.redraw({forcedContext:O,drawOnlyNodeLayer:!0,forcedPxRatio:d*c.textureMult});var C=c.textureCache.viewport={zoom:h.zoom(),pan:h.pan(),width:c.canvasWidth,height:c.canvasHeight};C.mpan={x:(0-C.pan.x)/C.zoom,y:(0-C.pan.y)/C.zoom}}v[r.DRAG]=!1,v[r.NODE]=!1;var z=p.contexts[r.NODE],L=c.textureCache.texture,C=c.textureCache.viewport;I=c.textureCache.bb,z.setTransform(1,0,0,1,0,0),g?i(z,0,0,C.width,C.height):z.clearRect(0,0,C.width,C.height);var R=E[\"outside-texture-bg-color\"].value,V=E[\"outside-texture-bg-opacity\"].value;c.fillStyle(z,R[0],R[1],R[2],V),z.fillRect(0,0,C.width,C.height);var S=h.zoom();n(z,!1),z.clearRect(C.mpan.x,C.mpan.y,C.width/C.zoom/d,C.height/C.zoom/d),z.drawImage(L,C.mpan.x,C.mpan.y,C.width/C.zoom/d,C.height/C.zoom/d)}else c.textureOnViewport&&!a&&(c.textureCache=null);var A=c.pinching||c.hoverData.dragging||c.swipePanning||c.data.wheelZooming||c.hoverData.draggingEles,X=c.hideEdgesOnViewport&&A,F=c.hideLabelsOnViewport&&A;if(v[r.DRAG]||v[r.NODE]||o||s){X||c.findEdgeControlPoints(_);for(var Y=c.getCachedZSortedEles(),q=h.extent(),j=0;j<Y.length;j++){var $,W=Y[j],I=a?null:W.boundingBox(),H=a?!0:e.math.boundingBoxesIntersect(q,I);H&&($=W._private.rscratch.inDragLayer?N.drag:N.nondrag,$.eles.push(W))}}var Z=[];if(Z[r.NODE]=!v[r.NODE]&&g&&!c.clearedForMotionBlur[r.NODE]||c.clearingMotionBlur,Z[r.NODE]&&(c.clearedForMotionBlur[r.NODE]=!0),Z[r.DRAG]=!v[r.DRAG]&&g&&!c.clearedForMotionBlur[r.DRAG]||c.clearingMotionBlur,Z[r.DRAG]&&(c.clearedForMotionBlur[r.DRAG]=!0),v[r.NODE]||o||s||Z[r.NODE]){var U=g&&!Z[r.NODE]&&1!==y,z=a||(U?c.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE]:p.contexts[r.NODE]),G=g&&!U?\"motionBlur\":void 0;n(z,G),b(N.nondrag,z),o||g||(v[r.NODE]=!1)}if(!s&&(v[r.DRAG]||o||Z[r.DRAG])){var U=g&&!Z[r.DRAG]&&1!==y,z=a||(U?c.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG]:p.contexts[r.DRAG]);n(z,g&&!U?\"motionBlur\":void 0),b(N.drag,z),o||g||(v[r.DRAG]=!1)}if(c.showFps||!s&&v[r.SELECT_BOX]&&!o){var z=a||p.contexts[r.SELECT_BOX];if(n(z),1==p.select[4]&&(c.hoverData.selecting||c.touchData.selecting)){var S=p.cy.zoom(),K=E[\"selection-box-border-width\"].value/S;z.lineWidth=K,z.fillStyle=\"rgba(\"+E[\"selection-box-color\"].value[0]+\",\"+E[\"selection-box-color\"].value[1]+\",\"+E[\"selection-box-color\"].value[2]+\",\"+E[\"selection-box-opacity\"].value+\")\",z.fillRect(p.select[0],p.select[1],p.select[2]-p.select[0],p.select[3]-p.select[1]),K>0&&(z.strokeStyle=\"rgba(\"+E[\"selection-box-border-color\"].value[0]+\",\"+E[\"selection-box-border-color\"].value[1]+\",\"+E[\"selection-box-border-color\"].value[2]+\",\"+E[\"selection-box-opacity\"].value+\")\",z.strokeRect(p.select[0],p.select[1],p.select[2]-p.select[0],p.select[3]-p.select[1]))}if(p.bgActivePosistion&&!c.hoverData.selecting){var S=p.cy.zoom(),J=p.bgActivePosistion;z.fillStyle=\"rgba(\"+E[\"active-bg-color\"].value[0]+\",\"+E[\"active-bg-color\"].value[1]+\",\"+E[\"active-bg-color\"].value[2]+\",\"+E[\"active-bg-opacity\"].value+\")\",z.beginPath(),z.arc(J.x,J.y,E[\"active-bg-size\"].pxValue/S,0,2*Math.PI),z.fill()}var Q=c.averageRedrawTime;if(c.showFps&&Q){Q=Math.round(Q);var ee=Math.round(1e3/Q);z.setTransform(1,0,0,1,0,0),z.fillStyle=\"rgba(255, 0, 0, 0.75)\",z.strokeStyle=\"rgba(255, 0, 0, 0.75)\",z.lineWidth=1,z.fillText(\"1 frame = \"+Q+\" ms = \"+ee+\" fps\",0,20);var te=60;z.strokeRect(0,30,250,20),z.fillRect(0,30,250*Math.min(ee/te,1),20)}o||(v[r.SELECT_BOX]=!1)}if(g&&1!==y){var re=p.contexts[r.NODE],ie=c.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE],ne=p.contexts[r.DRAG],ae=c.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG],oe=function(e,t,r){e.setTransform(1,0,0,1,0,0),r||!w?e.clearRect(0,0,c.canvasWidth,c.canvasHeight):i(e,0,0,c.canvasWidth,c.canvasHeight);var n=y;e.drawImage(t,0,0,c.canvasWidth*n,c.canvasHeight*n,0,0,c.canvasWidth,c.canvasHeight)};(v[r.NODE]||Z[r.NODE])&&(oe(re,ie,Z[r.NODE]),v[r.NODE]=!1),(v[r.DRAG]||Z[r.DRAG])&&(oe(ne,ae,Z[r.DRAG]),v[r.DRAG]=!1)}var se=Date.now();void 0===c.averageRedrawTime&&(c.averageRedrawTime=se-P),void 0===c.redrawCount&&(c.redrawCount=0),c.redrawCount++,void 0===c.redrawTotalTime&&(c.redrawTotalTime=0),c.redrawTotalTime+=se-P,c.lastRedrawTime=se-P,c.averageRedrawTime=c.averageRedrawTime/2+(se-P)/2,c.currentlyDrawing=!1,c.prevViewport=C,c.clearingMotionBlur&&(c.clearingMotionBlur=!1,c.motionBlurCleared=!0,c.motionBlur=!0),g&&(c.motionBlurTimeout=setTimeout(function(){c.motionBlurTimeout=null,c.clearedForMotionBlur[r.NODE]=!1,c.clearedForMotionBlur[r.DRAG]=!1,c.motionBlur=!1,c.clearingMotionBlur=!f,c.mbFrames=0,v[r.NODE]=!0,v[r.DRAG]=!0,c.redraw()},t.motionBlurDelay)),c.drawingImage=!1}i=i||{};var a=i.forcedContext,o=i.drawAllLayers,s=i.drawOnlyNodeLayer,l=i.forcedZoom,u=i.forcedPan,c=this,d=void 0===i.forcedPxRatio?this.getPixelRatio():i.forcedPxRatio,h=c.data.cy,p=c.data,v=p.canvasNeedsRedraw,f=c.textureOnViewport&&!a&&(c.pinching||c.hoverData.dragging||c.swipePanning||c.data.wheelZooming),g=void 0!==i.motionBlur?i.motionBlur:c.motionBlur,y=c.motionBlurPxRatio,m=h.hasCompoundNodes(),x=c.hoverData.draggingEles,b=c.hoverData.selecting||c.touchData.selecting?!0:!1;g=g&&!a&&c.motionBlurEnabled&&!b;var w=g;!a&&c.motionBlurTimeout&&clearTimeout(c.motionBlurTimeout),!a&&this.redrawTimeout&&clearTimeout(this.redrawTimeout),this.redrawTimeout=null,void 0===this.averageRedrawTime&&(this.averageRedrawTime=0);var _=t.minRedrawLimit,E=t.maxRedrawLimit,S=this.averageRedrawTime;S=_>S?_:S,S=E>S?S:E,void 0===this.lastDrawTime&&(this.lastDrawTime=0);var D=Date.now(),k=D-this.lastDrawTime,T=k>=S;if(!a&&!c.clearingMotionBlur){if(!T||this.currentlyDrawing)return void(this.redrawTimeout=setTimeout(function(){c.redraw()},S));this.lastDrawTime=D,this.currentlyDrawing=!0}g&&(null==c.mbFrames&&(c.mbFrames=0),c.drawingImage||c.mbFrames++,c.mbFrames<3&&(w=!1),c.mbFrames>c.minMbLowQualFrames&&(c.motionBlurPxRatio=c.mbPxRBlurry)),c.clearingMotionBlur&&(c.motionBlurPxRatio=1);var P=Date.now();a?n():e.util.requestAnimationFrame(n),a||c.initrender||(c.initrender=!0,h.trigger(\"initrender\")),a||h.triggerOnRender()}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t.prototype;r.drawPolygonPath=function(e,t,r,i,n,a){var o=i/2,s=n/2;e.beginPath&&e.beginPath(),e.moveTo(t+o*a[0],r+s*a[1]);for(var l=1;l<a.length/2;l++)e.lineTo(t+o*a[2*l],r+s*a[2*l+1]);e.closePath()},r.drawPolygon=function(e,t,r,i,n,a){this.drawPolygonPath(e,t,r,i,n,a),e.fill()},r.drawRoundRectanglePath=function(t,r,i,n,a,o){var s=n/2,l=a/2,u=e.math.getRoundRectangleRadius(n,a);t.beginPath&&t.beginPath(),t.moveTo(r,i-l),t.arcTo(r+s,i-l,r+s,i,u),t.arcTo(r+s,i+l,r,i+l,u),t.arcTo(r-s,i+l,r-s,i,u),t.arcTo(r-s,i-l,r,i-l,u),t.lineTo(r,i-l),t.closePath()},r.drawRoundRectangle=function(e,t,r,i,n,a){this.drawRoundRectanglePath(e,t,r,i,n,a),e.fill()}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t.prototype;r.createBuffer=function(e,t){var r=document.createElement(\"canvas\");return r.width=e,r.height=t,[r,r.getContext(\"2d\")]},r.bufferCanvasImage=function(t){var r=this.data,i=r.cy,n=i.elements().boundingBox(),a=t.full?Math.ceil(n.w):this.data.container.clientWidth,o=t.full?Math.ceil(n.h):this.data.container.clientHeight,s=1;if(void 0!==t.scale)a*=t.scale,o*=t.scale,s=t.scale;else if(e.is.number(t.maxWidth)||e.is.number(t.maxHeight)){var l=1/0,u=1/0;e.is.number(t.maxWidth)&&(l=s*t.maxWidth/a),e.is.number(t.maxHeight)&&(u=s*t.maxHeight/o),s=Math.min(l,u),a*=s,o*=s}var c=document.createElement(\"canvas\");c.width=a,c.height=o,c.style.width=a+\"px\",c.style.height=o+\"px\";var d=c.getContext(\"2d\");if(a>0&&o>0)if(d.clearRect(0,0,a,o),t.bg&&(d.fillStyle=t.bg,d.rect(0,0,a,o),d.fill()),d.globalCompositeOperation=\"source-over\",t.full)this.redraw({forcedContext:d,drawAllLayers:!0,forcedZoom:s,forcedPan:{x:-n.x1*s,y:-n.y1*s},forcedPxRatio:1});else{var h=i.pan(),p={x:h.x*s,y:h.y*s},v=i.zoom()*s;this.redraw({forcedContext:d,drawAllLayers:!0,forcedZoom:v,forcedPan:p,forcedPxRatio:1})}return c},r.png=function(e){return this.bufferCanvasImage(e).toDataURL(\"image/png\")},r.jpg=function(e){return this.bufferCanvasImage(e).toDataURL(\"image/jpeg\")}}(cytoscape),function(e){\"use strict\";var t=e(\"renderer\",\"canvas\"),r=t,i=r.prototype;i.registerBinding=function(e,t,r,i){this.bindings.push({target:e,event:t,handler:r,useCapture:i}),e.addEventListener(t,r,i)},i.nodeIsDraggable=function(e){return 0!==e._private.style.opacity.value&&\"visible\"==e._private.style.visibility.value&&\"element\"==e._private.style.display.value&&!e.locked()&&e.grabbable()?!0:!1},i.load=function(){var t=this,i=function(e){var r;if(e.addToList&&t.data.cy.hasCompoundNodes()){if(!e.addToList.hasId){e.addToList.hasId={};for(var i=0;i<e.addToList.length;i++){var n=e.addToList[i];e.addToList.hasId[n.id()]=!0}}r=e.addToList.hasId}return r||{}},n=function(e,t){if(e._private.cy.hasCompoundNodes()&&(null!=t.inDragLayer||null!=t.addToList))for(var r=i(t),n=e.descendants(),a=0;a<n.size();a++){var o=n[a],s=o._private;t.inDragLayer&&(s.rscratch.inDragLayer=!0),t.addToList&&!r[o.id()]&&(t.addToList.push(o),r[o.id()]=!0,s.grabbed=!0);for(var l=s.edges,u=0;t.inDragLayer&&u<l.length;u++)l[u]._private.rscratch.inDragLayer=!0}},a=function(e,t){var r=e._private,a=i(t);t.inDragLayer&&(r.rscratch.inDragLayer=!0),t.addToList&&!a[e.id()]&&(t.addToList.push(e),a[e.id()]=!0,r.grabbed=!0);for(var o=r.edges,l=0;t.inDragLayer&&l<o.length;l++)o[l]._private.rscratch.inDragLayer=!0;n(e,t),s(e,{inDragLayer:t.inDragLayer})},o=function(e){if(e)for(var t=0;t<e.length;t++){var r=e[t]._private;if(\"nodes\"===r.group){r.rscratch.inDragLayer=!1,r.grabbed=!1;for(var i=r.edges,n=0;n<i.length;n++)i[n]._private.rscratch.inDragLayer=!1;s(e[t],{inDragLayer:!1})}else\"edges\"===r.group&&(r.rscratch.inDragLayer=!1)}},s=function(e,t){if(null!=t.inDragLayer||null!=t.addToList){var r=e;if(e._private.cy.hasCompoundNodes()){for(;r.parent().nonempty();)r=r.parent()[0];if(r!=e){for(var n=r.descendants().merge(r).unmerge(e).unmerge(e.descendants()),a=n.connectedEdges(),o=i(t),s=0;s<n.size();s++)void 0!==t.inDragLayer&&(n[s]._private.rscratch.inDragLayer=t.inDragLayer),t.addToList&&!o[n[s].id()]&&(t.addToList.push(n[s]),o[n[s].id()]=!0,n[s]._private.grabbed=!0);for(var l=0;void 0!==t.inDragLayer&&l<a.length;l++)a[l]._private.rscratch.inDragLayer=t.inDragLayer}}}};\"undefined\"!=typeof MutationObserver?(t.removeObserver=new MutationObserver(function(e){for(var r=0;r<e.length;r++){var i=e[r],n=i.removedNodes;if(n)for(var a=0;a<n.length;a++){var o=n[a];if(o===t.data.container){t.destroy();break}}}}),t.removeObserver.observe(t.data.container.parentNode,{childList:!0})):t.registerBinding(t.data.container,\"DOMNodeRemoved\",function(e){t.destroy()}),t.registerBinding(window,\"resize\",e.util.debounce(function(e){t.invalidateContainerClientCoordsCache(),t.matchCanvasSize(t.data.container),t.data.canvasNeedsRedraw[r.NODE]=!0,t.redraw()},100));for(var l=function(e){t.registerBinding(e,\"scroll\",function(e){t.invalidateContainerClientCoordsCache()})},u=t.data.cy.container();l(u),u.parentNode;)u=u.parentNode;t.registerBinding(t.data.container,\"contextmenu\",function(e){e.preventDefault()});var c=function(){return 0!==t.data.select[4]};t.registerBinding(t.data.container,\"mousedown\",function(i){i.preventDefault(),t.hoverData.capture=!0,t.hoverData.which=i.which;var n=t.data.cy,o=t.projectIntoViewport(i.clientX,i.clientY),s=t.data.select,l=t.findNearestElement(o[0],o[1],!0,!1),u=t.dragData.possibleDragElements;t.hoverData.mdownPos=o;var c=t.data.canvasNeedsRedraw,d=function(){t.hoverData.tapholdCancelled=!1,clearTimeout(t.hoverData.tapholdTimeout),t.hoverData.tapholdTimeout=setTimeout(function(){if(!t.hoverData.tapholdCancelled){var r=t.hoverData.down;r?r.trigger(new e.Event(i,{type:\"taphold\",cyPosition:{x:o[0],y:o[1]}})):n.trigger(new e.Event(i,{type:\"taphold\",cyPosition:{x:o[0],y:o[1]}}))}},t.tapholdDuration)};if(3==i.which){t.hoverData.cxtStarted=!0;var h=new e.Event(i,{type:\"cxttapstart\",cyPosition:{x:o[0],y:o[1]}});l?(l.activate(),l.trigger(h),t.hoverData.down=l):n.trigger(h),t.hoverData.downTime=(new Date).getTime(),t.hoverData.cxtDragged=!1}else if(1==i.which){if(l&&l.activate(),null!=l){if(t.nodeIsDraggable(l)){var p=new e.Event(i,{type:\"grab\",cyPosition:{x:o[0],y:o[1]}});if(l.isNode()&&!l.selected())u=t.dragData.possibleDragElements=[],a(l,{addToList:u}),l.trigger(p);else if(l.isNode()&&l.selected()){u=t.dragData.possibleDragElements=[];for(var v=n.$(function(){return this.isNode()&&this.selected()}),f=0;f<v.length;f++)t.nodeIsDraggable(v[f])&&a(v[f],{addToList:u});l.trigger(p)}c[r.NODE]=!0,c[r.DRAG]=!0}l.trigger(new e.Event(i,{type:\"mousedown\",cyPosition:{x:o[0],y:o[1]}})).trigger(new e.Event(i,{type:\"tapstart\",cyPosition:{x:o[0],y:o[1]}})).trigger(new e.Event(i,{type:\"vmousedown\",cyPosition:{x:o[0],y:o[1]}}))}else null==l&&n.trigger(new e.Event(i,{type:\"mousedown\",cyPosition:{x:o[0],y:o[1]}})).trigger(new e.Event(i,{type:\"tapstart\",cyPosition:{x:o[0],y:o[1]}})).trigger(new e.Event(i,{type:\"vmousedown\",cyPosition:{x:o[0],y:o[1]}}));if(t.hoverData.down=l,t.hoverData.downTime=(new Date).getTime(),null==l||l.isEdge()){s[4]=1;var g=Math.max(0,r.panOrBoxSelectDelay-(+new Date-t.hoverData.downTime));clearTimeout(t.bgActiveTimeout),n.boxSelectionEnabled()||l&&l.isEdge()?t.bgActiveTimeout=setTimeout(function(){l&&l.unactivate(),t.data.bgActivePosistion={x:o[0],y:o[1]},t.hoverData.dragging=!0,c[r.SELECT_BOX]=!0,t.redraw()},g):(t.data.bgActivePosistion={x:o[0],y:o[1]},c[r.SELECT_BOX]=!0,t.redraw())}d()}s[0]=s[2]=o[0],s[1]=s[3]=o[1]},!1),t.registerBinding(window,\"mousemove\",e.util.throttle(function(i){var n=!1,o=t.hoverData.capture;if(!o){var s=t.findContainerClientCoords();if(!(i.clientX>s[0]&&i.clientX<s[0]+t.canvasWidth&&i.clientY>s[1]&&i.clientY<s[1]+t.canvasHeight))return;for(var l=t.data.container,u=i.target,c=u.parentNode,d=!1;c;){if(c===l){d=!0;break}c=c.parentNode}if(!d)return}var h=t.data.cy,p=h.zoom(),v=t.projectIntoViewport(i.clientX,i.clientY),f=t.data.select,g=t.data.canvasNeedsRedraw,y=null;t.hoverData.draggingEles||(y=t.findNearestElement(v[0],v[1],!0,!1));var m=t.hoverData.last,x=t.hoverData.down,b=[v[0]-f[2],v[1]-f[3]],w=t.dragData.possibleDragElements,_=f[2]-f[0],E=_*_,S=f[3]-f[1],D=S*S,k=E+D,T=k*p*p;t.hoverData.tapholdCancelled=!0;var P=function(){var e=t.hoverData.dragDelta=t.hoverData.dragDelta||[];0===e.length?(e.push(b[0]),e.push(b[1])):(e[0]+=b[0],e[1]+=b[1])};if(n=!0,null!=y?y.trigger(new e.Event(i,{type:\"mousemove\",cyPosition:{x:v[0],y:v[1]}})).trigger(new e.Event(i,{type:\"vmousemove\",cyPosition:{x:v[0],y:v[1]}})).trigger(new e.Event(i,{type:\"tapdrag\",cyPosition:{x:v[0],y:v[1]}})):null==y&&h.trigger(new e.Event(i,{type:\"mousemove\",cyPosition:{x:v[0],y:v[1]}})).trigger(new e.Event(i,{type:\"vmousemove\",cyPosition:{x:v[0],y:v[1]}})).trigger(new e.Event(i,{type:\"tapdrag\",cyPosition:{x:v[0],y:v[1]}})),3===t.hoverData.which){var C=new e.Event(i,{type:\"cxtdrag\",cyPosition:{x:v[0],y:v[1]}});x?x.trigger(C):h.trigger(C),t.hoverData.cxtDragged=!0,t.hoverData.cxtOver&&y===t.hoverData.cxtOver||(t.hoverData.cxtOver&&t.hoverData.cxtOver.trigger(new e.Event(i,{type:\"cxtdragout\",cyPosition:{x:v[0],y:v[1]}})),t.hoverData.cxtOver=y,y&&y.trigger(new e.Event(i,{type:\"cxtdragover\",cyPosition:{x:v[0],y:v[1]}})))}else if(t.hoverData.dragging){if(n=!0,h.panningEnabled()&&h.userPanningEnabled()){var M;if(t.hoverData.justStartedPan){var B=t.hoverData.mdownPos;M={x:(v[0]-B[0])*p,y:(v[1]-B[1])*p},t.hoverData.justStartedPan=!1}else M={x:b[0]*p,y:b[1]*p};h.panBy(M),t.hoverData.dragged=!0}v=t.projectIntoViewport(i.clientX,i.clientY)}else if(1==f[4]&&(null==x||x.isEdge())&&(!h.boxSelectionEnabled()||+new Date-t.hoverData.downTime>=r.panOrBoxSelectDelay)&&!t.hoverData.selecting&&T>=t.desktopTapThreshold2&&h.panningEnabled()&&h.userPanningEnabled())t.hoverData.dragging=!0,t.hoverData.selecting=!1,t.hoverData.justStartedPan=!0,f[4]=0;else{if(h.boxSelectionEnabled()&&!t.hoverData.dragging&&Math.pow(f[2]-f[0],2)+Math.pow(f[3]-f[1],2)>7&&f[4]&&(clearTimeout(t.bgActiveTimeout),t.data.bgActivePosistion=void 0,t.hoverData.selecting=!0,g[r.SELECT_BOX]=!0,t.redraw()),x&&x.isEdge()&&x.active()&&x.unactivate(),y!=m&&(m&&(m.trigger(new e.Event(i,{type:\"mouseout\",cyPosition:{x:v[0],y:v[1]}})),m.trigger(new e.Event(i,{type:\"tapdragout\",cyPosition:{x:v[0],y:v[1]}}))),y&&(y.trigger(new e.Event(i,{type:\"mouseover\",cyPosition:{x:v[0],y:v[1]}})),y.trigger(new e.Event(i,{type:\"tapdragover\",cyPosition:{x:v[0],y:v[1]}}))),t.hoverData.last=y),x&&x.isNode()&&t.nodeIsDraggable(x))if(T>=t.desktopTapThreshold2){var N=!t.dragData.didDrag;N&&(g[r.NODE]=!0),t.dragData.didDrag=!0;for(var I=[],O=0;O<w.length;O++){var z=w[O];if(t.hoverData.draggingEles||a(z,{inDragLayer:!0}),z.isNode()&&t.nodeIsDraggable(z)&&z.grabbed()){var L=z._private.position;if(I.push(z),e.is.number(b[0])&&e.is.number(b[1])&&(L.x+=b[0],L.y+=b[1],N)){var R=t.hoverData.dragDelta;e.is.number(R[0])&&e.is.number(R[1])&&(L.x+=R[0],L.y+=R[1])}}}t.hoverData.draggingEles=!0;var V=new e.Collection(h,I);V.updateCompoundBounds(),V.trigger(\"position drag\"),g[r.DRAG]=!0,t.redraw()}else P();n=!0}return f[2]=v[0],f[3]=v[1],n?(i.stopPropagation&&i.stopPropagation(),i.preventDefault&&i.preventDefault(),!1):void 0},1e3/30,{trailing:!0}),!1),t.registerBinding(window,\"mouseup\",function(i){var n=t.hoverData.capture;if(n){t.hoverData.capture=!1;var a=t.data.cy,s=t.projectIntoViewport(i.clientX,i.clientY),l=t.data.select,u=t.findNearestElement(s[0],s[1],!0,!1),c=t.dragData.possibleDragElements,d=t.hoverData.down,h=i.shiftKey,p=t.data.canvasNeedsRedraw;if(t.data.bgActivePosistion&&(p[r.SELECT_BOX]=!0,t.redraw()),t.hoverData.tapholdCancelled=!0,t.data.bgActivePosistion=void 0,clearTimeout(t.bgActiveTimeout),d&&d.unactivate(),3===t.hoverData.which){var v=new e.Event(i,{type:\"cxttapend\",cyPosition:{x:s[0],y:s[1]}});if(d?d.trigger(v):a.trigger(v),!t.hoverData.cxtDragged){var f=new e.Event(i,{type:\"cxttap\",cyPosition:{x:s[0],y:s[1]}});d?d.trigger(f):a.trigger(f)}t.hoverData.cxtDragged=!1,t.hoverData.which=null}else{if(null!=d||t.dragData.didDrag||t.hoverData.dragged||(a.$(function(){return this.selected()}).unselect(),c.length>0&&(p[r.NODE]=!0),t.dragData.possibleDragElements=c=[]),null!=u?u.trigger(new e.Event(i,{type:\"mouseup\",cyPosition:{x:s[0],y:s[1]}})).trigger(new e.Event(i,{type:\"tapend\",cyPosition:{x:s[0],y:s[1]}})).trigger(new e.Event(i,{type:\"vmouseup\",cyPosition:{x:s[0],y:s[1]}})):null==u&&a.trigger(new e.Event(i,{type:\"mouseup\",cyPosition:{x:s[0],y:s[1]}})).trigger(new e.Event(i,{type:\"tapend\",cyPosition:{x:s[0],y:s[1]}})).trigger(new e.Event(i,{type:\"vmouseup\",cyPosition:{x:s[0],y:s[1]}})),t.dragData.didDrag||t.hoverData.dragged||(null!=u?u.trigger(new e.Event(i,{type:\"click\",cyPosition:{x:s[0],y:s[1]}})).trigger(new e.Event(i,{type:\"tap\",cyPosition:{x:s[0],y:s[1]}})).trigger(new e.Event(i,{type:\"vclick\",cyPosition:{x:s[0],y:s[1]}})):null==u&&a.trigger(new e.Event(i,{type:\"click\",cyPosition:{x:s[0],y:s[1]}})).trigger(new e.Event(i,{type:\"tap\",cyPosition:{x:s[0],y:s[1]}})).trigger(new e.Event(i,{type:\"vclick\",cyPosition:{x:s[0],y:s[1]}}))),u!=d||t.dragData.didDrag||null!=u&&u._private.selectable&&(t.hoverData.dragging||(\"additive\"===a.selectionType()||h?u.selected()?u.unselect():u.select():h||(a.$(\":selected\").unmerge(u).unselect(),u.select())),p[r.NODE]=!0),t.hoverData.selecting&&a.boxSelectionEnabled()&&Math.pow(l[2]-l[0],2)+Math.pow(l[3]-l[1],2)>7&&l[4]){var g=[],y=t.getAllInBox(l[0],l[1],l[2],l[3]);p[r.SELECT_BOX]=!0,y.length>0&&(p[r.NODE]=!0);for(var m=0;m<y.length;m++)y[m]._private.selectable&&g.push(y[m]);var x=new e.Collection(a,g);\"additive\"===a.selectionType()?x.select():(h||a.$(\":selected\").unmerge(x).unselect(),x.select()),t.redraw()}t.hoverData.dragging&&(t.hoverData.dragging=!1,p[r.SELECT_BOX]=!0,p[r.NODE]=!0,t.redraw()),l[4]||(p[r.DRAG]=!0,p[r.NODE]=!0,o(c),d&&d.trigger(\"free\"))}l[4]=0,t.hoverData.down=null,t.hoverData.cxtStarted=!1,t.hoverData.draggingEles=!1,t.hoverData.selecting=!1,t.dragData.didDrag=!1,t.hoverData.dragged=!1,t.hoverData.dragDelta=[]}},!1);var d=function(e){if(!t.scrollingPage){var i=t.data.cy,n=t.projectIntoViewport(e.clientX,e.clientY),a=[n[0]*i.zoom()+i.pan().x,n[1]*i.zoom()+i.pan().y];if(t.hoverData.draggingEles||t.hoverData.dragging||t.hoverData.cxtStarted||c())return void e.preventDefault();if(i.panningEnabled()&&i.userPanningEnabled()&&i.zoomingEnabled()&&i.userZoomingEnabled()){e.preventDefault(),t.data.wheelZooming=!0,clearTimeout(t.data.wheelTimeout),t.data.wheelTimeout=setTimeout(function(){\nt.data.wheelZooming=!1,t.data.canvasNeedsRedraw[r.NODE]=!0,t.redraw()},150);var o=e.deltaY/-250||e.wheelDeltaY/1e3||e.wheelDelta/1e3;o*=t.wheelSensitivity;var s=1===e.deltaMode;s&&(o*=33),i.zoom({level:i.zoom()*Math.pow(10,o),renderedPosition:{x:a[0],y:a[1]}})}}};t.registerBinding(t.data.container,\"wheel\",d,!0),t.registerBinding(window,\"scroll\",function(e){t.scrollingPage=!0,clearTimeout(t.scrollingPageTimeout),t.scrollingPageTimeout=setTimeout(function(){t.scrollingPage=!1},250)},!0),t.registerBinding(t.data.container,\"mouseout\",function(r){var i=t.projectIntoViewport(r.clientX,r.clientY);t.data.cy.trigger(new e.Event(r,{type:\"mouseout\",cyPosition:{x:i[0],y:i[1]}}))},!1),t.registerBinding(t.data.container,\"mouseover\",function(r){var i=t.projectIntoViewport(r.clientX,r.clientY);t.data.cy.trigger(new e.Event(r,{type:\"mouseover\",cyPosition:{x:i[0],y:i[1]}}))},!1);var h,p,v,f,g,y,m,x,b,w,_,E,S,D=function(e,t,r,i){return Math.sqrt((r-e)*(r-e)+(i-t)*(i-t))},k=function(e,t,r,i){return(r-e)*(r-e)+(i-t)*(i-t)};t.registerBinding(t.data.container,\"touchstart\",function(i){clearTimeout(this.threeFingerSelectTimeout),i.target!==t.data.link&&i.preventDefault(),t.touchData.capture=!0,t.data.bgActivePosistion=void 0;var n=t.data.cy,o=t.getCachedNodes(),s=t.getCachedEdges(),l=t.touchData.now,u=t.touchData.earlier,c=t.data.canvasNeedsRedraw;if(i.touches[0]){var d=t.projectIntoViewport(i.touches[0].clientX,i.touches[0].clientY);l[0]=d[0],l[1]=d[1]}if(i.touches[1]){var d=t.projectIntoViewport(i.touches[1].clientX,i.touches[1].clientY);l[2]=d[0],l[3]=d[1]}if(i.touches[2]){var d=t.projectIntoViewport(i.touches[2].clientX,i.touches[2].clientY);l[4]=d[0],l[5]=d[1]}if(i.touches[1]){var T=function(e){for(var t=0;t<e.length;t++)e[t]._private.grabbed=!1,e[t]._private.rscratch.inDragLayer=!1,e[t].active()&&e[t].unactivate()};T(o),T(s);var P=t.findContainerClientCoords();b=P[0],w=P[1],_=P[2],E=P[3],h=i.touches[0].clientX-b,p=i.touches[0].clientY-w,v=i.touches[1].clientX-b,f=i.touches[1].clientY-w,S=h>=0&&_>=h&&v>=0&&_>=v&&p>=0&&E>=p&&f>=0&&E>=f;var C=n.pan(),M=n.zoom();g=D(h,p,v,f),y=k(h,p,v,f),m=[(h+v)/2,(p+f)/2],x=[(m[0]-C.x)/M,(m[1]-C.y)/M];var B=200,N=B*B;if(N>y&&!i.touches[2]){var I=t.findNearestElement(l[0],l[1],!0,!0),O=t.findNearestElement(l[2],l[3],!0,!0);return I&&I.isNode()?(I.activate().trigger(new e.Event(i,{type:\"cxttapstart\",cyPosition:{x:l[0],y:l[1]}})),t.touchData.start=I):O&&O.isNode()?(O.activate().trigger(new e.Event(i,{type:\"cxttapstart\",cyPosition:{x:l[0],y:l[1]}})),t.touchData.start=O):(n.trigger(new e.Event(i,{type:\"cxttapstart\",cyPosition:{x:l[0],y:l[1]}})),t.touchData.start=null),t.touchData.start&&(t.touchData.start._private.grabbed=!1),t.touchData.cxt=!0,t.touchData.cxtDragged=!1,t.data.bgActivePosistion=void 0,void t.redraw()}}if(i.touches[2]);else if(i.touches[1]);else if(i.touches[0]){var z=t.findNearestElement(l[0],l[1],!0,!0);if(null!=z){if(z.activate(),t.touchData.start=z,z.isNode()&&t.nodeIsDraggable(z)){var L=t.dragData.touchDragEles=[];if(c[r.NODE]=!0,c[r.DRAG]=!0,z.selected())for(var R=n.$(function(){return this.isNode()&&this.selected()}),V=0;V<R.length;V++){var A=R[V];t.nodeIsDraggable(A)&&a(A,{addToList:L})}else a(z,{addToList:L});z.trigger(new e.Event(i,{type:\"grab\",cyPosition:{x:l[0],y:l[1]}}))}z.trigger(new e.Event(i,{type:\"touchstart\",cyPosition:{x:l[0],y:l[1]}})).trigger(new e.Event(i,{type:\"tapstart\",cyPosition:{x:l[0],y:l[1]}})).trigger(new e.Event(i,{type:\"vmousdown\",cyPosition:{x:l[0],y:l[1]}}))}null==z&&(n.trigger(new e.Event(i,{type:\"touchstart\",cyPosition:{x:l[0],y:l[1]}})).trigger(new e.Event(i,{type:\"tapstart\",cyPosition:{x:l[0],y:l[1]}})).trigger(new e.Event(i,{type:\"vmousedown\",cyPosition:{x:l[0],y:l[1]}})),t.data.bgActivePosistion={x:d[0],y:d[1]},c[r.SELECT_BOX]=!0,t.redraw());for(var X=0;X<l.length;X++)u[X]=l[X],t.touchData.startPosition[X]=l[X];t.touchData.singleTouchMoved=!1,t.touchData.singleTouchStartTime=+new Date,clearTimeout(t.touchData.tapholdTimeout),t.touchData.tapholdTimeout=setTimeout(function(){t.touchData.singleTouchMoved!==!1||t.pinching||(t.touchData.start?t.touchData.start.trigger(new e.Event(i,{type:\"taphold\",cyPosition:{x:l[0],y:l[1]}})):(t.data.cy.trigger(new e.Event(i,{type:\"taphold\",cyPosition:{x:l[0],y:l[1]}})),n.$(\":selected\").unselect()))},t.tapholdDuration)}},!1),t.registerBinding(window,\"touchmove\",e.util.throttle(function(i){var n=t.data.select,o=t.touchData.capture;o&&i.preventDefault();var s=t.data.cy,l=t.touchData.now,u=t.touchData.earlier,c=s.zoom(),d=t.data.canvasNeedsRedraw;if(i.touches[0]){var m=t.projectIntoViewport(i.touches[0].clientX,i.touches[0].clientY);l[0]=m[0],l[1]=m[1]}if(i.touches[1]){var m=t.projectIntoViewport(i.touches[1].clientX,i.touches[1].clientY);l[2]=m[0],l[3]=m[1]}if(i.touches[2]){var m=t.projectIntoViewport(i.touches[2].clientX,i.touches[2].clientY);l[4]=m[0],l[5]=m[1]}for(var _=[],E=0;E<l.length;E++)_[E]=l[E]-u[E];var T=t.touchData.startPosition,P=l[0]-T[0],C=P*P,M=l[1]-T[1],B=M*M,N=C+B,I=N*c*c;if(o&&t.touchData.cxt){var O=i.touches[0].clientX-b,z=i.touches[0].clientY-w,L=i.touches[1].clientX-b,R=i.touches[1].clientY-w,V=k(O,z,L,R),A=V/y,X=150,F=X*X,Y=1.5,q=Y*Y;if(A>=q||V>=F){t.touchData.cxt=!1,t.touchData.start&&(t.touchData.start.unactivate(),t.touchData.start=null),t.data.bgActivePosistion=void 0,d[r.SELECT_BOX]=!0;var j=new e.Event(i,{type:\"cxttapend\",cyPosition:{x:l[0],y:l[1]}});t.touchData.start?t.touchData.start.trigger(j):s.trigger(j)}}if(o&&t.touchData.cxt){var j=new e.Event(i,{type:\"cxtdrag\",cyPosition:{x:l[0],y:l[1]}});t.data.bgActivePosistion=void 0,d[r.SELECT_BOX]=!0,t.touchData.start?t.touchData.start.trigger(j):s.trigger(j),t.touchData.start&&(t.touchData.start._private.grabbed=!1),t.touchData.cxtDragged=!0;var $=t.findNearestElement(l[0],l[1],!0,!0);t.touchData.cxtOver&&$===t.touchData.cxtOver||(t.touchData.cxtOver&&t.touchData.cxtOver.trigger(new e.Event(i,{type:\"cxtdragout\",cyPosition:{x:l[0],y:l[1]}})),t.touchData.cxtOver=$,$&&$.trigger(new e.Event(i,{type:\"cxtdragover\",cyPosition:{x:l[0],y:l[1]}})))}else if(o&&i.touches[2]&&s.boxSelectionEnabled())t.data.bgActivePosistion=void 0,clearTimeout(this.threeFingerSelectTimeout),this.lastThreeTouch=+new Date,t.touchData.selecting=!0,d[r.SELECT_BOX]=!0,n&&0!==n.length&&void 0!==n[0]?(n[2]=(l[0]+l[2]+l[4])/3,n[3]=(l[1]+l[3]+l[5])/3):(n[0]=(l[0]+l[2]+l[4])/3,n[1]=(l[1]+l[3]+l[5])/3,n[2]=(l[0]+l[2]+l[4])/3+1,n[3]=(l[1]+l[3]+l[5])/3+1),n[4]=1,t.touchData.selecting=!0,t.redraw();else if(o&&i.touches[1]&&s.zoomingEnabled()&&s.panningEnabled()&&s.userZoomingEnabled()&&s.userPanningEnabled()){t.data.bgActivePosistion=void 0,d[r.SELECT_BOX]=!0;var W=t.dragData.touchDragEles;if(W){d[r.DRAG]=!0;for(var H=0;H<W.length;H++)W[H]._private.grabbed=!1,W[H]._private.rscratch.inDragLayer=!1}var O=i.touches[0].clientX-b,z=i.touches[0].clientY-w,L=i.touches[1].clientX-b,R=i.touches[1].clientY-w,Z=D(O,z,L,R),U=Z/g;if(1!=U&&S){var G=O-h,K=z-p,J=L-v,Q=R-f,ee=(G+J)/2,te=(K+Q)/2,re=s.zoom(),ie=re*U,ne=s.pan(),ae=x[0]*re+ne.x,oe=x[1]*re+ne.y,se={x:-ie/re*(ae-ne.x-ee)+ae,y:-ie/re*(oe-ne.y-te)+oe};if(t.touchData.start){var W=t.dragData.touchDragEles;if(W)for(var H=0;H<W.length;H++){var le=W[H]._private;le.grabbed=!1,le.rscratch.inDragLayer=!1}var ue=t.touchData.start._private;ue.active=!1,ue.grabbed=!1,ue.rscratch.inDragLayer=!1,d[r.DRAG]=!0,t.touchData.start.trigger(\"free\").trigger(\"unactivate\")}s.viewport({zoom:ie,pan:se,cancelOnFailedZoom:!0}),g=Z,h=O,p=z,v=L,f=R,t.pinching=!0}if(i.touches[0]){var m=t.projectIntoViewport(i.touches[0].clientX,i.touches[0].clientY);l[0]=m[0],l[1]=m[1]}if(i.touches[1]){var m=t.projectIntoViewport(i.touches[1].clientX,i.touches[1].clientY);l[2]=m[0],l[3]=m[1]}if(i.touches[2]){var m=t.projectIntoViewport(i.touches[2].clientX,i.touches[2].clientY);l[4]=m[0],l[5]=m[1]}}else if(i.touches[0]){var ce=t.touchData.start,de=t.touchData.last,$=$||t.findNearestElement(l[0],l[1],!0,!0);if(null!=ce&&\"nodes\"==ce._private.group&&t.nodeIsDraggable(ce))if(I>=t.touchTapThreshold2){for(var W=t.dragData.touchDragEles,he=0;he<W.length;he++){var pe=W[he];if(t.nodeIsDraggable(pe)&&pe.isNode()&&pe.grabbed()){t.dragData.didDrag=!0;var ve=pe._private.position,fe=!t.hoverData.draggingEles;if(e.is.number(_[0])&&e.is.number(_[1])&&(ve.x+=_[0],ve.y+=_[1]),fe){a(pe,{inDragLayer:!0}),d[r.NODE]=!0;var ge=t.touchData.dragDelta;e.is.number(ge[0])&&e.is.number(ge[1])&&(ve.x+=ge[0],ve.y+=ge[1])}}}var ye=new e.Collection(s,pe);ye.updateCompoundBounds(),ye.trigger(\"position drag\"),t.hoverData.draggingEles=!0,d[r.DRAG]=!0,t.touchData.startPosition[0]==u[0]&&t.touchData.startPosition[1]==u[1]&&(d[r.NODE]=!0),t.redraw()}else{var ge=t.touchData.dragDelta=t.touchData.dragDelta||[];0===ge.length?(ge.push(_[0]),ge.push(_[1])):(ge[0]+=_[0],ge[1]+=_[1])}null!=ce&&(ce.trigger(new e.Event(i,{type:\"touchmove\",cyPosition:{x:l[0],y:l[1]}})),ce.trigger(new e.Event(i,{type:\"tapdrag\",cyPosition:{x:l[0],y:l[1]}})),ce.trigger(new e.Event(i,{type:\"vmousemove\",cyPosition:{x:l[0],y:l[1]}}))),null==ce&&(null!=$&&($.trigger(new e.Event(i,{type:\"touchmove\",cyPosition:{x:l[0],y:l[1]}})),$.trigger(new e.Event(i,{type:\"tapdrag\",cyPosition:{x:l[0],y:l[1]}})),$.trigger(new e.Event(i,{type:\"vmousemove\",cyPosition:{x:l[0],y:l[1]}}))),null==$&&(s.trigger(new e.Event(i,{type:\"touchmove\",cyPosition:{x:l[0],y:l[1]}})),s.trigger(new e.Event(i,{type:\"tapdrag\",cyPosition:{x:l[0],y:l[1]}})),s.trigger(new e.Event(i,{type:\"vmousemove\",cyPosition:{x:l[0],y:l[1]}})))),$!=de&&(de&&de.trigger(new e.Event(i,{type:\"tapdragout\",cyPosition:{x:l[0],y:l[1]}})),$&&$.trigger(new e.Event(i,{type:\"tapdragover\",cyPosition:{x:l[0],y:l[1]}}))),t.touchData.last=$;for(var H=0;H<l.length;H++)l[H]&&t.touchData.startPosition[H]&&Math.abs(l[H]-t.touchData.startPosition[H])>4&&(t.touchData.singleTouchMoved=!0);if(o&&(null==ce||ce.isEdge())&&s.panningEnabled()&&s.userPanningEnabled()){t.swipePanning?s.panBy({x:_[0]*c,y:_[1]*c}):I>=t.touchTapThreshold2&&(t.swipePanning=!0,s.panBy({x:P*c,y:M*c})),ce&&(ce.unactivate(),t.data.bgActivePosistion||(t.data.bgActivePosistion={x:l[0],y:l[1]}),d[r.SELECT_BOX]=!0,t.touchData.start=null);var m=t.projectIntoViewport(i.touches[0].clientX,i.touches[0].clientY);l[0]=m[0],l[1]=m[1]}}for(var E=0;E<l.length;E++)u[E]=l[E]},1e3/30,{trailing:!0}),!1),t.registerBinding(window,\"touchcancel\",function(e){var r=t.touchData.start;t.touchData.capture=!1,r&&r.unactivate()}),t.registerBinding(window,\"touchend\",function(i){var n=t.touchData.start,a=t.touchData.capture;if(a){t.touchData.capture=!1,i.preventDefault();var s=t.data.select;t.swipePanning=!1,t.hoverData.draggingEles=!1;var l=t.data.cy,u=l.zoom(),c=t.touchData.now,d=t.touchData.earlier,h=t.data.canvasNeedsRedraw;if(i.touches[0]){var p=t.projectIntoViewport(i.touches[0].clientX,i.touches[0].clientY);c[0]=p[0],c[1]=p[1]}if(i.touches[1]){var p=t.projectIntoViewport(i.touches[1].clientX,i.touches[1].clientY);c[2]=p[0],c[3]=p[1]}if(i.touches[2]){var p=t.projectIntoViewport(i.touches[2].clientX,i.touches[2].clientY);c[4]=p[0],c[5]=p[1]}n&&n.unactivate();var v;if(t.touchData.cxt){if(v=new e.Event(i,{type:\"cxttapend\",cyPosition:{x:c[0],y:c[1]}}),n?n.trigger(v):l.trigger(v),!t.touchData.cxtDragged){var f=new e.Event(i,{type:\"cxttap\",cyPosition:{x:c[0],y:c[1]}});n?n.trigger(f):l.trigger(f)}return t.touchData.start&&(t.touchData.start._private.grabbed=!1),t.touchData.cxt=!1,t.touchData.start=null,void t.redraw()}if(!i.touches[2]&&l.boxSelectionEnabled()&&t.touchData.selecting){t.touchData.selecting=!1,clearTimeout(this.threeFingerSelectTimeout);var g=[],y=t.getAllInBox(s[0],s[1],s[2],s[3]);s[0]=void 0,s[1]=void 0,s[2]=void 0,s[3]=void 0,s[4]=0,h[r.SELECT_BOX]=!0;for(var m=0;m<y.length;m++)y[m]._private.selectable&&g.push(y[m]);var x=new e.Collection(l,g);\"single\"===l.selectionType()&&l.$(\":selected\").unmerge(x).unselect(),x.select(),x.length>0?h[r.NODE]=!0:t.redraw()}var b=!1;if(null!=n&&(n._private.active=!1,b=!0,n.unactivate()),i.touches[2])t.data.bgActivePosistion=void 0,h[r.SELECT_BOX]=!0;else if(i.touches[1]);else if(i.touches[0]);else if(!i.touches[0]){t.data.bgActivePosistion=void 0,h[r.SELECT_BOX]=!0;var w=t.dragData.touchDragEles;if(null!=n){var _=n._private.grabbed;o(w),h[r.DRAG]=!0,h[r.NODE]=!0,_&&n.trigger(\"free\"),n.trigger(new e.Event(i,{type:\"touchend\",cyPosition:{x:c[0],y:c[1]}})).trigger(new e.Event(i,{type:\"tapend\",cyPosition:{x:c[0],y:c[1]}})).trigger(new e.Event(i,{type:\"vmouseup\",cyPosition:{x:c[0],y:c[1]}})),n.unactivate(),t.touchData.start=null}else{var E=t.findNearestElement(c[0],c[1],!0,!0);null!=E&&E.trigger(new e.Event(i,{type:\"touchend\",cyPosition:{x:c[0],y:c[1]}})).trigger(new e.Event(i,{type:\"tapend\",cyPosition:{x:c[0],y:c[1]}})).trigger(new e.Event(i,{type:\"vmouseup\",cyPosition:{x:c[0],y:c[1]}})),null==E&&l.trigger(new e.Event(i,{type:\"touchend\",cyPosition:{x:c[0],y:c[1]}})).trigger(new e.Event(i,{type:\"tapend\",cyPosition:{x:c[0],y:c[1]}})).trigger(new e.Event(i,{type:\"vmouseup\",cyPosition:{x:c[0],y:c[1]}}))}var S=t.touchData.startPosition[0]-c[0],D=S*S,k=t.touchData.startPosition[1]-c[1],T=k*k,P=D+T,C=P*u*u;null!=n&&!t.dragData.didDrag&&n._private.selectable&&C<t.touchTapThreshold2&&!t.pinching&&(\"single\"===l.selectionType()?(l.$(\":selected\").unmerge(n).unselect(),n.select()):n.selected()?n.unselect():n.select(),b=!0,h[r.NODE]=!0),t.touchData.singleTouchMoved===!1&&(n?n.trigger(new e.Event(i,{type:\"tap\",cyPosition:{x:c[0],y:c[1]}})).trigger(new e.Event(i,{type:\"vclick\",cyPosition:{x:c[0],y:c[1]}})):l.trigger(new e.Event(i,{type:\"tap\",cyPosition:{x:c[0],y:c[1]}})).trigger(new e.Event(i,{type:\"vclick\",cyPosition:{x:c[0],y:c[1]}}))),t.touchData.singleTouchMoved=!0}for(var M=0;M<c.length;M++)d[M]=c[M];t.dragData.didDrag=!1,0===i.touches.length&&(t.touchData.dragDelta=[]),b&&n&&n.updateStyle(!1),i.touches.length<2&&(t.pinching=!1,h[r.NODE]=!0,t.redraw())}},!1)}}(cytoscape),function(e){\"use strict\";function t(t,r){a[t]={points:r,draw:function(e,r,n,o,s){i.drawPolygon(e,r,n,o,s,a[t].points)},drawPath:function(e,r,n,o,s){i.drawPolygonPath(e,r,n,o,s,a[t].points)},intersectLine:function(r,i,n,o,s,l,u){return e.math.polygonIntersectLine(s,l,a[t].points,r,i,n/2,o/2,u)},intersectBox:function(r,i,n,o,s,l,u,c,d){var h=a[t].points;return e.math.boxIntersectPolygon(r,i,n,o,h,s,l,u,c,[0,-1],d)},checkPoint:function(r,i,n,o,s,l,u){return e.math.pointInsidePolygon(r,i,a[t].points,l,u,o,s,[0,-1],n)}}}for(var r=e(\"renderer\",\"canvas\"),i=r.prototype,n=r.usePaths(),a=r.nodeShapes={},o=Math.sin(0),s=Math.cos(0),l={},u={},c=.1,d=0*Math.PI;d<2*Math.PI;d+=c)l[d]=Math.sin(d),u[d]=Math.cos(d);a.ellipse={draw:function(e,t,r,i,n){a.ellipse.drawPath(e,t,r,i,n),e.fill()},drawPath:function(e,t,r,i,a){if(n){e.beginPath&&e.beginPath();for(var d,h,p=i/2,v=a/2,f=0*Math.PI;f<2*Math.PI;f+=c)d=t-p*l[f]*o+p*u[f]*s,h=r+v*u[f]*o+v*l[f]*s,0===f?e.moveTo(d,h):e.lineTo(d,h);e.closePath()}else e.beginPath&&e.beginPath(),e.translate(t,r),e.scale(i/2,a/2),e.arc(0,0,1,0,2*Math.PI*.999,!1),e.closePath(),e.scale(2/i,2/a),e.translate(-t,-r)},intersectLine:function(t,r,i,n,a,o,s){var l=e.math.intersectLineEllipse(a,o,t,r,i/2+s,n/2+s);return l},intersectBox:function(t,r,i,n,a,o,s,l,u){return e.math.boxIntersectEllipse(t,r,i,n,u,a,o,s,l)},checkPoint:function(e,t,r,i,n,a,o){return e-=a,t-=o,e/=i/2+r,t/=n/2+r,Math.pow(e,2)+Math.pow(t,2)<=1}},t(\"triangle\",e.math.generateUnitNgonPointsFitToSquare(3,0)),t(\"square\",e.math.generateUnitNgonPointsFitToSquare(4,0)),a.rectangle=a.square,a.roundrectangle={points:e.math.generateUnitNgonPointsFitToSquare(4,0),draw:function(e,t,r,n,a){i.drawRoundRectangle(e,t,r,n,a,10)},drawPath:function(e,t,r,n,a){i.drawRoundRectanglePath(e,t,r,n,a,10)},intersectLine:function(t,r,i,n,a,o,s){return e.math.roundRectangleIntersectLine(a,o,t,r,i,n,s)},intersectBox:function(t,r,i,n,a,o,s,l,u){return e.math.roundRectangleIntersectBox(t,r,i,n,a,o,s,l,u)},checkPoint:function(t,r,i,n,o,s,l){var u=e.math.getRoundRectangleRadius(n,o);if(e.math.pointInsidePolygon(t,r,a.roundrectangle.points,s,l,n,o-2*u,[0,-1],i))return!0;if(e.math.pointInsidePolygon(t,r,a.roundrectangle.points,s,l,n-2*u,o,[0,-1],i))return!0;var c=function(e,t,r,i,n,a,o){return e-=r,t-=i,e/=n/2+o,t/=a/2+o,Math.pow(e,2)+Math.pow(t,2)<=1};return c(t,r,s-n/2+u,l-o/2+u,2*u,2*u,i)?!0:c(t,r,s+n/2-u,l-o/2+u,2*u,2*u,i)?!0:c(t,r,s+n/2-u,l+o/2-u,2*u,2*u,i)?!0:c(t,r,s-n/2+u,l+o/2-u,2*u,2*u,i)?!0:!1}},t(\"diamond\",[0,1,1,0,0,-1,-1,0]),t(\"pentagon\",e.math.generateUnitNgonPointsFitToSquare(5,0)),t(\"hexagon\",e.math.generateUnitNgonPointsFitToSquare(6,0)),t(\"heptagon\",e.math.generateUnitNgonPointsFitToSquare(7,0)),t(\"octagon\",e.math.generateUnitNgonPointsFitToSquare(8,0));var h=new Array(20),p=e.math.generateUnitNgonPoints(5,0),v=e.math.generateUnitNgonPoints(5,Math.PI/5),f=.5*(3-Math.sqrt(5));f*=1.57;for(var d=0;d<v.length/2;d++)v[2*d]*=f,v[2*d+1]*=f;for(var d=0;5>d;d++)h[4*d]=p[2*d],h[4*d+1]=p[2*d+1],h[4*d+2]=v[2*d],h[4*d+3]=v[2*d+1];h=e.math.fitPolygonToSquare(h),t(\"star\",h),t(\"vee\",[-1,-1,0,-.333,1,-1,0,1]),t(\"rhomboid\",[-1,-1,.333,-1,1,1,-.333,1])}(cytoscape),function(e){\"use strict\";function t(t){this._private={},this._private.options=e.util.extend({},r,t)}var r={animate:!0,maxSimulationTime:4e3,fit:!0,padding:30,boundingBox:void 0,ungrabifyWhileSimulating:!1,ready:void 0,stop:void 0,repulsion:void 0,stiffness:void 0,friction:void 0,gravity:!0,fps:void 0,precision:void 0,nodeMass:void 0,edgeLength:void 0,stepSize:.1,stableEnergy:function(e){var t=e;return t.max<=.5||t.mean<=.3},infinite:!1};t.prototype.run=function(){var t=this,r=this._private.options;return e.util.require(\"arbor\",function(i){function n(e,t){return null==t?void 0:\"function\"==typeof t?t.apply(e,[e._private.data,{nodes:u.length,edges:c.length,element:e}]):t}function a(e){if(!e.isFullAutoParent()){var t=e._private.data.id,i=n(e,r.nodeMass),a=e._private.locked,o=e.position(),s=p.fromScreen({x:o.x,y:o.y});e.scratch().arbor=p.addNode(t,{element:e,mass:i,fixed:a,x:a&&s?s.x:void 0,y:a&&s?s.y:void 0})}}function o(e){var t=e.source().id(),i=e.target().id(),a=n(e,r.edgeLength);e.scratch().arbor=p.addEdge(t,i,{length:a})}var s=r.cy,l=r.eles,u=l.nodes().not(\":parent\"),c=l.edges(),d=e.util.makeBoundingBox(r.boundingBox?r.boundingBox:{x1:0,y1:0,w:s.width(),h:s.height()}),h=!1;if(t.trigger({type:\"layoutstart\",layout:t}),void 0!==r.liveUpdate&&(r.animate=r.liveUpdate),l.nodes().size()<=1)return r.fit&&s.reset(),l.nodes().position({x:Math.round((d.x1+d.x2)/2),y:Math.round((d.y1+d.y2)/2)}),t.one(\"layoutready\",r.ready),t.trigger({type:\"layoutready\",layout:t}),t.one(\"layoutstop\",r.stop),void t.trigger({type:\"layoutstop\",layout:t});var p=t._private.system=i.ParticleSystem();p.parameters({repulsion:r.repulsion,stiffness:r.stiffness,friction:r.friction,gravity:r.gravity,fps:r.fps,dt:r.dt,precision:r.precision}),r.animate&&r.fit&&s.fit(d,r.padding);var v,f=250,g=!1,y=+new Date,m={init:function(e){},redraw:function(){var e=p.energy();if(!r.infinite&&null!=r.stableEnergy&&null!=e&&e.n>0&&r.stableEnergy(e))return void t.stop();r.infinite||f==1/0||(clearTimeout(v),v=setTimeout(D,f));var i=s.collection();p.eachNode(function(e,t){var r=e.data,n=r.element;null!=n&&(n.locked()||n.grabbed()||(n.silentPosition({x:d.x1+t.x,y:d.y1+t.y}),i.merge(n)))}),r.animate&&i.length>0&&(h=!0,i.rtrigger(\"position\"),r.fit&&s.fit(r.padding),y=+new Date,h=!1),g||(g=!0,t.one(\"layoutready\",r.ready),t.trigger({type:\"layoutready\",layout:t}))}};p.renderer=m,p.screenSize(d.w,d.h),p.screenPadding(r.padding,r.padding,r.padding,r.padding),p.screenStep(r.stepSize);var x;u.on(\"grab free position\",x=function(e){if(!h){var t=this.position(),n=p.fromScreen(t);if(n){var a=i.Point(n.x,n.y),o=r.padding;switch(d.x1+o<=t.x&&t.x<=d.x2-o&&d.y1+o<=t.y&&t.y<=d.y2-o&&(this.scratch().arbor.p=a),e.type){case\"grab\":this.scratch().arbor.fixed=!0;break;case\"free\":this.scratch().arbor.fixed=!1}}}});var b;u.on(\"lock unlock\",b=function(e){node.scratch().arbor.fixed=node.locked()});var w;l.on(\"remove\",w=function(e){});var _;s.on(\"add\",\"*\",_=function(){});var E;s.on(\"resize\",E=function(){if(null==r.boundingBox&&null!=t._private.system){var e=s.width(),i=s.height();p.screenSize(e,i)}}),u.each(function(e,t){a(t)}),c.each(function(e,t){o(t)});var S=u.filter(\":grabbable\");r.ungrabifyWhileSimulating&&S.ungrabify();var D=t._private.doneHandler=function(){t._private.doneHandler=null,r.animate||(r.fit&&s.reset(),u.rtrigger(\"position\")),u.off(\"grab free position\",x),u.off(\"lock unlock\",b),l.off(\"remove\",w),s.off(\"add\",\"*\",_),s.off(\"resize\",E),r.ungrabifyWhileSimulating&&S.grabify(),t.one(\"layoutstop\",r.stop),t.trigger({type:\"layoutstop\",layout:t})};p.start(),!r.infinite&&null!=r.maxSimulationTime&&r.maxSimulationTime>0&&r.maxSimulationTime!==1/0&&setTimeout(function(){t.stop()},r.maxSimulationTime)}),this},t.prototype.stop=function(){return null!=this._private.system&&this._private.system.stop(),this._private.doneHandler&&this._private.doneHandler(),this},e(\"layout\",\"arbor\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend({},r,t)}var r={fit:!0,directed:!1,padding:30,circle:!1,spacingFactor:1.75,boundingBox:void 0,avoidOverlap:!0,roots:void 0,maximalAdjustments:0,animate:!1,animationDuration:500,ready:void 0,stop:void 0};t.prototype.run=function(){var t,r=this.options,i=r,n=r.cy,a=i.eles,o=a.nodes().not(\":parent\"),s=a,l=e.util.makeBoundingBox(i.boundingBox?i.boundingBox:{x1:0,y1:0,w:n.width(),h:n.height()});if(e.is.elementOrCollection(i.roots))t=i.roots;else if(e.is.array(i.roots)){for(var u=[],c=0;c<i.roots.length;c++){var d=i.roots[c],h=n.getElementById(d);u.push(h)}t=new e.Collection(n,u)}else if(e.is.string(i.roots))t=n.$(i.roots);else if(i.directed)t=o.roots();else{for(var p=[],v=o;v.length>0;){var f=n.collection();a.bfs({roots:v[0],visit:function(e,t,r,i,n){f=f.add(r)},directed:!1}),v=v.not(f),p.push(f)}t=n.collection();for(var c=0;c<p.length;c++){var g=p[c],y=g.maxDegree(!1),m=g.filter(function(){return this.degree(!1)===y});t=t.add(m)}}var x=[],b={},w={},_={},E={},S={};s.bfs({roots:t,directed:i.directed,visit:function(e,t,r,i,n){var a=this[0],o=a.id();if(x[t]||(x[t]=[]),x[t].push(a),b[o]=!0,w[o]=t,_[o]=n,E[o]=i,n){var s=n.id(),l=S[s]=S[s]||[];l.push(r)}}});for(var D=[],c=0;c<o.length;c++){var h=o[c];b[h.id()]||D.push(h)}for(var k=3*D.length,T=0;0!==D.length&&k>T;){for(var P=D.shift(),C=P.neighborhood().nodes(),M=!1,c=0;c<C.length;c++){var B=w[C[c].id()];if(void 0!==B){x[B].push(P),M=!0;break}}M||D.push(P),T++}for(;0!==D.length;){var P=D.shift(),M=!1;M||(0===x.length&&x.push([]),x[0].push(P))}var N=function(){for(var e=0;e<x.length;e++)for(var t=x[e],r=0;r<t.length;r++){var i=t[r];i._private.scratch.breadthfirst={depth:e,index:r}}};N();for(var I=function(e){for(var t,r=e.connectedEdges(function(){return this.data(\"target\")===e.id()}),i=e._private.scratch.breadthfirst,n=0,a=0;a<r.length;a++){var o=r[a],s=o.source()[0],l=s._private.scratch.breadthfirst;i.depth<=l.depth&&n<l.depth&&(n=l.depth,t=s)}return t},O=0;O<i.maximalAdjustments;O++){for(var z=x.length,L=[],c=0;z>c;c++)for(var B=x[c],R=B.length,V=0;R>V;V++){var h=B[V],A=h._private.scratch.breadthfirst,X=I(h);X&&(A.intEle=X,L.push(h))}for(var c=0;c<L.length;c++){var h=L[c],A=h._private.scratch.breadthfirst,X=A.intEle,F=X._private.scratch.breadthfirst;x[A.depth].splice(A.index,1);for(var Y=F.depth+1;Y>x.length-1;)x.push([]);x[Y].push(h),A.depth=Y,A.index=x[Y].length-1}N()}var q=0;if(i.avoidOverlap){for(var c=0;c<o.length;c++){var j=o[c].outerWidth(),$=o[c].outerHeight();q=Math.max(q,j,$)}q*=i.spacingFactor}for(var W={},H=function(e){if(W[e.id()])return W[e.id()];for(var t=e._private.scratch.breadthfirst.depth,r=e.neighborhood().nodes().not(\":parent\"),i=0,n=0,a=0;a<r.length;a++){var o=r[a],s=o._private.scratch.breadthfirst,l=s.index,u=s.depth,c=x[u].length;(t>u||0===t)&&(i+=l/c,n++)}return n=Math.max(1,n),i/=n,0===n&&(i=void 0),W[e.id()]=i,i},Z=function(e,t){var r=H(e),i=H(t);return r-i},U=0;3>U;U++){for(var c=0;c<x.length;c++)x[c]=x[c].sort(Z);N()}for(var G=0,c=0;c<x.length;c++)G=Math.max(x[c].length,G);for(var K={x:l.x1+l.w/2,y:l.x1+l.h/2},J=function(e,t){var r=e._private.scratch.breadthfirst,n=r.depth,a=r.index,o=x[n].length,s=Math.max(l.w/(o+1),q),u=Math.max(l.h/(x.length+1),q),c=Math.min(l.w/2/x.length,l.h/2/x.length);if(c=Math.max(c,q),i.circle){if(i.circle){var d=c*n+c-(x.length>0&&x[0].length<=3?c/2:0),h=2*Math.PI/x[n].length*a;return 0===n&&1===x[0].length&&(d=1),{x:K.x+d*Math.cos(h),y:K.y+d*Math.sin(h)}}return{x:K.x+(a+1-(o+1)/2)*s,y:(n+1)*u}}var p={x:K.x+(a+1-(o+1)/2)*s,y:(n+1)*u};return t?p:p},Q={},c=x.length-1;c>=0;c--)for(var B=x[c],V=0;V<B.length;V++){var P=B[V];Q[P.id()]=J(P,c===x.length-1)}return o.layoutPositions(this,i,function(){return Q[this.id()]}),this},e(\"layout\",\"breadthfirst\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend({},r,t)}var r={fit:!0,padding:30,boundingBox:void 0,avoidOverlap:!0,radius:void 0,startAngle:1.5*Math.PI,counterclockwise:!1,sort:void 0,animate:!1,animationDuration:500,ready:void 0,stop:void 0};t.prototype.run=function(){var t=this.options,r=t,i=t.cy,n=r.eles,a=n.nodes().not(\":parent\");r.sort&&(a=a.sort(r.sort));for(var o,s=e.util.makeBoundingBox(r.boundingBox?r.boundingBox:{x1:0,y1:0,w:i.width(),h:i.height()}),l={x:s.x1+s.w/2,y:s.y1+s.h/2},u=r.startAngle,c=2*Math.PI/a.length,d=0,h=0;h<a.length;h++){var p=a[h].outerWidth(),v=a[h].outerHeight();d=Math.max(d,p,v)}if(o=e.is.number(r.radius)?r.radius:a.length<=1?0:Math.min(s.h,s.w)/2-d,a.length>1&&r.avoidOverlap){d*=1.75;var c=2*Math.PI/a.length,f=Math.cos(c)-Math.cos(0),g=Math.sin(c)-Math.sin(0),y=Math.sqrt(d*d/(f*f+g*g));o=Math.max(y,o)}var m=function(e,t){var i=o*Math.cos(u),n=o*Math.sin(u),a={x:l.x+i,y:l.y+n};return u=r.counterclockwise?u-c:u+c,a};return a.layoutPositions(this,r,m),this},e(\"layout\",\"circle\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend(!0,{},r,t)}var r={animate:!0,refresh:1,maxSimulationTime:4e3,ungrabifyWhileSimulating:!1,fit:!0,padding:30,boundingBox:void 0,ready:function(){},stop:function(){},randomize:!1,avoidOverlap:!0,handleDisconnected:!0,nodeSpacing:function(e){return 10},flow:void 0,alignment:void 0,edgeLength:void 0,edgeSymDiffLength:void 0,edgeJaccardLength:void 0,unconstrIter:void 0,userConstIter:void 0,allConstIter:void 0,infinite:!1};t.prototype.run=function(){var t=this,r=this.options;return t.manuallyStopped=!1,e.util.require(\"cola\",function(i){var n=r.cy,a=r.eles,o=a.nodes(),s=a.edges(),l=!1,u=e.util.makeBoundingBox(r.boundingBox?r.boundingBox:{x1:0,y1:0,w:n.width(),h:n.height()}),c=function(t,r){if(e.is.fn(t)){var i=t;return i.apply(r,[r])}return t},d=function(){for(var t={min:1/0,max:-(1/0)},i={min:1/0,max:-(1/0)},a=0;a<o.length;a++){var s=o[a],d=s._private.scratch.cola;if(t.min=Math.min(t.min,d.x||0),t.max=Math.max(t.max,d.x||0),i.min=Math.min(i.min,d.y||0),i.max=Math.max(i.max,d.y||0),!d.updatedDims){var h=s.boundingBox(),v=c(r.nodeSpacing,s);d.width=h.w+2*v,d.height=h.h+2*v}}o.positions(function(r,n){var a,o=n._private.scratch.cola;return n.grabbed()||n.isParent()||(a={x:u.x1+o.x-t.min,y:u.y1+o.y-i.min},e.is.number(a.x)&&e.is.number(a.y)||(a=void 0)),a}),o.updateCompoundBounds(),l||(p(),l=!0),r.fit&&n.fit(r.padding)},h=function(){r.ungrabifyWhileSimulating&&y.grabify(),o.off(\"grab free position\",m),o.off(\"lock unlock\",x),t.one(\"layoutstop\",r.stop),t.trigger({type:\"layoutstop\",layout:t})},p=function(){t.one(\"layoutready\",r.ready),t.trigger({type:\"layoutready\",layout:t})},v=r.refresh,f=1;r.refresh<0?(f=Math.abs(r.refresh),v=1):v=Math.max(1,v);var g=t.adaptor=i.adaptor({trigger:function(e){var t=i.EventType?i.EventType.tick:null,n=i.EventType?i.EventType.end:null;switch(e.type){case\"tick\":case t:r.animate&&d();break;case\"end\":case n:d(),r.infinite||h()}},kick:function(){var i=function(){if(t.manuallyStopped)return h(),!0;var e=g.tick();return e&&r.infinite&&g.resume(),e},n=function(){for(var e,t=0;v>t&&!e;t++)e=e||i();return e};if(r.animate){var a=function(){n()||e.util.requestAnimationFrame(a)};e.util.requestAnimationFrame(a)}else for(;!i(););},on:function(e,t){},drag:function(){}});t.adaptor=g;var y=o.filter(\":grabbable\");r.ungrabifyWhileSimulating&&y.ungrabify();var m;o.on(\"grab free position\",m=function(e){var t=this,r=t._private.scratch.cola,i=t._private.position;switch(r.x=i.x-u.x1,r.y=i.y-u.y1,e.type){case\"grab\":g.dragstart(r),g.resume();break;case\"free\":g.dragend(r)}});var x;o.on(\"lock unlock\",x=function(e){var t=this,r=t._private.scratch.cola;t.locked()?g.dragstart(r):g.dragend(r)});var b=o.stdFilter(function(e){return!e.isParent()});if(g.nodes(b.map(function(e,t){var i=c(r.nodeSpacing,e),n=e.position(),a=e.boundingBox(),o=e._private.scratch.cola={x:r.randomize||void 0===n.x?Math.round(Math.random()*u.w):n.x,y:r.randomize||void 0===n.y?Math.round(Math.random()*u.h):n.y,width:a.w+2*i,height:a.h+2*i,index:t};return o})),r.alignment){var w=[],_=[];b.forEach(function(e){var t=c(r.alignment,e),i=e._private.scratch.cola,n=i.index;t&&(null!=t.x&&w.push({node:n,offset:t.x}),null!=t.y&&_.push({node:n,offset:t.y}))});var E=[];w.length>0&&E.push({type:\"alignment\",axis:\"x\",offsets:w}),_.length>0&&E.push({type:\"alignment\",axis:\"y\",offsets:_}),g.constraints(E)}g.groups(o.stdFilter(function(e){return e.isParent()}).map(function(e,t){var i=e._private.style,n=c(r.nodeSpacing,e),a=i[\"padding-left\"].pxValue+n,o=i[\"padding-right\"].pxValue+n,s=i[\"padding-top\"].pxValue+n,l=i[\"padding-bottom\"].pxValue+n;return e._private.scratch.cola={index:t,padding:Math.max(a,o,s,l),leaves:e.descendants().stdFilter(function(e){return!e.isParent()}).map(function(e){return e[0]._private.scratch.cola.index})},e}).map(function(e){return e._private.scratch.cola.groups=e.descendants().stdFilter(function(e){return e.isParent()}).map(function(e){return e._private.scratch.cola.index}),e._private.scratch.cola}));var S,D;null!=r.edgeLength?(S=r.edgeLength,D=\"linkDistance\"):null!=r.edgeSymDiffLength?(S=r.edgeSymDiffLength,D=\"symmetricDiffLinkLengths\"):null!=r.edgeJaccardLength?(S=r.edgeJaccardLength,D=\"jaccardLinkLengths\"):(S=100,D=\"linkDistance\");var k=function(e){return e.calcLength};if(g.links(s.stdFilter(function(e){return!e.source().isParent()&&!e.target().isParent()}).map(function(e,t){var r=e._private.scratch.cola={source:e.source()[0]._private.scratch.cola.index,target:e.target()[0]._private.scratch.cola.index};return null!=S&&(r.calcLength=c(S,e)),r})),g.size([u.w,u.h]),null!=S&&g[D](k),r.flow){var T,P=\"y\",C=50;e.is.string(r.flow)?T={axis:r.flow,minSeparation:C}:e.is.number(r.flow)?T={axis:P,minSeparation:r.flow}:e.is.plainObject(r.flow)?(T=r.flow,T.axis=T.axis||P,T.minSeparation=null!=T.minSeparation?T.minSeparation:C):T={axis:P,minSeparation:C},g.flowLayout(T.axis,T.minSeparation)}t.trigger({type:\"layoutstart\",layout:t}),g.avoidOverlaps(r.avoidOverlap).handleDisconnected(r.handleDisconnected).start(r.unconstrIter,r.userConstIter,r.allConstIter),r.infinite||setTimeout(function(){t.manuallyStopped||g.stop()},r.maxSimulationTime)}),this},t.prototype.stop=function(){return this.adaptor&&(this.manuallyStopped=!0,this.adaptor.stop()),this},e(\"layout\",\"cola\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend({},r,t)}var r={fit:!0,padding:30,startAngle:1.5*Math.PI,counterclockwise:!1,minNodeSpacing:10,boundingBox:void 0,avoidOverlap:!0,height:void 0,width:void 0,concentric:function(e){return e.degree()},levelWidth:function(e){return e.maxDegree()/4},animate:!1,animationDuration:500,ready:void 0,stop:void 0};t.prototype.run=function(){for(var t=this.options,r=t,i=t.cy,n=r.eles,a=n.nodes().not(\":parent\"),o=e.util.makeBoundingBox(r.boundingBox?r.boundingBox:{x1:0,y1:0,w:i.width(),h:i.height()}),s={x:o.x1+o.w/2,y:o.y1+o.h/2},l=[],u=r.startAngle,c=0,d=0;d<a.length;d++){var h,p=a[d];h=r.concentric.apply(p,[p]),l.push({value:h,node:p}),p._private.scratch.concentric=h}a.updateStyle();for(var d=0;d<a.length;d++){var p=a[d];c=Math.max(c,p.outerWidth(),p.outerHeight())}l.sort(function(e,t){return t.value-e.value});for(var v=r.levelWidth(a),f=[[]],g=f[0],d=0;d<l.length;d++){var y=l[d];if(g.length>0){var m=Math.abs(g[0].value-y.value);m>=v&&(g=[],f.push(g))}g.push(y)}var x={},b=0,w=c+r.minNodeSpacing;\nif(!r.avoidOverlap){var _=f.length>0&&f[0].length>1,E=Math.min(o.w,o.h)/2-w,S=E/(f.length+_?1:0);w=Math.min(w,S)}for(var d=0;d<f.length;d++){var D=f[d],k=2*Math.PI/D.length;if(D.length>1&&r.avoidOverlap){var T=Math.cos(k)-Math.cos(0),P=Math.sin(k)-Math.sin(0),C=Math.sqrt(w*w/(T*T+P*P));b=Math.max(C,b)}for(var M=0;M<D.length;M++){var y=D[M],u=r.startAngle+(r.counterclockwise?-1:1)*k*M,B={x:s.x+b*Math.cos(u),y:s.y+b*Math.sin(u)};x[y.node.id()]=B}b+=w}return a.layoutPositions(this,r,function(){var e=this.id();return x[e]}),this},e(\"layout\",\"concentric\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend({},i,t)}var r,i={ready:function(){},stop:function(){},animate:!0,refresh:4,fit:!0,padding:30,boundingBox:void 0,randomize:!0,debug:!1,nodeRepulsion:4e5,nodeOverlap:10,idealEdgeLength:10,edgeElasticity:100,nestingFactor:5,gravity:250,numIter:100,initialTemp:200,coolingFactor:.95,minTemp:1};t.prototype.run=function(){var t=this.options,i=t.cy,a=this;a.stopped=!1,a.trigger({type:\"layoutstart\",layout:a}),r=!0===t.debug?!0:!1;var o=new Date,d=n(i,a,t);r&&s(d),!0===t.randomize&&l(d,i),m(d,i,t);var h=function(e){return a.stopped?!1:(c(d,i,t,e),d.temperature=d.temperature*t.coolingFactor,d.temperature<t.minTemp?!1:!0)},p=function(){u(d,i,t),!0===t.fit&&i.fit(t.padding);var e=new Date;console.info(\"Layout took \"+(e-o)+\" ms\"),a.one(\"layoutstop\",t.stop),a.trigger({type:\"layoutstop\",layout:a})};if(t.animate){var v=0,f=function(){for(var r,n=0;n<t.refresh&&v<t.numIter;){var r=h(v);if(r===!1)break;n++,v++}u(d,i,t),t.fit&&i.fit(t.padding),r!==!1&&v+1<t.numIter?e.util.requestAnimationFrame(f):p()};e.util.requestAnimationFrame(f)}else{for(var v=0;v<t.numIter&&h(v)!==!1;v++);p()}return this},t.prototype.stop=function(){return this.stopped=!0,this};var n=function(t,r,i){for(var n=i.eles.edges(),o=i.eles.nodes(),s={layout:r,layoutNodes:[],idToIndex:{},nodeSize:o.size(),graphSet:[],indexToGraph:[],layoutEdges:[],edgeSize:n.size(),temperature:i.initialTemp,clientWidth:t.width(),clientHeight:t.width(),boundingBox:e.util.makeBoundingBox(i.boundingBox?i.boundingBox:{x1:0,y1:0,w:t.width(),h:t.height()})},l=0;l<s.nodeSize;l++){var u={};u.id=o[l].data(\"id\"),u.parentId=o[l].data(\"parent\"),u.children=[],u.positionX=o[l].position(\"x\"),u.positionY=o[l].position(\"y\"),u.offsetX=0,u.offsetY=0,u.height=o[l].height(),u.width=o[l].width(),u.maxX=u.positionX+u.width/2,u.minX=u.positionX-u.width/2,u.maxY=u.positionY+u.height/2,u.minY=u.positionY-u.height/2,u.padLeft=o[l]._private.style[\"padding-left\"].pxValue,u.padRight=o[l]._private.style[\"padding-right\"].pxValue,u.padTop=o[l]._private.style[\"padding-top\"].pxValue,u.padBottom=o[l]._private.style[\"padding-bottom\"].pxValue,s.layoutNodes.push(u),s.idToIndex[u.id]=l}for(var c=[],d=0,h=-1,p=[],l=0;l<s.nodeSize;l++){var v=s.layoutNodes[l],f=v.parentId;null!=f?s.layoutNodes[s.idToIndex[f]].children.push(v.id):(c[++h]=v.id,p.push(v.id))}for(s.graphSet.push(p);h>=d;){var g=c[d++],y=s.idToIndex[g],m=s.layoutNodes[y],x=m.children;if(x.length>0){s.graphSet.push(x);for(var l=0;l<x.length;l++)c[++h]=x[l]}}for(var l=0;l<s.graphSet.length;l++)for(var b=s.graphSet[l],w=0;w<b.length;w++){var _=s.idToIndex[b[w]];s.indexToGraph[_]=l}for(var l=0;l<s.edgeSize;l++){var E=n[l],S={};S.id=E.data(\"id\"),S.sourceId=E.data(\"source\"),S.targetId=E.data(\"target\");var D=i.idealEdgeLength,k=s.idToIndex[S.sourceId],T=s.idToIndex[S.targetId],P=s.indexToGraph[k],C=s.indexToGraph[T];if(P!=C){for(var M=a(S.sourceId,S.targetId,s),B=s.graphSet[M],N=0,u=s.layoutNodes[k];-1===$.inArray(u.id,B);)u=s.layoutNodes[s.idToIndex[u.parentId]],N++;for(u=s.layoutNodes[T];-1===$.inArray(u.id,B);)u=s.layoutNodes[s.idToIndex[u.parentId]],N++;D*=N*i.nestingFactor}S.idealLength=D,s.layoutEdges.push(S)}return s},a=function(e,t,r){var i=o(e,t,0,r);return 2>i.count?0:i.graph},o=function(e,t,r,i){var n=i.graphSet[r];if(-1<$.inArray(e,n)&&-1<$.inArray(t,n))return{count:2,graph:r};for(var a=0,s=0;s<n.length;s++){var l=n[s],u=i.idToIndex[l],c=i.layoutNodes[u].children;if(0!==c.length){var d=i.indexToGraph[i.idToIndex[c[0]]],h=o(e,t,d,i);if(0!==h.count){if(1!==h.count)return h;if(a++,2===a)break}}}return{count:a,graph:r}},s=function(e){if(r){console.debug(\"layoutNodes:\");for(var t=0;t<e.nodeSize;t++){var i=e.layoutNodes[t],n=\"\\nindex: \"+t+\"\\nId: \"+i.id+\"\\nChildren: \"+i.children.toString()+\"\\nparentId: \"+i.parentId+\"\\npositionX: \"+i.positionX+\"\\npositionY: \"+i.positionY+\"\\nOffsetX: \"+i.offsetX+\"\\nOffsetY: \"+i.offsetY+\"\\npadLeft: \"+i.padLeft+\"\\npadRight: \"+i.padRight+\"\\npadTop: \"+i.padTop+\"\\npadBottom: \"+i.padBottom;console.debug(n)}console.debug(\"idToIndex\");for(var t in e.idToIndex)console.debug(\"Id: \"+t+\"\\nIndex: \"+e.idToIndex[t]);console.debug(\"Graph Set\");for(var a=e.graphSet,t=0;t<a.length;t++)console.debug(\"Set : \"+t+\": \"+a[t].toString());for(var n=\"IndexToGraph\",t=0;t<e.indexToGraph.length;t++)n+=\"\\nIndex : \"+t+\" Graph: \"+e.indexToGraph[t];console.debug(n),n=\"Layout Edges\";for(var t=0;t<e.layoutEdges.length;t++){var o=e.layoutEdges[t];n+=\"\\nEdge Index: \"+t+\" ID: \"+o.id+\" SouceID: \"+o.sourceId+\" TargetId: \"+o.targetId+\" Ideal Length: \"+o.idealLength}console.debug(n),n=\"nodeSize: \"+e.nodeSize,n+=\"\\nedgeSize: \"+e.edgeSize,n+=\"\\ntemperature: \"+e.temperature,console.debug(n)}},l=function(e,t){for(var r=e.clientWidth,i=e.clientHeight,n=0;n<e.nodeSize;n++){var a=e.layoutNodes[n];a.positionX=Math.random()*r,a.positionY=Math.random()*i}},u=function(e,t,r){var i=e.layout,n=r.eles.nodes(),a=e.boundingBox,o={x1:1/0,x2:-(1/0),y1:1/0,y2:-(1/0)};r.boundingBox&&(n.forEach(function(t){var r=e.layoutNodes[e.idToIndex[t.data(\"id\")]];o.x1=Math.min(o.x1,r.positionX),o.x2=Math.max(o.x2,r.positionX),o.y1=Math.min(o.y1,r.positionY),o.y2=Math.max(o.y2,r.positionY)}),o.w=o.x2-o.x1,o.h=o.y2-o.y1),n.positions(function(t,i){var n=e.layoutNodes[e.idToIndex[i.data(\"id\")]];if(r.boundingBox){var s=(n.positionX-o.x1)/o.w,l=(n.positionY-o.y1)/o.h;return{x:a.x1+s*a.w,y:a.y1+l*a.h}}return{x:n.positionX,y:n.positionY}}),!0!==e.ready&&(e.ready=!0,i.one(\"layoutready\",r.ready),i.trigger({type:\"layoutready\",layout:this}))},c=function(e,t,r,i){d(e,t,r),f(e,t,r),g(e,t,r),y(e,t,r),m(e,t,r)},d=function(e,t,r){for(var i=0;i<e.graphSet.length;i++)for(var n=e.graphSet[i],a=n.length,o=0;a>o;o++)for(var s=e.layoutNodes[e.idToIndex[n[o]]],l=o+1;a>l;l++){var u=e.layoutNodes[e.idToIndex[n[l]]];h(s,u,e,t,r)}},h=function(e,t,r,i,n){var a=t.positionX-e.positionX,o=t.positionY-e.positionY;if(0!==a||0!==o){var s=v(e,t,a,o);if(s>0)var l=n.nodeOverlap*s,u=Math.sqrt(a*a+o*o),c=l*a/u,d=l*o/u;else var h=p(e,a,o),f=p(t,-1*a,-1*o),g=f.x-h.x,y=f.y-h.y,m=g*g+y*y,u=Math.sqrt(m),l=n.nodeRepulsion/m,c=l*g/u,d=l*y/u;e.offsetX-=c,e.offsetY-=d,t.offsetX+=c,t.offsetY+=d}},p=function(e,t,r){var i=e.positionX,n=e.positionY,a=e.height,o=e.width,s=r/t,l=a/o,u={};do{if(0===t&&r>0){u.x=i,u.y=n+a/2;break}if(0===t&&0>r){u.x=i,u.y=n+a/2;break}if(t>0&&s>=-1*l&&l>=s){u.x=i+o/2,u.y=n+o*r/2/t;break}if(0>t&&s>=-1*l&&l>=s){u.x=i-o/2,u.y=n-o*r/2/t;break}if(r>0&&(-1*l>=s||s>=l)){u.x=i+a*t/2/r,u.y=n+a/2;break}if(0>r&&(-1*l>=s||s>=l)){u.x=i-a*t/2/r,u.y=n-a/2;break}}while(!1);return u},v=function(e,t,r,i){if(r>0)var n=e.maxX-t.minX;else var n=t.maxX-e.minX;if(i>0)var a=e.maxY-t.minY;else var a=t.maxY-e.minY;return n>=0&&a>=0?Math.sqrt(n*n+a*a):0},f=function(e,t,r){for(var i=0;i<e.edgeSize;i++){var n=e.layoutEdges[i],a=e.idToIndex[n.sourceId],o=e.layoutNodes[a],s=e.idToIndex[n.targetId],l=e.layoutNodes[s],u=l.positionX-o.positionX,c=l.positionY-o.positionY;if(0===u&&0===c)return;var d=p(o,u,c),h=p(l,-1*u,-1*c),v=h.x-d.x,f=h.y-d.y,g=Math.sqrt(v*v+f*f),y=Math.pow(n.idealLength-g,2)/r.edgeElasticity;if(0!==g)var m=y*v/g,x=y*f/g;else var m=0,x=0;o.offsetX+=m,o.offsetY+=x,l.offsetX-=m,l.offsetY-=x}},g=function(e,t,r){for(var i=0;i<e.graphSet.length;i++){var n=e.graphSet[i],a=n.length;if(0===i)var o=e.clientHeight/2,s=e.clientWidth/2;else var l=e.layoutNodes[e.idToIndex[n[0]]],u=e.layoutNodes[e.idToIndex[l.parentId]],o=u.positionX,s=u.positionY;for(var c=0;a>c;c++){var d=e.layoutNodes[e.idToIndex[n[c]]],h=o-d.positionX,p=s-d.positionY,v=Math.sqrt(h*h+p*p);if(v>1){var f=r.gravity*h/v,g=r.gravity*p/v;d.offsetX+=f,d.offsetY+=g}}}},y=function(e,t,r){var i=[],n=0,a=-1;for(i.push.apply(i,e.graphSet[0]),a+=e.graphSet[0].length;a>=n;){var o=i[n++],s=e.idToIndex[o],l=e.layoutNodes[s],u=l.children;if(0<u.length){for(var c=l.offsetX,d=l.offsetY,h=0;h<u.length;h++){var p=e.layoutNodes[e.idToIndex[u[h]]];p.offsetX+=c,p.offsetY+=d,i[++a]=u[h]}l.offsetX=0,l.offsetY=0}}},m=function(e,t,r){for(var i=0;i<e.nodeSize;i++){var n=e.layoutNodes[i];0<n.children.length&&(n.maxX=void 0,n.minX=void 0,n.maxY=void 0,n.minY=void 0)}for(var i=0;i<e.nodeSize;i++){var n=e.layoutNodes[i];if(!(0<n.children.length)){var a=x(n.offsetX,n.offsetY,e.temperature);n.positionX+=a.x,n.positionY+=a.y,n.offsetX=0,n.offsetY=0,n.minX=n.positionX-n.width,n.maxX=n.positionX+n.width,n.minY=n.positionY-n.height,n.maxY=n.positionY+n.height,b(n,e)}}for(var i=0;i<e.nodeSize;i++){var n=e.layoutNodes[i];0<n.children.length&&(n.positionX=(n.maxX+n.minX)/2,n.positionY=(n.maxY+n.minY)/2,n.width=n.maxX-n.minX,n.height=n.maxY-n.minY)}},x=function(e,t,r){var i=Math.sqrt(e*e+t*t);if(i>r)var n={x:r*e/i,y:r*t/i};else var n={x:e,y:t};return n},b=function(e,t){var r=e.parentId;if(null!=r){var i=t.layoutNodes[t.idToIndex[r]],n=!1;return(null==i.maxX||e.maxX+i.padRight>i.maxX)&&(i.maxX=e.maxX+i.padRight,n=!0),(null==i.minX||e.minX-i.padLeft<i.minX)&&(i.minX=e.minX-i.padLeft,n=!0),(null==i.maxY||e.maxY+i.padBottom>i.maxY)&&(i.maxY=e.maxY+i.padBottom,n=!0),(null==i.minY||e.minY-i.padTop<i.minY)&&(i.minY=e.minY-i.padTop,n=!0),n?b(i,t):void 0}};e(\"layout\",\"cose\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend(!0,{},r,t)}var r={nodeSep:void 0,edgeSep:void 0,rankSep:void 0,rankDir:void 0,minLen:function(e){return 1},edgeWeight:function(e){return 1},fit:!0,padding:30,animate:!1,animationDuration:500,boundingBox:void 0,ready:function(){},stop:function(){}};t.prototype.run=function(){var t=this.options,r=this;return e.util.require(\"dagre\",function(i){var n=t.cy,a=t.eles,o=function(t,r){return e.is.fn(r)?r.apply(t,[t]):r},s=e.util.makeBoundingBox(t.boundingBox?t.boundingBox:{x1:0,y1:0,w:n.width(),h:n.height()}),l=new i.graphlib.Graph({multigraph:!0,compound:!0}),u={},c=function(e,t){null!=t&&(u[e]=t)};c(\"nodesep\",t.nodeSep),c(\"edgesep\",t.edgeSep),c(\"ranksep\",t.rankSep),c(\"rankdir\",t.rankDir),l.setGraph(u),l.setDefaultEdgeLabel(function(){return{}}),l.setDefaultNodeLabel(function(){return{}});for(var d=a.nodes(),h=0;h<d.length;h++){var p=d[h];l.setNode(p.id(),{width:p.width(),height:p.height(),name:p.id()})}for(var h=0;h<d.length;h++){var p=d[h];p.isChild()&&l.setParent(p.id(),p.parent().id())}for(var v=a.edges().stdFilter(function(e){return!e.source().isParent()&&!e.target().isParent()}),h=0;h<v.length;h++){var f=v[h];l.setEdge(f.source().id(),f.target().id(),{minlen:o(f,t.minLen),weight:o(f,t.edgeWeight),name:f.id()},f.id())}i.layout(l);for(var g=l.nodes(),h=0;h<g.length;h++){var y=g[h],m=l.node(y);n.getElementById(y).scratch().dagre=m}var x;t.boundingBox?(x={x1:1/0,x2:-(1/0),y1:1/0,y2:-(1/0)},d.forEach(function(e){var t=e.scratch().dagre;x.x1=Math.min(x.x1,t.x),x.x2=Math.max(x.x2,t.x),x.y1=Math.min(x.y1,t.y),x.y2=Math.max(x.y2,t.y)}),x.w=x.x2-x.x1,x.h=x.y2-x.y1):x=s;var b=function(e){if(t.boundingBox){var r=(e.x-x.x1)/x.w,i=(e.y-x.y1)/x.h;return{x:s.x1+r*s.w,y:s.y1+i*s.h}}return e};d.layoutPositions(r,t,function(){var e=this.scratch().dagre;return b({x:e.x,y:e.y})})}),this},e(\"layout\",\"dagre\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend({},r,t)}var r={fit:!0,padding:30,boundingBox:void 0,avoidOverlap:!0,rows:void 0,columns:void 0,position:function(e){},sort:void 0,animate:!1,animationDuration:500,ready:void 0,stop:void 0};t.prototype.run=function(){var t=this.options,r=t,i=t.cy,n=r.eles,a=n.nodes().not(\":parent\");r.sort&&(a=a.sort(r.sort));var o=e.util.makeBoundingBox(r.boundingBox?r.boundingBox:{x1:0,y1:0,w:i.width(),h:i.height()});if(0===o.h||0===o.w)a.layoutPositions(this,r,function(){return{x:o.x1,y:o.y1}});else{var s=a.size(),l=Math.sqrt(s*o.h/o.w),u=Math.round(l),c=Math.round(o.w/o.h*l),d=function(e){if(null==e)return Math.min(u,c);var t=Math.min(u,c);t==u?u=e:c=e},h=function(e){if(null==e)return Math.max(u,c);var t=Math.max(u,c);t==u?u=e:c=e};if(null!=r.rows&&null!=r.columns)u=r.rows,c=r.columns;else if(null!=r.rows&&null==r.columns)u=r.rows,c=Math.ceil(s/u);else if(null==r.rows&&null!=r.columns)c=r.columns,u=Math.ceil(s/c);else if(c*u>s){var p=d(),v=h();(p-1)*v>=s?d(p-1):(v-1)*p>=s&&h(v-1)}else for(;s>c*u;){var p=d(),v=h();(v+1)*p>=s?h(v+1):d(p+1)}var f=o.w/c,g=o.h/u;if(r.avoidOverlap)for(var y=0;y<a.length;y++){var m=a[y],x=m.outerWidth(),b=m.outerHeight();f=Math.max(f,x),g=Math.max(g,b)}for(var w={},_=function(e,t){return w[\"c-\"+e+\"-\"+t]?!0:!1},E=function(e,t){w[\"c-\"+e+\"-\"+t]=!0},S=0,D=0,k=function(){D++,D>=c&&(D=0,S++)},T={},y=0;y<a.length;y++){var m=a[y],P=r.position(m);if(P&&(void 0!==P.row||void 0!==P.col)){var C={row:P.row,col:P.col};if(void 0===C.col)for(C.col=0;_(C.row,C.col);)C.col++;else if(void 0===C.row)for(C.row=0;_(C.row,C.col);)C.row++;T[m.id()]=C,E(C.row,C.col)}}var M=function(e,t){var r,i;if(t.locked()||t.isFullAutoParent())return!1;var n=T[t.id()];if(n)r=n.col*f+f/2+o.x1,i=n.row*g+g/2+o.y1;else{for(;_(S,D);)k();r=D*f+f/2+o.x1,i=S*g+g/2+o.y1,E(S,D),k()}return{x:r,y:i}};a.layoutPositions(this,r,M)}return this},e(\"layout\",\"grid\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend(!0,{},r,t)}var r={ready:function(){},stop:function(){}};t.prototype.run=function(){var e=this.options,t=e.eles,r=this;e.cy;return r.trigger(\"layoutstart\"),t.nodes().positions(function(){return{x:0,y:0}}),r.one(\"layoutready\",e.ready),r.trigger(\"layoutready\"),r.one(\"layoutstop\",e.stop),r.trigger(\"layoutstop\"),this},t.prototype.stop=function(){return this},e(\"layout\",\"null\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend(!0,{},r,t)}var r={positions:void 0,zoom:void 0,pan:void 0,fit:!0,padding:30,animate:!1,animationDuration:500,ready:void 0,stop:void 0};t.prototype.run=function(){function t(e){if(null==r.positions)return null;if(a)return r.positions.apply(e,[e]);var t=r.positions[e._private.data.id];return null==t?null:t}var r=this.options,i=r.eles,n=i.nodes(),a=e.is.fn(r.positions);return n.layoutPositions(this,r,function(e,r){var i=t(r);return r.locked()||null==i?!1:i}),this},e(\"layout\",\"preset\",t)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend(!0,{},r,t)}var r={fit:!0,padding:30,boundingBox:void 0,animate:!1,animationDuration:500,ready:void 0,stop:void 0};t.prototype.run=function(){var t=this.options,r=t.cy,i=t.eles,n=i.nodes().not(\":parent\"),a=e.util.makeBoundingBox(t.boundingBox?t.boundingBox:{x1:0,y1:0,w:r.width(),h:r.height()}),o=function(e,t){return{x:a.x1+Math.round(Math.random()*a.w),y:a.y1+Math.round(Math.random()*a.h)}};return n.layoutPositions(this,t,o),this},e(\"layout\",\"random\",t)}(cytoscape),function($$){\"use strict\";function SpreadLayout(e){this.options=$$.util.extend({},defaults,e)}function cellCentroid(e){for(var t,r,i,n=e.halfedges,a=0,o=0,s=0,l=0;l<n.length;++l)t=n[l].getEndpoint(),r=n[l].getStartpoint(),a+=t.x*r.y,a-=t.y*r.x,i=t.x*r.y-r.x*t.y,o+=(t.x+r.x)*i,s+=(t.y+r.y)*i;return a/=2,i=6*a,{x:o/i,y:s/i}}function sitesDistance(e,t){var r=e.x-t.x,i=e.y-t.y;return Math.sqrt(r*r+i*i)}var defaults={animate:!0,ready:void 0,stop:void 0,fit:!0,minDist:20,padding:20,expandingFactor:-1,maxFruchtermanReingoldIterations:50,maxExpandIterations:4,boundingBox:void 0};SpreadLayout.prototype.run=function(){var layout=this,options=this.options;return $$.util.requires([\"foograph\",\"Voronoi\"],function(foograph,Voronoi){function setPositions(e){for(var t=e.vertices,r=[],i=0;i<t.length;++i){var n=t[i];r[n.id]={x:n.x,y:n.y}}nodes.positions(function(e,t){var i=t._private.data.id,n=r[i];return{x:Math.round(simBB.x1+n.x),y:Math.round(simBB.y1+n.y)}}),options.fit&&cy.fit(options.padding),cy.nodes().rtrigger(\"position\")}var cy=options.cy,nodes=cy.nodes(),edges=cy.edges(),cWidth=cy.width(),cHeight=cy.height(),simulationBounds=options.boundingBox?$$.util.makeBoundingBox(options.boundingBox):null,padding=options.padding,simBBFactor=Math.max(1,.8*Math.log(nodes.length));nodes.length<100&&(simBBFactor/=2),layout.trigger({type:\"layoutstart\",layout:layout});var simBB={x1:0,y1:0,x2:cWidth*simBBFactor,y2:cHeight*simBBFactor};simulationBounds&&(simBB.x1=simulationBounds.x1,simBB.y1=simulationBounds.y1,simBB.x2=simulationBounds.x2,simBB.y2=simulationBounds.y2),simBB.x1+=padding,simBB.y1+=padding,simBB.x2-=padding,simBB.y2-=padding;var width=simBB.x2-simBB.x1,height=simBB.y2-simBB.y1,startTime=Date.now();if(nodes.size()<=1){nodes.positions({x:Math.round((simBB.x1+simBB.x2)/2),y:Math.round((simBB.y1+simBB.y2)/2)}),options.fit&&cy.fit(options.padding);var endTime=Date.now();return console.info(\"Layout on \"+nodes.size()+\" nodes took \"+(endTime-startTime)+\" ms\"),layout.one(\"layoutready\",options.ready),layout.trigger(\"layoutready\"),layout.one(\"layoutstop\",options.stop),void layout.trigger(\"layoutstop\")}var pData={width:width,height:height,minDist:options.minDist,expFact:options.expandingFactor,expIt:0,maxExpIt:options.maxExpandIterations,vertices:[],edges:[],startTime:startTime,maxFruchtermanReingoldIterations:options.maxFruchtermanReingoldIterations};nodes.each(function(e,t){var r=this._private.data.id;pData.vertices.push({id:r,x:0,y:0})}),edges.each(function(){var e=this.source().id(),t=this.target().id();pData.edges.push({src:e,tgt:t})});var t1=$$.Thread();t1.require(foograph,\"foograph\"),t1.require(Voronoi),t1.require(sitesDistance),t1.require(cellCentroid);var didLayoutReady=!1;t1.on(\"message\",function(e){var t=e.message;options.animate&&(setPositions(t),didLayoutReady||(layout.trigger(\"layoutready\"),didLayoutReady=!0))}),layout.one(\"layoutready\",options.ready),t1.pass(pData).run(function(pData){function checkMinDist(e){for(var t=0,r=0;r<e.length;++r){var i=e[r];null!=i.lSite&&null!=i.rSite&&sitesDistance(i.lSite,i.rSite)<lMinDist&&++t}return t}foograph=eval(\"foograph\"),Voronoi=eval(\"Voronoi\");for(var lWidth=pData.width,lHeight=pData.height,lMinDist=pData.minDist,lExpFact=pData.expFact,lMaxExpIt=pData.maxExpIt,lMaxFruchtermanReingoldIterations=pData.maxFruchtermanReingoldIterations,savePositions=function(){pData.width=lWidth,pData.height=lHeight,pData.expIt=expandIteration,pData.expFact=lExpFact,pData.vertices=[];for(var e=0;e<fv.length;++e)pData.vertices.push({id:fv[e].label,x:fv[e].x,y:fv[e].y})},messagePositions=function(){broadcast(pData)},frg=new foograph.Graph(\"FRgraph\",!1),frgNodes={},dataVertices=pData.vertices,ni=0;ni<dataVertices.length;++ni){var id=dataVertices[ni].id,v=new foograph.Vertex(id,Math.round(Math.random()*lHeight),Math.round(Math.random()*lHeight));frgNodes[id]=v,frg.insertVertex(v)}for(var dataEdges=pData.edges,ei=0;ei<dataEdges.length;++ei){var srcNodeId=dataEdges[ei].src,tgtNodeId=dataEdges[ei].tgt;frg.insertEdge(\"\",1,frgNodes[srcNodeId],frgNodes[tgtNodeId])}var fv=frg.vertices,iterations=lMaxFruchtermanReingoldIterations,frLayoutManager=new foograph.ForceDirectedVertexLayout(lWidth,lHeight,iterations,!1,lMinDist);frLayoutManager.callback=function(){savePositions(),messagePositions()},frLayoutManager.layout(frg),savePositions(),messagePositions();for(var voronoi=new Voronoi,bbox={xl:0,xr:lWidth,yt:0,yb:lHeight},vSites=[],i=0;i<fv.length;++i)vSites[fv[i].label]=fv[i];for(var diagram=voronoi.compute(fv,bbox),cells=diagram.cells,i=0;i<cells.length;++i){var cell=cells[i],site=cell.site,centroid=cellCentroid(cell),currv=vSites[site.label];currv.x=centroid.x,currv.y=centroid.y}0>lExpFact&&(lExpFact=Math.max(.05,Math.min(.1,lMinDist/Math.sqrt(lWidth*lHeight/fv.length)*.5)));for(var prevInfractions=checkMinDist(diagram.edges),bStop=0>=prevInfractions,voronoiIteration=0,expandIteration=0;!bStop;){++voronoiIteration;for(var it=0;4>=it;++it){voronoi.recycle(diagram),diagram=voronoi.compute(fv,bbox),cells=diagram.cells;for(var i=0;i<cells.length;++i){var cell=cells[i],site=cell.site,centroid=cellCentroid(cell),currv=vSites[site.label];currv.x=centroid.x,currv.y=centroid.y}}var currInfractions=checkMinDist(diagram.edges);0>=currInfractions?bStop=!0:(currInfractions>=prevInfractions||voronoiIteration>=4)&&(expandIteration>=lMaxExpIt?bStop=!0:(lWidth+=lWidth*lExpFact,lHeight+=lHeight*lExpFact,bbox={xl:0,xr:lWidth,yt:0,yb:lHeight},++expandIteration,voronoiIteration=0)),prevInfractions=currInfractions,savePositions(),messagePositions()}return savePositions(),pData}).then(function(e){var t=e.vertices;setPositions(e);var r=e.startTime,i=new Date;console.info(\"Layout on \"+t.length+\" nodes took \"+(i-r)+\" ms\"),layout.one(\"layoutstop\",options.stop),options.animate||layout.trigger(\"layoutready\"),layout.trigger(\"layoutstop\"),t1.stop()})}),this},SpreadLayout.prototype.stop=function(){},$$(\"layout\",\"spread\",SpreadLayout)}(cytoscape),function(e){\"use strict\";function t(t){this.options=e.util.extend(!0,{},r,t)}var r={animate:!0,maxSimulationTime:4e3,ungrabifyWhileSimulating:!1,fit:!0,padding:30,boundingBox:void 0,random:!1,infinite:!1,ready:void 0,stop:void 0,stiffness:400,repulsion:400,damping:.5};t.prototype.run=function(){var t=this,r=this,i=this.options;return e.util.require(\"Springy\",function(n){function a(e){var t=e.scratch(\"springy\").model.id,r=w.layout.nodePoints[t].p,i=e.position(),n=null!=i.x&&null!=i.y?y(e.position()):{x:4*Math.random()-2,y:4*Math.random()-2};r.x=n.x,r.y=n.y}function o(){r.stopped=!1,i.ungrabifyWhileSimulating&&E.ungrabify(),w.start()}var s=!1,l=i.cy;t.trigger({type:\"layoutstart\",layout:t});var u=i.eles,c=u.nodes().not(\":parent\"),d=u.edges(),h=e.util.makeBoundingBox(i.boundingBox?i.boundingBox:{x1:0,y1:0,w:l.width(),h:l.height()}),p=new n.Graph;c.each(function(e,t){t.scratch(\"springy\",{model:p.newNode({element:t})})}),d.each(function(e,t){var r=t.source().scratch(\"springy\").model,i=t.target().scratch(\"springy\").model;t.scratch(\"springy\",{model:p.newEdge(r,i,{element:t})})});var v=window.sim=new n.Layout.ForceDirected(p,i.stiffness,i.repulsion,i.damping);i.infinite&&(v.minEnergyThreshold=-(1/0));var f=v.getBoundingBox(),g=function(e){f=v.getBoundingBox();var t=f.topright.subtract(f.bottomleft),r=e.subtract(f.bottomleft).divide(t.x).x*h.w+h.x1,i=e.subtract(f.bottomleft).divide(t.y).y*h.h+h.x1;return new n.Vector(r,i)},y=function(e){f=v.getBoundingBox();var t=f.topright.subtract(f.bottomleft),r=(e.x-h.x1)/h.w*t.x+f.bottomleft.x,i=(e.y-h.y1)/h.h*t.y+f.bottomleft.y;return new n.Vector(r,i)},m=l.collection(),x=l.nodes().size(),b=1,w=new n.Renderer(v,function(){r.stopped||m.length>0&&i.animate&&(s=!0,m.rtrigger(\"position\"),i.fit&&l.fit(i.padding),m=l.collection(),s=!1)},function(e,t,r){},function(e,n){if(!r.stopped){var a=g(n),o=e.data.element;o.locked()||o.grabbed()||(o._private.position={x:a.x,y:a.y},m.merge(o)),b==x&&(t.one(\"layoutready\",i.ready),t.trigger({type:\"layoutready\",layout:t})),b++}});c.each(function(e,t){i.random||a(t)});var _;c.on(\"position\",_=function(){s||a(this)});var E=c.filter(\":grabbable\");r.stopSystem=function(){r.stopped=!0,p.filterNodes(function(){return!1}),i.ungrabifyWhileSimulating&&E.grabify(),i.fit&&l.fit(i.padding),c.off(\"drag position\",_),t.one(\"layoutstop\",i.stop),t.trigger({type:\"layoutstop\",layout:t}),r.stopSystem=null},o(),i.infinite||setTimeout(function(){r.stop()},i.maxSimulationTime)}),this},t.prototype.stop=function(){return null!=this.stopSystem&&this.stopSystem(),this},e(\"layout\",\"springy\",t)}(cytoscape),function(e){\"use strict\";function t(e){this.options=e}t.prototype.recalculateRenderedStyle=function(){},t.prototype.notify=function(){},e(\"renderer\",\"null\",t)}(cytoscape);","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.dagre=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*\nCopyright (c) 2012-2014 Chris Pettitt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nmodule.exports = {\n  graphlib: require(\"./lib/graphlib\"),\n\n  layout: require(\"./lib/layout\"),\n  debug: require(\"./lib/debug\"),\n  util: {\n    time: require(\"./lib/util\").time,\n    notime: require(\"./lib/util\").notime\n  },\n  version: require(\"./lib/version\")\n};\n\n},{\"./lib/debug\":6,\"./lib/graphlib\":7,\"./lib/layout\":9,\"./lib/util\":29,\"./lib/version\":30}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    greedyFAS = require(\"./greedy-fas\");\n\nmodule.exports = {\n  run: run,\n  undo: undo\n};\n\nfunction run(g) {\n  var fas = (g.graph().acyclicer === \"greedy\"\n                ? greedyFAS(g, weightFn(g))\n                : dfsFAS(g));\n  _.each(fas, function(e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId(\"rev\"));\n  });\n\n  function weightFn(g) {\n    return function(e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [],\n      stack = {},\n      visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.each(g.outEdges(v), function(e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.each(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.each(g.edges(), function(e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n\n},{\"./greedy-fas\":8,\"./lodash\":10}],3:[function(require,module,exports){\nvar _ = require(\"./lodash\"),\n    util = require(\"./util\");\n\nmodule.exports = addBorderSegments;\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v),\n        node = g.node(v);\n    if (children.length) {\n      _.each(children, dfs);\n    }\n\n    if (_.has(node, \"minRank\")) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1;\n           rank < maxRank;\n           ++rank) {\n        addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\n        addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\n      }\n    }\n  }\n\n  _.each(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank },\n      prev = sgNode[prop][rank - 1],\n      curr = util.addDummyNode(g, \"border\", label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n\n},{\"./lodash\":10,\"./util\":29}],4:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nmodule.exports = {\n  adjust: adjust,\n  undo: undo\n};\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === \"bt\" || rankDir === \"rl\") {\n    reverseY(g);\n  }\n\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.each(g.nodes(), function(v) { swapWidthHeightOne(g.node(v)); });\n  _.each(g.edges(), function(e) { swapWidthHeightOne(g.edge(e)); });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.each(g.nodes(), function(v) { reverseYOne(g.node(v)); });\n\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    _.each(edge.points, reverseYOne);\n    if (_.has(edge, \"y\")) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.each(g.nodes(), function(v) { swapXYOne(g.node(v)); });\n\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    _.each(edge.points, swapXYOne);\n    if (_.has(edge, \"x\")) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n\n},{\"./lodash\":10}],5:[function(require,module,exports){\n/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nmodule.exports = List;\n\nfunction List() {\n  var sentinel = {};\n  sentinel._next = sentinel._prev = sentinel;\n  this._sentinel = sentinel;\n}\n\nList.prototype.dequeue = function() {\n  var sentinel = this._sentinel,\n      entry = sentinel._prev;\n  if (entry !== sentinel) {\n    unlink(entry);\n    return entry;\n  }\n};\n\nList.prototype.enqueue = function(entry) {\n  var sentinel = this._sentinel;\n  if (entry._prev && entry._next) {\n    unlink(entry);\n  }\n  entry._next = sentinel._next;\n  sentinel._next._prev = entry;\n  sentinel._next = entry;\n  entry._prev = sentinel;\n};\n\nList.prototype.toString = function() {\n  var strs = [],\n      sentinel = this._sentinel,\n      curr = sentinel._prev;\n  while (curr !== sentinel) {\n    strs.push(JSON.stringify(curr, filterOutLinks));\n    curr = curr._prev;\n  }\n  return \"[\" + strs.join(\", \") + \"]\";\n};\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== \"_next\" && k !== \"_prev\") {\n    return v;\n  }\n}\n\n},{}],6:[function(require,module,exports){\nvar _ = require(\"./lodash\"),\n    util = require(\"./util\"),\n    Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = {\n  debugOrdering: debugOrdering\n};\n\n/* istanbul ignore next */\nfunction debugOrdering(g) {\n  var layerMatrix = util.buildLayerMatrix(g);\n\n  var h = new Graph({ compound: true, multigraph: true }).setGraph({});\n\n  _.each(g.nodes(), function(v) {\n    h.setNode(v, { label: v });\n    h.setParent(v, \"layer\" + g.node(v).rank);\n  });\n\n  _.each(g.edges(), function(e) {\n    h.setEdge(e.v, e.w, {}, e.name);\n  });\n\n  _.each(layerMatrix, function(layer, i) {\n    var layerV = \"layer\" + i;\n    h.setNode(layerV, { rank: \"same\" });\n    _.reduce(layer, function(u, v) {\n      h.setEdge(u, v, { style: \"invis\" });\n      return v;\n    });\n  });\n\n  return h;\n}\n\n},{\"./graphlib\":7,\"./lodash\":10,\"./util\":29}],7:[function(require,module,exports){\n/* global window */\n\nvar graphlib;\n\nif (require) {\n  try {\n    graphlib = require(\"graphlib\");\n  } catch (e) {}\n}\n\nif (!graphlib) {\n  graphlib = window.graphlib;\n}\n\nmodule.exports = graphlib;\n\n},{\"graphlib\":31}],8:[function(require,module,exports){\nvar _ = require(\"./lodash\"),\n    Graph = require(\"./graphlib\").Graph,\n    List = require(\"./data/list\");\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nmodule.exports = greedyFAS;\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(_.map(results, function(e) {\n    return g.outEdges(e.v, e.w);\n  }), true);\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [],\n      sources = buckets[buckets.length - 1],\n      sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }\n    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.each(g.inEdges(entry.v), function(edge) {\n    var weight = g.edge(edge),\n        uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.each(g.outEdges(entry.v), function(edge) {\n    var weight = g.edge(edge),\n        w = edge.w,\n        wEntry = g.node(w);\n    wEntry[\"in\"] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph(),\n      maxIn = 0,\n      maxOut = 0;\n\n  _.each(g.nodes(), function(v) {\n    fasGraph.setNode(v, { v: v, \"in\": 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.each(g.edges(), function(e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0,\n        weight = weightFn(e),\n        edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)[\"in\"]  += weight);\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function() { return new List(); });\n  var zeroIdx = maxIn + 1;\n\n  _.each(fasGraph.nodes(), function(v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry[\"in\"]) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n  }\n}\n\n},{\"./data/list\":5,\"./graphlib\":7,\"./lodash\":10}],9:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    acyclic = require(\"./acyclic\"),\n    normalize = require(\"./normalize\"),\n    rank = require(\"./rank\"),\n    normalizeRanks = require(\"./util\").normalizeRanks,\n    parentDummyChains = require(\"./parent-dummy-chains\"),\n    removeEmptyRanks = require(\"./util\").removeEmptyRanks,\n    nestingGraph = require(\"./nesting-graph\"),\n    addBorderSegments = require(\"./add-border-segments\"),\n    coordinateSystem = require(\"./coordinate-system\"),\n    order = require(\"./order\"),\n    position = require(\"./position\"),\n    util = require(\"./util\"),\n    Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = layout;\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time(\"layout\", function() {\n    var layoutGraph = time(\"  buildLayoutGraph\",\n                               function() { return buildLayoutGraph(g); });\n    time(\"  runLayout\",        function() { runLayout(layoutGraph, time); });\n    time(\"  updateInputGraph\", function() { updateInputGraph(g, layoutGraph); });\n  });\n}\n\nfunction runLayout(g, time) {\n  time(\"    makeSpaceForEdgeLabels\", function() { makeSpaceForEdgeLabels(g); });\n  time(\"    removeSelfEdges\",        function() { removeSelfEdges(g); });\n  time(\"    acyclic\",                function() { acyclic.run(g); });\n  time(\"    nestingGraph.run\",       function() { nestingGraph.run(g); });\n  time(\"    rank\",                   function() { rank(util.asNonCompoundGraph(g)); });\n  time(\"    injectEdgeLabelProxies\", function() { injectEdgeLabelProxies(g); });\n  time(\"    removeEmptyRanks\",       function() { removeEmptyRanks(g); });\n  time(\"    nestingGraph.cleanup\",   function() { nestingGraph.cleanup(g); });\n  time(\"    normalizeRanks\",         function() { normalizeRanks(g); });\n  time(\"    assignRankMinMax\",       function() { assignRankMinMax(g); });\n  time(\"    removeEdgeLabelProxies\", function() { removeEdgeLabelProxies(g); });\n  time(\"    normalize.run\",          function() { normalize.run(g); });\n  time(\"    parentDummyChains\",      function() { parentDummyChains(g); });\n  time(\"    addBorderSegments\",      function() { addBorderSegments(g); });\n  time(\"    order\",                  function() { order(g); });\n  time(\"    insertSelfEdges\",        function() { insertSelfEdges(g); });\n  time(\"    adjustCoordinateSystem\", function() { coordinateSystem.adjust(g); });\n  time(\"    position\",               function() { position(g); });\n  time(\"    positionSelfEdges\",      function() { positionSelfEdges(g); });\n  time(\"    removeBorderNodes\",      function() { removeBorderNodes(g); });\n  time(\"    normalize.undo\",         function() { normalize.undo(g); });\n  time(\"    fixupEdgeLabelCoords\",   function() { fixupEdgeLabelCoords(g); });\n  time(\"    undoCoordinateSystem\",   function() { coordinateSystem.undo(g); });\n  time(\"    translateGraph\",         function() { translateGraph(g); });\n  time(\"    assignNodeIntersects\",   function() { assignNodeIntersects(g); });\n  time(\"    reversePoints\",          function() { reversePointsForReversedEdges(g); });\n  time(\"    acyclic.undo\",           function() { acyclic.undo(g); });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.each(inputGraph.nodes(), function(v) {\n    var inputLabel = inputGraph.node(v),\n        layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.each(inputGraph.edges(), function(e) {\n    var inputLabel = inputGraph.edge(e),\n        layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, \"x\")) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"],\n    graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: \"tb\" },\n    graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"],\n    nodeNumAttrs = [\"width\", \"height\"],\n    nodeDefaults = { width: 0, height: 0 },\n    edgeNumAttrs = [\"minlen\", \"weight\", \"width\", \"height\", \"labeloffset\"],\n    edgeDefaults = {\n      minlen: 1, weight: 1, width: 0, height: 0,\n      labeloffset: 10, labelpos: \"r\"\n    },\n    edgeAttrs = [\"labelpos\"];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true }),\n      graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(_.merge({},\n    graphDefaults,\n    selectNumberAttrs(graph, graphNumAttrs),\n    _.pick(graph, graphAttrs)));\n\n  _.each(inputGraph.nodes(), function(v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.each(inputGraph.edges(), function(e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(e, _.merge({},\n      edgeDefaults,\n      selectNumberAttrs(edge, edgeNumAttrs),\n      _.pick(edge, edgeAttrs)));\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== \"c\") {\n      if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v),\n          w = g.node(e.w),\n          label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.dummy === \"edge-proxy\") {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY,\n      maxX = 0,\n      minY = Number.POSITIVE_INFINITY,\n      maxY = 0,\n      graphLabel = g.graph(),\n      marginX = graphLabel.marginx || 0,\n      marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x,\n        y = attrs.y,\n        w = attrs.width,\n        h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.each(g.nodes(), function(v) { getExtremes(g.node(v)); });\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (_.has(edge, \"x\")) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    _.each(edge.points, function(p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, \"x\")) { edge.x -= minX; }\n    if (_.has(edge, \"y\")) { edge.y -= minY; }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e),\n        nodeV = g.node(e.v),\n        nodeW = g.node(e.w),\n        p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (_.has(edge, \"x\")) {\n      if (edge.labelpos === \"l\" || edge.labelpos === \"r\") {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case \"l\": edge.x -= edge.width / 2 + edge.labeloffset; break;\n        case \"r\": edge.x += edge.width / 2 + edge.labeloffset; break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.each(g.nodes(), function(v) {\n    if (g.children(v).length) {\n      var node = g.node(v),\n          t = g.node(node.borderTop),\n          b = g.node(node.borderBottom),\n          l = g.node(_.last(node.borderLeft)),\n          r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.each(g.nodes(), function(v) {\n    if (g.node(v).dummy === \"border\") {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.each(g.edges(), function(e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.each(layers, function(layer) {\n    var orderShift = 0;\n    _.each(layer, function(v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.each(node.selfEdges, function(selfEdge) {\n        util.addDummyNode(g, \"selfedge\", {\n          width: selfEdge.label.width,\n          height: selfEdge.label.height,\n          rank: node.rank,\n          order: i + (++orderShift),\n          e: selfEdge.e,\n          label: selfEdge.label\n        }, \"_se\");\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.dummy === \"selfedge\") {\n      var selfNode = g.node(node.e.v),\n          x = selfNode.x + selfNode.width / 2,\n          y = selfNode.y,\n          dx = node.x - x,\n          dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + 2 * dx / 3, y: y - dy },\n        { x: x + 5 * dx / 6, y: y - dy },\n        { x: x +     dx    , y: y },\n        { x: x + 5 * dx / 6, y: y + dy },\n        { x: x + 2 * dx / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.each(attrs, function(v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n\n},{\"./acyclic\":2,\"./add-border-segments\":3,\"./coordinate-system\":4,\"./graphlib\":7,\"./lodash\":10,\"./nesting-graph\":11,\"./normalize\":12,\"./order\":17,\"./parent-dummy-chains\":22,\"./position\":24,\"./rank\":26,\"./util\":29}],10:[function(require,module,exports){\n/* global window */\n\nvar lodash;\n\nif (require) {\n  try {\n    lodash = require(\"lodash\");\n  } catch (e) {}\n}\n\nif (!lodash) {\n  lodash = window._;\n}\n\nmodule.exports = lodash;\n\n},{\"lodash\":51}],11:[function(require,module,exports){\nvar _ = require(\"./lodash\"),\n    util = require(\"./util\");\n\nmodule.exports = {\n  run: run,\n  cleanup: cleanup\n};\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, \"root\", {}, \"_root\"),\n      depths = treeDepths(g),\n      height = _.max(depths) - 1,\n      nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.each(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.each(g.children(), function(child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, \"_bt\"),\n      bottom = util.addBorderNode(g, \"_bb\"),\n      label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.each(children, function(child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child),\n        childTop = childNode.borderTop ? childNode.borderTop : child,\n        childBottom = childNode.borderBottom ? childNode.borderBottom : child,\n        thisWeight = childNode.borderTop ? weight : 2 * weight,\n        minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.each(children, function(child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.each(g.children(), function(v) { dfs(v, 1); });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(g.edges(), function(acc, e) {\n    return acc + g.edge(e).weight;\n  }, 0);\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.each(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n\n},{\"./lodash\":10,\"./util\":29}],12:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    util = require(\"./util\");\n\nmodule.exports = {\n  run: run,\n  undo: undo\n};\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.each(g.edges(), function(edge) { normalizeEdge(g, edge); });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v,\n      vRank = g.node(v).rank,\n      w = e.w,\n      wRank = g.node(w).rank,\n      name = e.name,\n      edgeLabel = g.edge(e),\n      labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0, height: 0,\n      edgeLabel: edgeLabel, edgeObj: e,\n      rank: vRank\n    };\n    dummy = util.addDummyNode(g, \"edge\", attrs, \"_d\");\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = \"edge-label\";\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.each(g.graph().dummyChains, function(v) {\n    var node = g.node(v),\n        origLabel = node.edgeLabel,\n        w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === \"edge-label\") {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n\n},{\"./lodash\":10,\"./util\":29}],13:[function(require,module,exports){\nvar _ = require(\"../lodash\");\n\nmodule.exports = addSubgraphConstraints;\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n      rootPrev;\n\n  _.each(vs, function(v) {\n    var child = g.parent(v),\n        parent,\n        prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n\n},{\"../lodash\":10}],14:[function(require,module,exports){\nvar _ = require(\"../lodash\");\n\nmodule.exports = barycenter;\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function(v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(inV, function(acc, e) {\n        var edge = g.edge(e),\n            nodeU = g.node(e.v);\n        return {\n          sum: acc.sum + (edge.weight * nodeU.order),\n          weight: acc.weight + edge.weight\n        };\n      }, { sum: 0, weight: 0 });\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight\n      };\n    }\n  });\n}\n\n\n},{\"../lodash\":10}],15:[function(require,module,exports){\nvar _ = require(\"../lodash\"),\n    Graph = require(\"../graphlib\").Graph;\n\nmodule.exports = buildLayerGraph;\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n      result = new Graph({ compound: true }).setGraph({ root: root })\n                  .setDefaultNodeLabel(function(v) { return g.node(v); });\n\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v),\n        parent = g.parent(v);\n\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.each(g[relationship](v), function(e) {\n        var u = e.v === v ? e.w : e.v,\n            edge = result.edge(u, v),\n            weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, \"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId(\"_root\"))));\n  return v;\n}\n\n},{\"../graphlib\":7,\"../lodash\":10}],16:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = crossCount;\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i-1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(southLayer,\n                             _.map(southLayer, function (v, i) { return i; }));\n  var southEntries = _.flatten(_.map(northLayer, function(v) {\n    return _.chain(g.outEdges(v))\n            .map(function(e) {\n              return { pos: southPos[e.w], weight: g.edge(e).weight };\n            })\n            .sortBy(\"pos\")\n            .value();\n  }), true);\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function() { return 0; });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.each(southEntries.forEach(function(entry) {\n    var index = entry.pos + firstIndex;\n    tree[index] += entry.weight;\n    var weightSum = 0;\n    while (index > 0) {\n      if (index % 2) {\n        weightSum += tree[index + 1];\n      }\n      index = (index - 1) >> 1;\n      tree[index] += entry.weight;\n    }\n    cc += entry.weight * weightSum;\n  }));\n\n  return cc;\n}\n\n},{\"../lodash\":10}],17:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\"),\n    initOrder = require(\"./init-order\"),\n    crossCount = require(\"./cross-count\"),\n    sortSubgraph = require(\"./sort-subgraph\"),\n    buildLayerGraph = require(\"./build-layer-graph\"),\n    addSubgraphConstraints = require(\"./add-subgraph-constraints\"),\n    Graph = require(\"../graphlib\").Graph,\n    util = require(\"../util\");\n\nmodule.exports = order;\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n      downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), \"inEdges\"),\n      upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), \"outEdges\");\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n      best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function(rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.each(layerGraphs, function(lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.each(sorted.vs, function(v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.each(layering, function(layer) {\n    _.each(layer, function(v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n\n},{\"../graphlib\":7,\"../lodash\":10,\"../util\":29,\"./add-subgraph-constraints\":13,\"./build-layer-graph\":15,\"./cross-count\":16,\"./init-order\":18,\"./sort-subgraph\":20}],18:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = initOrder;\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {},\n      simpleNodes = _.filter(g.nodes(), function(v) {\n        return !g.children(v).length;\n      }),\n      maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; })),\n      layers = _.map(_.range(maxRank + 1), function() { return []; });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.each(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v).rank; });\n  _.each(orderedVs, dfs);\n\n  return layers;\n}\n\n},{\"../lodash\":10}],19:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = resolveConflicts;\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.each(entries, function(entry, i) {\n    var tmp = mappedEntries[entry.v] = {\n      indegree: 0,\n      \"in\": [],\n      out: [],\n      vs: [entry.v],\n      i: i\n    };\n    if (!_.isUndefined(entry.barycenter)) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.each(cg.edges(), function(e) {\n    var entryV = mappedEntries[e.v],\n        entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function(entry) {\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function(uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (_.isUndefined(uEntry.barycenter) ||\n          _.isUndefined(vEntry.barycenter) ||\n          uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function(wEntry) {\n      wEntry[\"in\"].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.each(entry[\"in\"].reverse(), handleIn(entry));\n    _.each(entry.out, handleOut(entry));\n  }\n\n  return _.chain(entries)\n          .filter(function(entry) { return !entry.merged; })\n          .map(function(entry) {\n            return _.pick(entry, [\"vs\", \"i\", \"barycenter\", \"weight\"]);\n          })\n          .value();\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0,\n      weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n\n},{\"../lodash\":10}],20:[function(require,module,exports){\nvar _ = require(\"../lodash\"),\n    barycenter = require(\"./barycenter\"),\n    resolveConflicts = require(\"./resolve-conflicts\"),\n    sort = require(\"./sort\");\n\nmodule.exports = sortSubgraph;\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v),\n      node = g.node(v),\n      bl = node ? node.borderLeft : undefined,\n      br = node ? node.borderRight: undefined,\n      subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function(w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.each(barycenters, function(entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, \"barycenter\")) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br], true);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n          brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, \"barycenter\")) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter = (result.barycenter * result.weight +\n                           blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.each(entries, function(entry) {\n    entry.vs = _.flatten(entry.vs.map(function(v) {\n      if (subgraphs[v]) {\n        return subgraphs[v].vs;\n      }\n      return v;\n    }), true);\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter = (target.barycenter * target.weight +\n                         other.barycenter * other.weight) /\n                        (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n\n},{\"../lodash\":10,\"./barycenter\":14,\"./resolve-conflicts\":19,\"./sort\":21}],21:[function(require,module,exports){\nvar _ = require(\"../lodash\"),\n    util = require(\"../util\");\n\nmodule.exports = sort;\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function(entry) {\n    return _.has(entry, \"barycenter\");\n  });\n  var sortable = parts.lhs,\n      unsortable = _.sortBy(parts.rhs, function(entry) { return -entry.i; }),\n      vs = [],\n      sum = 0,\n      weight = 0,\n      vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.each(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs, true) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function(entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n\n},{\"../lodash\":10,\"../util\":29}],22:[function(require,module,exports){\nvar _ = require(\"./lodash\");\n\nmodule.exports = parentDummyChains;\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.each(g.graph().dummyChains, function(v) {\n    var node = g.node(v),\n        edgeObj = node.edgeObj,\n        pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w),\n        path = pathData.path,\n        lca = pathData.lca,\n        pathIdx = 0,\n        pathV = path[pathIdx],\n        ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca &&\n               g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (pathIdx < path.length - 1 &&\n               g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [],\n      wPath = [],\n      low = Math.min(postorderNums[v].low, postorderNums[w].low),\n      lim = Math.max(postorderNums[v].lim, postorderNums[w].lim),\n      parent,\n      lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent &&\n           (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {},\n      lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.each(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.each(g.children(), dfs);\n\n  return result;\n}\n\n},{\"./lodash\":10}],23:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\"),\n    Graph = require(\"../graphlib\").Graph,\n    util = require(\"../util\");\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nmodule.exports = {\n  positionX: positionX,\n  findType1Conflicts: findType1Conflicts,\n  findType2Conflicts: findType2Conflicts,\n  addConflict: addConflict,\n  hasConflict: hasConflict,\n  verticalAlignment: verticalAlignment,\n  horizontalCompaction: horizontalCompaction,\n  alignCoordinates: alignCoordinates,\n  findSmallestWidthAlignment: findSmallestWidthAlignment,\n  balance: balance\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var\n      // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.each(layer, function(v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n          k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.each(layer.slice(scanPos, i +1), function(scanNode) {\n          _.each(g.predecessors(scanNode), function(u) {\n            var uLabel = g.node(u),\n                uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) &&\n                !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.each(_.range(southPos, southEnd), function(i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.each(g.predecessors(v), function(u) {\n          var uNode = g.node(u);\n          if (uNode.dummy &&\n              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n        nextNorthPos,\n        southPos = 0;\n\n    _.each(south, function(v, southLookahead) {\n      if (g.node(v).dummy === \"border\") {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function(u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n      align = {},\n      pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.each(layering, function(layer) {\n    _.each(layer, function(v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.each(layering, function(layer) {\n    var prevIdx = -1;\n    _.each(layer, function(v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function(w) { return pos[w]; });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v &&\n              prevIdx < pos[w] &&\n              !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n      blockG = buildBlockGraph(g, layering, root, reverseSep);\n\n  // First pass, assign smallest coordinates via DFS\n  var visited = {};\n  function pass1(v) {\n    if (!_.has(visited, v)) {\n      visited[v] = true;\n      xs[v] = _.reduce(blockG.inEdges(v), function(max, e) {\n        pass1(e.v);\n        return Math.max(max, xs[e.v] + blockG.edge(e));\n      }, 0);\n    }\n  }\n  _.each(blockG.nodes(), pass1);\n\n  function pass2(v) {\n    if (visited[v] !== 2) {\n      visited[v]++;\n      var min = _.reduce(blockG.outEdges(v), function(min, e) {\n        pass2(e.w);\n        return Math.min(min, xs[e.w] - blockG.edge(e));\n      }, Number.POSITIVE_INFINITY);\n      if (min !== Number.POSITIVE_INFINITY) {\n        xs[v] = Math.max(xs[v], min);\n      }\n    }\n  }\n  _.each(blockG.nodes(), pass2);\n\n\n  // Assign x coordinates to all nodes\n  _.each(align, function(v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n      graphLabel = g.graph(),\n      sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.each(layering, function(layer) {\n    var u;\n    _.each(layer, function(v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n            prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.min(xss, function(xs) {\n    var min = _.min(xs, function(x, v) { return x - width(g, v) / 2; }),\n        max = _.max(xs, function(x, v) { return x + width(g, v) / 2; });\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToMin = _.min(alignTo),\n      alignToMax = _.max(alignTo);\n\n  _.each([\"u\", \"d\"], function(vert) {\n    _.each([\"l\", \"r\"], function(horiz) {\n      var alignment = vert + horiz,\n          xs = xss[alignment],\n          delta;\n      if (xs === alignTo) return;\n\n      delta = horiz === \"l\" ? alignToMin - _.min(xs) : alignToMax - _.max(xs);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function(ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.pluck(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g),\n      conflicts = _.merge(findType1Conflicts(g, layering),\n                          findType2Conflicts(g, layering));\n\n  var xss = {},\n      adjustedLayering;\n  _.each([\"u\", \"d\"], function(vert) {\n    adjustedLayering = vert === \"u\" ? layering : _.values(layering).reverse();\n    _.each([\"l\", \"r\"], function(horiz) {\n      if (horiz === \"r\") {\n        adjustedLayering = _.map(adjustedLayering, function(inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = _.bind(vert === \"u\" ? g.predecessors : g.successors, g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering,\n                                    align.root, align.align,\n                                    horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = _.mapValues(xs, function(x) { return -x; });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function(g, v, w) {\n    var vLabel = g.node(v),\n        wLabel = g.node(w),\n        sum = 0,\n        delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, \"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case \"l\": delta = -vLabel.width / 2; break;\n        case \"r\": delta = vLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, \"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case \"l\": delta = wLabel.width / 2; break;\n        case \"r\": delta = -wLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n\n},{\"../graphlib\":7,\"../lodash\":10,\"../util\":29}],24:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\"),\n    util = require(\"../util\"),\n    positionX = require(\"./bk\").positionX;\n\nmodule.exports = position;\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.each(positionX(g), function(x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g),\n      rankSep = g.graph().ranksep,\n      prevY = 0;\n  _.each(layering, function(layer) {\n    var maxHeight = _.max(_.map(layer, function(v) { return g.node(v).height; }));\n    _.each(layer, function(v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n\n\n},{\"../lodash\":10,\"../util\":29,\"./bk\":23}],25:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\"),\n    Graph = require(\"../graphlib\").Graph,\n    slack = require(\"./util\").slack;\n\nmodule.exports = feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0],\n      size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.each(g.nodeEdges(v), function(e) {\n      var edgeV = e.v,\n          w = (v === edgeV) ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.each(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.min(g.edges(), function(e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.each(t.nodes(), function(v) {\n    g.node(v).rank += delta;\n  });\n}\n\n},{\"../graphlib\":7,\"../lodash\":10,\"./util\":28}],26:[function(require,module,exports){\n\"use strict\";\n\nvar rankUtil = require(\"./util\"),\n    longestPath = rankUtil.longestPath,\n    feasibleTree = require(\"./feasible-tree\"),\n    networkSimplex = require(\"./network-simplex\");\n\nmodule.exports = rank;\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch(g.graph().ranker) {\n    case \"network-simplex\": networkSimplexRanker(g); break;\n    case \"tight-tree\": tightTreeRanker(g); break;\n    case \"longest-path\": longestPathRanker(g); break;\n    default: networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n\n},{\"./feasible-tree\":25,\"./network-simplex\":27,\"./util\":28}],27:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\"),\n    feasibleTree = require(\"./feasible-tree\"),\n    slack = require(\"./util\").slack,\n    initRank = require(\"./util\").longestPath,\n    preorder = require(\"../graphlib\").alg.preorder,\n    postorder = require(\"../graphlib\").alg.postorder,\n    simplify = require(\"../util\").simplify;\n\nmodule.exports = networkSimplex;\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  initRank(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.each(vs, function(v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child),\n      parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child),\n      parent = childLab.parent,\n      // True if the child is on the tail end of the edge in the directed graph\n      childIsTail = true,\n      // The graph's view of the tree edge we're inspecting\n      graphEdge = g.edge(child, parent),\n      // The accumulated cut value for the edge between this node and its parent\n      cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.each(g.nodeEdges(child), function(e) {\n    var isOutEdge = e.v === child,\n        other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n          otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim,\n      label = tree.node(v);\n\n  visited[v] = true;\n  _.each(tree.neighbors(v), function(w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function(e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v,\n      w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v),\n      wLabel = t.node(w),\n      tailLabel = vLabel,\n      flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function(edge) {\n    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n           flip !== isDescendant(t, t.node(edge.w), tailLabel);\n  });\n\n  return _.min(candidates, function(edge) { return slack(g, edge); });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v,\n      w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; }),\n      vs = preorder(t, root);\n  vs = vs.slice(1);\n  _.each(vs, function(v) {\n    var parent = t.node(v).parent,\n        edge = g.edge(v, parent),\n        flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n\n},{\"../graphlib\":7,\"../lodash\":10,\"../util\":29,\"./feasible-tree\":25,\"./util\":28}],28:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = {\n  longestPath: longestPath,\n  slack: slack\n};\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function(e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY) {\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.each(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n\n},{\"../lodash\":10}],29:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = {\n  addDummyNode: addDummyNode,\n  simplify: simplify,\n  asNonCompoundGraph: asNonCompoundGraph,\n  successorWeights: successorWeights,\n  predecessorWeights: predecessorWeights,\n  intersectRect: intersectRect,\n  buildLayerMatrix: buildLayerMatrix,\n  normalizeRanks: normalizeRanks,\n  removeEmptyRanks: removeEmptyRanks,\n  addBorderNode: addBorderNode,\n  maxRank: maxRank,\n  partition: partition,\n  time: time,\n  notime: notime\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.each(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });\n  _.each(g.edges(), function(e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 },\n        label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.each(g.nodes(), function(v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.each(g.edges(), function(e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function(v) {\n    var sucs = {};\n    _.each(g.outEdges(v), function(e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function(v) {\n    var preds = {};\n    _.each(g.inEdges(v), function(e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error(\"Not possible to find intersection inside of the rectangle\");\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = w * dy / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function() { return []; });\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v),\n        rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (_.has(node, \"rank\")) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));\n\n  var layers = [];\n  _.each(g.nodes(), function(v) {\n    var rank = g.node(v).rank - offset;\n    if (!_.has(layers, rank)) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0,\n      nodeRankFactor = g.graph().nodeRankFactor;\n  _.each(layers, function(vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.each(vs, function(v) { g.node(v).rank += delta; });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, \"border\", node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(_.map(g.nodes(), function(v) {\n    var rank = g.node(v).rank;\n    if (!_.isUndefined(rank)) {\n      return rank;\n    }\n  }));\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.each(collection, function(value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + \" time: \" + (_.now() - start) + \"ms\");\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n\n},{\"./graphlib\":7,\"./lodash\":10}],30:[function(require,module,exports){\nmodule.exports = \"0.7.1\";\n\n},{}],31:[function(require,module,exports){\n/**\n * Copyright (c) 2014, Chris Pettitt\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors\n * may be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar lib = require(\"./lib\");\n\nmodule.exports = {\n  Graph: lib.Graph,\n  json: require(\"./lib/json\"),\n  alg: require(\"./lib/alg\"),\n  version: lib.version\n};\n\n},{\"./lib\":47,\"./lib/alg\":38,\"./lib/json\":48}],32:[function(require,module,exports){\nvar _ = require(\"../lodash\");\n\nmodule.exports = components;\n\nfunction components(g) {\n  var visited = {},\n      cmpts = [],\n      cmpt;\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    cmpt.push(v);\n    _.each(g.successors(v), dfs);\n    _.each(g.predecessors(v), dfs);\n  }\n\n  _.each(g.nodes(), function(v) {\n    cmpt = [];\n    dfs(v);\n    if (cmpt.length) {\n      cmpts.push(cmpt);\n    }\n  });\n\n  return cmpts;\n}\n\n},{\"../lodash\":49}],33:[function(require,module,exports){\nvar _ = require(\"../lodash\");\n\nmodule.exports = dfs;\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. This algorithm treats\n * the input as undirected.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var acc = [],\n      visited = {};\n  _.each(vs, function(v) {\n    if (!g.hasNode(v)) {\n      throw new Error(\"Graph does not have node: \" + v);\n    }\n\n    doDfs(g, v, order === \"post\", visited, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) { acc.push(v); }\n    _.each(g.neighbors(v), function(w) {\n      doDfs(g, w, postorder, visited, acc);\n    });\n    if (postorder) { acc.push(v); }\n  }\n}\n\n},{\"../lodash\":49}],34:[function(require,module,exports){\nvar dijkstra = require(\"./dijkstra\"),\n    _ = require(\"../lodash\");\n\nmodule.exports = dijkstraAll;\n\nfunction dijkstraAll(g, weightFunc, edgeFunc) {\n  return _.transform(g.nodes(), function(acc, v) {\n    acc[v] = dijkstra(g, v, weightFunc, edgeFunc);\n  }, {});\n}\n\n},{\"../lodash\":49,\"./dijkstra\":35}],35:[function(require,module,exports){\nvar _ = require(\"../lodash\"),\n    PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source),\n                     weightFn || DEFAULT_WEIGHT_FUNC,\n                     edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {},\n      pq = new PriorityQueue(),\n      v, vEntry;\n\n  var updateNeighbors = function(edge) {\n    var w = edge.v !== v ? edge.v : edge.w,\n        wEntry = results[w],\n        weight = weightFn(edge),\n        distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" +\n                      \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function(v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n\n},{\"../data/priority-queue\":45,\"../lodash\":49}],36:[function(require,module,exports){\nvar _ = require(\"../lodash\"),\n    tarjan = require(\"./tarjan\");\n\nmodule.exports = findCycles;\n\nfunction findCycles(g) {\n  return _.filter(tarjan(g), function(cmpt) { return cmpt.length > 1; });\n}\n\n},{\"../lodash\":49,\"./tarjan\":43}],37:[function(require,module,exports){\nvar _ = require(\"../lodash\");\n\nmodule.exports = floydWarshall;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(g,\n                          weightFn || DEFAULT_WEIGHT_FUNC,\n                          edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {},\n      nodes = g.nodes();\n\n  nodes.forEach(function(v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function(w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function(edge) {\n      var w = edge.v === v ? edge.w : edge.v,\n          d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function(k) {\n    var rowK = results[k];\n    nodes.forEach(function(i) {\n      var rowI = results[i];\n      nodes.forEach(function(j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n\n},{\"../lodash\":49}],38:[function(require,module,exports){\nmodule.exports = {\n  components: require(\"./components\"),\n  dijkstra: require(\"./dijkstra\"),\n  dijkstraAll: require(\"./dijkstra-all\"),\n  findCycles: require(\"./find-cycles\"),\n  floydWarshall: require(\"./floyd-warshall\"),\n  isAcyclic: require(\"./is-acyclic\"),\n  postorder: require(\"./postorder\"),\n  preorder: require(\"./preorder\"),\n  prim: require(\"./prim\"),\n  tarjan: require(\"./tarjan\"),\n  topsort: require(\"./topsort\")\n};\n\n},{\"./components\":32,\"./dijkstra\":35,\"./dijkstra-all\":34,\"./find-cycles\":36,\"./floyd-warshall\":37,\"./is-acyclic\":39,\"./postorder\":40,\"./preorder\":41,\"./prim\":42,\"./tarjan\":43,\"./topsort\":44}],39:[function(require,module,exports){\nvar topsort = require(\"./topsort\");\n\nmodule.exports = isAcyclic;\n\nfunction isAcyclic(g) {\n  try {\n    topsort(g);\n  } catch (e) {\n    if (e instanceof topsort.CycleException) {\n      return false;\n    }\n    throw e;\n  }\n  return true;\n}\n\n},{\"./topsort\":44}],40:[function(require,module,exports){\nvar dfs = require(\"./dfs\");\n\nmodule.exports = postorder;\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, \"post\");\n}\n\n},{\"./dfs\":33}],41:[function(require,module,exports){\nvar dfs = require(\"./dfs\");\n\nmodule.exports = preorder;\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, \"pre\");\n}\n\n},{\"./dfs\":33}],42:[function(require,module,exports){\nvar _ = require(\"../lodash\"),\n    Graph = require(\"../graph\"),\n    PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = prim;\n\nfunction prim(g, weightFunc) {\n  var result = new Graph(),\n      parents = {},\n      pq = new PriorityQueue(),\n      v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v,\n        pri = pq.priority(w);\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  _.each(g.nodes(), function(v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  });\n\n  // Start from an arbitrary node\n  pq.decrease(g.nodes()[0], 0);\n\n  var init = false;\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    if (_.has(parents, v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error(\"Input graph is not connected: \" + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}\n\n},{\"../data/priority-queue\":45,\"../graph\":46,\"../lodash\":49}],43:[function(require,module,exports){\nvar _ = require(\"../lodash\");\n\nmodule.exports = tarjan;\n\nfunction tarjan(g) {\n  var index = 0,\n      stack = [],\n      visited = {}, // node id -> { onStack, lowlink, index }\n      results = [];\n\n  function dfs(v) {\n    var entry = visited[v] = {\n      onStack: true,\n      lowlink: index,\n      index: index++\n    };\n    stack.push(v);\n\n    g.successors(v).forEach(function(w) {\n      if (!_.has(visited, w)) {\n        dfs(w);\n        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n      } else if (visited[w].onStack) {\n        entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n      }\n    });\n\n    if (entry.lowlink === entry.index) {\n      var cmpt = [],\n          w;\n      do {\n        w = stack.pop();\n        visited[w].onStack = false;\n        cmpt.push(w);\n      } while (v !== w);\n      results.push(cmpt);\n    }\n  }\n\n  g.nodes().forEach(function(v) {\n    if (!_.has(visited, v)) {\n      dfs(v);\n    }\n  });\n\n  return results;\n}\n\n},{\"../lodash\":49}],44:[function(require,module,exports){\nvar _ = require(\"../lodash\");\n\nmodule.exports = topsort;\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {},\n      stack = {},\n      results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\n\n},{\"../lodash\":49}],45:[function(require,module,exports){\nvar _ = require(\"../lodash\");\n\nmodule.exports = PriorityQueue;\n\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\nfunction PriorityQueue() {\n  this._arr = [];\n  this._keyIndices = {};\n}\n\n/**\n * Returns the number of elements in the queue. Takes `O(1)` time.\n */\nPriorityQueue.prototype.size = function() {\n  return this._arr.length;\n};\n\n/**\n * Returns the keys that are in the queue. Takes `O(n)` time.\n */\nPriorityQueue.prototype.keys = function() {\n  return this._arr.map(function(x) { return x.key; });\n};\n\n/**\n * Returns `true` if **key** is in the queue and `false` if not.\n */\nPriorityQueue.prototype.has = function(key) {\n  return _.has(this._keyIndices, key);\n};\n\n/**\n * Returns the priority for **key**. If **key** is not present in the queue\n * then this function returns `undefined`. Takes `O(1)` time.\n *\n * @param {Object} key\n */\nPriorityQueue.prototype.priority = function(key) {\n  var index = this._keyIndices[key];\n  if (index !== undefined) {\n    return this._arr[index].priority;\n  }\n};\n\n/**\n * Returns the key for the minimum element in this queue. If the queue is\n * empty this function throws an Error. Takes `O(1)` time.\n */\nPriorityQueue.prototype.min = function() {\n  if (this.size() === 0) {\n    throw new Error(\"Queue underflow\");\n  }\n  return this._arr[0].key;\n};\n\n/**\n * Inserts a new key into the priority queue. If the key already exists in\n * the queue this function returns `false`; otherwise it will return `true`.\n * Takes `O(n)` time.\n *\n * @param {Object} key the key to add\n * @param {Number} priority the initial priority for the key\n */\nPriorityQueue.prototype.add = function(key, priority) {\n  var keyIndices = this._keyIndices;\n  key = String(key);\n  if (!_.has(keyIndices, key)) {\n    var arr = this._arr;\n    var index = arr.length;\n    keyIndices[key] = index;\n    arr.push({key: key, priority: priority});\n    this._decrease(index);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n */\nPriorityQueue.prototype.removeMin = function() {\n  this._swap(0, this._arr.length - 1);\n  var min = this._arr.pop();\n  delete this._keyIndices[min.key];\n  this._heapify(0);\n  return min.key;\n};\n\n/**\n * Decreases the priority for **key** to **priority**. If the new priority is\n * greater than the previous priority, this function will throw an Error.\n *\n * @param {Object} key the key for which to raise priority\n * @param {Number} priority the new priority for the key\n */\nPriorityQueue.prototype.decrease = function(key, priority) {\n  var index = this._keyIndices[key];\n  if (priority > this._arr[index].priority) {\n    throw new Error(\"New priority is greater than current priority. \" +\n        \"Key: \" + key + \" Old: \" + this._arr[index].priority + \" New: \" + priority);\n  }\n  this._arr[index].priority = priority;\n  this._decrease(index);\n};\n\nPriorityQueue.prototype._heapify = function(i) {\n  var arr = this._arr;\n  var l = 2 * i,\n      r = l + 1,\n      largest = i;\n  if (l < arr.length) {\n    largest = arr[l].priority < arr[largest].priority ? l : largest;\n    if (r < arr.length) {\n      largest = arr[r].priority < arr[largest].priority ? r : largest;\n    }\n    if (largest !== i) {\n      this._swap(i, largest);\n      this._heapify(largest);\n    }\n  }\n};\n\nPriorityQueue.prototype._decrease = function(index) {\n  var arr = this._arr;\n  var priority = arr[index].priority;\n  var parent;\n  while (index !== 0) {\n    parent = index >> 1;\n    if (arr[parent].priority < priority) {\n      break;\n    }\n    this._swap(index, parent);\n    index = parent;\n  }\n};\n\nPriorityQueue.prototype._swap = function(i, j) {\n  var arr = this._arr;\n  var keyIndices = this._keyIndices;\n  var origArrI = arr[i];\n  var origArrJ = arr[j];\n  arr[i] = origArrJ;\n  arr[j] = origArrI;\n  keyIndices[origArrJ.key] = i;\n  keyIndices[origArrI.key] = j;\n};\n\n},{\"../lodash\":49}],46:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nmodule.exports = Graph;\n\nvar DEFAULT_EDGE_NAME = \"\\x00\",\n    GRAPH_NODE = \"\\x00\",\n    EDGE_KEY_DELIM = \"\\x01\";\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nfunction Graph(opts) {\n  this._isDirected = _.has(opts, \"directed\") ? opts.directed : true;\n  this._isMultigraph = _.has(opts, \"multigraph\") ? opts.multigraph : false;\n  this._isCompound = _.has(opts, \"compound\") ? opts.compound : false;\n\n  // Label for the graph itself\n  this._label = undefined;\n\n  // Defaults to be set when creating a new node\n  this._defaultNodeLabelFn = _.constant(undefined);\n\n  // Defaults to be set when creating a new edge\n  this._defaultEdgeLabelFn = _.constant(undefined);\n\n  // v -> label\n  this._nodes = {};\n\n  if (this._isCompound) {\n    // v -> parent\n    this._parent = {};\n\n    // v -> children\n    this._children = {};\n    this._children[GRAPH_NODE] = {};\n  }\n\n  // v -> edgeObj\n  this._in = {};\n\n  // u -> v -> Number\n  this._preds = {};\n\n  // v -> edgeObj\n  this._out = {};\n\n  // v -> w -> Number\n  this._sucs = {};\n\n  // e -> edgeObj\n  this._edgeObjs = {};\n\n  // e -> label\n  this._edgeLabels = {};\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\n\n/* === Graph functions ========= */\n\nGraph.prototype.isDirected = function() {\n  return this._isDirected;\n};\n\nGraph.prototype.isMultigraph = function() {\n  return this._isMultigraph;\n};\n\nGraph.prototype.isCompound = function() {\n  return this._isCompound;\n};\n\nGraph.prototype.setGraph = function(label) {\n  this._label = label;\n  return this;\n};\n\nGraph.prototype.graph = function() {\n  return this._label;\n};\n\n\n/* === Node functions ========== */\n\nGraph.prototype.setDefaultNodeLabel = function(newDefault) {\n  if (!_.isFunction(newDefault)) {\n    newDefault = _.constant(newDefault);\n  }\n  this._defaultNodeLabelFn = newDefault;\n  return this;\n};\n\nGraph.prototype.nodeCount = function() {\n  return this._nodeCount;\n};\n\nGraph.prototype.nodes = function() {\n  return _.keys(this._nodes);\n};\n\nGraph.prototype.sources = function() {\n  return _.filter(this.nodes(), function(v) {\n    return _.isEmpty(this._in[v]);\n  }, this);\n};\n\nGraph.prototype.sinks = function() {\n  return _.filter(this.nodes(), function(v) {\n    return _.isEmpty(this._out[v]);\n  }, this);\n};\n\nGraph.prototype.setNodes = function(vs, value) {\n  var args = arguments;\n  _.each(vs, function(v) {\n    if (args.length > 1) {\n      this.setNode(v, value);\n    } else {\n      this.setNode(v);\n    }\n  }, this);\n  return this;\n};\n\nGraph.prototype.setNode = function(v, value) {\n  if (_.has(this._nodes, v)) {\n    if (arguments.length > 1) {\n      this._nodes[v] = value;\n    }\n    return this;\n  }\n\n  this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n  if (this._isCompound) {\n    this._parent[v] = GRAPH_NODE;\n    this._children[v] = {};\n    this._children[GRAPH_NODE][v] = true;\n  }\n  this._in[v] = {};\n  this._preds[v] = {};\n  this._out[v] = {};\n  this._sucs[v] = {};\n  ++this._nodeCount;\n  return this;\n};\n\nGraph.prototype.node = function(v) {\n  return this._nodes[v];\n};\n\nGraph.prototype.hasNode = function(v) {\n  return _.has(this._nodes, v);\n};\n\nGraph.prototype.removeNode =  function(v) {\n  var self = this;\n  if (_.has(this._nodes, v)) {\n    var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };\n    delete this._nodes[v];\n    if (this._isCompound) {\n      this._removeFromParentsChildList(v);\n      delete this._parent[v];\n      _.each(this.children(v), function(child) {\n        this.setParent(child);\n      }, this);\n      delete this._children[v];\n    }\n    _.each(_.keys(this._in[v]), removeEdge);\n    delete this._in[v];\n    delete this._preds[v];\n    _.each(_.keys(this._out[v]), removeEdge);\n    delete this._out[v];\n    delete this._sucs[v];\n    --this._nodeCount;\n  }\n  return this;\n};\n\nGraph.prototype.setParent = function(v, parent) {\n  if (!this._isCompound) {\n    throw new Error(\"Cannot set parent in a non-compound graph\");\n  }\n\n  if (_.isUndefined(parent)) {\n    parent = GRAPH_NODE;\n  } else {\n    for (var ancestor = parent;\n         !_.isUndefined(ancestor);\n         ancestor = this.parent(ancestor)) {\n      if (ancestor === v) {\n        throw new Error(\"Setting \" + parent+ \" as parent of \" + v +\n                        \" would create create a cycle\");\n      }\n    }\n\n    this.setNode(parent);\n  }\n\n  this.setNode(v);\n  this._removeFromParentsChildList(v);\n  this._parent[v] = parent;\n  this._children[parent][v] = true;\n  return this;\n};\n\nGraph.prototype._removeFromParentsChildList = function(v) {\n  delete this._children[this._parent[v]][v];\n};\n\nGraph.prototype.parent = function(v) {\n  if (this._isCompound) {\n    var parent = this._parent[v];\n    if (parent !== GRAPH_NODE) {\n      return parent;\n    }\n  }\n};\n\nGraph.prototype.children = function(v) {\n  if (_.isUndefined(v)) {\n    v = GRAPH_NODE;\n  }\n\n  if (this._isCompound) {\n    var children = this._children[v];\n    if (children) {\n      return _.keys(children);\n    }\n  } else if (v === GRAPH_NODE) {\n    return this.nodes();\n  } else if (this.hasNode(v)) {\n    return [];\n  }\n};\n\nGraph.prototype.predecessors = function(v) {\n  var predsV = this._preds[v];\n  if (predsV) {\n    return _.keys(predsV);\n  }\n};\n\nGraph.prototype.successors = function(v) {\n  var sucsV = this._sucs[v];\n  if (sucsV) {\n    return _.keys(sucsV);\n  }\n};\n\nGraph.prototype.neighbors = function(v) {\n  var preds = this.predecessors(v);\n  if (preds) {\n    return _.union(preds, this.successors(v));\n  }\n};\n\n/* === Edge functions ========== */\n\nGraph.prototype.setDefaultEdgeLabel = function(newDefault) {\n  if (!_.isFunction(newDefault)) {\n    newDefault = _.constant(newDefault);\n  }\n  this._defaultEdgeLabelFn = newDefault;\n  return this;\n};\n\nGraph.prototype.edgeCount = function() {\n  return this._edgeCount;\n};\n\nGraph.prototype.edges = function() {\n  return _.values(this._edgeObjs);\n};\n\nGraph.prototype.setPath = function(vs, value) {\n  var self = this,\n      args = arguments;\n  _.reduce(vs, function(v, w) {\n    if (args.length > 1) {\n      self.setEdge(v, w, value);\n    } else {\n      self.setEdge(v, w);\n    }\n    return w;\n  });\n  return this;\n};\n\n/*\n * setEdge(v, w, [value, [name]])\n * setEdge({ v, w, [name] }, [value])\n */\nGraph.prototype.setEdge = function() {\n  var v, w, name, value,\n      valueSpecified = false;\n\n  if (_.isPlainObject(arguments[0])) {\n    v = arguments[0].v;\n    w = arguments[0].w;\n    name = arguments[0].name;\n    if (arguments.length === 2) {\n      value = arguments[1];\n      valueSpecified = true;\n    }\n  } else {\n    v = arguments[0];\n    w = arguments[1];\n    name = arguments[3];\n    if (arguments.length > 2) {\n      value = arguments[2];\n      valueSpecified = true;\n    }\n  }\n\n  v = \"\" + v;\n  w = \"\" + w;\n  if (!_.isUndefined(name)) {\n    name = \"\" + name;\n  }\n\n  var e = edgeArgsToId(this._isDirected, v, w, name);\n  if (_.has(this._edgeLabels, e)) {\n    if (valueSpecified) {\n      this._edgeLabels[e] = value;\n    }\n    return this;\n  }\n\n  if (!_.isUndefined(name) && !this._isMultigraph) {\n    throw new Error(\"Cannot set a named edge when isMultigraph = false\");\n  }\n\n  // It didn't exist, so we need to create it.\n  // First ensure the nodes exist.\n  this.setNode(v);\n  this.setNode(w);\n\n  this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n  var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n  // Ensure we add undirected edges in a consistent way.\n  v = edgeObj.v;\n  w = edgeObj.w;\n\n  Object.freeze(edgeObj);\n  this._edgeObjs[e] = edgeObj;\n  incrementOrInitEntry(this._preds[w], v);\n  incrementOrInitEntry(this._sucs[v], w);\n  this._in[w][e] = edgeObj;\n  this._out[v][e] = edgeObj;\n  this._edgeCount++;\n  return this;\n};\n\nGraph.prototype.edge = function(v, w, name) {\n  var e = (arguments.length === 1\n            ? edgeObjToId(this._isDirected, arguments[0])\n            : edgeArgsToId(this._isDirected, v, w, name));\n  return this._edgeLabels[e];\n};\n\nGraph.prototype.hasEdge = function(v, w, name) {\n  var e = (arguments.length === 1\n            ? edgeObjToId(this._isDirected, arguments[0])\n            : edgeArgsToId(this._isDirected, v, w, name));\n  return _.has(this._edgeLabels, e);\n};\n\nGraph.prototype.removeEdge = function(v, w, name) {\n  var e = (arguments.length === 1\n            ? edgeObjToId(this._isDirected, arguments[0])\n            : edgeArgsToId(this._isDirected, v, w, name)),\n      edge = this._edgeObjs[e];\n  if (edge) {\n    v = edge.v;\n    w = edge.w;\n    delete this._edgeLabels[e];\n    delete this._edgeObjs[e];\n    decrementOrRemoveEntry(this._preds[w], v);\n    decrementOrRemoveEntry(this._sucs[v], w);\n    delete this._in[w][e];\n    delete this._out[v][e];\n    this._edgeCount--;\n  }\n  return this;\n};\n\nGraph.prototype.inEdges = function(v, u) {\n  var inV = this._in[v];\n  if (inV) {\n    var edges = _.values(inV);\n    if (!u) {\n      return edges;\n    }\n    return _.filter(edges, function(edge) { return edge.v === u; });\n  }\n};\n\nGraph.prototype.outEdges = function(v, w) {\n  var outV = this._out[v];\n  if (outV) {\n    var edges = _.values(outV);\n    if (!w) {\n      return edges;\n    }\n    return _.filter(edges, function(edge) { return edge.w === w; });\n  }\n};\n\nGraph.prototype.nodeEdges = function(v, w) {\n  var inEdges = this.inEdges(v, w);\n  if (inEdges) {\n    return inEdges.concat(this.outEdges(v, w));\n  }\n};\n\nfunction incrementOrInitEntry(map, k) {\n  if (_.has(map, k)) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) { delete map[k]; }\n}\n\nfunction edgeArgsToId(isDirected, v, w, name) {\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +\n             (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v, w, name) {\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj =  { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n\n},{\"./lodash\":49}],47:[function(require,module,exports){\n// Includes only the \"core\" of graphlib\nmodule.exports = {\n  Graph: require(\"./graph\"),\n  version: require(\"./version\")\n};\n\n},{\"./graph\":46,\"./version\":50}],48:[function(require,module,exports){\nvar _ = require(\"./lodash\"),\n    Graph = require(\"./graph\");\n\nmodule.exports = {\n  write: write,\n  read: read\n};\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound()\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g)\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function(v) {\n    var nodeValue = g.node(v),\n        parent = g.parent(v),\n        node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function(e) {\n    var edgeValue = g.edge(e),\n        edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function(entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function(entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n\n},{\"./graph\":46,\"./lodash\":49}],49:[function(require,module,exports){\nmodule.exports=require(10)\n},{\"/Users/cpettitt/projects/dagre/lib/lodash.js\":10,\"lodash\":51}],50:[function(require,module,exports){\nmodule.exports = '1.0.1';\n\n},{}],51:[function(require,module,exports){\n(function (global){\n/**\n * @license\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modern -o ./dist/lodash.js`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments */\n  var undefined;\n\n  /** Used to pool arrays and objects used internally */\n  var arrayPool = [],\n      objectPool = [];\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */\n  var keyPrefix = +new Date + '';\n\n  /** Used as the size when optimizations are enabled for large arrays */\n  var largeArraySize = 75;\n\n  /** Used as the max size of the `arrayPool` and `objectPool` */\n  var maxPoolSize = 40;\n\n  /** Used to detect and test whitespace */\n  var whitespace = (\n    // whitespace\n    ' \\t\\x0B\\f\\xA0\\ufeff' +\n\n    // line terminators\n    '\\n\\r\\u2028\\u2029' +\n\n    // unicode category \"Zs\" space separators\n    '\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'\n  );\n\n  /** Used to match empty string literals in compiled template source */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /**\n   * Used to match ES6 template delimiters\n   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match regexp flags from their coerced string values */\n  var reFlags = /\\w*$/;\n\n  /** Used to detected named functions */\n  var reFuncName = /^\\s*function[ \\n\\r\\t]+\\w/;\n\n  /** Used to match \"interpolate\" template delimiters */\n  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match leading whitespace and zeros to be removed */\n  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');\n\n  /** Used to ensure capturing order of template delimiters */\n  var reNoMatch = /($^)/;\n\n  /** Used to detect functions containing a `this` reference */\n  var reThis = /\\bthis\\b/;\n\n  /** Used to match unescaped characters in compiled string literals */\n  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n  /** Used to assign default `context` object properties */\n  var contextProps = [\n    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',\n    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',\n    'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify */\n  var templateCounter = 0;\n\n  /** `Object#toString` result shortcuts */\n  var argsClass = '[object Arguments]',\n      arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      objectClass = '[object Object]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /** Used to identify object classifications that `_.clone` supports */\n  var cloneableClasses = {};\n  cloneableClasses[funcClass] = false;\n  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =\n  cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n  cloneableClasses[numberClass] = cloneableClasses[objectClass] =\n  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;\n\n  /** Used as an internal `_.debounce` options object */\n  var debounceOptions = {\n    'leading': false,\n    'maxWait': 0,\n    'trailing': false\n  };\n\n  /** Used as the property descriptor for `__bindData__` */\n  var descriptor = {\n    'configurable': false,\n    'enumerable': false,\n    'value': null,\n    'writable': false\n  };\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\t': 't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports` */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = objectTypes[typeof global] && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The base implementation of `_.indexOf` without support for binary searches\n   * or `fromIndex` constraints.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {*} value The value to search for.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {number} Returns the index of the matched value or `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    var index = (fromIndex || 0) - 1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * An implementation of `_.contains` for cache objects that mimics the return\n   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.\n   *\n   * @private\n   * @param {Object} cache The cache object to inspect.\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `0` if `value` is found, else `-1`.\n   */\n  function cacheIndexOf(cache, value) {\n    var type = typeof value;\n    cache = cache.cache;\n\n    if (type == 'boolean' || value == null) {\n      return cache[value] ? 0 : -1;\n    }\n    if (type != 'number' && type != 'string') {\n      type = 'object';\n    }\n    var key = type == 'number' ? value : keyPrefix + value;\n    cache = (cache = cache[type]) && cache[key];\n\n    return type == 'object'\n      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)\n      : (cache ? 0 : -1);\n  }\n\n  /**\n   * Adds a given value to the corresponding cache object.\n   *\n   * @private\n   * @param {*} value The value to add to the cache.\n   */\n  function cachePush(value) {\n    var cache = this.cache,\n        type = typeof value;\n\n    if (type == 'boolean' || value == null) {\n      cache[value] = true;\n    } else {\n      if (type != 'number' && type != 'string') {\n        type = 'object';\n      }\n      var key = type == 'number' ? value : keyPrefix + value,\n          typeCache = cache[type] || (cache[type] = {});\n\n      if (type == 'object') {\n        (typeCache[key] || (typeCache[key] = [])).push(value);\n      } else {\n        typeCache[key] = true;\n      }\n    }\n  }\n\n  /**\n   * Used by `_.max` and `_.min` as the default callback when a given\n   * collection is a string value.\n   *\n   * @private\n   * @param {string} value The character to inspect.\n   * @returns {number} Returns the code unit of given character.\n   */\n  function charAtCallback(value) {\n    return value.charCodeAt(0);\n  }\n\n  /**\n   * Used by `sortBy` to compare transformed `collection` elements, stable sorting\n   * them in ascending order.\n   *\n   * @private\n   * @param {Object} a The object to compare to `b`.\n   * @param {Object} b The object to compare to `a`.\n   * @returns {number} Returns the sort order indicator of `1` or `-1`.\n   */\n  function compareAscending(a, b) {\n    var ac = a.criteria,\n        bc = b.criteria,\n        index = -1,\n        length = ac.length;\n\n    while (++index < length) {\n      var value = ac[index],\n          other = bc[index];\n\n      if (value !== other) {\n        if (value > other || typeof value == 'undefined') {\n          return 1;\n        }\n        if (value < other || typeof other == 'undefined') {\n          return -1;\n        }\n      }\n    }\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n    // that causes it, under certain circumstances, to return the same value for\n    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247\n    //\n    // This also ensures a stable sort in V8 and other engines.\n    // See http://code.google.com/p/v8/issues/detail?id=90\n    return a.index - b.index;\n  }\n\n  /**\n   * Creates a cache object to optimize linear searches of large arrays.\n   *\n   * @private\n   * @param {Array} [array=[]] The array to search.\n   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.\n   */\n  function createCache(array) {\n    var index = -1,\n        length = array.length,\n        first = array[0],\n        mid = array[(length / 2) | 0],\n        last = array[length - 1];\n\n    if (first && typeof first == 'object' &&\n        mid && typeof mid == 'object' && last && typeof last == 'object') {\n      return false;\n    }\n    var cache = getObject();\n    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;\n\n    var result = getObject();\n    result.array = array;\n    result.cache = cache;\n    result.push = cachePush;\n\n    while (++index < length) {\n      result.push(array[index]);\n    }\n    return result;\n  }\n\n  /**\n   * Used by `template` to escape characters for inclusion in compiled\n   * string literals.\n   *\n   * @private\n   * @param {string} match The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(match) {\n    return '\\\\' + stringEscapes[match];\n  }\n\n  /**\n   * Gets an array from the array pool or creates a new one if the pool is empty.\n   *\n   * @private\n   * @returns {Array} The array from the pool.\n   */\n  function getArray() {\n    return arrayPool.pop() || [];\n  }\n\n  /**\n   * Gets an object from the object pool or creates a new one if the pool is empty.\n   *\n   * @private\n   * @returns {Object} The object from the pool.\n   */\n  function getObject() {\n    return objectPool.pop() || {\n      'array': null,\n      'cache': null,\n      'criteria': null,\n      'false': false,\n      'index': 0,\n      'null': false,\n      'number': null,\n      'object': null,\n      'push': null,\n      'string': null,\n      'true': false,\n      'undefined': false,\n      'value': null\n    };\n  }\n\n  /**\n   * Releases the given array back to the array pool.\n   *\n   * @private\n   * @param {Array} [array] The array to release.\n   */\n  function releaseArray(array) {\n    array.length = 0;\n    if (arrayPool.length < maxPoolSize) {\n      arrayPool.push(array);\n    }\n  }\n\n  /**\n   * Releases the given object back to the object pool.\n   *\n   * @private\n   * @param {Object} [object] The object to release.\n   */\n  function releaseObject(object) {\n    var cache = object.cache;\n    if (cache) {\n      releaseObject(cache);\n    }\n    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;\n    if (objectPool.length < maxPoolSize) {\n      objectPool.push(object);\n    }\n  }\n\n  /**\n   * Slices the `collection` from the `start` index up to, but not including,\n   * the `end` index.\n   *\n   * Note: This function is used instead of `Array#slice` to support node lists\n   * in IE < 9 and to ensure dense arrays are returned.\n   *\n   * @private\n   * @param {Array|Object|string} collection The collection to slice.\n   * @param {number} start The start index.\n   * @param {number} end The end index.\n   * @returns {Array} Returns the new array.\n   */\n  function slice(array, start, end) {\n    start || (start = 0);\n    if (typeof end == 'undefined') {\n      end = array ? array.length : 0;\n    }\n    var index = -1,\n        length = end - start || 0,\n        result = Array(length < 0 ? 0 : length);\n\n    while (++index < length) {\n      result[index] = array[start + index];\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `lodash` function using the given context object.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns the `lodash` function.\n   */\n  function runInContext(context) {\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.io/#x11.1.5.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references */\n    var Array = context.Array,\n        Boolean = context.Boolean,\n        Date = context.Date,\n        Function = context.Function,\n        Math = context.Math,\n        Number = context.Number,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /**\n     * Used for `Array` method references.\n     *\n     * Normally `Array.prototype` would suffice, however, using an array literal\n     * avoids issues in Narwhal.\n     */\n    var arrayRef = [];\n\n    /** Used for native method references */\n    var objectProto = Object.prototype;\n\n    /** Used to restore the original `_` reference in `noConflict` */\n    var oldDash = context._;\n\n    /** Used to resolve the internal [[Class]] of values */\n    var toString = objectProto.toString;\n\n    /** Used to detect if a method is native */\n    var reNative = RegExp('^' +\n      String(toString)\n        .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n        .replace(/toString| for [^\\]]+/g, '.*?') + '$'\n    );\n\n    /** Native method shortcuts */\n    var ceil = Math.ceil,\n        clearTimeout = context.clearTimeout,\n        floor = Math.floor,\n        fnToString = Function.prototype.toString,\n        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n        hasOwnProperty = objectProto.hasOwnProperty,\n        push = arrayRef.push,\n        setTimeout = context.setTimeout,\n        splice = arrayRef.splice,\n        unshift = arrayRef.unshift;\n\n    /** Used to set meta data on functions */\n    var defineProperty = (function() {\n      // IE 8 only accepts DOM elements\n      try {\n        var o = {},\n            func = isNative(func = Object.defineProperty) && func,\n            result = func(o, o, o) && func;\n      } catch(e) { }\n      return result;\n    }());\n\n    /* Native method shortcuts for methods with the same name as other `lodash` methods */\n    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,\n        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,\n        nativeIsFinite = context.isFinite,\n        nativeIsNaN = context.isNaN,\n        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random;\n\n    /** Used to lookup a built-in constructor by [[Class]] */\n    var ctorByClass = {};\n    ctorByClass[arrayClass] = Array;\n    ctorByClass[boolClass] = Boolean;\n    ctorByClass[dateClass] = Date;\n    ctorByClass[funcClass] = Function;\n    ctorByClass[objectClass] = Object;\n    ctorByClass[numberClass] = Number;\n    ctorByClass[regexpClass] = RegExp;\n    ctorByClass[stringClass] = String;\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps the given value to enable intuitive\n     * method chaining.\n     *\n     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\n     * and `unshift`\n     *\n     * Chaining is supported in custom builds as long as the `value` method is\n     * implicitly or explicitly included in the build.\n     *\n     * The chainable wrapper functions are:\n     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,\n     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,\n     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,\n     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,\n     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,\n     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,\n     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,\n     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,\n     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,\n     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,\n     * and `zip`\n     *\n     * The non-chainable wrapper functions are:\n     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,\n     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,\n     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,\n     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,\n     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,\n     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,\n     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,\n     * `template`, `unescape`, `uniqueId`, and `value`\n     *\n     * The wrapper functions `first` and `last` return wrapped values when `n` is\n     * provided, otherwise they return unwrapped values.\n     *\n     * Explicit chaining can be enabled by using the `_.chain` method.\n     *\n     * @name _\n     * @constructor\n     * @category Chaining\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns a `lodash` instance.\n     * @example\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // returns an unwrapped value\n     * wrapped.reduce(function(sum, num) {\n     *   return sum + num;\n     * });\n     * // => 6\n     *\n     * // returns a wrapped value\n     * var squares = wrapped.map(function(num) {\n     *   return num * num;\n     * });\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor\n      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))\n       ? value\n       : new lodashWrapper(value);\n    }\n\n    /**\n     * A fast path for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @param {boolean} chainAll A flag to enable chaining for all methods\n     * @returns {Object} Returns a `lodash` instance.\n     */\n    function lodashWrapper(value, chainAll) {\n      this.__chain__ = !!chainAll;\n      this.__wrapped__ = value;\n    }\n    // ensure `new lodashWrapper` is an instance of `lodash`\n    lodashWrapper.prototype = lodash.prototype;\n\n    /**\n     * An object used to flag environments features.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    var support = lodash.support = {};\n\n    /**\n     * Detect if functions can be decompiled by `Function#toString`\n     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).\n     *\n     * @memberOf _.support\n     * @type boolean\n     */\n    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);\n\n    /**\n     * Detect if `Function#name` is supported (all but IE).\n     *\n     * @memberOf _.support\n     * @type boolean\n     */\n    support.funcNames = typeof Function.name == 'string';\n\n    /**\n     * By default, the template delimiters used by Lo-Dash are similar to those in\n     * embedded Ruby (ERB). Change the following template settings to use alternative\n     * delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'escape': /<%-([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'evaluate': /<%([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type string\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type Object\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type Function\n         */\n        '_': lodash\n      }\n    };\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * The base implementation of `_.bind` that creates the bound function and\n     * sets its meta data.\n     *\n     * @private\n     * @param {Array} bindData The bind data array.\n     * @returns {Function} Returns the new bound function.\n     */\n    function baseBind(bindData) {\n      var func = bindData[0],\n          partialArgs = bindData[2],\n          thisArg = bindData[4];\n\n      function bound() {\n        // `Function#bind` spec\n        // http://es5.github.io/#x15.3.4.5\n        if (partialArgs) {\n          // avoid `arguments` object deoptimizations by using `slice` instead\n          // of `Array.prototype.slice.call` and not assigning `arguments` to a\n          // variable as a ternary expression\n          var args = slice(partialArgs);\n          push.apply(args, arguments);\n        }\n        // mimic the constructor's `return` behavior\n        // http://es5.github.io/#x13.2.2\n        if (this instanceof bound) {\n          // ensure `new bound` is an instance of `func`\n          var thisBinding = baseCreate(func.prototype),\n              result = func.apply(thisBinding, args || arguments);\n          return isObject(result) ? result : thisBinding;\n        }\n        return func.apply(thisArg, args || arguments);\n      }\n      setBindData(bound, bindData);\n      return bound;\n    }\n\n    /**\n     * The base implementation of `_.clone` without argument juggling or support\n     * for `thisArg` binding.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep=false] Specify a deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates clones with source counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, isDeep, callback, stackA, stackB) {\n      if (callback) {\n        var result = callback(value);\n        if (typeof result != 'undefined') {\n          return result;\n        }\n      }\n      // inspect [[Class]]\n      var isObj = isObject(value);\n      if (isObj) {\n        var className = toString.call(value);\n        if (!cloneableClasses[className]) {\n          return value;\n        }\n        var ctor = ctorByClass[className];\n        switch (className) {\n          case boolClass:\n          case dateClass:\n            return new ctor(+value);\n\n          case numberClass:\n          case stringClass:\n            return new ctor(value);\n\n          case regexpClass:\n            result = ctor(value.source, reFlags.exec(value));\n            result.lastIndex = value.lastIndex;\n            return result;\n        }\n      } else {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isDeep) {\n        // check for circular references and return corresponding clone\n        var initedStack = !stackA;\n        stackA || (stackA = getArray());\n        stackB || (stackB = getArray());\n\n        var length = stackA.length;\n        while (length--) {\n          if (stackA[length] == value) {\n            return stackB[length];\n          }\n        }\n        result = isArr ? ctor(value.length) : {};\n      }\n      else {\n        result = isArr ? slice(value) : assign({}, value);\n      }\n      // add array properties assigned by `RegExp#exec`\n      if (isArr) {\n        if (hasOwnProperty.call(value, 'index')) {\n          result.index = value.index;\n        }\n        if (hasOwnProperty.call(value, 'input')) {\n          result.input = value.input;\n        }\n      }\n      // exit for shallow clone\n      if (!isDeep) {\n        return result;\n      }\n      // add the source value to the stack of traversed objects\n      // and associate it with its clone\n      stackA.push(value);\n      stackB.push(result);\n\n      // recursively populate clone (susceptible to call stack limits)\n      (isArr ? forEach : forOwn)(value, function(objValue, key) {\n        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);\n      });\n\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} prototype The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    function baseCreate(prototype, properties) {\n      return isObject(prototype) ? nativeCreate(prototype) : {};\n    }\n    // fallback for browsers without `Object.create`\n    if (!nativeCreate) {\n      baseCreate = (function() {\n        function Object() {}\n        return function(prototype) {\n          if (isObject(prototype)) {\n            Object.prototype = prototype;\n            var result = new Object;\n            Object.prototype = null;\n          }\n          return result || context.Object();\n        };\n      }());\n    }\n\n    /**\n     * The base implementation of `_.createCallback` without support for creating\n     * \"_.pluck\" or \"_.where\" style callbacks.\n     *\n     * @private\n     * @param {*} [func=identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of the created callback.\n     * @param {number} [argCount] The number of arguments the callback accepts.\n     * @returns {Function} Returns a callback function.\n     */\n    function baseCreateCallback(func, thisArg, argCount) {\n      if (typeof func != 'function') {\n        return identity;\n      }\n      // exit early for no `thisArg` or already bound by `Function#bind`\n      if (typeof thisArg == 'undefined' || !('prototype' in func)) {\n        return func;\n      }\n      var bindData = func.__bindData__;\n      if (typeof bindData == 'undefined') {\n        if (support.funcNames) {\n          bindData = !func.name;\n        }\n        bindData = bindData || !support.funcDecomp;\n        if (!bindData) {\n          var source = fnToString.call(func);\n          if (!support.funcNames) {\n            bindData = !reFuncName.test(source);\n          }\n          if (!bindData) {\n            // checks if `func` references the `this` keyword and stores the result\n            bindData = reThis.test(source);\n            setBindData(func, bindData);\n          }\n        }\n      }\n      // exit early if there are no `this` references or `func` is bound\n      if (bindData === false || (bindData !== true && bindData[1] & 1)) {\n        return func;\n      }\n      switch (argCount) {\n        case 1: return function(value) {\n          return func.call(thisArg, value);\n        };\n        case 2: return function(a, b) {\n          return func.call(thisArg, a, b);\n        };\n        case 3: return function(value, index, collection) {\n          return func.call(thisArg, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(thisArg, accumulator, value, index, collection);\n        };\n      }\n      return bind(func, thisArg);\n    }\n\n    /**\n     * The base implementation of `createWrapper` that creates the wrapper and\n     * sets its meta data.\n     *\n     * @private\n     * @param {Array} bindData The bind data array.\n     * @returns {Function} Returns the new function.\n     */\n    function baseCreateWrapper(bindData) {\n      var func = bindData[0],\n          bitmask = bindData[1],\n          partialArgs = bindData[2],\n          partialRightArgs = bindData[3],\n          thisArg = bindData[4],\n          arity = bindData[5];\n\n      var isBind = bitmask & 1,\n          isBindKey = bitmask & 2,\n          isCurry = bitmask & 4,\n          isCurryBound = bitmask & 8,\n          key = func;\n\n      function bound() {\n        var thisBinding = isBind ? thisArg : this;\n        if (partialArgs) {\n          var args = slice(partialArgs);\n          push.apply(args, arguments);\n        }\n        if (partialRightArgs || isCurry) {\n          args || (args = slice(arguments));\n          if (partialRightArgs) {\n            push.apply(args, partialRightArgs);\n          }\n          if (isCurry && args.length < arity) {\n            bitmask |= 16 & ~32;\n            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);\n          }\n        }\n        args || (args = arguments);\n        if (isBindKey) {\n          func = thisBinding[key];\n        }\n        if (this instanceof bound) {\n          thisBinding = baseCreate(func.prototype);\n          var result = func.apply(thisBinding, args);\n          return isObject(result) ? result : thisBinding;\n        }\n        return func.apply(thisBinding, args);\n      }\n      setBindData(bound, bindData);\n      return bound;\n    }\n\n    /**\n     * The base implementation of `_.difference` that accepts a single array\n     * of values to exclude.\n     *\n     * @private\n     * @param {Array} array The array to process.\n     * @param {Array} [values] The array of values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     */\n    function baseDifference(array, values) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          isLarge = length >= largeArraySize && indexOf === baseIndexOf,\n          result = [];\n\n      if (isLarge) {\n        var cache = createCache(values);\n        if (cache) {\n          indexOf = cacheIndexOf;\n          values = cache;\n        } else {\n          isLarge = false;\n        }\n      }\n      while (++index < length) {\n        var value = array[index];\n        if (indexOf(values, value) < 0) {\n          result.push(value);\n        }\n      }\n      if (isLarge) {\n        releaseObject(values);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` without support for callback\n     * shorthands or `thisArg` binding.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.\n     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.\n     * @param {number} [fromIndex=0] The index to start from.\n     * @returns {Array} Returns a new flattened array.\n     */\n    function baseFlatten(array, isShallow, isStrict, fromIndex) {\n      var index = (fromIndex || 0) - 1,\n          length = array ? array.length : 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n\n        if (value && typeof value == 'object' && typeof value.length == 'number'\n            && (isArray(value) || isArguments(value))) {\n          // recursively flatten arrays (susceptible to call stack limits)\n          if (!isShallow) {\n            value = baseFlatten(value, isShallow, isStrict);\n          }\n          var valIndex = -1,\n              valLength = value.length,\n              resIndex = result.length;\n\n          result.length += valLength;\n          while (++valIndex < valLength) {\n            result[resIndex++] = value[valIndex];\n          }\n        } else if (!isStrict) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.isEqual`, without support for `thisArg` binding,\n     * that allows partial \"_.where\" style comparisons.\n     *\n     * @private\n     * @param {*} a The value to compare.\n     * @param {*} b The other value to compare.\n     * @param {Function} [callback] The function to customize comparing values.\n     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.\n     * @param {Array} [stackA=[]] Tracks traversed `a` objects.\n     * @param {Array} [stackB=[]] Tracks traversed `b` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {\n      // used to indicate that when comparing objects, `a` has at least the properties of `b`\n      if (callback) {\n        var result = callback(a, b);\n        if (typeof result != 'undefined') {\n          return !!result;\n        }\n      }\n      // exit early for identical values\n      if (a === b) {\n        // treat `+0` vs. `-0` as not equal\n        return a !== 0 || (1 / a == 1 / b);\n      }\n      var type = typeof a,\n          otherType = typeof b;\n\n      // exit early for unlike primitive values\n      if (a === a &&\n          !(a && objectTypes[type]) &&\n          !(b && objectTypes[otherType])) {\n        return false;\n      }\n      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior\n      // http://es5.github.io/#x15.3.4.4\n      if (a == null || b == null) {\n        return a === b;\n      }\n      // compare [[Class]] names\n      var className = toString.call(a),\n          otherClass = toString.call(b);\n\n      if (className == argsClass) {\n        className = objectClass;\n      }\n      if (otherClass == argsClass) {\n        otherClass = objectClass;\n      }\n      if (className != otherClass) {\n        return false;\n      }\n      switch (className) {\n        case boolClass:\n        case dateClass:\n          // coerce dates and booleans to numbers, dates to milliseconds and booleans\n          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal\n          return +a == +b;\n\n        case numberClass:\n          // treat `NaN` vs. `NaN` as equal\n          return (a != +a)\n            ? b != +b\n            // but treat `+0` vs. `-0` as not equal\n            : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n        case regexpClass:\n        case stringClass:\n          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)\n          // treat string primitives and their corresponding object instances as equal\n          return a == String(b);\n      }\n      var isArr = className == arrayClass;\n      if (!isArr) {\n        // unwrap any `lodash` wrapped values\n        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),\n            bWrapped = hasOwnProperty.call(b, '__wrapped__');\n\n        if (aWrapped || bWrapped) {\n          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);\n        }\n        // exit for functions and DOM nodes\n        if (className != objectClass) {\n          return false;\n        }\n        // in older versions of Opera, `arguments` objects have `Array` constructors\n        var ctorA = a.constructor,\n            ctorB = b.constructor;\n\n        // non `Object` object instances with different constructors are not equal\n        if (ctorA != ctorB &&\n              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&\n              ('constructor' in a && 'constructor' in b)\n            ) {\n          return false;\n        }\n      }\n      // assume cyclic structures are equal\n      // the algorithm for detecting cyclic structures is adapted from ES 5.1\n      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)\n      var initedStack = !stackA;\n      stackA || (stackA = getArray());\n      stackB || (stackB = getArray());\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == a) {\n          return stackB[length] == b;\n        }\n      }\n      var size = 0;\n      result = true;\n\n      // add `a` and `b` to the stack of traversed objects\n      stackA.push(a);\n      stackB.push(b);\n\n      // recursively compare objects and arrays (susceptible to call stack limits)\n      if (isArr) {\n        // compare lengths to determine if a deep comparison is necessary\n        length = a.length;\n        size = b.length;\n        result = size == length;\n\n        if (result || isWhere) {\n          // deep compare the contents, ignoring non-numeric properties\n          while (size--) {\n            var index = length,\n                value = b[size];\n\n            if (isWhere) {\n              while (index--) {\n                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {\n                  break;\n                }\n              }\n            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {\n              break;\n            }\n          }\n        }\n      }\n      else {\n        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`\n        // which, in this case, is more costly\n        forIn(b, function(value, key, b) {\n          if (hasOwnProperty.call(b, key)) {\n            // count the number of properties.\n            size++;\n            // deep compare each property value.\n            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));\n          }\n        });\n\n        if (result && !isWhere) {\n          // ensure both objects have the same number of properties\n          forIn(a, function(value, key, a) {\n            if (hasOwnProperty.call(a, key)) {\n              // `size` will be `-1` if `a` has more properties than `b`\n              return (result = --size > -1);\n            }\n          });\n        }\n      }\n      stackA.pop();\n      stackB.pop();\n\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.merge` without argument juggling or support\n     * for `thisArg` binding.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {Function} [callback] The function to customize merging properties.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates values with source counterparts.\n     */\n    function baseMerge(object, source, callback, stackA, stackB) {\n      (isArray(source) ? forEach : forOwn)(source, function(source, key) {\n        var found,\n            isArr,\n            result = source,\n            value = object[key];\n\n        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n          // avoid merging previously merged cyclic sources\n          var stackLength = stackA.length;\n          while (stackLength--) {\n            if ((found = stackA[stackLength] == source)) {\n              value = stackB[stackLength];\n              break;\n            }\n          }\n          if (!found) {\n            var isShallow;\n            if (callback) {\n              result = callback(value, source);\n              if ((isShallow = typeof result != 'undefined')) {\n                value = result;\n              }\n            }\n            if (!isShallow) {\n              value = isArr\n                ? (isArray(value) ? value : [])\n                : (isPlainObject(value) ? value : {});\n            }\n            // add `source` and associated `value` to the stack of traversed objects\n            stackA.push(source);\n            stackB.push(value);\n\n            // recursively merge objects and arrays (susceptible to call stack limits)\n            if (!isShallow) {\n              baseMerge(value, source, callback, stackA, stackB);\n            }\n          }\n        }\n        else {\n          if (callback) {\n            result = callback(value, source);\n            if (typeof result == 'undefined') {\n              result = source;\n            }\n          }\n          if (typeof result != 'undefined') {\n            value = result;\n          }\n        }\n        object[key] = value;\n      });\n    }\n\n    /**\n     * The base implementation of `_.random` without argument juggling or support\n     * for returning floating-point numbers.\n     *\n     * @private\n     * @param {number} min The minimum possible value.\n     * @param {number} max The maximum possible value.\n     * @returns {number} Returns a random number.\n     */\n    function baseRandom(min, max) {\n      return min + floor(nativeRandom() * (max - min + 1));\n    }\n\n    /**\n     * The base implementation of `_.uniq` without support for callback shorthands\n     * or `thisArg` binding.\n     *\n     * @private\n     * @param {Array} array The array to process.\n     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.\n     * @param {Function} [callback] The function called per iteration.\n     * @returns {Array} Returns a duplicate-value-free array.\n     */\n    function baseUniq(array, isSorted, callback) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          result = [];\n\n      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,\n          seen = (callback || isLarge) ? getArray() : result;\n\n      if (isLarge) {\n        var cache = createCache(seen);\n        indexOf = cacheIndexOf;\n        seen = cache;\n      }\n      while (++index < length) {\n        var value = array[index],\n            computed = callback ? callback(value, index, array) : value;\n\n        if (isSorted\n              ? !index || seen[seen.length - 1] !== computed\n              : indexOf(seen, computed) < 0\n            ) {\n          if (callback || isLarge) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      if (isLarge) {\n        releaseArray(seen.array);\n        releaseObject(seen);\n      } else if (callback) {\n        releaseArray(seen);\n      }\n      return result;\n    }\n\n    /**\n     * Creates a function that aggregates a collection, creating an object composed\n     * of keys generated from the results of running each element of the collection\n     * through a callback. The given `setter` function sets the keys and values\n     * of the composed object.\n     *\n     * @private\n     * @param {Function} setter The setter function.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter) {\n      return function(collection, callback, thisArg) {\n        var result = {};\n        callback = lodash.createCallback(callback, thisArg, 3);\n\n        var index = -1,\n            length = collection ? collection.length : 0;\n\n        if (typeof length == 'number') {\n          while (++index < length) {\n            var value = collection[index];\n            setter(result, value, callback(value, index, collection), collection);\n          }\n        } else {\n          forOwn(collection, function(value, key, collection) {\n            setter(result, value, callback(value, key, collection), collection);\n          });\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that, when called, either curries or invokes `func`\n     * with an optional `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to reference.\n     * @param {number} bitmask The bitmask of method flags to compose.\n     *  The bitmask may be composed of the following flags:\n     *  1 - `_.bind`\n     *  2 - `_.bindKey`\n     *  4 - `_.curry`\n     *  8 - `_.curry` (bound)\n     *  16 - `_.partial`\n     *  32 - `_.partialRight`\n     * @param {Array} [partialArgs] An array of arguments to prepend to those\n     *  provided to the new function.\n     * @param {Array} [partialRightArgs] An array of arguments to append to those\n     *  provided to the new function.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new function.\n     */\n    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {\n      var isBind = bitmask & 1,\n          isBindKey = bitmask & 2,\n          isCurry = bitmask & 4,\n          isCurryBound = bitmask & 8,\n          isPartial = bitmask & 16,\n          isPartialRight = bitmask & 32;\n\n      if (!isBindKey && !isFunction(func)) {\n        throw new TypeError;\n      }\n      if (isPartial && !partialArgs.length) {\n        bitmask &= ~16;\n        isPartial = partialArgs = false;\n      }\n      if (isPartialRight && !partialRightArgs.length) {\n        bitmask &= ~32;\n        isPartialRight = partialRightArgs = false;\n      }\n      var bindData = func && func.__bindData__;\n      if (bindData && bindData !== true) {\n        // clone `bindData`\n        bindData = slice(bindData);\n        if (bindData[2]) {\n          bindData[2] = slice(bindData[2]);\n        }\n        if (bindData[3]) {\n          bindData[3] = slice(bindData[3]);\n        }\n        // set `thisBinding` is not previously bound\n        if (isBind && !(bindData[1] & 1)) {\n          bindData[4] = thisArg;\n        }\n        // set if previously bound but not currently (subsequent curried functions)\n        if (!isBind && bindData[1] & 1) {\n          bitmask |= 8;\n        }\n        // set curried arity if not yet set\n        if (isCurry && !(bindData[1] & 4)) {\n          bindData[5] = arity;\n        }\n        // append partial left arguments\n        if (isPartial) {\n          push.apply(bindData[2] || (bindData[2] = []), partialArgs);\n        }\n        // append partial right arguments\n        if (isPartialRight) {\n          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);\n        }\n        // merge flags\n        bindData[1] |= bitmask;\n        return createWrapper.apply(null, bindData);\n      }\n      // fast path for `_.bind`\n      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;\n      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);\n    }\n\n    /**\n     * Used by `escape` to convert characters to HTML entities.\n     *\n     * @private\n     * @param {string} match The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeHtmlChar(match) {\n      return htmlEscapes[match];\n    }\n\n    /**\n     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is\n     * customized, this method returns the custom method, otherwise it returns\n     * the `baseIndexOf` function.\n     *\n     * @private\n     * @returns {Function} Returns the \"indexOf\" function.\n     */\n    function getIndexOf() {\n      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;\n      return result;\n    }\n\n    /**\n     * Checks if `value` is a native function.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.\n     */\n    function isNative(value) {\n      return typeof value == 'function' && reNative.test(value);\n    }\n\n    /**\n     * Sets `this` binding data on a given function.\n     *\n     * @private\n     * @param {Function} func The function to set data on.\n     * @param {Array} value The data array to set.\n     */\n    var setBindData = !defineProperty ? noop : function(func, value) {\n      descriptor.value = value;\n      defineProperty(func, '__bindData__', descriptor);\n    };\n\n    /**\n     * A fallback implementation of `isPlainObject` which checks if a given value\n     * is an object created by the `Object` constructor, assuming objects created\n     * by the `Object` constructor have no inherited enumerable properties and that\n     * there are no `Object.prototype` extensions.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     */\n    function shimIsPlainObject(value) {\n      var ctor,\n          result;\n\n      // avoid non Object objects, `arguments` objects, and DOM elements\n      if (!(value && toString.call(value) == objectClass) ||\n          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {\n        return false;\n      }\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      forIn(value, function(value, key) {\n        result = key;\n      });\n      return typeof result == 'undefined' || hasOwnProperty.call(value, result);\n    }\n\n    /**\n     * Used by `unescape` to convert HTML entities to characters.\n     *\n     * @private\n     * @param {string} match The matched character to unescape.\n     * @returns {string} Returns the unescaped character.\n     */\n    function unescapeHtmlChar(match) {\n      return htmlUnescapes[match];\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Checks if `value` is an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.\n     * @example\n     *\n     * (function() { return _.isArguments(arguments); })(1, 2, 3);\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    function isArguments(value) {\n      return value && typeof value == 'object' && typeof value.length == 'number' &&\n        toString.call(value) == argsClass || false;\n    }\n\n    /**\n     * Checks if `value` is an array.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.\n     * @example\n     *\n     * (function() { return _.isArray(arguments); })();\n     * // => false\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     */\n    var isArray = nativeIsArray || function(value) {\n      return value && typeof value == 'object' && typeof value.length == 'number' &&\n        toString.call(value) == arrayClass || false;\n    };\n\n    /**\n     * A fallback implementation of `Object.keys` which produces an array of the\n     * given object's own enumerable property names.\n     *\n     * @private\n     * @type Function\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names.\n     */\n    var shimKeys = function(object) {\n      var index, iterable = object, result = [];\n      if (!iterable) return result;\n      if (!(objectTypes[typeof object])) return result;\n        for (index in iterable) {\n          if (hasOwnProperty.call(iterable, index)) {\n            result.push(index);\n          }\n        }\n      return result\n    };\n\n    /**\n     * Creates an array composed of the own enumerable property names of an object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names.\n     * @example\n     *\n     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)\n     */\n    var keys = !nativeKeys ? shimKeys : function(object) {\n      if (!isObject(object)) {\n        return [];\n      }\n      return nativeKeys(object);\n    };\n\n    /**\n     * Used to convert characters to HTML entities:\n     *\n     * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n     * don't require escaping in HTML and have no special meaning unless they're part\n     * of a tag or an unquoted attribute value.\n     * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n     */\n    var htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;'\n    };\n\n    /** Used to convert HTML entities to characters */\n    var htmlUnescapes = invert(htmlEscapes);\n\n    /** Used to match HTML entities and HTML characters */\n    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),\n        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object. Subsequent sources will overwrite property assignments of previous\n     * sources. If a callback is provided it will be executed to produce the\n     * assigned values. The callback is bound to `thisArg` and invoked with two\n     * arguments; (objectValue, sourceValue).\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @alias extend\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param {Function} [callback] The function to customize assigning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });\n     * // => { 'name': 'fred', 'employer': 'slate' }\n     *\n     * var defaults = _.partialRight(_.assign, function(a, b) {\n     *   return typeof a == 'undefined' ? b : a;\n     * });\n     *\n     * var object = { 'name': 'barney' };\n     * defaults(object, { 'name': 'fred', 'employer': 'slate' });\n     * // => { 'name': 'barney', 'employer': 'slate' }\n     */\n    var assign = function(object, source, guard) {\n      var index, iterable = object, result = iterable;\n      if (!iterable) return result;\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = typeof guard == 'number' ? 2 : args.length;\n      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n        callback = args[--argsLength];\n      }\n      while (++argsIndex < argsLength) {\n        iterable = args[argsIndex];\n        if (iterable && objectTypes[typeof iterable]) {\n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];\n        }\n        }\n      }\n      return result\n    };\n\n    /**\n     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also\n     * be cloned, otherwise they will be assigned by reference. If a callback\n     * is provided it will be executed to produce the cloned values. If the\n     * callback returns `undefined` cloning will be handled by the method instead.\n     * The callback is bound to `thisArg` and invoked with one argument; (value).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep=false] Specify a deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the cloned value.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * var shallow = _.clone(characters);\n     * shallow[0] === characters[0];\n     * // => true\n     *\n     * var deep = _.clone(characters, true);\n     * deep[0] === characters[0];\n     * // => false\n     *\n     * _.mixin({\n     *   'clone': _.partialRight(_.clone, function(value) {\n     *     return _.isElement(value) ? value.cloneNode(false) : undefined;\n     *   })\n     * });\n     *\n     * var clone = _.clone(document.body);\n     * clone.childNodes.length;\n     * // => 0\n     */\n    function clone(value, isDeep, callback, thisArg) {\n      // allows working with \"Collections\" methods without using their `index`\n      // and `collection` arguments for `isDeep` and `callback`\n      if (typeof isDeep != 'boolean' && isDeep != null) {\n        thisArg = callback;\n        callback = isDeep;\n        isDeep = false;\n      }\n      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));\n    }\n\n    /**\n     * Creates a deep clone of `value`. If a callback is provided it will be\n     * executed to produce the cloned values. If the callback returns `undefined`\n     * cloning will be handled by the method instead. The callback is bound to\n     * `thisArg` and invoked with one argument; (value).\n     *\n     * Note: This method is loosely based on the structured clone algorithm. Functions\n     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and\n     * objects created by constructors other than `Object` are cloned to plain `Object` objects.\n     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the deep cloned value.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * var deep = _.cloneDeep(characters);\n     * deep[0] === characters[0];\n     * // => false\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'node': element\n     * };\n     *\n     * var clone = _.cloneDeep(view, function(value) {\n     *   return _.isElement(value) ? value.cloneNode(true) : undefined;\n     * });\n     *\n     * clone.node == view.node;\n     * // => false\n     */\n    function cloneDeep(value, callback, thisArg) {\n      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));\n    }\n\n    /**\n     * Creates an object that inherits from the given `prototype` object. If a\n     * `properties` object is provided its own enumerable properties are assigned\n     * to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties ? assign(result, properties) : result;\n    }\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object for all destination properties that resolve to `undefined`. Once a\n     * property is set, additional defaults of the same property will be ignored.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param- {Object} [guard] Allows working with `_.reduce` without using its\n     *  `key` and `object` arguments as sources.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * var object = { 'name': 'barney' };\n     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });\n     * // => { 'name': 'barney', 'employer': 'slate' }\n     */\n    var defaults = function(object, source, guard) {\n      var index, iterable = object, result = iterable;\n      if (!iterable) return result;\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = typeof guard == 'number' ? 2 : args.length;\n      while (++argsIndex < argsLength) {\n        iterable = args[argsIndex];\n        if (iterable && objectTypes[typeof iterable]) {\n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          if (typeof result[index] == 'undefined') result[index] = iterable[index];\n        }\n        }\n      }\n      return result\n    };\n\n    /**\n     * This method is like `_.findIndex` except that it returns the key of the\n     * first element that passes the callback check, instead of the element itself.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [callback=identity] The function called per\n     *  iteration. If a property name or object is provided it will be used to\n     *  create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {string|undefined} Returns the key of the found element, else `undefined`.\n     * @example\n     *\n     * var characters = {\n     *   'barney': {  'age': 36, 'blocked': false },\n     *   'fred': {    'age': 40, 'blocked': true },\n     *   'pebbles': { 'age': 1,  'blocked': false }\n     * };\n     *\n     * _.findKey(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => 'barney' (property order is not guaranteed across environments)\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findKey(characters, { 'age': 1 });\n     * // => 'pebbles'\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findKey(characters, 'blocked');\n     * // => 'fred'\n     */\n    function findKey(object, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forOwn(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result = key;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [callback=identity] The function called per\n     *  iteration. If a property name or object is provided it will be used to\n     *  create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {string|undefined} Returns the key of the found element, else `undefined`.\n     * @example\n     *\n     * var characters = {\n     *   'barney': {  'age': 36, 'blocked': true },\n     *   'fred': {    'age': 40, 'blocked': false },\n     *   'pebbles': { 'age': 1,  'blocked': true }\n     * };\n     *\n     * _.findLastKey(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => returns `pebbles`, assuming `_.findKey` returns `barney`\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findLastKey(characters, { 'age': 40 });\n     * // => 'fred'\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findLastKey(characters, 'blocked');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forOwnRight(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result = key;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Iterates over own and inherited enumerable properties of an object,\n     * executing the callback for each property. The callback is bound to `thisArg`\n     * and invoked with three arguments; (value, key, object). Callbacks may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * Shape.prototype.move = function(x, y) {\n     *   this.x += x;\n     *   this.y += y;\n     * };\n     *\n     * _.forIn(new Shape, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)\n     */\n    var forIn = function(collection, callback, thisArg) {\n      var index, iterable = collection, result = iterable;\n      if (!iterable) return result;\n      if (!objectTypes[typeof iterable]) return result;\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n        for (index in iterable) {\n          if (callback(iterable[index], index, collection) === false) return result;\n        }\n      return result\n    };\n\n    /**\n     * This method is like `_.forIn` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * Shape.prototype.move = function(x, y) {\n     *   this.x += x;\n     *   this.y += y;\n     * };\n     *\n     * _.forInRight(new Shape, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'\n     */\n    function forInRight(object, callback, thisArg) {\n      var pairs = [];\n\n      forIn(object, function(value, key) {\n        pairs.push(key, value);\n      });\n\n      var length = pairs.length;\n      callback = baseCreateCallback(callback, thisArg, 3);\n      while (length--) {\n        if (callback(pairs[length--], pairs[length], object) === false) {\n          break;\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Iterates over own enumerable properties of an object, executing the callback\n     * for each property. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, key, object). Callbacks may exit iteration early by\n     * explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n     *   console.log(key);\n     * });\n     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)\n     */\n    var forOwn = function(collection, callback, thisArg) {\n      var index, iterable = collection, result = iterable;\n      if (!iterable) return result;\n      if (!objectTypes[typeof iterable]) return result;\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          if (callback(iterable[index], index, collection) === false) return result;\n        }\n      return result\n    };\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'\n     */\n    function forOwnRight(object, callback, thisArg) {\n      var props = keys(object),\n          length = props.length;\n\n      callback = baseCreateCallback(callback, thisArg, 3);\n      while (length--) {\n        var key = props[length];\n        if (callback(object[key], key, object) === false) {\n          break;\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Creates a sorted array of property names of all enumerable properties,\n     * own and inherited, of `object` that have function values.\n     *\n     * @static\n     * @memberOf _\n     * @alias methods\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names that have function values.\n     * @example\n     *\n     * _.functions(_);\n     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n     */\n    function functions(object) {\n      var result = [];\n      forIn(object, function(value, key) {\n        if (isFunction(value)) {\n          result.push(key);\n        }\n      });\n      return result.sort();\n    }\n\n    /**\n     * Checks if the specified property name exists as a direct property of `object`,\n     * instead of an inherited property.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @param {string} key The name of the property to check.\n     * @returns {boolean} Returns `true` if key is a direct property, else `false`.\n     * @example\n     *\n     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n     * // => true\n     */\n    function has(object, key) {\n      return object ? hasOwnProperty.call(object, key) : false;\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of the given object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the created inverted object.\n     * @example\n     *\n     * _.invert({ 'first': 'fred', 'second': 'barney' });\n     * // => { 'fred': 'first', 'barney': 'second' }\n     */\n    function invert(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index];\n        result[object[key]] = key;\n      }\n      return result;\n    }\n\n    /**\n     * Checks if `value` is a boolean value.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.\n     * @example\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        value && typeof value == 'object' && toString.call(value) == boolClass || false;\n    }\n\n    /**\n     * Checks if `value` is a date.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     */\n    function isDate(value) {\n      return value && typeof value == 'object' && toString.call(value) == dateClass || false;\n    }\n\n    /**\n     * Checks if `value` is a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     */\n    function isElement(value) {\n      return value && value.nodeType === 1 || false;\n    }\n\n    /**\n     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n     * length of `0` and objects with no own enumerable properties are considered\n     * \"empty\".\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Array|Object|string} value The value to inspect.\n     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({});\n     * // => true\n     *\n     * _.isEmpty('');\n     * // => true\n     */\n    function isEmpty(value) {\n      var result = true;\n      if (!value) {\n        return result;\n      }\n      var className = toString.call(value),\n          length = value.length;\n\n      if ((className == arrayClass || className == stringClass || className == argsClass ) ||\n          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n        return !length;\n      }\n      forOwn(value, function() {\n        return (result = false);\n      });\n      return result;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent to each other. If a callback is provided it will be executed\n     * to compare values. If the callback returns `undefined` comparisons will\n     * be handled by the method instead. The callback is bound to `thisArg` and\n     * invoked with two arguments; (a, b).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} a The value to compare.\n     * @param {*} b The other value to compare.\n     * @param {Function} [callback] The function to customize comparing values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * var copy = { 'name': 'fred' };\n     *\n     * object == copy;\n     * // => false\n     *\n     * _.isEqual(object, copy);\n     * // => true\n     *\n     * var words = ['hello', 'goodbye'];\n     * var otherWords = ['hi', 'goodbye'];\n     *\n     * _.isEqual(words, otherWords, function(a, b) {\n     *   var reGreet = /^(?:hello|hi)$/i,\n     *       aGreet = _.isString(a) && reGreet.test(a),\n     *       bGreet = _.isString(b) && reGreet.test(b);\n     *\n     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n     * });\n     * // => true\n     */\n    function isEqual(a, b, callback, thisArg) {\n      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));\n    }\n\n    /**\n     * Checks if `value` is, or can be coerced to, a finite number.\n     *\n     * Note: This is not the same as native `isFinite` which will return true for\n     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.\n     * @example\n     *\n     * _.isFinite(-101);\n     * // => true\n     *\n     * _.isFinite('10');\n     * // => true\n     *\n     * _.isFinite(true);\n     * // => false\n     *\n     * _.isFinite('');\n     * // => false\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     */\n    function isFinite(value) {\n      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n    }\n\n    /**\n     * Checks if `value` is a function.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     */\n    function isFunction(value) {\n      return typeof value == 'function';\n    }\n\n    /**\n     * Checks if `value` is the language type of Object.\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(1);\n     * // => false\n     */\n    function isObject(value) {\n      // check if the value is the ECMAScript language type of Object\n      // http://es5.github.io/#x8\n      // and avoid a V8 bug\n      // http://code.google.com/p/v8/issues/detail?id=2291\n      return !!(value && objectTypes[typeof value]);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * Note: This is not the same as native `isNaN` which will return `true` for\n     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // `NaN` as a primitive is the only value that is not equal to itself\n      // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(undefined);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is a number.\n     *\n     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(8.4 * 5);\n     * // => true\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        value && typeof value == 'object' && toString.call(value) == numberClass || false;\n    }\n\n    /**\n     * Checks if `value` is an object created by the `Object` constructor.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * _.isPlainObject(new Shape);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     */\n    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n      if (!(value && toString.call(value) == objectClass)) {\n        return false;\n      }\n      var valueOf = value.valueOf,\n          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n      return objProto\n        ? (value == objProto || getPrototypeOf(value) == objProto)\n        : shimIsPlainObject(value);\n    };\n\n    /**\n     * Checks if `value` is a regular expression.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.\n     * @example\n     *\n     * _.isRegExp(/fred/);\n     * // => true\n     */\n    function isRegExp(value) {\n      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;\n    }\n\n    /**\n     * Checks if `value` is a string.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('fred');\n     * // => true\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        value && typeof value == 'object' && toString.call(value) == stringClass || false;\n    }\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     */\n    function isUndefined(value) {\n      return typeof value == 'undefined';\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated by\n     * running each own enumerable property of `object` through the callback.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new object with values of the results of each `callback` execution.\n     * @example\n     *\n     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     *\n     * var characters = {\n     *   'fred': { 'name': 'fred', 'age': 40 },\n     *   'pebbles': { 'name': 'pebbles', 'age': 1 }\n     * };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.mapValues(characters, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 }\n     */\n    function mapValues(object, callback, thisArg) {\n      var result = {};\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      forOwn(object, function(value, key, object) {\n        result[key] = callback(value, key, object);\n      });\n      return result;\n    }\n\n    /**\n     * Recursively merges own enumerable properties of the source object(s), that\n     * don't resolve to `undefined` into the destination object. Subsequent sources\n     * will overwrite property assignments of previous sources. If a callback is\n     * provided it will be executed to produce the merged values of the destination\n     * and source properties. If the callback returns `undefined` merging will\n     * be handled by the method instead. The callback is bound to `thisArg` and\n     * invoked with two arguments; (objectValue, sourceValue).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param {Function} [callback] The function to customize merging properties.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * var names = {\n     *   'characters': [\n     *     { 'name': 'barney' },\n     *     { 'name': 'fred' }\n     *   ]\n     * };\n     *\n     * var ages = {\n     *   'characters': [\n     *     { 'age': 36 },\n     *     { 'age': 40 }\n     *   ]\n     * };\n     *\n     * _.merge(names, ages);\n     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }\n     *\n     * var food = {\n     *   'fruits': ['apple'],\n     *   'vegetables': ['beet']\n     * };\n     *\n     * var otherFood = {\n     *   'fruits': ['banana'],\n     *   'vegetables': ['carrot']\n     * };\n     *\n     * _.merge(food, otherFood, function(a, b) {\n     *   return _.isArray(a) ? a.concat(b) : undefined;\n     * });\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }\n     */\n    function merge(object) {\n      var args = arguments,\n          length = 2;\n\n      if (!isObject(object)) {\n        return object;\n      }\n      // allows working with `_.reduce` and `_.reduceRight` without using\n      // their `index` and `collection` arguments\n      if (typeof args[2] != 'number') {\n        length = args.length;\n      }\n      if (length > 3 && typeof args[length - 2] == 'function') {\n        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);\n      } else if (length > 2 && typeof args[length - 1] == 'function') {\n        callback = args[--length];\n      }\n      var sources = slice(arguments, 1, length),\n          index = -1,\n          stackA = getArray(),\n          stackB = getArray();\n\n      while (++index < length) {\n        baseMerge(object, sources[index], callback, stackA, stackB);\n      }\n      releaseArray(stackA);\n      releaseArray(stackB);\n      return object;\n    }\n\n    /**\n     * Creates a shallow clone of `object` excluding the specified properties.\n     * Property names may be specified as individual arguments or as arrays of\n     * property names. If a callback is provided it will be executed for each\n     * property of `object` omitting the properties the callback returns truey\n     * for. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The source object.\n     * @param {Function|...string|string[]} [callback] The properties to omit or the\n     *  function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns an object without the omitted properties.\n     * @example\n     *\n     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');\n     * // => { 'name': 'fred' }\n     *\n     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {\n     *   return typeof value == 'number';\n     * });\n     * // => { 'name': 'fred' }\n     */\n    function omit(object, callback, thisArg) {\n      var result = {};\n      if (typeof callback != 'function') {\n        var props = [];\n        forIn(object, function(value, key) {\n          props.push(key);\n        });\n        props = baseDifference(props, baseFlatten(arguments, true, false, 1));\n\n        var index = -1,\n            length = props.length;\n\n        while (++index < length) {\n          var key = props[index];\n          result[key] = object[key];\n        }\n      } else {\n        callback = lodash.createCallback(callback, thisArg, 3);\n        forIn(object, function(value, key, object) {\n          if (!callback(value, key, object)) {\n            result[key] = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Creates a two dimensional array of an object's key-value pairs,\n     * i.e. `[[key1, value1], [key2, value2]]`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns new array of key-value pairs.\n     * @example\n     *\n     * _.pairs({ 'barney': 36, 'fred': 40 });\n     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)\n     */\n    function pairs(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        var key = props[index];\n        result[index] = [key, object[key]];\n      }\n      return result;\n    }\n\n    /**\n     * Creates a shallow clone of `object` composed of the specified properties.\n     * Property names may be specified as individual arguments or as arrays of\n     * property names. If a callback is provided it will be executed for each\n     * property of `object` picking the properties the callback returns truey\n     * for. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The source object.\n     * @param {Function|...string|string[]} [callback] The function called per\n     *  iteration or property names to pick, specified as individual property\n     *  names or arrays of property names.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns an object composed of the picked properties.\n     * @example\n     *\n     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');\n     * // => { 'name': 'fred' }\n     *\n     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {\n     *   return key.charAt(0) != '_';\n     * });\n     * // => { 'name': 'fred' }\n     */\n    function pick(object, callback, thisArg) {\n      var result = {};\n      if (typeof callback != 'function') {\n        var index = -1,\n            props = baseFlatten(arguments, true, false, 1),\n            length = isObject(object) ? props.length : 0;\n\n        while (++index < length) {\n          var key = props[index];\n          if (key in object) {\n            result[key] = object[key];\n          }\n        }\n      } else {\n        callback = lodash.createCallback(callback, thisArg, 3);\n        forIn(object, function(value, key, object) {\n          if (callback(value, key, object)) {\n            result[key] = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * An alternative to `_.reduce` this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable properties through a callback, with each callback execution\n     * potentially mutating the `accumulator` object. The callback is bound to\n     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).\n     * Callbacks may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Array|Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {\n     *   num *= num;\n     *   if (num % 2) {\n     *     return result.push(num) < 3;\n     *   }\n     * });\n     * // => [1, 9, 25]\n     *\n     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n     *   result[key] = num * 3;\n     * });\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     */\n    function transform(object, callback, accumulator, thisArg) {\n      var isArr = isArray(object);\n      if (accumulator == null) {\n        if (isArr) {\n          accumulator = [];\n        } else {\n          var ctor = object && object.constructor,\n              proto = ctor && ctor.prototype;\n\n          accumulator = baseCreate(proto);\n        }\n      }\n      if (callback) {\n        callback = lodash.createCallback(callback, thisArg, 4);\n        (isArr ? forEach : forOwn)(object, function(value, index, object) {\n          return callback(accumulator, value, index, object);\n        });\n      }\n      return accumulator;\n    }\n\n    /**\n     * Creates an array composed of the own enumerable property values of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property values.\n     * @example\n     *\n     * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => [1, 2, 3] (property order is not guaranteed across environments)\n     */\n    function values(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = object[props[index]];\n      }\n      return result;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements from the specified indexes, or keys, of the\n     * `collection`. Indexes may be specified as individual arguments or as arrays\n     * of indexes.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`\n     *   to retrieve, specified as individual indexes or arrays of indexes.\n     * @returns {Array} Returns a new array of elements corresponding to the\n     *  provided indexes.\n     * @example\n     *\n     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n     * // => ['a', 'c', 'e']\n     *\n     * _.at(['fred', 'barney', 'pebbles'], 0, 2);\n     * // => ['fred', 'pebbles']\n     */\n    function at(collection) {\n      var args = arguments,\n          index = -1,\n          props = baseFlatten(args, true, false, 1),\n          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,\n          result = Array(length);\n\n      while(++index < length) {\n        result[index] = collection[props[index]];\n      }\n      return result;\n    }\n\n    /**\n     * Checks if a given value is present in a collection using strict equality\n     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the\n     * offset from the end of the collection.\n     *\n     * @static\n     * @memberOf _\n     * @alias include\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {*} target The value to check for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.\n     * @example\n     *\n     * _.contains([1, 2, 3], 1);\n     * // => true\n     *\n     * _.contains([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');\n     * // => true\n     *\n     * _.contains('pebbles', 'eb');\n     * // => true\n     */\n    function contains(collection, target, fromIndex) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = collection ? collection.length : 0,\n          result = false;\n\n      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n      if (isArray(collection)) {\n        result = indexOf(collection, target, fromIndex) > -1;\n      } else if (typeof length == 'number') {\n        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;\n      } else {\n        forOwn(collection, function(value) {\n          if (++index >= fromIndex) {\n            return !(result = value === target);\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through the callback. The corresponding value\n     * of each key is the number of times the key was returned by the callback.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n    });\n\n    /**\n     * Checks if the given callback returns truey value for **all** elements of\n     * a collection. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias all\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if all elements passed the callback check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes']);\n     * // => false\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.every(characters, 'age');\n     * // => true\n     *\n     * // using \"_.where\" callback shorthand\n     * _.every(characters, { 'age': 36 });\n     * // => false\n     */\n    function every(collection, callback, thisArg) {\n      var result = true;\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if (!(result = !!callback(collection[index], index, collection))) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          return (result = !!callback(value, index, collection));\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, returning an array of all elements\n     * the callback returns truey for. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias select\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of elements that passed the callback check.\n     * @example\n     *\n     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n     * // => [2, 4, 6]\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.filter(characters, 'blocked');\n     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.filter(characters, { 'age': 36 });\n     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n     */\n    function filter(collection, callback, thisArg) {\n      var result = [];\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          var value = collection[index];\n          if (callback(value, index, collection)) {\n            result.push(value);\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          if (callback(value, index, collection)) {\n            result.push(value);\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, returning the first element that\n     * the callback returns truey for. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias detect, findWhere\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the found element, else `undefined`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': false },\n     *   { 'name': 'fred',    'age': 40, 'blocked': true },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }\n     * ];\n     *\n     * _.find(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => { 'name': 'barney', 'age': 36, 'blocked': false }\n     *\n     * // using \"_.where\" callback shorthand\n     * _.find(characters, { 'age': 1 });\n     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.find(characters, 'blocked');\n     * // => { 'name': 'fred', 'age': 40, 'blocked': true }\n     */\n    function find(collection, callback, thisArg) {\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          var value = collection[index];\n          if (callback(value, index, collection)) {\n            return value;\n          }\n        }\n      } else {\n        var result;\n        forOwn(collection, function(value, index, collection) {\n          if (callback(value, index, collection)) {\n            result = value;\n            return false;\n          }\n        });\n        return result;\n      }\n    }\n\n    /**\n     * This method is like `_.find` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the found element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(num) {\n     *   return num % 2 == 1;\n     * });\n     * // => 3\n     */\n    function findLast(collection, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forEachRight(collection, function(value, index, collection) {\n        if (callback(value, index, collection)) {\n          result = value;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, executing the callback for each\n     * element. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection). Callbacks may exit iteration early by\n     * explicitly returning `false`.\n     *\n     * Note: As with other \"Collections\" methods, objects with a `length` property\n     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n     * may be used for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @alias each\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');\n     * // => logs each number and returns '1,2,3'\n     *\n     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });\n     * // => logs each number and returns the object (property order is not guaranteed across environments)\n     */\n    function forEach(collection, callback, thisArg) {\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if (callback(collection[index], index, collection) === false) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, callback);\n      }\n      return collection;\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias eachRight\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');\n     * // => logs each number from right to left and returns '3,2,1'\n     */\n    function forEachRight(collection, callback, thisArg) {\n      var length = collection ? collection.length : 0;\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n      if (typeof length == 'number') {\n        while (length--) {\n          if (callback(collection[length], length, collection) === false) {\n            break;\n          }\n        }\n      } else {\n        var props = keys(collection);\n        length = props.length;\n        forOwn(collection, function(value, key, collection) {\n          key = props ? props[--length] : --length;\n          return callback(collection[key], key, collection);\n        });\n      }\n      return collection;\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of a collection through the callback. The corresponding value\n     * of each key is an array of the elements responsible for generating the key.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of the collection through the given callback. The corresponding\n     * value of each key is the last element responsible for generating the key.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var keys = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.indexBy(keys, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     */\n    var indexBy = createAggregator(function(result, value, key) {\n      result[key] = value;\n    });\n\n    /**\n     * Invokes the method named by `methodName` on each element in the `collection`\n     * returning an array of the results of each invoked method. Additional arguments\n     * will be provided to each invoked method. If `methodName` is a function it\n     * will be invoked for, and `this` bound to, each element in the `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|string} methodName The name of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [arg] Arguments to invoke the method with.\n     * @returns {Array} Returns a new array of the results of each invoked method.\n     * @example\n     *\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invoke([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    function invoke(collection, methodName) {\n      var args = slice(arguments, 2),\n          index = -1,\n          isFunc = typeof methodName == 'function',\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      forEach(collection, function(value) {\n        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an array of values by running each element in the collection\n     * through the callback. The callback is bound to `thisArg` and invoked with\n     * three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias collect\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of the results of each `callback` execution.\n     * @example\n     *\n     * _.map([1, 2, 3], function(num) { return num * 3; });\n     * // => [3, 6, 9]\n     *\n     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n     * // => [3, 6, 9] (property order is not guaranteed across environments)\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.map(characters, 'name');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, callback, thisArg) {\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      if (typeof length == 'number') {\n        var result = Array(length);\n        while (++index < length) {\n          result[index] = callback(collection[index], index, collection);\n        }\n      } else {\n        result = [];\n        forOwn(collection, function(value, key, collection) {\n          result[++index] = callback(value, key, collection);\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the maximum value of a collection. If the collection is empty or\n     * falsey `-Infinity` is returned. If a callback is provided it will be executed\n     * for each value in the collection to generate the criterion by which the value\n     * is ranked. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.max(characters, function(chr) { return chr.age; });\n     * // => { 'name': 'fred', 'age': 40 };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.max(characters, 'age');\n     * // => { 'name': 'fred', 'age': 40 };\n     */\n    function max(collection, callback, thisArg) {\n      var computed = -Infinity,\n          result = computed;\n\n      // allows working with functions like `_.map` without using\n      // their `index` argument as a callback\n      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {\n        callback = null;\n      }\n      if (callback == null && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (value > result) {\n            result = value;\n          }\n        }\n      } else {\n        callback = (callback == null && isString(collection))\n          ? charAtCallback\n          : lodash.createCallback(callback, thisArg, 3);\n\n        forEach(collection, function(value, index, collection) {\n          var current = callback(value, index, collection);\n          if (current > computed) {\n            computed = current;\n            result = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the minimum value of a collection. If the collection is empty or\n     * falsey `Infinity` is returned. If a callback is provided it will be executed\n     * for each value in the collection to generate the criterion by which the value\n     * is ranked. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.min(characters, function(chr) { return chr.age; });\n     * // => { 'name': 'barney', 'age': 36 };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.min(characters, 'age');\n     * // => { 'name': 'barney', 'age': 36 };\n     */\n    function min(collection, callback, thisArg) {\n      var computed = Infinity,\n          result = computed;\n\n      // allows working with functions like `_.map` without using\n      // their `index` argument as a callback\n      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {\n        callback = null;\n      }\n      if (callback == null && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (value < result) {\n            result = value;\n          }\n        }\n      } else {\n        callback = (callback == null && isString(collection))\n          ? charAtCallback\n          : lodash.createCallback(callback, thisArg, 3);\n\n        forEach(collection, function(value, index, collection) {\n          var current = callback(value, index, collection);\n          if (current < computed) {\n            computed = current;\n            result = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the value of a specified property from all elements in the collection.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {string} property The name of the property to pluck.\n     * @returns {Array} Returns a new array of property values.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.pluck(characters, 'name');\n     * // => ['barney', 'fred']\n     */\n    var pluck = map;\n\n    /**\n     * Reduces a collection to a value which is the accumulated result of running\n     * each element in the collection through the callback, where each successive\n     * callback execution consumes the return value of the previous execution. If\n     * `accumulator` is not provided the first element of the collection will be\n     * used as the initial `accumulator` value. The callback is bound to `thisArg`\n     * and invoked with four arguments; (accumulator, value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @alias foldl, inject\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] Initial value of the accumulator.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var sum = _.reduce([1, 2, 3], function(sum, num) {\n     *   return sum + num;\n     * });\n     * // => 6\n     *\n     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n     *   result[key] = num * 3;\n     *   return result;\n     * }, {});\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     */\n    function reduce(collection, callback, accumulator, thisArg) {\n      if (!collection) return accumulator;\n      var noaccum = arguments.length < 3;\n      callback = lodash.createCallback(callback, thisArg, 4);\n\n      var index = -1,\n          length = collection.length;\n\n      if (typeof length == 'number') {\n        if (noaccum) {\n          accumulator = collection[++index];\n        }\n        while (++index < length) {\n          accumulator = callback(accumulator, collection[index], index, collection);\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          accumulator = noaccum\n            ? (noaccum = false, value)\n            : callback(accumulator, value, index, collection)\n        });\n      }\n      return accumulator;\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias foldr\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] Initial value of the accumulator.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var list = [[0, 1], [2, 3], [4, 5]];\n     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, callback, accumulator, thisArg) {\n      var noaccum = arguments.length < 3;\n      callback = lodash.createCallback(callback, thisArg, 4);\n      forEachRight(collection, function(value, index, collection) {\n        accumulator = noaccum\n          ? (noaccum = false, value)\n          : callback(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The opposite of `_.filter` this method returns the elements of a\n     * collection that the callback does **not** return truey for.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of elements that failed the callback check.\n     * @example\n     *\n     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n     * // => [1, 3, 5]\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.reject(characters, 'blocked');\n     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.reject(characters, { 'age': 36 });\n     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n     */\n    function reject(collection, callback, thisArg) {\n      callback = lodash.createCallback(callback, thisArg, 3);\n      return filter(collection, function(value, index, collection) {\n        return !callback(value, index, collection);\n      });\n    }\n\n    /**\n     * Retrieves a random element or `n` random elements from a collection.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to sample.\n     * @param {number} [n] The number of elements to sample.\n     * @param- {Object} [guard] Allows working with functions like `_.map`\n     *  without using their `index` arguments as `n`.\n     * @returns {Array} Returns the random sample(s) of `collection`.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     *\n     * _.sample([1, 2, 3, 4], 2);\n     * // => [3, 1]\n     */\n    function sample(collection, n, guard) {\n      if (collection && typeof collection.length != 'number') {\n        collection = values(collection);\n      }\n      if (n == null || guard) {\n        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;\n      }\n      var result = shuffle(collection);\n      result.length = nativeMin(nativeMax(0, n), result.length);\n      return result;\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the Fisher-Yates\n     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to shuffle.\n     * @returns {Array} Returns a new shuffled collection.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4, 5, 6]);\n     * // => [4, 1, 6, 3, 5, 2]\n     */\n    function shuffle(collection) {\n      var index = -1,\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      forEach(collection, function(value) {\n        var rand = baseRandom(0, ++index);\n        result[index] = result[rand];\n        result[rand] = value;\n      });\n      return result;\n    }\n\n    /**\n     * Gets the size of the `collection` by returning `collection.length` for arrays\n     * and array-like objects or the number of own enumerable properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns `collection.length` or number of own enumerable properties.\n     * @example\n     *\n     * _.size([1, 2]);\n     * // => 2\n     *\n     * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => 3\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      var length = collection ? collection.length : 0;\n      return typeof length == 'number' ? length : keys(collection).length;\n    }\n\n    /**\n     * Checks if the callback returns a truey value for **any** element of a\n     * collection. The function returns as soon as it finds a passing value and\n     * does not iterate over the entire collection. The callback is bound to\n     * `thisArg` and invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias any\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if any element passed the callback check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.some(characters, 'blocked');\n     * // => true\n     *\n     * // using \"_.where\" callback shorthand\n     * _.some(characters, { 'age': 1 });\n     * // => false\n     */\n    function some(collection, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if ((result = callback(collection[index], index, collection))) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          return !(result = callback(value, index, collection));\n        });\n      }\n      return !!result;\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection through the callback. This method\n     * performs a stable sort, that is, it will preserve the original sort order\n     * of equal elements. The callback is bound to `thisArg` and invoked with\n     * three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an array of property names is provided for `callback` the collection\n     * will be sorted by each property value.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Array|Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of sorted elements.\n     * @example\n     *\n     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n     * // => [3, 1, 2]\n     *\n     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n     * // => [3, 1, 2]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36 },\n     *   { 'name': 'fred',    'age': 40 },\n     *   { 'name': 'barney',  'age': 26 },\n     *   { 'name': 'fred',    'age': 30 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.map(_.sortBy(characters, 'age'), _.values);\n     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]\n     *\n     * // sorting by multiple properties\n     * _.map(_.sortBy(characters, ['name', 'age']), _.values);\n     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]\n     */\n    function sortBy(collection, callback, thisArg) {\n      var index = -1,\n          isArr = isArray(callback),\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      if (!isArr) {\n        callback = lodash.createCallback(callback, thisArg, 3);\n      }\n      forEach(collection, function(value, key, collection) {\n        var object = result[++index] = getObject();\n        if (isArr) {\n          object.criteria = map(callback, function(key) { return value[key]; });\n        } else {\n          (object.criteria = getArray())[0] = callback(value, key, collection);\n        }\n        object.index = index;\n        object.value = value;\n      });\n\n      length = result.length;\n      result.sort(compareAscending);\n      while (length--) {\n        var object = result[length];\n        result[length] = object.value;\n        if (!isArr) {\n          releaseArray(object.criteria);\n        }\n        releaseObject(object);\n      }\n      return result;\n    }\n\n    /**\n     * Converts the `collection` to an array.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to convert.\n     * @returns {Array} Returns the new converted array.\n     * @example\n     *\n     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n     * // => [2, 3, 4]\n     */\n    function toArray(collection) {\n      if (collection && typeof collection.length == 'number') {\n        return slice(collection);\n      }\n      return values(collection);\n    }\n\n    /**\n     * Performs a deep comparison of each element in a `collection` to the given\n     * `properties` object, returning an array of all elements that have equivalent\n     * property values.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Object} props The object of property values to filter by.\n     * @returns {Array} Returns a new array of elements that have the given properties.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },\n     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n     * ];\n     *\n     * _.where(characters, { 'age': 36 });\n     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]\n     *\n     * _.where(characters, { 'pets': ['dino'] });\n     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]\n     */\n    var where = filter;\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are all falsey.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array excluding all values of the provided arrays using strict\n     * equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @param {...Array} [values] The arrays of values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n     * // => [1, 3, 4]\n     */\n    function difference(array) {\n      return baseDifference(array, baseFlatten(arguments, true, true, 1));\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element that passes the callback check, instead of the element itself.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': false },\n     *   { 'name': 'fred',    'age': 40, 'blocked': true },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }\n     * ];\n     *\n     * _.findIndex(characters, function(chr) {\n     *   return chr.age < 20;\n     * });\n     * // => 2\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findIndex(characters, { 'age': 36 });\n     * // => 0\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findIndex(characters, 'blocked');\n     * // => 1\n     */\n    function findIndex(array, callback, thisArg) {\n      var index = -1,\n          length = array ? array.length : 0;\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (++index < length) {\n        if (callback(array[index], index, array)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': true },\n     *   { 'name': 'fred',    'age': 40, 'blocked': false },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }\n     * ];\n     *\n     * _.findLastIndex(characters, function(chr) {\n     *   return chr.age > 30;\n     * });\n     * // => 1\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findLastIndex(characters, { 'age': 36 });\n     * // => 0\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findLastIndex(characters, 'blocked');\n     * // => 2\n     */\n    function findLastIndex(array, callback, thisArg) {\n      var length = array ? array.length : 0;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (length--) {\n        if (callback(array[length], length, array)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Gets the first element or first `n` elements of an array. If a callback\n     * is provided elements at the beginning of the array are returned as long\n     * as the callback returns truey. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias head, take\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback] The function called\n     *  per element or the number of elements to return. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the first element(s) of `array`.\n     * @example\n     *\n     * _.first([1, 2, 3]);\n     * // => 1\n     *\n     * _.first([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.first([1, 2, 3], function(num) {\n     *   return num < 3;\n     * });\n     * // => [1, 2]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.first(characters, 'blocked');\n     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');\n     * // => ['barney', 'fred']\n     */\n    function first(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = -1;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array ? array[0] : undefined;\n        }\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, n), length));\n    }\n\n    /**\n     * Flattens a nested array (the nesting can be to any depth). If `isShallow`\n     * is truey, the array will only be flattened a single level. If a callback\n     * is provided each element of the array is passed through the callback before\n     * flattening. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2], [3, [[4]]]]);\n     * // => [1, 2, 3, 4];\n     *\n     * _.flatten([1, [2], [3, [[4]]]], true);\n     * // => [1, 2, 3, [[4]]];\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },\n     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.flatten(characters, 'pets');\n     * // => ['hoppy', 'baby puss', 'dino']\n     */\n    function flatten(array, isShallow, callback, thisArg) {\n      // juggle arguments\n      if (typeof isShallow != 'boolean' && isShallow != null) {\n        thisArg = callback;\n        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;\n        isShallow = false;\n      }\n      if (callback != null) {\n        array = map(array, callback, thisArg);\n      }\n      return baseFlatten(array, isShallow);\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found using\n     * strict equality for comparisons, i.e. `===`. If the array is already sorted\n     * providing `true` for `fromIndex` will run a faster binary search.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n     *  to perform a binary search on a sorted array.\n     * @returns {number} Returns the index of the matched value or `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n     * // => 1\n     *\n     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n     * // => 4\n     *\n     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n     * // => 2\n     */\n    function indexOf(array, value, fromIndex) {\n      if (typeof fromIndex == 'number') {\n        var length = array ? array.length : 0;\n        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);\n      } else if (fromIndex) {\n        var index = sortedIndex(array, value);\n        return array[index] === value ? index : -1;\n      }\n      return baseIndexOf(array, value, fromIndex);\n    }\n\n    /**\n     * Gets all but the last element or last `n` elements of an array. If a\n     * callback is provided elements at the end of the array are excluded from\n     * the result as long as the callback returns truey. The callback is bound\n     * to `thisArg` and invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback=1] The function called\n     *  per element or the number of elements to exclude. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.initial([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.initial([1, 2, 3], function(num) {\n     *   return num > 1;\n     * });\n     * // => [1]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.initial(characters, 'blocked');\n     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');\n     * // => ['barney', 'fred']\n     */\n    function initial(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = (callback == null || thisArg) ? 1 : callback || n;\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));\n    }\n\n    /**\n     * Creates an array of unique values present in all provided arrays using\n     * strict equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of shared values.\n     * @example\n     *\n     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n     * // => [1, 2]\n     */\n    function intersection() {\n      var args = [],\n          argsIndex = -1,\n          argsLength = arguments.length,\n          caches = getArray(),\n          indexOf = getIndexOf(),\n          trustIndexOf = indexOf === baseIndexOf,\n          seen = getArray();\n\n      while (++argsIndex < argsLength) {\n        var value = arguments[argsIndex];\n        if (isArray(value) || isArguments(value)) {\n          args.push(value);\n          caches.push(trustIndexOf && value.length >= largeArraySize &&\n            createCache(argsIndex ? args[argsIndex] : seen));\n        }\n      }\n      var array = args[0],\n          index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      outer:\n      while (++index < length) {\n        var cache = caches[0];\n        value = array[index];\n\n        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {\n          argsIndex = argsLength;\n          (cache || seen).push(value);\n          while (--argsIndex) {\n            cache = caches[argsIndex];\n            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n      }\n      while (argsLength--) {\n        cache = caches[argsLength];\n        if (cache) {\n          releaseObject(cache);\n        }\n      }\n      releaseArray(caches);\n      releaseArray(seen);\n      return result;\n    }\n\n    /**\n     * Gets the last element or last `n` elements of an array. If a callback is\n     * provided elements at the end of the array are returned as long as the\n     * callback returns truey. The callback is bound to `thisArg` and invoked\n     * with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback] The function called\n     *  per element or the number of elements to return. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the last element(s) of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     *\n     * _.last([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.last([1, 2, 3], function(num) {\n     *   return num > 1;\n     * });\n     * // => [2, 3]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.pluck(_.last(characters, 'blocked'), 'name');\n     * // => ['fred', 'pebbles']\n     *\n     * // using \"_.where\" callback shorthand\n     * _.last(characters, { 'employer': 'na' });\n     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]\n     */\n    function last(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array ? array[length - 1] : undefined;\n        }\n      }\n      return slice(array, nativeMax(0, length - n));\n    }\n\n    /**\n     * Gets the index at which the last occurrence of `value` is found using strict\n     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n     * as the offset from the end of the collection.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value or `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n     * // => 4\n     *\n     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var index = array ? array.length : 0;\n      if (typeof fromIndex == 'number') {\n        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n      }\n      while (index--) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Removes all provided values from the given array using strict equality for\n     * comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to modify.\n     * @param {...*} [value] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3, 1, 2, 3];\n     * _.pull(array, 2, 3);\n     * console.log(array);\n     * // => [1, 1]\n     */\n    function pull(array) {\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = args.length,\n          length = array ? array.length : 0;\n\n      while (++argsIndex < argsLength) {\n        var index = -1,\n            value = args[argsIndex];\n        while (++index < length) {\n          if (array[index] === value) {\n            splice.call(array, index--, 1);\n            length--;\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to but not including `end`. If `start` is less than `stop` a\n     * zero-length range is created unless a negative `step` is specified.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns a new range array.\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    function range(start, end, step) {\n      start = +start || 0;\n      step = typeof step == 'number' ? step : (+step || 1);\n\n      if (end == null) {\n        end = start;\n        start = 0;\n      }\n      // use `Array(length)` so engines like Chakra and V8 avoid slower modes\n      // http://youtu.be/XAqIpGU8ZZk#t=17m25s\n      var index = -1,\n          length = nativeMax(0, ceil((end - start) / (step || 1))),\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * Removes all elements from an array that the callback returns truey for\n     * and returns an array of removed elements. The callback is bound to `thisArg`\n     * and invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to modify.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4, 5, 6];\n     * var evens = _.remove(array, function(num) { return num % 2 == 0; });\n     *\n     * console.log(array);\n     * // => [1, 3, 5]\n     *\n     * console.log(evens);\n     * // => [2, 4, 6]\n     */\n    function remove(array, callback, thisArg) {\n      var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (callback(value, index, array)) {\n          result.push(value);\n          splice.call(array, index--, 1);\n          length--;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The opposite of `_.initial` this method gets all but the first element or\n     * first `n` elements of an array. If a callback function is provided elements\n     * at the beginning of the array are excluded from the result as long as the\n     * callback returns truey. The callback is bound to `thisArg` and invoked\n     * with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias drop, tail\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback=1] The function called\n     *  per element or the number of elements to exclude. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a slice of `array`.\n     * @example\n     *\n     * _.rest([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.rest([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.rest([1, 2, 3], function(num) {\n     *   return num < 3;\n     * });\n     * // => [3]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.pluck(_.rest(characters, 'blocked'), 'name');\n     * // => ['fred', 'pebbles']\n     *\n     * // using \"_.where\" callback shorthand\n     * _.rest(characters, { 'employer': 'slate' });\n     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]\n     */\n    function rest(array, callback, thisArg) {\n      if (typeof callback != 'number' && callback != null) {\n        var n = 0,\n            index = -1,\n            length = array ? array.length : 0;\n\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);\n      }\n      return slice(array, n);\n    }\n\n    /**\n     * Uses a binary search to determine the smallest index at which a value\n     * should be inserted into a given sorted array in order to maintain the sort\n     * order of the array. If a callback is provided it will be executed for\n     * `value` and each element of `array` to compute their sort ranking. The\n     * callback is bound to `thisArg` and invoked with one argument; (value).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([20, 30, 50], 40);\n     * // => 2\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n     * // => 2\n     *\n     * var dict = {\n     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n     * };\n     *\n     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n     *   return dict.wordToNumber[word];\n     * });\n     * // => 2\n     *\n     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n     *   return this.wordToNumber[word];\n     * }, dict);\n     * // => 2\n     */\n    function sortedIndex(array, value, callback, thisArg) {\n      var low = 0,\n          high = array ? array.length : low;\n\n      // explicitly reference `identity` for better inlining in Firefox\n      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;\n      value = callback(value);\n\n      while (low < high) {\n        var mid = (low + high) >>> 1;\n        (callback(array[mid]) < value)\n          ? low = mid + 1\n          : high = mid;\n      }\n      return low;\n    }\n\n    /**\n     * Creates an array of unique values, in order, of the provided arrays using\n     * strict equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of combined values.\n     * @example\n     *\n     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n     * // => [1, 2, 3, 5, 4]\n     */\n    function union() {\n      return baseUniq(baseFlatten(arguments, true, true));\n    }\n\n    /**\n     * Creates a duplicate-value-free version of an array using strict equality\n     * for comparisons, i.e. `===`. If the array is sorted, providing\n     * `true` for `isSorted` will use a faster algorithm. If a callback is provided\n     * each element of `array` is passed through the callback before uniqueness\n     * is computed. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias unique\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a duplicate-value-free array.\n     * @example\n     *\n     * _.uniq([1, 2, 1, 3, 1]);\n     * // => [1, 2, 3]\n     *\n     * _.uniq([1, 1, 2, 2, 3], true);\n     * // => [1, 2, 3]\n     *\n     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });\n     * // => ['A', 'b', 'C']\n     *\n     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);\n     * // => [1, 2.5, 3]\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniq(array, isSorted, callback, thisArg) {\n      // juggle arguments\n      if (typeof isSorted != 'boolean' && isSorted != null) {\n        thisArg = callback;\n        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;\n        isSorted = false;\n      }\n      if (callback != null) {\n        callback = lodash.createCallback(callback, thisArg, 3);\n      }\n      return baseUniq(array, isSorted, callback);\n    }\n\n    /**\n     * Creates an array excluding all provided values using strict equality for\n     * comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to filter.\n     * @param {...*} [value] The values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n     * // => [2, 3, 4]\n     */\n    function without(array) {\n      return baseDifference(array, slice(arguments, 1));\n    }\n\n    /**\n     * Creates an array that is the symmetric difference of the provided arrays.\n     * See http://en.wikipedia.org/wiki/Symmetric_difference.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of values.\n     * @example\n     *\n     * _.xor([1, 2, 3], [5, 2, 1, 4]);\n     * // => [3, 5, 4]\n     *\n     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);\n     * // => [1, 4, 5]\n     */\n    function xor() {\n      var index = -1,\n          length = arguments.length;\n\n      while (++index < length) {\n        var array = arguments[index];\n        if (isArray(array) || isArguments(array)) {\n          var result = result\n            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))\n            : array;\n        }\n      }\n      return result || [];\n    }\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the first\n     * elements of the given arrays, the second of which contains the second\n     * elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @alias unzip\n     * @category Arrays\n     * @param {...Array} [array] Arrays to process.\n     * @returns {Array} Returns a new array of grouped elements.\n     * @example\n     *\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n     * // => [['fred', 30, true], ['barney', 40, false]]\n     */\n    function zip() {\n      var array = arguments.length > 1 ? arguments : arguments[0],\n          index = -1,\n          length = array ? max(pluck(array, 'length')) : 0,\n          result = Array(length < 0 ? 0 : length);\n\n      while (++index < length) {\n        result[index] = pluck(array, index);\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed from arrays of `keys` and `values`. Provide\n     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`\n     * or two arrays, one of `keys` and one of corresponding `values`.\n     *\n     * @static\n     * @memberOf _\n     * @alias object\n     * @category Arrays\n     * @param {Array} keys The array of keys.\n     * @param {Array} [values=[]] The array of values.\n     * @returns {Object} Returns an object composed of the given keys and\n     *  corresponding values.\n     * @example\n     *\n     * _.zipObject(['fred', 'barney'], [30, 40]);\n     * // => { 'fred': 30, 'barney': 40 }\n     */\n    function zipObject(keys, values) {\n      var index = -1,\n          length = keys ? keys.length : 0,\n          result = {};\n\n      if (!values && length && !isArray(keys[0])) {\n        values = [];\n      }\n      while (++index < length) {\n        var key = keys[index];\n        if (values) {\n          result[key] = values[index];\n        } else if (key) {\n          result[key[0]] = key[1];\n        }\n      }\n      return result;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a function that executes `func`, with  the `this` binding and\n     * arguments of the created function, only after being called `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {number} n The number of times the function must be called before\n     *  `func` is executed.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('Done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => logs 'Done saving!', after all saves have completed\n     */\n    function after(n, func) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that, when called, invokes `func` with the `this`\n     * binding of `thisArg` and prepends any additional `bind` arguments to those\n     * provided to the bound function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to bind.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var func = function(greeting) {\n     *   return greeting + ' ' + this.name;\n     * };\n     *\n     * func = _.bind(func, { 'name': 'fred' }, 'hi');\n     * func();\n     * // => 'hi fred'\n     */\n    function bind(func, thisArg) {\n      return arguments.length > 2\n        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)\n        : createWrapper(func, 1, null, null, thisArg);\n    }\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method. Method names may be specified as individual arguments or as arrays\n     * of method names. If no method names are provided all the function properties\n     * of `object` will be bound.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...string} [methodName] The object method names to\n     *  bind, specified as individual method names or arrays of method names.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'onClick': function() { console.log('clicked ' + this.label); }\n     * };\n     *\n     * _.bindAll(view);\n     * jQuery('#docs').on('click', view.onClick);\n     * // => logs 'clicked docs', when the button is clicked\n     */\n    function bindAll(object) {\n      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),\n          index = -1,\n          length = funcs.length;\n\n      while (++index < length) {\n        var key = funcs[index];\n        object[key] = createWrapper(object[key], 1, null, null, object);\n      }\n      return object;\n    }\n\n    /**\n     * Creates a function that, when called, invokes the method at `object[key]`\n     * and prepends any additional `bindKey` arguments to those provided to the bound\n     * function. This method differs from `_.bind` by allowing bound functions to\n     * reference methods that will be redefined or don't yet exist.\n     * See http://michaux.ca/articles/lazy-function-definition-pattern.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Object} object The object the method belongs to.\n     * @param {string} key The key of the method.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'name': 'fred',\n     *   'greet': function(greeting) {\n     *     return greeting + ' ' + this.name;\n     *   }\n     * };\n     *\n     * var func = _.bindKey(object, 'greet', 'hi');\n     * func();\n     * // => 'hi fred'\n     *\n     * object.greet = function(greeting) {\n     *   return greeting + 'ya ' + this.name + '!';\n     * };\n     *\n     * func();\n     * // => 'hiya fred!'\n     */\n    function bindKey(object, key) {\n      return arguments.length > 2\n        ? createWrapper(key, 19, slice(arguments, 2), null, object)\n        : createWrapper(key, 3, null, null, object);\n    }\n\n    /**\n     * Creates a function that is the composition of the provided functions,\n     * where each function consumes the return value of the function that follows.\n     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {...Function} [func] Functions to compose.\n     * @returns {Function} Returns the new composed function.\n     * @example\n     *\n     * var realNameMap = {\n     *   'pebbles': 'penelope'\n     * };\n     *\n     * var format = function(name) {\n     *   name = realNameMap[name.toLowerCase()] || name;\n     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n     * };\n     *\n     * var greet = function(formatted) {\n     *   return 'Hiya ' + formatted + '!';\n     * };\n     *\n     * var welcome = _.compose(greet, format);\n     * welcome('pebbles');\n     * // => 'Hiya Penelope!'\n     */\n    function compose() {\n      var funcs = arguments,\n          length = funcs.length;\n\n      while (length--) {\n        if (!isFunction(funcs[length])) {\n          throw new TypeError;\n        }\n      }\n      return function() {\n        var args = arguments,\n            length = funcs.length;\n\n        while (length--) {\n          args = [funcs[length].apply(this, args)];\n        }\n        return args[0];\n      };\n    }\n\n    /**\n     * Creates a function which accepts one or more arguments of `func` that when\n     * invoked either executes `func` returning its result, if all `func` arguments\n     * have been provided, or returns a function that accepts one or more of the\n     * remaining `func` arguments, and so on. The arity of `func` can be specified\n     * if `func.length` is not sufficient.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var curried = _.curry(function(a, b, c) {\n     *   console.log(a + b + c);\n     * });\n     *\n     * curried(1)(2)(3);\n     * // => 6\n     *\n     * curried(1, 2)(3);\n     * // => 6\n     *\n     * curried(1, 2, 3);\n     * // => 6\n     */\n    function curry(func, arity) {\n      arity = typeof arity == 'number' ? arity : (+arity || func.length);\n      return createWrapper(func, 4, null, null, null, arity);\n    }\n\n    /**\n     * Creates a function that will delay the execution of `func` until after\n     * `wait` milliseconds have elapsed since the last time it was invoked.\n     * Provide an options object to indicate that `func` should be invoked on\n     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls\n     * to the debounced function will return the result of the last `func` call.\n     *\n     * Note: If `leading` and `trailing` options are `true` `func` will be called\n     * on the trailing edge of the timeout only if the the debounced function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to debounce.\n     * @param {number} wait The number of milliseconds to delay.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.\n     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // avoid costly calculations while the window size is in flux\n     * var lazyLayout = _.debounce(calculateLayout, 150);\n     * jQuery(window).on('resize', lazyLayout);\n     *\n     * // execute `sendMail` when the click event is fired, debouncing subsequent calls\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * });\n     *\n     * // ensure `batchLog` is executed once after 1 second of debounced calls\n     * var source = new EventSource('/stream');\n     * source.addEventListener('message', _.debounce(batchLog, 250, {\n     *   'maxWait': 1000\n     * }, false);\n     */\n    function debounce(func, wait, options) {\n      var args,\n          maxTimeoutId,\n          result,\n          stamp,\n          thisArg,\n          timeoutId,\n          trailingCall,\n          lastCalled = 0,\n          maxWait = false,\n          trailing = true;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      wait = nativeMax(0, wait) || 0;\n      if (options === true) {\n        var leading = true;\n        trailing = false;\n      } else if (isObject(options)) {\n        leading = options.leading;\n        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      var delayed = function() {\n        var remaining = wait - (now() - stamp);\n        if (remaining <= 0) {\n          if (maxTimeoutId) {\n            clearTimeout(maxTimeoutId);\n          }\n          var isCalled = trailingCall;\n          maxTimeoutId = timeoutId = trailingCall = undefined;\n          if (isCalled) {\n            lastCalled = now();\n            result = func.apply(thisArg, args);\n            if (!timeoutId && !maxTimeoutId) {\n              args = thisArg = null;\n            }\n          }\n        } else {\n          timeoutId = setTimeout(delayed, remaining);\n        }\n      };\n\n      var maxDelayed = function() {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n        if (trailing || (maxWait !== wait)) {\n          lastCalled = now();\n          result = func.apply(thisArg, args);\n          if (!timeoutId && !maxTimeoutId) {\n            args = thisArg = null;\n          }\n        }\n      };\n\n      return function() {\n        args = arguments;\n        stamp = now();\n        thisArg = this;\n        trailingCall = trailing && (timeoutId || !leading);\n\n        if (maxWait === false) {\n          var leadingCall = leading && !timeoutId;\n        } else {\n          if (!maxTimeoutId && !leading) {\n            lastCalled = stamp;\n          }\n          var remaining = maxWait - (stamp - lastCalled),\n              isCalled = remaining <= 0;\n\n          if (isCalled) {\n            if (maxTimeoutId) {\n              maxTimeoutId = clearTimeout(maxTimeoutId);\n            }\n            lastCalled = stamp;\n            result = func.apply(thisArg, args);\n          }\n          else if (!maxTimeoutId) {\n            maxTimeoutId = setTimeout(maxDelayed, remaining);\n          }\n        }\n        if (isCalled && timeoutId) {\n          timeoutId = clearTimeout(timeoutId);\n        }\n        else if (!timeoutId && wait !== maxWait) {\n          timeoutId = setTimeout(delayed, wait);\n        }\n        if (leadingCall) {\n          isCalled = true;\n          result = func.apply(thisArg, args);\n        }\n        if (isCalled && !timeoutId && !maxTimeoutId) {\n          args = thisArg = null;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Defers executing the `func` function until the current call stack has cleared.\n     * Additional arguments will be provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to defer.\n     * @param {...*} [arg] Arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) { console.log(text); }, 'deferred');\n     * // logs 'deferred' after one or more milliseconds\n     */\n    function defer(func) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var args = slice(arguments, 1);\n      return setTimeout(function() { func.apply(undefined, args); }, 1);\n    }\n\n    /**\n     * Executes the `func` function after `wait` milliseconds. Additional arguments\n     * will be provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay execution.\n     * @param {...*} [arg] Arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) { console.log(text); }, 1000, 'later');\n     * // => logs 'later' after one second\n     */\n    function delay(func, wait) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var args = slice(arguments, 2);\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided it will be used to determine the cache key for storing the result\n     * based on the arguments provided to the memoized function. By default, the\n     * first argument provided to the memoized function is used as the cache key.\n     * The `func` is executed with the `this` binding of the memoized function.\n     * The result cache is exposed as the `cache` property on the memoized function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] A function used to resolve the cache key.\n     * @returns {Function} Returns the new memoizing function.\n     * @example\n     *\n     * var fibonacci = _.memoize(function(n) {\n     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n     * });\n     *\n     * fibonacci(9)\n     * // => 34\n     *\n     * var data = {\n     *   'fred': { 'name': 'fred', 'age': 40 },\n     *   'pebbles': { 'name': 'pebbles', 'age': 1 }\n     * };\n     *\n     * // modifying the result cache\n     * var get = _.memoize(function(name) { return data[name]; }, _.identity);\n     * get('pebbles');\n     * // => { 'name': 'pebbles', 'age': 1 }\n     *\n     * get.cache.pebbles.name = 'penelope';\n     * get('pebbles');\n     * // => { 'name': 'penelope', 'age': 1 }\n     */\n    function memoize(func, resolver) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var memoized = function() {\n        var cache = memoized.cache,\n            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];\n\n        return hasOwnProperty.call(cache, key)\n          ? cache[key]\n          : (cache[key] = func.apply(this, arguments));\n      }\n      memoized.cache = {};\n      return memoized;\n    }\n\n    /**\n     * Creates a function that is restricted to execute `func` once. Repeat calls to\n     * the function will return the value of the first call. The `func` is executed\n     * with the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // `initialize` executes `createApplication` once\n     */\n    function once(func) {\n      var ran,\n          result;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      return function() {\n        if (ran) {\n          return result;\n        }\n        ran = true;\n        result = func.apply(this, arguments);\n\n        // clear the `func` variable so the function may be garbage collected\n        func = null;\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that, when called, invokes `func` with any additional\n     * `partial` arguments prepended to those provided to the new function. This\n     * method is similar to `_.bind` except it does **not** alter the `this` binding.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var greet = function(greeting, name) { return greeting + ' ' + name; };\n     * var hi = _.partial(greet, 'hi');\n     * hi('fred');\n     * // => 'hi fred'\n     */\n    function partial(func) {\n      return createWrapper(func, 16, slice(arguments, 1));\n    }\n\n    /**\n     * This method is like `_.partial` except that `partial` arguments are\n     * appended to those provided to the new function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var defaultsDeep = _.partialRight(_.merge, _.defaults);\n     *\n     * var options = {\n     *   'variable': 'data',\n     *   'imports': { 'jq': $ }\n     * };\n     *\n     * defaultsDeep(options, _.templateSettings);\n     *\n     * options.variable\n     * // => 'data'\n     *\n     * options.imports\n     * // => { '_': _, 'jq': $ }\n     */\n    function partialRight(func) {\n      return createWrapper(func, 32, null, slice(arguments, 1));\n    }\n\n    /**\n     * Creates a function that, when executed, will only call the `func` function\n     * at most once per every `wait` milliseconds. Provide an options object to\n     * indicate that `func` should be invoked on the leading and/or trailing edge\n     * of the `wait` timeout. Subsequent calls to the throttled function will\n     * return the result of the last `func` call.\n     *\n     * Note: If `leading` and `trailing` options are `true` `func` will be called\n     * on the trailing edge of the timeout only if the the throttled function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to throttle.\n     * @param {number} wait The number of milliseconds to throttle executions to.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // avoid excessively updating the position while scrolling\n     * var throttled = _.throttle(updatePosition, 100);\n     * jQuery(window).on('scroll', throttled);\n     *\n     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\n     *   'trailing': false\n     * }));\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      if (options === false) {\n        leading = false;\n      } else if (isObject(options)) {\n        leading = 'leading' in options ? options.leading : leading;\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      debounceOptions.leading = leading;\n      debounceOptions.maxWait = wait;\n      debounceOptions.trailing = trailing;\n\n      return debounce(func, wait, debounceOptions);\n    }\n\n    /**\n     * Creates a function that provides `value` to the wrapper function as its\n     * first argument. Additional arguments provided to the function are appended\n     * to those provided to the wrapper function. The wrapper is executed with\n     * the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {*} value The value to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('Fred, Wilma, & Pebbles');\n     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return createWrapper(wrapper, 16, [value]);\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * var getter = _.constant(object);\n     * getter() === object;\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Produces a callback bound to an optional `thisArg`. If `func` is a property\n     * name the created callback will return the property value for a given element.\n     * If `func` is an object the created callback will return `true` for elements\n     * that contain the equivalent object properties, otherwise it will return `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} [func=identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of the created callback.\n     * @param {number} [argCount] The number of arguments the callback accepts.\n     * @returns {Function} Returns a callback function.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // wrap to create custom callback shorthands\n     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);\n     *   return !match ? func(callback, thisArg) : function(object) {\n     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];\n     *   };\n     * });\n     *\n     * _.filter(characters, 'age__gt38');\n     * // => [{ 'name': 'fred', 'age': 40 }]\n     */\n    function createCallback(func, thisArg, argCount) {\n      var type = typeof func;\n      if (func == null || type == 'function') {\n        return baseCreateCallback(func, thisArg, argCount);\n      }\n      // handle \"_.pluck\" style callback shorthands\n      if (type != 'object') {\n        return property(func);\n      }\n      var props = keys(func),\n          key = props[0],\n          a = func[key];\n\n      // handle \"_.where\" style callback shorthands\n      if (props.length == 1 && a === a && !isObject(a)) {\n        // fast path the common case of providing an object with a single\n        // property containing a primitive value\n        return function(object) {\n          var b = object[key];\n          return a === b && (a !== 0 || (1 / a == 1 / b));\n        };\n      }\n      return function(object) {\n        var length = props.length,\n            result = false;\n\n        while (length--) {\n          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {\n            break;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n     * corresponding HTML entities.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} string The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('Fred, Wilma, & Pebbles');\n     * // => 'Fred, Wilma, &amp; Pebbles'\n     */\n    function escape(string) {\n      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);\n    }\n\n    /**\n     * This method returns the first argument provided to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * _.identity(object) === object;\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Adds function properties of a source object to the destination object.\n     * If `object` is a function methods will be added to its prototype as well.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Function|Object} [object=lodash] object The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.\n     * @example\n     *\n     * function capitalize(string) {\n     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n     * }\n     *\n     * _.mixin({ 'capitalize': capitalize });\n     * _.capitalize('fred');\n     * // => 'Fred'\n     *\n     * _('fred').capitalize().value();\n     * // => 'Fred'\n     *\n     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });\n     * _('fred').capitalize();\n     * // => 'Fred'\n     */\n    function mixin(object, source, options) {\n      var chain = true,\n          methodNames = source && functions(source);\n\n      if (!source || (!options && !methodNames.length)) {\n        if (options == null) {\n          options = source;\n        }\n        ctor = lodashWrapper;\n        source = object;\n        object = lodash;\n        methodNames = functions(source);\n      }\n      if (options === false) {\n        chain = false;\n      } else if (isObject(options) && 'chain' in options) {\n        chain = options.chain;\n      }\n      var ctor = object,\n          isFunc = isFunction(ctor);\n\n      forEach(methodNames, function(methodName) {\n        var func = object[methodName] = source[methodName];\n        if (isFunc) {\n          ctor.prototype[methodName] = function() {\n            var chainAll = this.__chain__,\n                value = this.__wrapped__,\n                args = [value];\n\n            push.apply(args, arguments);\n            var result = func.apply(object, args);\n            if (chain || chainAll) {\n              if (value === result && isObject(result)) {\n                return this;\n              }\n              result = new ctor(result);\n              result.__chain__ = chainAll;\n            }\n            return result;\n          };\n        }\n      });\n    }\n\n    /**\n     * Reverts the '_' variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      context._ = oldDash;\n      return this;\n    }\n\n    /**\n     * A no-operation function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * _.noop(object) === undefined;\n     * // => true\n     */\n    function noop() {\n      // no operation performed\n    }\n\n    /**\n     * Gets the number of milliseconds that have elapsed since the Unix epoch\n     * (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @example\n     *\n     * var stamp = _.now();\n     * _.defer(function() { console.log(_.now() - stamp); });\n     * // => logs the number of milliseconds it took for the deferred function to be called\n     */\n    var now = isNative(now = Date.now) && now || function() {\n      return new Date().getTime();\n    };\n\n    /**\n     * Converts the given value into an integer of the specified radix.\n     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the\n     * `value` is a hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * Note: This method avoids differences in native ES3 and ES5 `parseInt`\n     * implementations. See http://es5.github.io/#E.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} value The value to parse.\n     * @param {number} [radix] The radix used to interpret the value to parse.\n     * @returns {number} Returns the new integer value.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     */\n    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {\n      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`\n      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);\n    };\n\n    /**\n     * Creates a \"_.pluck\" style function, which returns the `key` value of a\n     * given object.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} key The name of the property to retrieve.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'fred',   'age': 40 },\n     *   { 'name': 'barney', 'age': 36 }\n     * ];\n     *\n     * var getName = _.property('name');\n     *\n     * _.map(characters, getName);\n     * // => ['barney', 'fred']\n     *\n     * _.sortBy(characters, getName);\n     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]\n     */\n    function property(key) {\n      return function(object) {\n        return object[key];\n      };\n    }\n\n    /**\n     * Produces a random number between `min` and `max` (inclusive). If only one\n     * argument is provided a number between `0` and the given number will be\n     * returned. If `floating` is truey or either `min` or `max` are floats a\n     * floating-point number will be returned instead of an integer.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {number} [min=0] The minimum possible value.\n     * @param {number} [max=1] The maximum possible value.\n     * @param {boolean} [floating=false] Specify returning a floating-point number.\n     * @returns {number} Returns a random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(min, max, floating) {\n      var noMin = min == null,\n          noMax = max == null;\n\n      if (floating == null) {\n        if (typeof min == 'boolean' && noMax) {\n          floating = min;\n          min = 1;\n        }\n        else if (!noMax && typeof max == 'boolean') {\n          floating = max;\n          noMax = true;\n        }\n      }\n      if (noMin && noMax) {\n        max = 1;\n      }\n      min = +min || 0;\n      if (noMax) {\n        max = min;\n        min = 0;\n      } else {\n        max = +max || 0;\n      }\n      if (floating || min % 1 || max % 1) {\n        var rand = nativeRandom();\n        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);\n      }\n      return baseRandom(min, max);\n    }\n\n    /**\n     * Resolves the value of property `key` on `object`. If `key` is a function\n     * it will be invoked with the `this` binding of `object` and its result returned,\n     * else the property value is returned. If `object` is falsey then `undefined`\n     * is returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Object} object The object to inspect.\n     * @param {string} key The name of the property to resolve.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = {\n     *   'cheese': 'crumpets',\n     *   'stuff': function() {\n     *     return 'nonsense';\n     *   }\n     * };\n     *\n     * _.result(object, 'cheese');\n     * // => 'crumpets'\n     *\n     * _.result(object, 'stuff');\n     * // => 'nonsense'\n     */\n    function result(object, key) {\n      if (object) {\n        var value = object[key];\n        return isFunction(value) ? object[key]() : value;\n      }\n    }\n\n    /**\n     * A micro-templating method that handles arbitrary delimiters, preserves\n     * whitespace, and correctly escapes quotes within interpolated code.\n     *\n     * Note: In the development build, `_.template` utilizes sourceURLs for easier\n     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n     *\n     * For more information on precompiling templates see:\n     * http://lodash.com/custom-builds\n     *\n     * For more information on Chrome extension sandboxes see:\n     * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} text The template text.\n     * @param {Object} data The data object used to populate the text.\n     * @param {Object} [options] The options object.\n     * @param {RegExp} [options.escape] The \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n     * @param {Object} [options.imports] An object to import into the template as local variables.\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n     * @param {string} [sourceURL] The sourceURL of the template's compiled source.\n     * @param {string} [variable] The data object variable name.\n     * @returns {Function|string} Returns a compiled function when no `data` object\n     *  is given, else it returns the interpolated text.\n     * @example\n     *\n     * // using the \"interpolate\" delimiter to create a compiled template\n     * var compiled = _.template('hello <%= name %>');\n     * compiled({ 'name': 'fred' });\n     * // => 'hello fred'\n     *\n     * // using the \"escape\" delimiter to escape HTML in data property values\n     * _.template('<b><%- value %></b>', { 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // using the \"evaluate\" delimiter to generate HTML\n     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';\n     * _.template(list, { 'people': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n     * _.template('hello ${ name }', { 'name': 'pebbles' });\n     * // => 'hello pebbles'\n     *\n     * // using the internal `print` function in \"evaluate\" delimiters\n     * _.template('<% print(\"hello \" + name); %>!', { 'name': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // using a custom template delimiters\n     * _.templateSettings = {\n     *   'interpolate': /{{([\\s\\S]+?)}}/g\n     * };\n     *\n     * _.template('hello {{ name }}!', { 'name': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // using the `imports` option to import jQuery\n     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';\n     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the `sourceURL` option to specify a custom sourceURL for the template\n     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n     *\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     *   var __t, __p = '', __e = _.escape;\n     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n     *   return __p;\n     * }\n     *\n     * // using the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and a stack trace\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(text, data, options) {\n      // based on John Resig's `tmpl` implementation\n      // http://ejohn.org/blog/javascript-micro-templating/\n      // and Laura Doktorova's doT.js\n      // https://github.com/olado/doT\n      var settings = lodash.templateSettings;\n      text = String(text || '');\n\n      // avoid missing dependencies when `iteratorTemplate` is not defined\n      options = defaults({}, options, settings);\n\n      var imports = defaults({}, options.imports, settings.imports),\n          importsKeys = keys(imports),\n          importsValues = values(imports);\n\n      var isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // compile the regexp to match each delimiter\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // escape characters that cannot be included in string literals\n        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // replace delimiters with snippets\n        if (escapeValue) {\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // the JS engine embedded in Adobe products requires returning the `match`\n        // string in order to produce the correct `offset` value\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // if `variable` is not specified, wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain\n      var variable = options.variable,\n          hasVariable = variable;\n\n      if (!hasVariable) {\n        variable = 'obj';\n        source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n      }\n      // cleanup code by stripping empty strings\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // frame code as the function body\n      source = 'function(' + variable + ') {\\n' +\n        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n        \"var __t, __p = '', __e = _.escape\" +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      // Use a sourceURL for easier debugging.\n      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n      var sourceURL = '\\n/*\\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\\n*/';\n\n      try {\n        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);\n      } catch(e) {\n        e.source = source;\n        throw e;\n      }\n      if (data) {\n        return result(data);\n      }\n      // provide the compiled function's source by its `toString` method, in\n      // supported environments, or the `source` property as a convenience for\n      // inlining compiled templates during the build process\n      result.source = source;\n      return result;\n    }\n\n    /**\n     * Executes the callback `n` times, returning an array of the results\n     * of each callback execution. The callback is bound to `thisArg` and invoked\n     * with one argument; (index).\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {number} n The number of times to execute the callback.\n     * @param {Function} callback The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns an array of the results of each `callback` execution.\n     * @example\n     *\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n     * // => [3, 6, 4]\n     *\n     * _.times(3, function(n) { mage.castSpell(n); });\n     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n     *\n     * _.times(3, function(n) { this.cast(n); }, mage);\n     * // => also calls `mage.castSpell(n)` three times\n     */\n    function times(n, callback, thisArg) {\n      n = (n = +n) > -1 ? n : 0;\n      var index = -1,\n          result = Array(n);\n\n      callback = baseCreateCallback(callback, thisArg, 1);\n      while (++index < n) {\n        result[index] = callback(index);\n      }\n      return result;\n    }\n\n    /**\n     * The inverse of `_.escape` this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their\n     * corresponding characters.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} string The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('Fred, Barney &amp; Pebbles');\n     * // => 'Fred, Barney & Pebbles'\n     */\n    function unescape(string) {\n      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} [prefix] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return String(prefix == null ? '' : prefix) + id;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object that wraps the given value with explicit\n     * method chaining enabled.\n     *\n     * @static\n     * @memberOf _\n     * @category Chaining\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36 },\n     *   { 'name': 'fred',    'age': 40 },\n     *   { 'name': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _.chain(characters)\n     *     .sortBy('age')\n     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })\n     *     .first()\n     *     .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      value = new lodashWrapper(value);\n      value.__chain__ = true;\n      return value;\n    }\n\n    /**\n     * Invokes `interceptor` with the `value` as the first argument and then\n     * returns `value`. The purpose of this method is to \"tap into\" a method\n     * chain in order to perform operations on intermediate results within\n     * the chain.\n     *\n     * @static\n     * @memberOf _\n     * @category Chaining\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3, 4])\n     *  .tap(function(array) { array.pop(); })\n     *  .reverse()\n     *  .value();\n     * // => [3, 2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * Enables explicit method chaining on the wrapper object.\n     *\n     * @name chain\n     * @memberOf _\n     * @category Chaining\n     * @returns {*} Returns the wrapper object.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // without explicit chaining\n     * _(characters).first();\n     * // => { 'name': 'barney', 'age': 36 }\n     *\n     * // with explicit chaining\n     * _(characters).chain()\n     *   .first()\n     *   .pick('age')\n     *   .value();\n     * // => { 'age': 36 }\n     */\n    function wrapperChain() {\n      this.__chain__ = true;\n      return this;\n    }\n\n    /**\n     * Produces the `toString` result of the wrapped value.\n     *\n     * @name toString\n     * @memberOf _\n     * @category Chaining\n     * @returns {string} Returns the string result.\n     * @example\n     *\n     * _([1, 2, 3]).toString();\n     * // => '1,2,3'\n     */\n    function wrapperToString() {\n      return String(this.__wrapped__);\n    }\n\n    /**\n     * Extracts the wrapped value.\n     *\n     * @name valueOf\n     * @memberOf _\n     * @alias value\n     * @category Chaining\n     * @returns {*} Returns the wrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).valueOf();\n     * // => [1, 2, 3]\n     */\n    function wrapperValueOf() {\n      return this.__wrapped__;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions that return wrapped values when chaining\n    lodash.after = after;\n    lodash.assign = assign;\n    lodash.at = at;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.chain = chain;\n    lodash.compact = compact;\n    lodash.compose = compose;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.createCallback = createCallback;\n    lodash.curry = curry;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.filter = filter;\n    lodash.flatten = flatten;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.functions = functions;\n    lodash.groupBy = groupBy;\n    lodash.indexBy = indexBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.invert = invert;\n    lodash.invoke = invoke;\n    lodash.keys = keys;\n    lodash.map = map;\n    lodash.mapValues = mapValues;\n    lodash.max = max;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.min = min;\n    lodash.omit = omit;\n    lodash.once = once;\n    lodash.pairs = pairs;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.pick = pick;\n    lodash.pluck = pluck;\n    lodash.property = property;\n    lodash.pull = pull;\n    lodash.range = range;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.shuffle = shuffle;\n    lodash.sortBy = sortBy;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.times = times;\n    lodash.toArray = toArray;\n    lodash.transform = transform;\n    lodash.union = union;\n    lodash.uniq = uniq;\n    lodash.values = values;\n    lodash.where = where;\n    lodash.without = without;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n\n    // add aliases\n    lodash.collect = map;\n    lodash.drop = rest;\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.extend = assign;\n    lodash.methods = functions;\n    lodash.object = zipObject;\n    lodash.select = filter;\n    lodash.tail = rest;\n    lodash.unique = uniq;\n    lodash.unzip = zip;\n\n    // add functions to `lodash.prototype`\n    mixin(lodash);\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions that return unwrapped values when chaining\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.contains = contains;\n    lodash.escape = escape;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.has = has;\n    lodash.identity = identity;\n    lodash.indexOf = indexOf;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isBoolean = isBoolean;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isNaN = isNaN;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isString = isString;\n    lodash.isUndefined = isUndefined;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.mixin = mixin;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.result = result;\n    lodash.runInContext = runInContext;\n    lodash.size = size;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.template = template;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n\n    // add aliases\n    lodash.all = every;\n    lodash.any = some;\n    lodash.detect = find;\n    lodash.findWhere = find;\n    lodash.foldl = reduce;\n    lodash.foldr = reduceRight;\n    lodash.include = contains;\n    lodash.inject = reduce;\n\n    mixin(function() {\n      var source = {}\n      forOwn(lodash, function(func, methodName) {\n        if (!lodash.prototype[methodName]) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }(), false);\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions capable of returning wrapped and unwrapped values when chaining\n    lodash.first = first;\n    lodash.last = last;\n    lodash.sample = sample;\n\n    // add aliases\n    lodash.take = first;\n    lodash.head = first;\n\n    forOwn(lodash, function(func, methodName) {\n      var callbackable = methodName !== 'sample';\n      if (!lodash.prototype[methodName]) {\n        lodash.prototype[methodName]= function(n, guard) {\n          var chainAll = this.__chain__,\n              result = func(this.__wrapped__, n, guard);\n\n          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))\n            ? result\n            : new lodashWrapper(result, chainAll);\n        };\n      }\n    });\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type string\n     */\n    lodash.VERSION = '2.4.1';\n\n    // add \"Chaining\" functions to the wrapper\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.toString = wrapperToString;\n    lodash.prototype.value = wrapperValueOf;\n    lodash.prototype.valueOf = wrapperValueOf;\n\n    // add `Array` functions that return unwrapped values\n    forEach(['join', 'pop', 'shift'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        var chainAll = this.__chain__,\n            result = func.apply(this.__wrapped__, arguments);\n\n        return chainAll\n          ? new lodashWrapper(result, chainAll)\n          : result;\n      };\n    });\n\n    // add `Array` functions that return the existing wrapped value\n    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        func.apply(this.__wrapped__, arguments);\n        return this;\n      };\n    });\n\n    // add `Array` functions that return new wrapped values\n    forEach(['concat', 'slice', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);\n      };\n    });\n\n    return lodash;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  var _ = runInContext();\n\n  // some AMD build optimizers like r.js check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lo-Dash to the global object even when an AMD loader is present in\n    // case Lo-Dash is loaded with a RequireJS shim config.\n    // See http://requirejs.org/docs/api.html#config-shim\n    root._ = _;\n\n    // define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module\n    define(function() {\n      return _;\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Node.js or RingoJS\n    if (moduleExports) {\n      (freeModule.exports = _)._ = _;\n    }\n    // in Narwhal or Rhino -require\n    else {\n      freeExports._ = _;\n    }\n  }\n  else {\n    // in a browser or Rhino\n    root._ = _;\n  }\n}.call(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}]},{},[1])(1)\n});","var foograph = {\n  /**\n   * Insert a vertex into this graph.\n   * \n   * @param vertex A valid Vertex instance\n   */\n  insertVertex: function(vertex) {\n      this.vertices.push(vertex);\n      this.vertexCount++;\n    },\n  \n  /**\n   * Insert an edge vertex1 --> vertex2.\n   *  \n   * @param label Label for this edge\n   * @param weight Weight of this edge\n   * @param vertex1 Starting Vertex instance\n   * @param vertex2 Ending Vertex instance\n   * @return Newly created Edge instance\n   */\n  insertEdge: function(label, weight, vertex1, vertex2, style) {\n      var e1 = new foograph.Edge(label, weight, vertex2, style);\n      var e2 = new foograph.Edge(null, weight, vertex1, null);\n      \n      vertex1.edges.push(e1);\n      vertex2.reverseEdges.push(e2);\n      \n      return e1;\n    },\n  \n  /** \n   * Delete edge.\n   *\n   * @param vertex Starting vertex\n   * @param edge Edge to remove\n   */\n  removeEdge: function(vertex1, vertex2) {\n      for (var i = vertex1.edges.length - 1; i >= 0; i--) {\n        if (vertex1.edges[i].endVertex == vertex2) {\n          vertex1.edges.splice(i,1);\n          break;\n        }\n      }\n      \n      for (var i = vertex2.reverseEdges.length - 1; i >= 0; i--) {\n        if (vertex2.reverseEdges[i].endVertex == vertex1) {\n          vertex2.reverseEdges.splice(i,1);\n          break;\n        }\n      }\n    },\n  \n  /** \n   * Delete vertex.\n   *\n   * @param vertex Vertex to remove from the graph\n   */\n  removeVertex: function(vertex) {\n      for (var i = vertex.edges.length - 1; i >= 0; i-- ) {\n        this.removeEdge(vertex, vertex.edges[i].endVertex);\n      }\n      \n      for (var i = vertex.reverseEdges.length - 1; i >= 0; i-- ) {\n        this.removeEdge(vertex.reverseEdges[i].endVertex, vertex);\n      }\n      \n      for (var i = this.vertices.length - 1; i >= 0; i-- ) {\n        if (this.vertices[i] == vertex) {\n          this.vertices.splice(i,1);\n          break;\n        }\n      }\n      \n      this.vertexCount--;\n    },\n   \n  /**\n   * Plots this graph to a canvas.\n   *\n   * @param canvas A proper canvas instance\n   */\n  plot: function(canvas) {\n      var i = 0;\n      /* Draw edges first */\n      for (i = 0; i < this.vertices.length; i++) {\n        var v = this.vertices[i];\n        if (!v.hidden) {\n          for (var j = 0; j < v.edges.length; j++) {\n            var e = v.edges[j];\n            /* Draw edge (if not hidden) */\n            if (!e.hidden)\n              e.draw(canvas, v);\n          }\n        }\n      }\n      \n      /* Draw the vertices. */\n      for (i = 0; i < this.vertices.length; i++) {\n        v = this.vertices[i];\n      \n        /* Draw vertex (if not hidden) */\n        if (!v.hidden)\n          v.draw(canvas);\n      }\n    },\n  \n  /**\n   * Graph object constructor.\n   * \n   * @param label Label of this graph\n   * @param directed true or false\n   */\n  Graph: function (label, directed) {\n      /* Fields. */\n      this.label = label;\n      this.vertices = new Array();\n      this.directed = directed;\n      this.vertexCount = 0;\n      \n      /* Graph methods. */\n      this.insertVertex = foograph.insertVertex;\n      this.removeVertex = foograph.removeVertex;\n      this.insertEdge = foograph.insertEdge;\n      this.removeEdge = foograph.removeEdge;\n      this.plot = foograph.plot;\n    },\n  \n  /**\n   * Vertex object constructor.\n   * \n   * @param label Label of this vertex\n   * @param next Reference to the next vertex of this graph\n   * @param firstEdge First edge of a linked list of edges\n   */\n  Vertex: function(label, x, y, style) {\n      this.label = label;\n      this.edges = new Array();\n      this.reverseEdges = new Array();\n      this.x = x;\n      this.y = y;\n      this.dx = 0;\n      this.dy = 0;\n      this.level = -1;\n      this.numberOfParents = 0;\n      this.hidden = false;\n      this.fixed = false;     // Fixed vertices are static (unmovable)\n      \n      if(style != null) {\n          this.style = style;\n      }\n      else { // Default\n          this.style = new foograph.VertexStyle('ellipse', 80, 40, '#ffffff', '#000000', true);\n      }\n    },\n  \n   \n   /**\n   * VertexStyle object type for defining vertex style options.\n   *\n   * @param shape Shape of the vertex ('ellipse' or 'rect')\n   * @param width Width in px\n   * @param height Height in px\n   * @param fillColor The color with which the vertex is drawn (RGB HEX string)\n   * @param borderColor The color with which the border of the vertex is drawn (RGB HEX string)\n   * @param showLabel Show the vertex label or not\n   */\n  VertexStyle: function(shape, width, height, fillColor, borderColor, showLabel) {\n      this.shape = shape;\n      this.width = width;\n      this.height = height;\n      this.fillColor = fillColor;\n      this.borderColor = borderColor;\n      this.showLabel = showLabel;\n    },\n   \n  /**\n   * Edge object constructor.\n   *\n   * @param label Label of this edge\n   * @param next Next edge reference\n   * @param weight Edge weight\n   * @param endVertex Destination Vertex instance\n   */\n  Edge: function (label, weight, endVertex, style) {\n      this.label = label;\n      this.weight = weight;\n      this.endVertex = endVertex;\n      this.style = null;\n      this.hidden = false;\n        \n      // Curving information\n      this.curved = false;\n      this.controlX = -1;   // Control coordinates for Bezier curve drawing\n      this.controlY = -1;\n      this.original = null; // If this is a temporary edge it holds the original edge\n      \n      if(style != null) {    \n        this.style = style;\n      }\n      else {  // Set to default\n        this.style = new foograph.EdgeStyle(2, '#000000', true, false);\n      }\n    },\n  \n  \n  \n  /**\n   * EdgeStyle object type for defining vertex style options.\n   *\n   * @param width Edge line width\n   * @param color The color with which the edge is drawn\n   * @param showArrow Draw the edge arrow (only if directed)\n   * @param showLabel Show the edge label or not\n   */\n  EdgeStyle: function(width, color, showArrow, showLabel) {\n      this.width = width;\n      this.color = color;\n      this.showArrow = showArrow;\n      this.showLabel = showLabel;\n    },\n  \n  /**\n   * This file is part of foograph Javascript graph library.\n   *\n   * Description: Random vertex layout manager\n   */\n  \n  /**\n   * Class constructor.\n   *\n   * @param width Layout width\n   * @param height Layout height\n   */\n  RandomVertexLayout: function (width, height) {\n      this.width = width;\n      this.height = height;\n    },\n  \n  \n  /**\n   * This file is part of foograph Javascript graph library.\n   *\n   * Description: Fruchterman-Reingold force-directed vertex\n   *              layout manager\n   */\n  \n  /**\n   * Class constructor.\n   *\n   * @param width Layout width\n   * @param height Layout height\n   * @param iterations Number of iterations -\n   * with more iterations it is more likely the layout has converged into a static equilibrium.\n   */\n  ForceDirectedVertexLayout: function (width, height, iterations, randomize, eps) {\n      this.width = width;\n      this.height = height;\n      this.iterations = iterations;\n      this.randomize = randomize;\n      this.eps = eps;\n      this.callback = function() {};\n    },\n  \n  A: 1.5, // Fine tune attraction\n  \n  R: 0.5  // Fine tune repulsion\n};\n\n/**\n * toString overload for easier debugging\n */\nfoograph.Vertex.prototype.toString = function() {\n  return \"[v:\" + this.label + \"] \";\n};\n\n/**\n * toString overload for easier debugging\n */\nfoograph.Edge.prototype.toString = function() {\n  return \"[e:\" + this.endVertex.label + \"] \";\n};\n\n/**\n * Draw vertex method.\n *\n * @param canvas jsGraphics instance\n */\nfoograph.Vertex.prototype.draw = function(canvas) {\n  var x = this.x;\n  var y = this.y;\n  var width = this.style.width;\n  var height = this.style.height;\n  var shape = this.style.shape;\n  \n  canvas.setStroke(2);\n  canvas.setColor(this.style.fillColor);\n  \n  if(shape == 'rect') {\n    canvas.fillRect(x, y, width, height);\n    canvas.setColor(this.style.borderColor);\n    canvas.drawRect(x, y, width, height);\n  }\n  else { // Default to ellipse\n    canvas.fillEllipse(x, y, width, height);\n    canvas.setColor(this.style.borderColor);\n    canvas.drawEllipse(x, y, width, height);\n  }\n  \n  if(this.style.showLabel) {\n    canvas.drawStringRect(this.label, x, y + height/2 - 7, width, 'center');\n  }\n};\n\n/**\n * Fits the graph into the bounding box\n *\n * @param width\n * @param height\n * @param preserveAspect\n */\nfoograph.Graph.prototype.normalize = function(width, height, preserveAspect) {\n  for (var i8 in this.vertices) {\n    var v = this.vertices[i8];\n    v.oldX = v.x;\n    v.oldY = v.y;\n  }\n  var mnx = width  * 0.1;\n  var mxx = width  * 0.9;\n  var mny = height * 0.1;\n  var mxy = height * 0.9;\n  if (preserveAspect == null)\n    preserveAspect = true;\n  \n  var minx = Number.MAX_VALUE;\n  var miny = Number.MAX_VALUE;\n  var maxx = Number.MIN_VALUE;\n  var maxy = Number.MIN_VALUE;\n  \n  for (var i7 in this.vertices) {\n    var v = this.vertices[i7];\n    if (v.x < minx) minx = v.x;\n    if (v.y < miny) miny = v.y;\n    if (v.x > maxx) maxx = v.x;\n    if (v.y > maxy) maxy = v.y;\n  }\n  var kx = (mxx-mnx) / (maxx - minx);\n  var ky = (mxy-mny) / (maxy - miny);\n\n  if (preserveAspect) {\n    kx = Math.min(kx, ky);\n    ky = Math.min(kx, ky);\n  }\n  \n  var newMaxx = Number.MIN_VALUE;\n  var newMaxy = Number.MIN_VALUE;\n  for (var i8 in this.vertices) {\n    var v = this.vertices[i8];\n    v.x = (v.x - minx) * kx;\n    v.y = (v.y - miny) * ky;\n    if (v.x > newMaxx) newMaxx = v.x;\n    if (v.y > newMaxy) newMaxy = v.y;\n  }\n\n  var dx = ( width  - newMaxx ) / 2.0;\n  var dy = ( height - newMaxy ) / 2.0;\n  for (var i8 in this.vertices) {\n    var v = this.vertices[i8];\n    v.x += dx;\n    v.y += dy;\n  }\n};\n\n/**\n * Draw edge method. Draws edge \"v\" --> \"this\".\n *\n * @param canvas jsGraphics instance\n * @param v Start vertex\n */\nfoograph.Edge.prototype.draw = function(canvas, v) {\n  var x1 = Math.round(v.x + v.style.width/2);\n  var y1 = Math.round(v.y + v.style.height/2);\n  var x2 = Math.round(this.endVertex.x + this.endVertex.style.width/2);\n  var y2 = Math.round(this.endVertex.y + this.endVertex.style.height/2);\n\n  // Control point (needed only for curved edges)\n  var x3 = this.controlX;\n  var y3 = this.controlY;\n  \n  // Arrow tip and angle\n  var X_TIP, Y_TIP, ANGLE;\n\n  /* Quadric Bezier curve definition. */\n  function Bx(t) { return (1-t)*(1-t)*x1 + 2*(1-t)*t*x3 + t*t*x2; }\n  function By(t) { return (1-t)*(1-t)*y1 + 2*(1-t)*t*y3 + t*t*y2; }\n\n  canvas.setStroke(this.style.width);\n  canvas.setColor(this.style.color);\n  \n  if(this.curved) { // Draw a quadric Bezier curve\n    this.curved = false; // Reset\n    var t = 0, dt = 1/10;\n    var xs = x1, ys = y1, xn, yn;\n    \n    while (t < 1-dt) {\n      t += dt;\n      xn = Bx(t);\n      yn = By(t);\n      canvas.drawLine(xs, ys, xn, yn);\n      xs = xn;\n      ys = yn;\n    }\n    \n    // Set the arrow tip coordinates\n    X_TIP = xs;\n    Y_TIP = ys;\n    \n    // Move the tip to (0,0) and calculate the angle \n    // of the arrow head\n    ANGLE = angularCoord(Bx(1-2*dt) - X_TIP, By(1-2*dt) - Y_TIP);\n    \n  } else {\n    canvas.drawLine(x1, y1, x2, y2);\n    \n    // Set the arrow tip coordinates\n    X_TIP = x2;\n    Y_TIP = y2;\n    \n    // Move the tip to (0,0) and calculate the angle \n    // of the arrow head\n    ANGLE = angularCoord(x1 - X_TIP, y1 - Y_TIP);\n  }\n  \n  if(this.style.showArrow) { \n    drawArrow(ANGLE, X_TIP, Y_TIP);\n  }\n  \n  // TODO\n  if(this.style.showLabel) {\n  }\n  \n  /** \n   * Draws an edge arrow. \n   * @param phi The angle (in radians) of the arrow in polar coordinates. \n   * @param x X coordinate of the arrow tip.\n   * @param y Y coordinate of the arrow tip.\n   */\n  function drawArrow(phi, x, y) \n  {\n    // Arrow bounding box (in px)\n    var H = 50;\n    var W = 10;\n    \n    // Set cartesian coordinates of the arrow\n    var p11 = 0, p12 = 0;\n    var p21 = H, p22 = W/2;\n    var p31 = H, p32 = -W/2;\n    \n    // Convert to polar coordinates\n    var r2 = radialCoord(p21, p22);\n    var r3 = radialCoord(p31, p32);\n    var phi2 = angularCoord(p21, p22);\n    var phi3 = angularCoord(p31, p32);\n    \n    // Rotate the arrow\n    phi2 += phi;\n    phi3 += phi;\n    \n    // Update cartesian coordinates\n    p21 = r2 * Math.cos(phi2);\n    p22 = r2 * Math.sin(phi2);    \n    p31 = r3 * Math.cos(phi3);\n    p32 = r3 * Math.sin(phi3);\n    \n    // Translate\n    p11 += x; \n    p12 += y;\n    p21 += x;\n    p22 += y;\n    p31 += x;\n    p32 += y;\n    \n    // Draw\n    canvas.fillPolygon(new Array(p11, p21, p31), new Array(p12, p22, p32));\n  }\n  \n  /** \n   * Get the angular coordinate.\n   * @param x X coordinate\n   * @param y Y coordinate\n   */\n   function angularCoord(x, y)\n   {\n     var phi = 0.0;\n     \n     if (x > 0 && y >= 0) {\n      phi = Math.atan(y/x);\n     }\n     if (x > 0 && y < 0) {\n       phi = Math.atan(y/x) + 2*Math.PI;\n     }\n     if (x < 0) {\n       phi = Math.atan(y/x) + Math.PI;\n     }\n     if (x = 0 && y > 0) {\n       phi = Math.PI/2;\n     }\n     if (x = 0 && y < 0) {\n       phi = 3*Math.PI/2;\n     }\n     \n     return phi;\n   }\n   \n   /** \n    * Get the radian coordiante.\n    * @param x1 \n    * @param y1 \n    * @param x2\n    * @param y2 \n    */\n   function radialCoord(x, y) \n   {\n     return Math.sqrt(x*x + y*y);\n   }\n};\n\n/**\n * Calculates the coordinates based on pure chance.\n *\n * @param graph A valid graph instance\n */\nfoograph.RandomVertexLayout.prototype.layout = function(graph) {\n  for (var i = 0; i<graph.vertices.length; i++) {\n    var v = graph.vertices[i];\n    v.x = Math.round(Math.random() * this.width);\n    v.y = Math.round(Math.random() * this.height);\n  }\n};\n\n/**\n * Identifies connected components of a graph and creates \"central\"\n * vertices for each component. If there is more than one component,\n * all central vertices of individual components are connected to\n * each other to prevent component drift.\n *\n * @param graph A valid graph instance\n * @return A list of component center vertices or null when there\n *         is only one component.\n */\nfoograph.ForceDirectedVertexLayout.prototype.__identifyComponents = function(graph) {\n  var componentCenters = new Array();\n  var components = new Array();\n  \n  // Depth first search\n  function dfs(vertex)\n  {\n    var stack = new Array();\n    var component = new Array();\n    var centerVertex = new foograph.Vertex(\"component_center\", -1, -1);\n    centerVertex.hidden = true;\n    componentCenters.push(centerVertex);\n    components.push(component);\n    \n    function visitVertex(v)\n    {\n      component.push(v);\n      v.__dfsVisited = true;\n      \n      for (var i in v.edges) {\n        var e = v.edges[i];\n        if (!e.hidden)\n          stack.push(e.endVertex);\n      }\n      \n      for (var i in v.reverseEdges) {\n        if (!v.reverseEdges[i].hidden)\n          stack.push(v.reverseEdges[i].endVertex);\n      }\n    }\n    \n    visitVertex(vertex);\n    while (stack.length > 0) {\n      var u = stack.pop();\n      \n      if (!u.__dfsVisited && !u.hidden) {\n        visitVertex(u);\n      }\n    }\n  }\n  \n  // Clear DFS visited flag\n  for (var i in graph.vertices) {\n    var v = graph.vertices[i];\n    v.__dfsVisited = false;\n  }\n  \n  // Iterate through all vertices starting DFS from each vertex\n  // that hasn't been visited yet.\n  for (var k in graph.vertices) {\n    var v = graph.vertices[k];\n    if (!v.__dfsVisited && !v.hidden)\n      dfs(v);\n  }\n  \n  // Interconnect all center vertices\n  if (componentCenters.length > 1) {\n    for (var i in componentCenters) {\n      graph.insertVertex(componentCenters[i]);\n    }\n    for (var i in components) {\n      for (var j in components[i]) {\n        // Connect visited vertex to \"central\" component vertex\n        edge = graph.insertEdge(\"\", 1, components[i][j], componentCenters[i]);\n        edge.hidden = true;\n      }\n    }\n    \n    for (var i in componentCenters) {\n      for (var j in componentCenters) {\n        if (i != j) {\n          e = graph.insertEdge(\"\", 3, componentCenters[i], componentCenters[j]);\n          e.hidden = true;\n        }\n      }\n    }\n    \n    return componentCenters;\n  }\n  \n  return null;\n};\n\n/**\n * Calculates the coordinates based on force-directed placement\n * algorithm.\n *\n * @param graph A valid graph instance\n */\nfoograph.ForceDirectedVertexLayout.prototype.layout = function(graph) {\n  this.graph = graph;\n  var area = this.width * this.height;\n  var k = Math.sqrt(area / graph.vertexCount);\n\n  var t = this.width / 10; // Temperature.\n  var dt = t / (this.iterations + 1);\n\n  var eps = this.eps; // Minimum distance between the vertices\n  \n  // Attractive and repulsive forces\n  function Fa(z) { return foograph.A*z*z/k; }\n  function Fr(z) { return foograph.R*k*k/z; }\n  function Fw(z) { return 1/z*z; }  // Force emited by the walls\n  \n  // Initiate component identification and virtual vertex creation\n  // to prevent disconnected graph components from drifting too far apart\n  centers = this.__identifyComponents(graph);\n  \n  // Assign initial random positions\n  if(this.randomize) {\n    randomLayout = new foograph.RandomVertexLayout(this.width, this.height);\n    randomLayout.layout(graph);\n  }\n  \n  // Run through some iterations\n  for (var q = 0; q < this.iterations; q++) {\n    \n    /* Calculate repulsive forces. */\n    for (var i1 in graph.vertices) {\n      var v = graph.vertices[i1];\n      \n      v.dx = 0;\n      v.dy = 0;\n      // Do not move fixed vertices\n      if(!v.fixed) {\n        for (var i2 in graph.vertices) {\n          var u = graph.vertices[i2];\n          if (v != u && !u.fixed) {\n            /* Difference vector between the two vertices. */\n            var difx = v.x - u.x;\n            var dify = v.y - u.y;\n            \n            /* Length of the dif vector. */\n            var d = Math.max(eps, Math.sqrt(difx*difx + dify*dify));\n            var force = Fr(d);\n            v.dx = v.dx + (difx/d) * force;\n            v.dy = v.dy + (dify/d) * force;\n          }\n        }\n        /* Treat the walls as static objects emiting force Fw. */\n        // Calculate the sum of \"wall\" forces in (v.x, v.y)\n        /*\n        var x = Math.max(eps, v.x);\n        var y = Math.max(eps, v.y);\n        var wx = Math.max(eps, this.width - v.x);\n        var wy = Math.max(eps, this.height - v.y);   // Gotta love all those NaN's :)\n        var Rx = Fw(x) - Fw(wx);\n        var Ry = Fw(y) - Fw(wy);\n        \n        v.dx = v.dx + Rx;\n        v.dy = v.dy + Ry;\n        */\n      }\n    }\n    \n    /* Calculate attractive forces. */\n    for (var i3 in graph.vertices) {\n      var v = graph.vertices[i3];\n      \n      // Do not move fixed vertices\n      if(!v.fixed) {\n        for (var i4 in v.edges) {\n          var e = v.edges[i4];\n          var u = e.endVertex;\n          var difx = v.x - u.x;\n          var dify = v.y - u.y;\n          var d = Math.max(eps, Math.sqrt(difx*difx + dify*dify));\n          var force = Fa(d);\n          \n          /* Length of the dif vector. */\n          var d = Math.max(eps, Math.sqrt(difx*difx + dify*dify));\n          v.dx = v.dx - (difx/d) * force;\n          v.dy = v.dy - (dify/d) * force;\n          \n          u.dx = u.dx + (difx/d) * force;\n          u.dy = u.dy + (dify/d) * force;\n        }\n      }\n    }\n    \n    /* Limit the maximum displacement to the temperature t\n        and prevent from being displaced outside frame.     */\n    for (var i5 in graph.vertices) {\n      var v = graph.vertices[i5];\n      if(!v.fixed) {\n        /* Length of the displacement vector. */\n        var d = Math.max(eps, Math.sqrt(v.dx*v.dx + v.dy*v.dy));\n    \n        /* Limit to the temperature t. */\n        v.x = v.x + (v.dx/d) * Math.min(d, t);\n        v.y = v.y + (v.dy/d) * Math.min(d, t);\n        \n        /* Stay inside the frame. */\n        /*\n        borderWidth = this.width / 50;\n        if (v.x < borderWidth) {\n          v.x = borderWidth; \n        } else if (v.x > this.width - borderWidth) {\n          v.x = this.width - borderWidth;\n        }\n        \n        if (v.y < borderWidth) {\n          v.y = borderWidth; \n        } else if (v.y > this.height - borderWidth) {\n          v.y = this.height - borderWidth;\n        }\n        */\n        v.x = Math.round(v.x);\n        v.y = Math.round(v.y);\n      }\n    }\n    \n    /* Cool. */\n    t -= dt;\n    \n    if (q % 10 == 0) {\n      this.callback();\n    }\n  }\n  \n  // Remove virtual center vertices\n  if (centers) {\n    for (var i in centers) {\n      graph.removeVertex(centers[i]);\n    }\n  }\n  \n  graph.normalize(this.width, this.height, true);\n};\n\n","/*!\nCopyright (C) 2010-2013 Raymond Hill: https://github.com/gorhill/Javascript-Voronoi\nMIT License: See https://github.com/gorhill/Javascript-Voronoi/LICENSE.md\n*/\n/*\nAuthor: Raymond Hill (rhill@raymondhill.net)\nContributor: Jesse Morgan (morgajel@gmail.com)\nFile: rhill-voronoi-core.js\nVersion: 0.98\nDate: January 21, 2013\nDescription: This is my personal Javascript implementation of\nSteven Fortune's algorithm to compute Voronoi diagrams.\n\nLicense: See https://github.com/gorhill/Javascript-Voronoi/LICENSE.md\nCredits: See https://github.com/gorhill/Javascript-Voronoi/CREDITS.md\nHistory: See https://github.com/gorhill/Javascript-Voronoi/CHANGELOG.md\n\n## Usage:\n\n  var sites = [{x:300,y:300}, {x:100,y:100}, {x:200,y:500}, {x:250,y:450}, {x:600,y:150}];\n  // xl, xr means x left, x right\n  // yt, yb means y top, y bottom\n  var bbox = {xl:0, xr:800, yt:0, yb:600};\n  var voronoi = new Voronoi();\n  // pass an object which exhibits xl, xr, yt, yb properties. The bounding\n  // box will be used to connect unbound edges, and to close open cells\n  result = voronoi.compute(sites, bbox);\n  // render, further analyze, etc.\n\nReturn value:\n  An object with the following properties:\n\n  result.vertices = an array of unordered, unique Voronoi.Vertex objects making\n    up the Voronoi diagram.\n  result.edges = an array of unordered, unique Voronoi.Edge objects making up\n    the Voronoi diagram.\n  result.cells = an array of Voronoi.Cell object making up the Voronoi diagram.\n    A Cell object might have an empty array of halfedges, meaning no Voronoi\n    cell could be computed for a particular cell.\n  result.execTime = the time it took to compute the Voronoi diagram, in\n    milliseconds.\n\nVoronoi.Vertex object:\n  x: The x position of the vertex.\n  y: The y position of the vertex.\n\nVoronoi.Edge object:\n  lSite: the Voronoi site object at the left of this Voronoi.Edge object.\n  rSite: the Voronoi site object at the right of this Voronoi.Edge object (can\n    be null).\n  va: an object with an 'x' and a 'y' property defining the start point\n    (relative to the Voronoi site on the left) of this Voronoi.Edge object.\n  vb: an object with an 'x' and a 'y' property defining the end point\n    (relative to Voronoi site on the left) of this Voronoi.Edge object.\n\n  For edges which are used to close open cells (using the supplied bounding\n  box), the rSite property will be null.\n\nVoronoi.Cell object:\n  site: the Voronoi site object associated with the Voronoi cell.\n  halfedges: an array of Voronoi.Halfedge objects, ordered counterclockwise,\n    defining the polygon for this Voronoi cell.\n\nVoronoi.Halfedge object:\n  site: the Voronoi site object owning this Voronoi.Halfedge object.\n  edge: a reference to the unique Voronoi.Edge object underlying this\n    Voronoi.Halfedge object.\n  getStartpoint(): a method returning an object with an 'x' and a 'y' property\n    for the start point of this halfedge. Keep in mind halfedges are always\n    countercockwise.\n  getEndpoint(): a method returning an object with an 'x' and a 'y' property\n    for the end point of this halfedge. Keep in mind halfedges are always\n    countercockwise.\n\nTODO: Identify opportunities for performance improvement.\n\nTODO: Let the user close the Voronoi cells, do not do it automatically. Not only let\n      him close the cells, but also allow him to close more than once using a different\n      bounding box for the same Voronoi diagram.\n*/\n\n/*global Math */\n\n// ---------------------------------------------------------------------------\n\nfunction Voronoi() {\n    this.vertices = null;\n    this.edges = null;\n    this.cells = null;\n    this.toRecycle = null;\n    this.beachsectionJunkyard = [];\n    this.circleEventJunkyard = [];\n    this.vertexJunkyard = [];\n    this.edgeJunkyard = [];\n    this.cellJunkyard = [];\n    }\n\n// ---------------------------------------------------------------------------\n\nVoronoi.prototype.reset = function() {\n    if (!this.beachline) {\n        this.beachline = new this.RBTree();\n        }\n    // Move leftover beachsections to the beachsection junkyard.\n    if (this.beachline.root) {\n        var beachsection = this.beachline.getFirst(this.beachline.root);\n        while (beachsection) {\n            this.beachsectionJunkyard.push(beachsection); // mark for reuse\n            beachsection = beachsection.rbNext;\n            }\n        }\n    this.beachline.root = null;\n    if (!this.circleEvents) {\n        this.circleEvents = new this.RBTree();\n        }\n    this.circleEvents.root = this.firstCircleEvent = null;\n    this.vertices = [];\n    this.edges = [];\n    this.cells = [];\n    };\n\nVoronoi.prototype.sqrt = function(n){ return Math.sqrt(n); };\nVoronoi.prototype.abs = function(n){ return Math.abs(n); };\nVoronoi.prototype.ε = Voronoi.ε = 1e-9;\nVoronoi.prototype.invε = Voronoi.invε = 1.0 / Voronoi.ε;\nVoronoi.prototype.equalWithEpsilon = function(a,b){return this.abs(a-b)<1e-9;};\nVoronoi.prototype.greaterThanWithEpsilon = function(a,b){return a-b>1e-9;};\nVoronoi.prototype.greaterThanOrEqualWithEpsilon = function(a,b){return b-a<1e-9;};\nVoronoi.prototype.lessThanWithEpsilon = function(a,b){return b-a>1e-9;};\nVoronoi.prototype.lessThanOrEqualWithEpsilon = function(a,b){return a-b<1e-9;};\n\n// ---------------------------------------------------------------------------\n// Red-Black tree code (based on C version of \"rbtree\" by Franck Bui-Huu\n// https://github.com/fbuihuu/libtree/blob/master/rb.c\n\nVoronoi.prototype.RBTree = function() {\n    this.root = null;\n    };\n\nVoronoi.prototype.RBTree.prototype.rbInsertSuccessor = function(node, successor) {\n    var parent;\n    if (node) {\n        // >>> rhill 2011-05-27: Performance: cache previous/next nodes\n        successor.rbPrevious = node;\n        successor.rbNext = node.rbNext;\n        if (node.rbNext) {\n            node.rbNext.rbPrevious = successor;\n            }\n        node.rbNext = successor;\n        // <<<\n        if (node.rbRight) {\n            // in-place expansion of node.rbRight.getFirst();\n            node = node.rbRight;\n            while (node.rbLeft) {node = node.rbLeft;}\n            node.rbLeft = successor;\n            }\n        else {\n            node.rbRight = successor;\n            }\n        parent = node;\n        }\n    // rhill 2011-06-07: if node is null, successor must be inserted\n    // to the left-most part of the tree\n    else if (this.root) {\n        node = this.getFirst(this.root);\n        // >>> Performance: cache previous/next nodes\n        successor.rbPrevious = null;\n        successor.rbNext = node;\n        node.rbPrevious = successor;\n        // <<<\n        node.rbLeft = successor;\n        parent = node;\n        }\n    else {\n        // >>> Performance: cache previous/next nodes\n        successor.rbPrevious = successor.rbNext = null;\n        // <<<\n        this.root = successor;\n        parent = null;\n        }\n    successor.rbLeft = successor.rbRight = null;\n    successor.rbParent = parent;\n    successor.rbRed = true;\n    // Fixup the modified tree by recoloring nodes and performing\n    // rotations (2 at most) hence the red-black tree properties are\n    // preserved.\n    var grandpa, uncle;\n    node = successor;\n    while (parent && parent.rbRed) {\n        grandpa = parent.rbParent;\n        if (parent === grandpa.rbLeft) {\n            uncle = grandpa.rbRight;\n            if (uncle && uncle.rbRed) {\n                parent.rbRed = uncle.rbRed = false;\n                grandpa.rbRed = true;\n                node = grandpa;\n                }\n            else {\n                if (node === parent.rbRight) {\n                    this.rbRotateLeft(parent);\n                    node = parent;\n                    parent = node.rbParent;\n                    }\n                parent.rbRed = false;\n                grandpa.rbRed = true;\n                this.rbRotateRight(grandpa);\n                }\n            }\n        else {\n            uncle = grandpa.rbLeft;\n            if (uncle && uncle.rbRed) {\n                parent.rbRed = uncle.rbRed = false;\n                grandpa.rbRed = true;\n                node = grandpa;\n                }\n            else {\n                if (node === parent.rbLeft) {\n                    this.rbRotateRight(parent);\n                    node = parent;\n                    parent = node.rbParent;\n                    }\n                parent.rbRed = false;\n                grandpa.rbRed = true;\n                this.rbRotateLeft(grandpa);\n                }\n            }\n        parent = node.rbParent;\n        }\n    this.root.rbRed = false;\n    };\n\nVoronoi.prototype.RBTree.prototype.rbRemoveNode = function(node) {\n    // >>> rhill 2011-05-27: Performance: cache previous/next nodes\n    if (node.rbNext) {\n        node.rbNext.rbPrevious = node.rbPrevious;\n        }\n    if (node.rbPrevious) {\n        node.rbPrevious.rbNext = node.rbNext;\n        }\n    node.rbNext = node.rbPrevious = null;\n    // <<<\n    var parent = node.rbParent,\n        left = node.rbLeft,\n        right = node.rbRight,\n        next;\n    if (!left) {\n        next = right;\n        }\n    else if (!right) {\n        next = left;\n        }\n    else {\n        next = this.getFirst(right);\n        }\n    if (parent) {\n        if (parent.rbLeft === node) {\n            parent.rbLeft = next;\n            }\n        else {\n            parent.rbRight = next;\n            }\n        }\n    else {\n        this.root = next;\n        }\n    // enforce red-black rules\n    var isRed;\n    if (left && right) {\n        isRed = next.rbRed;\n        next.rbRed = node.rbRed;\n        next.rbLeft = left;\n        left.rbParent = next;\n        if (next !== right) {\n            parent = next.rbParent;\n            next.rbParent = node.rbParent;\n            node = next.rbRight;\n            parent.rbLeft = node;\n            next.rbRight = right;\n            right.rbParent = next;\n            }\n        else {\n            next.rbParent = parent;\n            parent = next;\n            node = next.rbRight;\n            }\n        }\n    else {\n        isRed = node.rbRed;\n        node = next;\n        }\n    // 'node' is now the sole successor's child and 'parent' its\n    // new parent (since the successor can have been moved)\n    if (node) {\n        node.rbParent = parent;\n        }\n    // the 'easy' cases\n    if (isRed) {return;}\n    if (node && node.rbRed) {\n        node.rbRed = false;\n        return;\n        }\n    // the other cases\n    var sibling;\n    do {\n        if (node === this.root) {\n            break;\n            }\n        if (node === parent.rbLeft) {\n            sibling = parent.rbRight;\n            if (sibling.rbRed) {\n                sibling.rbRed = false;\n                parent.rbRed = true;\n                this.rbRotateLeft(parent);\n                sibling = parent.rbRight;\n                }\n            if ((sibling.rbLeft && sibling.rbLeft.rbRed) || (sibling.rbRight && sibling.rbRight.rbRed)) {\n                if (!sibling.rbRight || !sibling.rbRight.rbRed) {\n                    sibling.rbLeft.rbRed = false;\n                    sibling.rbRed = true;\n                    this.rbRotateRight(sibling);\n                    sibling = parent.rbRight;\n                    }\n                sibling.rbRed = parent.rbRed;\n                parent.rbRed = sibling.rbRight.rbRed = false;\n                this.rbRotateLeft(parent);\n                node = this.root;\n                break;\n                }\n            }\n        else {\n            sibling = parent.rbLeft;\n            if (sibling.rbRed) {\n                sibling.rbRed = false;\n                parent.rbRed = true;\n                this.rbRotateRight(parent);\n                sibling = parent.rbLeft;\n                }\n            if ((sibling.rbLeft && sibling.rbLeft.rbRed) || (sibling.rbRight && sibling.rbRight.rbRed)) {\n                if (!sibling.rbLeft || !sibling.rbLeft.rbRed) {\n                    sibling.rbRight.rbRed = false;\n                    sibling.rbRed = true;\n                    this.rbRotateLeft(sibling);\n                    sibling = parent.rbLeft;\n                    }\n                sibling.rbRed = parent.rbRed;\n                parent.rbRed = sibling.rbLeft.rbRed = false;\n                this.rbRotateRight(parent);\n                node = this.root;\n                break;\n                }\n            }\n        sibling.rbRed = true;\n        node = parent;\n        parent = parent.rbParent;\n    } while (!node.rbRed);\n    if (node) {node.rbRed = false;}\n    };\n\nVoronoi.prototype.RBTree.prototype.rbRotateLeft = function(node) {\n    var p = node,\n        q = node.rbRight, // can't be null\n        parent = p.rbParent;\n    if (parent) {\n        if (parent.rbLeft === p) {\n            parent.rbLeft = q;\n            }\n        else {\n            parent.rbRight = q;\n            }\n        }\n    else {\n        this.root = q;\n        }\n    q.rbParent = parent;\n    p.rbParent = q;\n    p.rbRight = q.rbLeft;\n    if (p.rbRight) {\n        p.rbRight.rbParent = p;\n        }\n    q.rbLeft = p;\n    };\n\nVoronoi.prototype.RBTree.prototype.rbRotateRight = function(node) {\n    var p = node,\n        q = node.rbLeft, // can't be null\n        parent = p.rbParent;\n    if (parent) {\n        if (parent.rbLeft === p) {\n            parent.rbLeft = q;\n            }\n        else {\n            parent.rbRight = q;\n            }\n        }\n    else {\n        this.root = q;\n        }\n    q.rbParent = parent;\n    p.rbParent = q;\n    p.rbLeft = q.rbRight;\n    if (p.rbLeft) {\n        p.rbLeft.rbParent = p;\n        }\n    q.rbRight = p;\n    };\n\nVoronoi.prototype.RBTree.prototype.getFirst = function(node) {\n    while (node.rbLeft) {\n        node = node.rbLeft;\n        }\n    return node;\n    };\n\nVoronoi.prototype.RBTree.prototype.getLast = function(node) {\n    while (node.rbRight) {\n        node = node.rbRight;\n        }\n    return node;\n    };\n\n// ---------------------------------------------------------------------------\n// Diagram methods\n\nVoronoi.prototype.Diagram = function(site) {\n    this.site = site;\n    };\n\n// ---------------------------------------------------------------------------\n// Cell methods\n\nVoronoi.prototype.Cell = function(site) {\n    this.site = site;\n    this.halfedges = [];\n    this.closeMe = false;\n    };\n\nVoronoi.prototype.Cell.prototype.init = function(site) {\n    this.site = site;\n    this.halfedges = [];\n    this.closeMe = false;\n    return this;\n    };\n\nVoronoi.prototype.createCell = function(site) {\n    var cell = this.cellJunkyard.pop();\n    if ( cell ) {\n        return cell.init(site);\n        }\n    return new this.Cell(site);\n    };\n\nVoronoi.prototype.Cell.prototype.prepareHalfedges = function() {\n    var halfedges = this.halfedges,\n        iHalfedge = halfedges.length,\n        edge;\n    // get rid of unused halfedges\n    // rhill 2011-05-27: Keep it simple, no point here in trying\n    // to be fancy: dangling edges are a typically a minority.\n    while (iHalfedge--) {\n        edge = halfedges[iHalfedge].edge;\n        if (!edge.vb || !edge.va) {\n            halfedges.splice(iHalfedge,1);\n            }\n        }\n\n    // rhill 2011-05-26: I tried to use a binary search at insertion\n    // time to keep the array sorted on-the-fly (in Cell.addHalfedge()).\n    // There was no real benefits in doing so, performance on\n    // Firefox 3.6 was improved marginally, while performance on\n    // Opera 11 was penalized marginally.\n    halfedges.sort(function(a,b){return b.angle-a.angle;});\n    return halfedges.length;\n    };\n\n// Return a list of the neighbor Ids\nVoronoi.prototype.Cell.prototype.getNeighborIds = function() {\n    var neighbors = [],\n        iHalfedge = this.halfedges.length,\n        edge;\n    while (iHalfedge--){\n        edge = this.halfedges[iHalfedge].edge;\n        if (edge.lSite !== null && edge.lSite.voronoiId != this.site.voronoiId) {\n            neighbors.push(edge.lSite.voronoiId);\n            }\n        else if (edge.rSite !== null && edge.rSite.voronoiId != this.site.voronoiId){\n            neighbors.push(edge.rSite.voronoiId);\n            }\n        }\n    return neighbors;\n    };\n\n// Compute bounding box\n//\nVoronoi.prototype.Cell.prototype.getBbox = function() {\n    var halfedges = this.halfedges,\n        iHalfedge = halfedges.length,\n        xmin = Infinity,\n        ymin = Infinity,\n        xmax = -Infinity,\n        ymax = -Infinity,\n        v, vx, vy;\n    while (iHalfedge--) {\n        v = halfedges[iHalfedge].getStartpoint();\n        vx = v.x;\n        vy = v.y;\n        if (vx < xmin) {xmin = vx;}\n        if (vy < ymin) {ymin = vy;}\n        if (vx > xmax) {xmax = vx;}\n        if (vy > ymax) {ymax = vy;}\n        // we dont need to take into account end point,\n        // since each end point matches a start point\n        }\n    return {\n        x: xmin,\n        y: ymin,\n        width: xmax-xmin,\n        height: ymax-ymin\n        };\n    };\n\n// Return whether a point is inside, on, or outside the cell:\n//   -1: point is outside the perimeter of the cell\n//    0: point is on the perimeter of the cell\n//    1: point is inside the perimeter of the cell\n//\nVoronoi.prototype.Cell.prototype.pointIntersection = function(x, y) {\n    // Check if point in polygon. Since all polygons of a Voronoi\n    // diagram are convex, then:\n    // http://paulbourke.net/geometry/polygonmesh/\n    // Solution 3 (2D):\n    //   \"If the polygon is convex then one can consider the polygon\n    //   \"as a 'path' from the first vertex. A point is on the interior\n    //   \"of this polygons if it is always on the same side of all the\n    //   \"line segments making up the path. ...\n    //   \"(y - y0) (x1 - x0) - (x - x0) (y1 - y0)\n    //   \"if it is less than 0 then P is to the right of the line segment,\n    //   \"if greater than 0 it is to the left, if equal to 0 then it lies\n    //   \"on the line segment\"\n    var halfedges = this.halfedges,\n        iHalfedge = halfedges.length,\n        halfedge,\n        p0, p1, r;\n    while (iHalfedge--) {\n        halfedge = halfedges[iHalfedge];\n        p0 = halfedge.getStartpoint();\n        p1 = halfedge.getEndpoint();\n        r = (y-p0.y)*(p1.x-p0.x)-(x-p0.x)*(p1.y-p0.y);\n        if (!r) {\n            return 0;\n            }\n        if (r > 0) {\n            return -1;\n            }\n        }\n    return 1;\n    };\n\n// ---------------------------------------------------------------------------\n// Edge methods\n//\n\nVoronoi.prototype.Vertex = function(x, y) {\n    this.x = x;\n    this.y = y;\n    };\n\nVoronoi.prototype.Edge = function(lSite, rSite) {\n    this.lSite = lSite;\n    this.rSite = rSite;\n    this.va = this.vb = null;\n    };\n\nVoronoi.prototype.Halfedge = function(edge, lSite, rSite) {\n    this.site = lSite;\n    this.edge = edge;\n    // 'angle' is a value to be used for properly sorting the\n    // halfsegments counterclockwise. By convention, we will\n    // use the angle of the line defined by the 'site to the left'\n    // to the 'site to the right'.\n    // However, border edges have no 'site to the right': thus we\n    // use the angle of line perpendicular to the halfsegment (the\n    // edge should have both end points defined in such case.)\n    if (rSite) {\n        this.angle = Math.atan2(rSite.y-lSite.y, rSite.x-lSite.x);\n        }\n    else {\n        var va = edge.va,\n            vb = edge.vb;\n        // rhill 2011-05-31: used to call getStartpoint()/getEndpoint(),\n        // but for performance purpose, these are expanded in place here.\n        this.angle = edge.lSite === lSite ?\n            Math.atan2(vb.x-va.x, va.y-vb.y) :\n            Math.atan2(va.x-vb.x, vb.y-va.y);\n        }\n    };\n\nVoronoi.prototype.createHalfedge = function(edge, lSite, rSite) {\n    return new this.Halfedge(edge, lSite, rSite);\n    };\n\nVoronoi.prototype.Halfedge.prototype.getStartpoint = function() {\n    return this.edge.lSite === this.site ? this.edge.va : this.edge.vb;\n    };\n\nVoronoi.prototype.Halfedge.prototype.getEndpoint = function() {\n    return this.edge.lSite === this.site ? this.edge.vb : this.edge.va;\n    };\n\n\n\n// this create and add a vertex to the internal collection\n\nVoronoi.prototype.createVertex = function(x, y) {\n    var v = this.vertexJunkyard.pop();\n    if ( !v ) {\n        v = new this.Vertex(x, y);\n        }\n    else {\n        v.x = x;\n        v.y = y;\n        }\n    this.vertices.push(v);\n    return v;\n    };\n\n// this create and add an edge to internal collection, and also create\n// two halfedges which are added to each site's counterclockwise array\n// of halfedges.\n\nVoronoi.prototype.createEdge = function(lSite, rSite, va, vb) {\n    var edge = this.edgeJunkyard.pop();\n    if ( !edge ) {\n        edge = new this.Edge(lSite, rSite);\n        }\n    else {\n        edge.lSite = lSite;\n        edge.rSite = rSite;\n        edge.va = edge.vb = null;\n        }\n\n    this.edges.push(edge);\n    if (va) {\n        this.setEdgeStartpoint(edge, lSite, rSite, va);\n        }\n    if (vb) {\n        this.setEdgeEndpoint(edge, lSite, rSite, vb);\n        }\n    this.cells[lSite.voronoiId].halfedges.push(this.createHalfedge(edge, lSite, rSite));\n    this.cells[rSite.voronoiId].halfedges.push(this.createHalfedge(edge, rSite, lSite));\n    return edge;\n    };\n\nVoronoi.prototype.createBorderEdge = function(lSite, va, vb) {\n    var edge = this.edgeJunkyard.pop();\n    if ( !edge ) {\n        edge = new this.Edge(lSite, null);\n        }\n    else {\n        edge.lSite = lSite;\n        edge.rSite = null;\n        }\n    edge.va = va;\n    edge.vb = vb;\n    this.edges.push(edge);\n    return edge;\n    };\n\nVoronoi.prototype.setEdgeStartpoint = function(edge, lSite, rSite, vertex) {\n    if (!edge.va && !edge.vb) {\n        edge.va = vertex;\n        edge.lSite = lSite;\n        edge.rSite = rSite;\n        }\n    else if (edge.lSite === rSite) {\n        edge.vb = vertex;\n        }\n    else {\n        edge.va = vertex;\n        }\n    };\n\nVoronoi.prototype.setEdgeEndpoint = function(edge, lSite, rSite, vertex) {\n    this.setEdgeStartpoint(edge, rSite, lSite, vertex);\n    };\n\n// ---------------------------------------------------------------------------\n// Beachline methods\n\n// rhill 2011-06-07: For some reasons, performance suffers significantly\n// when instanciating a literal object instead of an empty ctor\nVoronoi.prototype.Beachsection = function() {\n    };\n\n// rhill 2011-06-02: A lot of Beachsection instanciations\n// occur during the computation of the Voronoi diagram,\n// somewhere between the number of sites and twice the\n// number of sites, while the number of Beachsections on the\n// beachline at any given time is comparatively low. For this\n// reason, we reuse already created Beachsections, in order\n// to avoid new memory allocation. This resulted in a measurable\n// performance gain.\n\nVoronoi.prototype.createBeachsection = function(site) {\n    var beachsection = this.beachsectionJunkyard.pop();\n    if (!beachsection) {\n        beachsection = new this.Beachsection();\n        }\n    beachsection.site = site;\n    return beachsection;\n    };\n\n// calculate the left break point of a particular beach section,\n// given a particular sweep line\nVoronoi.prototype.leftBreakPoint = function(arc, directrix) {\n    // http://en.wikipedia.org/wiki/Parabola\n    // http://en.wikipedia.org/wiki/Quadratic_equation\n    // h1 = x1,\n    // k1 = (y1+directrix)/2,\n    // h2 = x2,\n    // k2 = (y2+directrix)/2,\n    // p1 = k1-directrix,\n    // a1 = 1/(4*p1),\n    // b1 = -h1/(2*p1),\n    // c1 = h1*h1/(4*p1)+k1,\n    // p2 = k2-directrix,\n    // a2 = 1/(4*p2),\n    // b2 = -h2/(2*p2),\n    // c2 = h2*h2/(4*p2)+k2,\n    // x = (-(b2-b1) + Math.sqrt((b2-b1)*(b2-b1) - 4*(a2-a1)*(c2-c1))) / (2*(a2-a1))\n    // When x1 become the x-origin:\n    // h1 = 0,\n    // k1 = (y1+directrix)/2,\n    // h2 = x2-x1,\n    // k2 = (y2+directrix)/2,\n    // p1 = k1-directrix,\n    // a1 = 1/(4*p1),\n    // b1 = 0,\n    // c1 = k1,\n    // p2 = k2-directrix,\n    // a2 = 1/(4*p2),\n    // b2 = -h2/(2*p2),\n    // c2 = h2*h2/(4*p2)+k2,\n    // x = (-b2 + Math.sqrt(b2*b2 - 4*(a2-a1)*(c2-k1))) / (2*(a2-a1)) + x1\n\n    // change code below at your own risk: care has been taken to\n    // reduce errors due to computers' finite arithmetic precision.\n    // Maybe can still be improved, will see if any more of this\n    // kind of errors pop up again.\n    var site = arc.site,\n        rfocx = site.x,\n        rfocy = site.y,\n        pby2 = rfocy-directrix;\n    // parabola in degenerate case where focus is on directrix\n    if (!pby2) {\n        return rfocx;\n        }\n    var lArc = arc.rbPrevious;\n    if (!lArc) {\n        return -Infinity;\n        }\n    site = lArc.site;\n    var lfocx = site.x,\n        lfocy = site.y,\n        plby2 = lfocy-directrix;\n    // parabola in degenerate case where focus is on directrix\n    if (!plby2) {\n        return lfocx;\n        }\n    var hl = lfocx-rfocx,\n        aby2 = 1/pby2-1/plby2,\n        b = hl/plby2;\n    if (aby2) {\n        return (-b+this.sqrt(b*b-2*aby2*(hl*hl/(-2*plby2)-lfocy+plby2/2+rfocy-pby2/2)))/aby2+rfocx;\n        }\n    // both parabolas have same distance to directrix, thus break point is midway\n    return (rfocx+lfocx)/2;\n    };\n\n// calculate the right break point of a particular beach section,\n// given a particular directrix\nVoronoi.prototype.rightBreakPoint = function(arc, directrix) {\n    var rArc = arc.rbNext;\n    if (rArc) {\n        return this.leftBreakPoint(rArc, directrix);\n        }\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n    };\n\nVoronoi.prototype.detachBeachsection = function(beachsection) {\n    this.detachCircleEvent(beachsection); // detach potentially attached circle event\n    this.beachline.rbRemoveNode(beachsection); // remove from RB-tree\n    this.beachsectionJunkyard.push(beachsection); // mark for reuse\n    };\n\nVoronoi.prototype.removeBeachsection = function(beachsection) {\n    var circle = beachsection.circleEvent,\n        x = circle.x,\n        y = circle.ycenter,\n        vertex = this.createVertex(x, y),\n        previous = beachsection.rbPrevious,\n        next = beachsection.rbNext,\n        disappearingTransitions = [beachsection],\n        abs_fn = Math.abs;\n\n    // remove collapsed beachsection from beachline\n    this.detachBeachsection(beachsection);\n\n    // there could be more than one empty arc at the deletion point, this\n    // happens when more than two edges are linked by the same vertex,\n    // so we will collect all those edges by looking up both sides of\n    // the deletion point.\n    // by the way, there is *always* a predecessor/successor to any collapsed\n    // beach section, it's just impossible to have a collapsing first/last\n    // beach sections on the beachline, since they obviously are unconstrained\n    // on their left/right side.\n\n    // look left\n    var lArc = previous;\n    while (lArc.circleEvent && abs_fn(x-lArc.circleEvent.x)<1e-9 && abs_fn(y-lArc.circleEvent.ycenter)<1e-9) {\n        previous = lArc.rbPrevious;\n        disappearingTransitions.unshift(lArc);\n        this.detachBeachsection(lArc); // mark for reuse\n        lArc = previous;\n        }\n    // even though it is not disappearing, I will also add the beach section\n    // immediately to the left of the left-most collapsed beach section, for\n    // convenience, since we need to refer to it later as this beach section\n    // is the 'left' site of an edge for which a start point is set.\n    disappearingTransitions.unshift(lArc);\n    this.detachCircleEvent(lArc);\n\n    // look right\n    var rArc = next;\n    while (rArc.circleEvent && abs_fn(x-rArc.circleEvent.x)<1e-9 && abs_fn(y-rArc.circleEvent.ycenter)<1e-9) {\n        next = rArc.rbNext;\n        disappearingTransitions.push(rArc);\n        this.detachBeachsection(rArc); // mark for reuse\n        rArc = next;\n        }\n    // we also have to add the beach section immediately to the right of the\n    // right-most collapsed beach section, since there is also a disappearing\n    // transition representing an edge's start point on its left.\n    disappearingTransitions.push(rArc);\n    this.detachCircleEvent(rArc);\n\n    // walk through all the disappearing transitions between beach sections and\n    // set the start point of their (implied) edge.\n    var nArcs = disappearingTransitions.length,\n        iArc;\n    for (iArc=1; iArc<nArcs; iArc++) {\n        rArc = disappearingTransitions[iArc];\n        lArc = disappearingTransitions[iArc-1];\n        this.setEdgeStartpoint(rArc.edge, lArc.site, rArc.site, vertex);\n        }\n\n    // create a new edge as we have now a new transition between\n    // two beach sections which were previously not adjacent.\n    // since this edge appears as a new vertex is defined, the vertex\n    // actually define an end point of the edge (relative to the site\n    // on the left)\n    lArc = disappearingTransitions[0];\n    rArc = disappearingTransitions[nArcs-1];\n    rArc.edge = this.createEdge(lArc.site, rArc.site, undefined, vertex);\n\n    // create circle events if any for beach sections left in the beachline\n    // adjacent to collapsed sections\n    this.attachCircleEvent(lArc);\n    this.attachCircleEvent(rArc);\n    };\n\nVoronoi.prototype.addBeachsection = function(site) {\n    var x = site.x,\n        directrix = site.y;\n\n    // find the left and right beach sections which will surround the newly\n    // created beach section.\n    // rhill 2011-06-01: This loop is one of the most often executed,\n    // hence we expand in-place the comparison-against-epsilon calls.\n    var lArc, rArc,\n        dxl, dxr,\n        node = this.beachline.root;\n\n    while (node) {\n        dxl = this.leftBreakPoint(node,directrix)-x;\n        // x lessThanWithEpsilon xl => falls somewhere before the left edge of the beachsection\n        if (dxl > 1e-9) {\n            // this case should never happen\n            // if (!node.rbLeft) {\n            //    rArc = node.rbLeft;\n            //    break;\n            //    }\n            node = node.rbLeft;\n            }\n        else {\n            dxr = x-this.rightBreakPoint(node,directrix);\n            // x greaterThanWithEpsilon xr => falls somewhere after the right edge of the beachsection\n            if (dxr > 1e-9) {\n                if (!node.rbRight) {\n                    lArc = node;\n                    break;\n                    }\n                node = node.rbRight;\n                }\n            else {\n                // x equalWithEpsilon xl => falls exactly on the left edge of the beachsection\n                if (dxl > -1e-9) {\n                    lArc = node.rbPrevious;\n                    rArc = node;\n                    }\n                // x equalWithEpsilon xr => falls exactly on the right edge of the beachsection\n                else if (dxr > -1e-9) {\n                    lArc = node;\n                    rArc = node.rbNext;\n                    }\n                // falls exactly somewhere in the middle of the beachsection\n                else {\n                    lArc = rArc = node;\n                    }\n                break;\n                }\n            }\n        }\n    // at this point, keep in mind that lArc and/or rArc could be\n    // undefined or null.\n\n    // create a new beach section object for the site and add it to RB-tree\n    var newArc = this.createBeachsection(site);\n    this.beachline.rbInsertSuccessor(lArc, newArc);\n\n    // cases:\n    //\n\n    // [null,null]\n    // least likely case: new beach section is the first beach section on the\n    // beachline.\n    // This case means:\n    //   no new transition appears\n    //   no collapsing beach section\n    //   new beachsection become root of the RB-tree\n    if (!lArc && !rArc) {\n        return;\n        }\n\n    // [lArc,rArc] where lArc == rArc\n    // most likely case: new beach section split an existing beach\n    // section.\n    // This case means:\n    //   one new transition appears\n    //   the left and right beach section might be collapsing as a result\n    //   two new nodes added to the RB-tree\n    if (lArc === rArc) {\n        // invalidate circle event of split beach section\n        this.detachCircleEvent(lArc);\n\n        // split the beach section into two separate beach sections\n        rArc = this.createBeachsection(lArc.site);\n        this.beachline.rbInsertSuccessor(newArc, rArc);\n\n        // since we have a new transition between two beach sections,\n        // a new edge is born\n        newArc.edge = rArc.edge = this.createEdge(lArc.site, newArc.site);\n\n        // check whether the left and right beach sections are collapsing\n        // and if so create circle events, to be notified when the point of\n        // collapse is reached.\n        this.attachCircleEvent(lArc);\n        this.attachCircleEvent(rArc);\n        return;\n        }\n\n    // [lArc,null]\n    // even less likely case: new beach section is the *last* beach section\n    // on the beachline -- this can happen *only* if *all* the previous beach\n    // sections currently on the beachline share the same y value as\n    // the new beach section.\n    // This case means:\n    //   one new transition appears\n    //   no collapsing beach section as a result\n    //   new beach section become right-most node of the RB-tree\n    if (lArc && !rArc) {\n        newArc.edge = this.createEdge(lArc.site,newArc.site);\n        return;\n        }\n\n    // [null,rArc]\n    // impossible case: because sites are strictly processed from top to bottom,\n    // and left to right, which guarantees that there will always be a beach section\n    // on the left -- except of course when there are no beach section at all on\n    // the beach line, which case was handled above.\n    // rhill 2011-06-02: No point testing in non-debug version\n    //if (!lArc && rArc) {\n    //    throw \"Voronoi.addBeachsection(): What is this I don't even\";\n    //    }\n\n    // [lArc,rArc] where lArc != rArc\n    // somewhat less likely case: new beach section falls *exactly* in between two\n    // existing beach sections\n    // This case means:\n    //   one transition disappears\n    //   two new transitions appear\n    //   the left and right beach section might be collapsing as a result\n    //   only one new node added to the RB-tree\n    if (lArc !== rArc) {\n        // invalidate circle events of left and right sites\n        this.detachCircleEvent(lArc);\n        this.detachCircleEvent(rArc);\n\n        // an existing transition disappears, meaning a vertex is defined at\n        // the disappearance point.\n        // since the disappearance is caused by the new beachsection, the\n        // vertex is at the center of the circumscribed circle of the left,\n        // new and right beachsections.\n        // http://mathforum.org/library/drmath/view/55002.html\n        // Except that I bring the origin at A to simplify\n        // calculation\n        var lSite = lArc.site,\n            ax = lSite.x,\n            ay = lSite.y,\n            bx=site.x-ax,\n            by=site.y-ay,\n            rSite = rArc.site,\n            cx=rSite.x-ax,\n            cy=rSite.y-ay,\n            d=2*(bx*cy-by*cx),\n            hb=bx*bx+by*by,\n            hc=cx*cx+cy*cy,\n            vertex = this.createVertex((cy*hb-by*hc)/d+ax, (bx*hc-cx*hb)/d+ay);\n\n        // one transition disappear\n        this.setEdgeStartpoint(rArc.edge, lSite, rSite, vertex);\n\n        // two new transitions appear at the new vertex location\n        newArc.edge = this.createEdge(lSite, site, undefined, vertex);\n        rArc.edge = this.createEdge(site, rSite, undefined, vertex);\n\n        // check whether the left and right beach sections are collapsing\n        // and if so create circle events, to handle the point of collapse.\n        this.attachCircleEvent(lArc);\n        this.attachCircleEvent(rArc);\n        return;\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Circle event methods\n\n// rhill 2011-06-07: For some reasons, performance suffers significantly\n// when instanciating a literal object instead of an empty ctor\nVoronoi.prototype.CircleEvent = function() {\n    // rhill 2013-10-12: it helps to state exactly what we are at ctor time.\n    this.arc = null;\n    this.rbLeft = null;\n    this.rbNext = null;\n    this.rbParent = null;\n    this.rbPrevious = null;\n    this.rbRed = false;\n    this.rbRight = null;\n    this.site = null;\n    this.x = this.y = this.ycenter = 0;\n    };\n\nVoronoi.prototype.attachCircleEvent = function(arc) {\n    var lArc = arc.rbPrevious,\n        rArc = arc.rbNext;\n    if (!lArc || !rArc) {return;} // does that ever happen?\n    var lSite = lArc.site,\n        cSite = arc.site,\n        rSite = rArc.site;\n\n    // If site of left beachsection is same as site of\n    // right beachsection, there can't be convergence\n    if (lSite===rSite) {return;}\n\n    // Find the circumscribed circle for the three sites associated\n    // with the beachsection triplet.\n    // rhill 2011-05-26: It is more efficient to calculate in-place\n    // rather than getting the resulting circumscribed circle from an\n    // object returned by calling Voronoi.circumcircle()\n    // http://mathforum.org/library/drmath/view/55002.html\n    // Except that I bring the origin at cSite to simplify calculations.\n    // The bottom-most part of the circumcircle is our Fortune 'circle\n    // event', and its center is a vertex potentially part of the final\n    // Voronoi diagram.\n    var bx = cSite.x,\n        by = cSite.y,\n        ax = lSite.x-bx,\n        ay = lSite.y-by,\n        cx = rSite.x-bx,\n        cy = rSite.y-by;\n\n    // If points l->c->r are clockwise, then center beach section does not\n    // collapse, hence it can't end up as a vertex (we reuse 'd' here, which\n    // sign is reverse of the orientation, hence we reverse the test.\n    // http://en.wikipedia.org/wiki/Curve_orientation#Orientation_of_a_simple_polygon\n    // rhill 2011-05-21: Nasty finite precision error which caused circumcircle() to\n    // return infinites: 1e-12 seems to fix the problem.\n    var d = 2*(ax*cy-ay*cx);\n    if (d >= -2e-12){return;}\n\n    var ha = ax*ax+ay*ay,\n        hc = cx*cx+cy*cy,\n        x = (cy*ha-ay*hc)/d,\n        y = (ax*hc-cx*ha)/d,\n        ycenter = y+by;\n\n    // Important: ybottom should always be under or at sweep, so no need\n    // to waste CPU cycles by checking\n\n    // recycle circle event object if possible\n    var circleEvent = this.circleEventJunkyard.pop();\n    if (!circleEvent) {\n        circleEvent = new this.CircleEvent();\n        }\n    circleEvent.arc = arc;\n    circleEvent.site = cSite;\n    circleEvent.x = x+bx;\n    circleEvent.y = ycenter+this.sqrt(x*x+y*y); // y bottom\n    circleEvent.ycenter = ycenter;\n    arc.circleEvent = circleEvent;\n\n    // find insertion point in RB-tree: circle events are ordered from\n    // smallest to largest\n    var predecessor = null,\n        node = this.circleEvents.root;\n    while (node) {\n        if (circleEvent.y < node.y || (circleEvent.y === node.y && circleEvent.x <= node.x)) {\n            if (node.rbLeft) {\n                node = node.rbLeft;\n                }\n            else {\n                predecessor = node.rbPrevious;\n                break;\n                }\n            }\n        else {\n            if (node.rbRight) {\n                node = node.rbRight;\n                }\n            else {\n                predecessor = node;\n                break;\n                }\n            }\n        }\n    this.circleEvents.rbInsertSuccessor(predecessor, circleEvent);\n    if (!predecessor) {\n        this.firstCircleEvent = circleEvent;\n        }\n    };\n\nVoronoi.prototype.detachCircleEvent = function(arc) {\n    var circleEvent = arc.circleEvent;\n    if (circleEvent) {\n        if (!circleEvent.rbPrevious) {\n            this.firstCircleEvent = circleEvent.rbNext;\n            }\n        this.circleEvents.rbRemoveNode(circleEvent); // remove from RB-tree\n        this.circleEventJunkyard.push(circleEvent);\n        arc.circleEvent = null;\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Diagram completion methods\n\n// connect dangling edges (not if a cursory test tells us\n// it is not going to be visible.\n// return value:\n//   false: the dangling endpoint couldn't be connected\n//   true: the dangling endpoint could be connected\nVoronoi.prototype.connectEdge = function(edge, bbox) {\n    // skip if end point already connected\n    var vb = edge.vb;\n    if (!!vb) {return true;}\n\n    // make local copy for performance purpose\n    var va = edge.va,\n        xl = bbox.xl,\n        xr = bbox.xr,\n        yt = bbox.yt,\n        yb = bbox.yb,\n        lSite = edge.lSite,\n        rSite = edge.rSite,\n        lx = lSite.x,\n        ly = lSite.y,\n        rx = rSite.x,\n        ry = rSite.y,\n        fx = (lx+rx)/2,\n        fy = (ly+ry)/2,\n        fm, fb;\n\n    // if we reach here, this means cells which use this edge will need\n    // to be closed, whether because the edge was removed, or because it\n    // was connected to the bounding box.\n    this.cells[lSite.voronoiId].closeMe = true;\n    this.cells[rSite.voronoiId].closeMe = true;\n\n    // get the line equation of the bisector if line is not vertical\n    if (ry !== ly) {\n        fm = (lx-rx)/(ry-ly);\n        fb = fy-fm*fx;\n        }\n\n    // remember, direction of line (relative to left site):\n    // upward: left.x < right.x\n    // downward: left.x > right.x\n    // horizontal: left.x == right.x\n    // upward: left.x < right.x\n    // rightward: left.y < right.y\n    // leftward: left.y > right.y\n    // vertical: left.y == right.y\n\n    // depending on the direction, find the best side of the\n    // bounding box to use to determine a reasonable start point\n\n    // rhill 2013-12-02:\n    // While at it, since we have the values which define the line,\n    // clip the end of va if it is outside the bbox.\n    // https://github.com/gorhill/Javascript-Voronoi/issues/15\n    // TODO: Do all the clipping here rather than rely on Liang-Barsky\n    // which does not do well sometimes due to loss of arithmetic\n    // precision. The code here doesn't degrade if one of the vertex is\n    // at a huge distance.\n\n    // special case: vertical line\n    if (fm === undefined) {\n        // doesn't intersect with viewport\n        if (fx < xl || fx >= xr) {return false;}\n        // downward\n        if (lx > rx) {\n            if (!va || va.y < yt) {\n                va = this.createVertex(fx, yt);\n                }\n            else if (va.y >= yb) {\n                return false;\n                }\n            vb = this.createVertex(fx, yb);\n            }\n        // upward\n        else {\n            if (!va || va.y > yb) {\n                va = this.createVertex(fx, yb);\n                }\n            else if (va.y < yt) {\n                return false;\n                }\n            vb = this.createVertex(fx, yt);\n            }\n        }\n    // closer to vertical than horizontal, connect start point to the\n    // top or bottom side of the bounding box\n    else if (fm < -1 || fm > 1) {\n        // downward\n        if (lx > rx) {\n            if (!va || va.y < yt) {\n                va = this.createVertex((yt-fb)/fm, yt);\n                }\n            else if (va.y >= yb) {\n                return false;\n                }\n            vb = this.createVertex((yb-fb)/fm, yb);\n            }\n        // upward\n        else {\n            if (!va || va.y > yb) {\n                va = this.createVertex((yb-fb)/fm, yb);\n                }\n            else if (va.y < yt) {\n                return false;\n                }\n            vb = this.createVertex((yt-fb)/fm, yt);\n            }\n        }\n    // closer to horizontal than vertical, connect start point to the\n    // left or right side of the bounding box\n    else {\n        // rightward\n        if (ly < ry) {\n            if (!va || va.x < xl) {\n                va = this.createVertex(xl, fm*xl+fb);\n                }\n            else if (va.x >= xr) {\n                return false;\n                }\n            vb = this.createVertex(xr, fm*xr+fb);\n            }\n        // leftward\n        else {\n            if (!va || va.x > xr) {\n                va = this.createVertex(xr, fm*xr+fb);\n                }\n            else if (va.x < xl) {\n                return false;\n                }\n            vb = this.createVertex(xl, fm*xl+fb);\n            }\n        }\n    edge.va = va;\n    edge.vb = vb;\n\n    return true;\n    };\n\n// line-clipping code taken from:\n//   Liang-Barsky function by Daniel White\n//   http://www.skytopia.com/project/articles/compsci/clipping.html\n// Thanks!\n// A bit modified to minimize code paths\nVoronoi.prototype.clipEdge = function(edge, bbox) {\n    var ax = edge.va.x,\n        ay = edge.va.y,\n        bx = edge.vb.x,\n        by = edge.vb.y,\n        t0 = 0,\n        t1 = 1,\n        dx = bx-ax,\n        dy = by-ay;\n    // left\n    var q = ax-bbox.xl;\n    if (dx===0 && q<0) {return false;}\n    var r = -q/dx;\n    if (dx<0) {\n        if (r<t0) {return false;}\n        if (r<t1) {t1=r;}\n        }\n    else if (dx>0) {\n        if (r>t1) {return false;}\n        if (r>t0) {t0=r;}\n        }\n    // right\n    q = bbox.xr-ax;\n    if (dx===0 && q<0) {return false;}\n    r = q/dx;\n    if (dx<0) {\n        if (r>t1) {return false;}\n        if (r>t0) {t0=r;}\n        }\n    else if (dx>0) {\n        if (r<t0) {return false;}\n        if (r<t1) {t1=r;}\n        }\n    // top\n    q = ay-bbox.yt;\n    if (dy===0 && q<0) {return false;}\n    r = -q/dy;\n    if (dy<0) {\n        if (r<t0) {return false;}\n        if (r<t1) {t1=r;}\n        }\n    else if (dy>0) {\n        if (r>t1) {return false;}\n        if (r>t0) {t0=r;}\n        }\n    // bottom        \n    q = bbox.yb-ay;\n    if (dy===0 && q<0) {return false;}\n    r = q/dy;\n    if (dy<0) {\n        if (r>t1) {return false;}\n        if (r>t0) {t0=r;}\n        }\n    else if (dy>0) {\n        if (r<t0) {return false;}\n        if (r<t1) {t1=r;}\n        }\n\n    // if we reach this point, Voronoi edge is within bbox\n\n    // if t0 > 0, va needs to change\n    // rhill 2011-06-03: we need to create a new vertex rather\n    // than modifying the existing one, since the existing\n    // one is likely shared with at least another edge\n    if (t0 > 0) {\n        edge.va = this.createVertex(ax+t0*dx, ay+t0*dy);\n        }\n\n    // if t1 < 1, vb needs to change\n    // rhill 2011-06-03: we need to create a new vertex rather\n    // than modifying the existing one, since the existing\n    // one is likely shared with at least another edge\n    if (t1 < 1) {\n        edge.vb = this.createVertex(ax+t1*dx, ay+t1*dy);\n        }\n\n    // va and/or vb were clipped, thus we will need to close\n    // cells which use this edge.\n    if ( t0 > 0 || t1 < 1 ) {\n        this.cells[edge.lSite.voronoiId].closeMe = true;\n        this.cells[edge.rSite.voronoiId].closeMe = true;\n    }\n\n    return true;\n    };\n\n// Connect/cut edges at bounding box\nVoronoi.prototype.clipEdges = function(bbox) {\n    // connect all dangling edges to bounding box\n    // or get rid of them if it can't be done\n    var edges = this.edges,\n        iEdge = edges.length,\n        edge,\n        abs_fn = Math.abs;\n\n    // iterate backward so we can splice safely\n    while (iEdge--) {\n        edge = edges[iEdge];\n        // edge is removed if:\n        //   it is wholly outside the bounding box\n        //   it is looking more like a point than a line\n        if (!this.connectEdge(edge, bbox) ||\n            !this.clipEdge(edge, bbox) ||\n            (abs_fn(edge.va.x-edge.vb.x)<1e-9 && abs_fn(edge.va.y-edge.vb.y)<1e-9)) {\n            edge.va = edge.vb = null;\n            edges.splice(iEdge,1);\n            }\n        }\n    };\n\n// Close the cells.\n// The cells are bound by the supplied bounding box.\n// Each cell refers to its associated site, and a list\n// of halfedges ordered counterclockwise.\nVoronoi.prototype.closeCells = function(bbox) {\n    var xl = bbox.xl,\n        xr = bbox.xr,\n        yt = bbox.yt,\n        yb = bbox.yb,\n        cells = this.cells,\n        iCell = cells.length,\n        cell,\n        iLeft,\n        halfedges, nHalfedges,\n        edge,\n        va, vb, vz,\n        lastBorderSegment,\n        abs_fn = Math.abs;\n\n    while (iCell--) {\n        cell = cells[iCell];\n        // prune, order halfedges counterclockwise, then add missing ones\n        // required to close cells\n        if (!cell.prepareHalfedges()) {\n            continue;\n            }\n        if (!cell.closeMe) {\n            continue;\n            }\n        // find first 'unclosed' point.\n        // an 'unclosed' point will be the end point of a halfedge which\n        // does not match the start point of the following halfedge\n        halfedges = cell.halfedges;\n        nHalfedges = halfedges.length;\n        // special case: only one site, in which case, the viewport is the cell\n        // ...\n\n        // all other cases\n        iLeft = 0;\n        while (iLeft < nHalfedges) {\n            va = halfedges[iLeft].getEndpoint();\n            vz = halfedges[(iLeft+1) % nHalfedges].getStartpoint();\n            // if end point is not equal to start point, we need to add the missing\n            // halfedge(s) up to vz\n            if (abs_fn(va.x-vz.x)>=1e-9 || abs_fn(va.y-vz.y)>=1e-9) {\n\n                // rhill 2013-12-02:\n                // \"Holes\" in the halfedges are not necessarily always adjacent.\n                // https://github.com/gorhill/Javascript-Voronoi/issues/16\n\n                // find entry point:\n                switch (true) {\n\n                    // walk downward along left side\n                    case this.equalWithEpsilon(va.x,xl) && this.lessThanWithEpsilon(va.y,yb):\n                        lastBorderSegment = this.equalWithEpsilon(vz.x,xl);\n                        vb = this.createVertex(xl, lastBorderSegment ? vz.y : yb);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                    // walk rightward along bottom side\n                    case this.equalWithEpsilon(va.y,yb) && this.lessThanWithEpsilon(va.x,xr):\n                        lastBorderSegment = this.equalWithEpsilon(vz.y,yb);\n                        vb = this.createVertex(lastBorderSegment ? vz.x : xr, yb);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                    // walk upward along right side\n                    case this.equalWithEpsilon(va.x,xr) && this.greaterThanWithEpsilon(va.y,yt):\n                        lastBorderSegment = this.equalWithEpsilon(vz.x,xr);\n                        vb = this.createVertex(xr, lastBorderSegment ? vz.y : yt);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                    // walk leftward along top side\n                    case this.equalWithEpsilon(va.y,yt) && this.greaterThanWithEpsilon(va.x,xl):\n                        lastBorderSegment = this.equalWithEpsilon(vz.y,yt);\n                        vb = this.createVertex(lastBorderSegment ? vz.x : xl, yt);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                        // walk downward along left side\n                        lastBorderSegment = this.equalWithEpsilon(vz.x,xl);\n                        vb = this.createVertex(xl, lastBorderSegment ? vz.y : yb);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                        // walk rightward along bottom side\n                        lastBorderSegment = this.equalWithEpsilon(vz.y,yb);\n                        vb = this.createVertex(lastBorderSegment ? vz.x : xr, yb);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                        // walk upward along right side\n                        lastBorderSegment = this.equalWithEpsilon(vz.x,xr);\n                        vb = this.createVertex(xr, lastBorderSegment ? vz.y : yt);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        // fall through\n\n                    default:\n                        throw \"Voronoi.closeCells() > this makes no sense!\";\n                    }\n                }\n            iLeft++;\n            }\n        cell.closeMe = false;\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Debugging helper\n/*\nVoronoi.prototype.dumpBeachline = function(y) {\n    console.log('Voronoi.dumpBeachline(%f) > Beachsections, from left to right:', y);\n    if ( !this.beachline ) {\n        console.log('  None');\n        }\n    else {\n        var bs = this.beachline.getFirst(this.beachline.root);\n        while ( bs ) {\n            console.log('  site %d: xl: %f, xr: %f', bs.site.voronoiId, this.leftBreakPoint(bs, y), this.rightBreakPoint(bs, y));\n            bs = bs.rbNext;\n            }\n        }\n    };\n*/\n\n// ---------------------------------------------------------------------------\n// Helper: Quantize sites\n\n// rhill 2013-10-12:\n// This is to solve https://github.com/gorhill/Javascript-Voronoi/issues/15\n// Since not all users will end up using the kind of coord values which would\n// cause the issue to arise, I chose to let the user decide whether or not\n// he should sanitize his coord values through this helper. This way, for\n// those users who uses coord values which are known to be fine, no overhead is\n// added.\n\nVoronoi.prototype.quantizeSites = function(sites) {\n    var ε = this.ε,\n        n = sites.length,\n        site;\n    while ( n-- ) {\n        site = sites[n];\n        site.x = Math.floor(site.x / ε) * ε;\n        site.y = Math.floor(site.y / ε) * ε;\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Helper: Recycle diagram: all vertex, edge and cell objects are\n// \"surrendered\" to the Voronoi object for reuse.\n// TODO: rhill-voronoi-core v2: more performance to be gained\n// when I change the semantic of what is returned.\n\nVoronoi.prototype.recycle = function(diagram) {\n    if ( diagram ) {\n        if ( diagram instanceof this.Diagram ) {\n            this.toRecycle = diagram;\n            }\n        else {\n            throw 'Voronoi.recycleDiagram() > Need a Diagram object.';\n            }\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Top-level Fortune loop\n\n// rhill 2011-05-19:\n//   Voronoi sites are kept client-side now, to allow\n//   user to freely modify content. At compute time,\n//   *references* to sites are copied locally.\n\nVoronoi.prototype.compute = function(sites, bbox) {\n    // to measure execution time\n    var startTime = new Date();\n\n    // init internal state\n    this.reset();\n\n    // any diagram data available for recycling?\n    // I do that here so that this is included in execution time\n    if ( this.toRecycle ) {\n        this.vertexJunkyard = this.vertexJunkyard.concat(this.toRecycle.vertices);\n        this.edgeJunkyard = this.edgeJunkyard.concat(this.toRecycle.edges);\n        this.cellJunkyard = this.cellJunkyard.concat(this.toRecycle.cells);\n        this.toRecycle = null;\n        }\n\n    // Initialize site event queue\n    var siteEvents = sites.slice(0);\n    siteEvents.sort(function(a,b){\n        var r = b.y - a.y;\n        if (r) {return r;}\n        return b.x - a.x;\n        });\n\n    // process queue\n    var site = siteEvents.pop(),\n        siteid = 0,\n        xsitex, // to avoid duplicate sites\n        xsitey,\n        cells = this.cells,\n        circle;\n\n    // main loop\n    for (;;) {\n        // we need to figure whether we handle a site or circle event\n        // for this we find out if there is a site event and it is\n        // 'earlier' than the circle event\n        circle = this.firstCircleEvent;\n\n        // add beach section\n        if (site && (!circle || site.y < circle.y || (site.y === circle.y && site.x < circle.x))) {\n            // only if site is not a duplicate\n            if (site.x !== xsitex || site.y !== xsitey) {\n                // first create cell for new site\n                cells[siteid] = this.createCell(site);\n                site.voronoiId = siteid++;\n                // then create a beachsection for that site\n                this.addBeachsection(site);\n                // remember last site coords to detect duplicate\n                xsitey = site.y;\n                xsitex = site.x;\n                }\n            site = siteEvents.pop();\n            }\n\n        // remove beach section\n        else if (circle) {\n            this.removeBeachsection(circle.arc);\n            }\n\n        // all done, quit\n        else {\n            break;\n            }\n        }\n\n    // wrapping-up:\n    //   connect dangling edges to bounding box\n    //   cut edges as per bounding box\n    //   discard edges completely outside bounding box\n    //   discard edges which are point-like\n    this.clipEdges(bbox);\n\n    //   add missing edges in order to close opened cells\n    this.closeCells(bbox);\n\n    // to measure execution time\n    var stopTime = new Date();\n\n    // prepare return values\n    var diagram = new this.Diagram();\n    diagram.cells = this.cells;\n    diagram.edges = this.edges;\n    diagram.vertices = this.vertices;\n    diagram.execTime = stopTime.getTime()-startTime.getTime();\n\n    // clean up\n    this.reset();\n\n    return diagram;\n    };\n","/**\n * Springy v2.5.0\n *\n * Copyright (c) 2010-2013 Dennis Hotson\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n(function() {\n\t// Enable strict mode for EC5 compatible browsers\n\t\"use strict\";\n\n\t// Establish the root object, `window` in the browser, or `global` on the server.\n\tvar root = this;\n\n\t// The top-level namespace. All public Springy classes and modules will\n\t// be attached to this. Exported for both CommonJS and the browser.\n\tvar Springy;\n\tif (typeof exports !== 'undefined') {\n\t\tSpringy = exports;\n\t} else {\n\t\tSpringy = root.Springy = {};\n\t}\n\n\tvar Graph = Springy.Graph = function() {\n\t\tthis.nodeSet = {};\n\t\tthis.nodes = [];\n\t\tthis.edges = [];\n\t\tthis.adjacency = {};\n\n\t\tthis.nextNodeId = 0;\n\t\tthis.nextEdgeId = 0;\n\t\tthis.eventListeners = [];\n\t};\n\n\tvar Node = Springy.Node = function(id, data) {\n\t\tthis.id = id;\n\t\tthis.data = (data !== undefined) ? data : {};\n\n\t// Data fields used by layout algorithm in this file:\n\t// this.data.mass\n\t// Data used by default renderer in springyui.js\n\t// this.data.label\n\t};\n\n\tvar Edge = Springy.Edge = function(id, source, target, data) {\n\t\tthis.id = id;\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t\tthis.data = (data !== undefined) ? data : {};\n\n\t// Edge data field used by layout alorithm\n\t// this.data.length\n\t// this.data.type\n\t};\n\n\tGraph.prototype.addNode = function(node) {\n\t\tif (!(node.id in this.nodeSet)) {\n\t\t\tthis.nodes.push(node);\n\t\t}\n\n\t\tthis.nodeSet[node.id] = node;\n\n\t\tthis.notify();\n\t\treturn node;\n\t};\n\n\tGraph.prototype.addNodes = function() {\n\t\t// accepts variable number of arguments, where each argument\n\t\t// is a string that becomes both node identifier and label\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar name = arguments[i];\n\t\t\tvar node = new Node(name, {label:name});\n\t\t\tthis.addNode(node);\n\t\t}\n\t};\n\n\tGraph.prototype.addEdge = function(edge) {\n\t\tvar exists = false;\n\t\tthis.edges.forEach(function(e) {\n\t\t\tif (edge.id === e.id) { exists = true; }\n\t\t});\n\n\t\tif (!exists) {\n\t\t\tthis.edges.push(edge);\n\t\t}\n\n\t\tif (!(edge.source.id in this.adjacency)) {\n\t\t\tthis.adjacency[edge.source.id] = {};\n\t\t}\n\t\tif (!(edge.target.id in this.adjacency[edge.source.id])) {\n\t\t\tthis.adjacency[edge.source.id][edge.target.id] = [];\n\t\t}\n\n\t\texists = false;\n\t\tthis.adjacency[edge.source.id][edge.target.id].forEach(function(e) {\n\t\t\t\tif (edge.id === e.id) { exists = true; }\n\t\t});\n\n\t\tif (!exists) {\n\t\t\tthis.adjacency[edge.source.id][edge.target.id].push(edge);\n\t\t}\n\n\t\tthis.notify();\n\t\treturn edge;\n\t};\n\n\tGraph.prototype.addEdges = function() {\n\t\t// accepts variable number of arguments, where each argument\n\t\t// is a triple [nodeid1, nodeid2, attributes]\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar e = arguments[i];\n\t\t\tvar node1 = this.nodeSet[e[0]];\n\t\t\tif (node1 == undefined) {\n\t\t\t\tthrow new TypeError(\"invalid node name: \" + e[0]);\n\t\t\t}\n\t\t\tvar node2 = this.nodeSet[e[1]];\n\t\t\tif (node2 == undefined) {\n\t\t\t\tthrow new TypeError(\"invalid node name: \" + e[1]);\n\t\t\t}\n\t\t\tvar attr = e[2];\n\n\t\t\tthis.newEdge(node1, node2, attr);\n\t\t}\n\t};\n\n\tGraph.prototype.newNode = function(data) {\n\t\tvar node = new Node(this.nextNodeId++, data);\n\t\tthis.addNode(node);\n\t\treturn node;\n\t};\n\n\tGraph.prototype.newEdge = function(source, target, data) {\n\t\tvar edge = new Edge(this.nextEdgeId++, source, target, data);\n\t\tthis.addEdge(edge);\n\t\treturn edge;\n\t};\n\n\n\t// add nodes and edges from JSON object\n\tGraph.prototype.loadJSON = function(json) {\n\t/**\n\tSpringy's simple JSON format for graphs.\n\n\thistorically, Springy uses separate lists\n\tof nodes and edges:\n\n\t\t{\n\t\t\t\"nodes\": [\n\t\t\t\t\"center\",\n\t\t\t\t\"left\",\n\t\t\t\t\"right\",\n\t\t\t\t\"up\",\n\t\t\t\t\"satellite\"\n\t\t\t],\n\t\t\t\"edges\": [\n\t\t\t\t[\"center\", \"left\"],\n\t\t\t\t[\"center\", \"right\"],\n\t\t\t\t[\"center\", \"up\"]\n\t\t\t]\n\t\t}\n\n\t**/\n\t\t// parse if a string is passed (EC5+ browsers)\n\t\tif (typeof json == 'string' || json instanceof String) {\n\t\t\tjson = JSON.parse( json );\n\t\t}\n\n\t\tif ('nodes' in json || 'edges' in json) {\n\t\t\tthis.addNodes.apply(this, json['nodes']);\n\t\t\tthis.addEdges.apply(this, json['edges']);\n\t\t}\n\t}\n\n\n\t// find the edges from node1 to node2\n\tGraph.prototype.getEdges = function(node1, node2) {\n\t\tif (node1.id in this.adjacency\n\t\t\t&& node2.id in this.adjacency[node1.id]) {\n\t\t\treturn this.adjacency[node1.id][node2.id];\n\t\t}\n\n\t\treturn [];\n\t};\n\n\t// remove a node and it's associated edges from the graph\n\tGraph.prototype.removeNode = function(node) {\n\t\tif (node.id in this.nodeSet) {\n\t\t\tdelete this.nodeSet[node.id];\n\t\t}\n\n\t\tfor (var i = this.nodes.length - 1; i >= 0; i--) {\n\t\t\tif (this.nodes[i].id === node.id) {\n\t\t\t\tthis.nodes.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\tthis.detachNode(node);\n\t};\n\n\t// removes edges associated with a given node\n\tGraph.prototype.detachNode = function(node) {\n\t\tvar tmpEdges = this.edges.slice();\n\t\ttmpEdges.forEach(function(e) {\n\t\t\tif (e.source.id === node.id || e.target.id === node.id) {\n\t\t\t\tthis.removeEdge(e);\n\t\t\t}\n\t\t}, this);\n\n\t\tthis.notify();\n\t};\n\n\t// remove a node and it's associated edges from the graph\n\tGraph.prototype.removeEdge = function(edge) {\n\t\tfor (var i = this.edges.length - 1; i >= 0; i--) {\n\t\t\tif (this.edges[i].id === edge.id) {\n\t\t\t\tthis.edges.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\tfor (var x in this.adjacency) {\n\t\t\tfor (var y in this.adjacency[x]) {\n\t\t\t\tvar edges = this.adjacency[x][y];\n\n\t\t\t\tfor (var j=edges.length - 1; j>=0; j--) {\n\t\t\t\t\tif (this.adjacency[x][y][j].id === edge.id) {\n\t\t\t\t\t\tthis.adjacency[x][y].splice(j, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Clean up empty edge arrays\n\t\t\t\tif (this.adjacency[x][y].length == 0) {\n\t\t\t\t\tdelete this.adjacency[x][y];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clean up empty objects\n\t\t\tif (isEmpty(this.adjacency[x])) {\n\t\t\t\tdelete this.adjacency[x];\n\t\t\t}\n\t\t}\n\n\t\tthis.notify();\n\t};\n\n\t/* Merge a list of nodes and edges into the current graph. eg.\n\tvar o = {\n\t\tnodes: [\n\t\t\t{id: 123, data: {type: 'user', userid: 123, displayname: 'aaa'}},\n\t\t\t{id: 234, data: {type: 'user', userid: 234, displayname: 'bbb'}}\n\t\t],\n\t\tedges: [\n\t\t\t{from: 0, to: 1, type: 'submitted_design', directed: true, data: {weight: }}\n\t\t]\n\t}\n\t*/\n\tGraph.prototype.merge = function(data) {\n\t\tvar nodes = [];\n\t\tdata.nodes.forEach(function(n) {\n\t\t\tnodes.push(this.addNode(new Node(n.id, n.data)));\n\t\t}, this);\n\n\t\tdata.edges.forEach(function(e) {\n\t\t\tvar from = nodes[e.from];\n\t\t\tvar to = nodes[e.to];\n\n\t\t\tvar id = (e.directed)\n\t\t\t\t? (id = e.type + \"-\" + from.id + \"-\" + to.id)\n\t\t\t\t: (from.id < to.id) // normalise id for non-directed edges\n\t\t\t\t\t? e.type + \"-\" + from.id + \"-\" + to.id\n\t\t\t\t\t: e.type + \"-\" + to.id + \"-\" + from.id;\n\n\t\t\tvar edge = this.addEdge(new Edge(id, from, to, e.data));\n\t\t\tedge.data.type = e.type;\n\t\t}, this);\n\t};\n\n\tGraph.prototype.filterNodes = function(fn) {\n\t\tvar tmpNodes = this.nodes.slice();\n\t\ttmpNodes.forEach(function(n) {\n\t\t\tif (!fn(n)) {\n\t\t\t\tthis.removeNode(n);\n\t\t\t}\n\t\t}, this);\n\t};\n\n\tGraph.prototype.filterEdges = function(fn) {\n\t\tvar tmpEdges = this.edges.slice();\n\t\ttmpEdges.forEach(function(e) {\n\t\t\tif (!fn(e)) {\n\t\t\t\tthis.removeEdge(e);\n\t\t\t}\n\t\t}, this);\n\t};\n\n\n\tGraph.prototype.addGraphListener = function(obj) {\n\t\tthis.eventListeners.push(obj);\n\t};\n\n\tGraph.prototype.notify = function() {\n\t\tthis.eventListeners.forEach(function(obj){\n\t\t\tobj.graphChanged();\n\t\t});\n\t};\n\n\t// -----------\n\tvar Layout = Springy.Layout = {};\n\tLayout.ForceDirected = function(graph, stiffness, repulsion, damping, minEnergyThreshold) {\n\t\tthis.graph = graph;\n\t\tthis.stiffness = stiffness; // spring stiffness constant\n\t\tthis.repulsion = repulsion; // repulsion constant\n\t\tthis.damping = damping; // velocity damping factor\n\t\tthis.minEnergyThreshold = minEnergyThreshold || 0.01; //threshold used to determine render stop \n\n\t\tthis.nodePoints = {}; // keep track of points associated with nodes\n\t\tthis.edgeSprings = {}; // keep track of springs associated with edges\n\t};\n\n\tLayout.ForceDirected.prototype.point = function(node) {\n\t\tif (!(node.id in this.nodePoints)) {\n\t\t\tvar mass = (node.data.mass !== undefined) ? node.data.mass : 1.0;\n\t\t\tthis.nodePoints[node.id] = new Layout.ForceDirected.Point(Vector.random(), mass);\n\t\t}\n\n\t\treturn this.nodePoints[node.id];\n\t};\n\n\tLayout.ForceDirected.prototype.spring = function(edge) {\n\t\tif (!(edge.id in this.edgeSprings)) {\n\t\t\tvar length = (edge.data.length !== undefined) ? edge.data.length : 1.0;\n\n\t\t\tvar existingSpring = false;\n\n\t\t\tvar from = this.graph.getEdges(edge.source, edge.target);\n\t\t\tfrom.forEach(function(e) {\n\t\t\t\tif (existingSpring === false && e.id in this.edgeSprings) {\n\t\t\t\t\texistingSpring = this.edgeSprings[e.id];\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tif (existingSpring !== false) {\n\t\t\t\treturn new Layout.ForceDirected.Spring(existingSpring.point1, existingSpring.point2, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tvar to = this.graph.getEdges(edge.target, edge.source);\n\t\t\tfrom.forEach(function(e){\n\t\t\t\tif (existingSpring === false && e.id in this.edgeSprings) {\n\t\t\t\t\texistingSpring = this.edgeSprings[e.id];\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tif (existingSpring !== false) {\n\t\t\t\treturn new Layout.ForceDirected.Spring(existingSpring.point2, existingSpring.point1, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tthis.edgeSprings[edge.id] = new Layout.ForceDirected.Spring(\n\t\t\t\tthis.point(edge.source), this.point(edge.target), length, this.stiffness\n\t\t\t);\n\t\t}\n\n\t\treturn this.edgeSprings[edge.id];\n\t};\n\n\t// callback should accept two arguments: Node, Point\n\tLayout.ForceDirected.prototype.eachNode = function(callback) {\n\t\tvar t = this;\n\t\tthis.graph.nodes.forEach(function(n){\n\t\t\tcallback.call(t, n, t.point(n));\n\t\t});\n\t};\n\n\t// callback should accept two arguments: Edge, Spring\n\tLayout.ForceDirected.prototype.eachEdge = function(callback) {\n\t\tvar t = this;\n\t\tthis.graph.edges.forEach(function(e){\n\t\t\tcallback.call(t, e, t.spring(e));\n\t\t});\n\t};\n\n\t// callback should accept one argument: Spring\n\tLayout.ForceDirected.prototype.eachSpring = function(callback) {\n\t\tvar t = this;\n\t\tthis.graph.edges.forEach(function(e){\n\t\t\tcallback.call(t, t.spring(e));\n\t\t});\n\t};\n\n\n\t// Physics stuff\n\tLayout.ForceDirected.prototype.applyCoulombsLaw = function() {\n\t\tthis.eachNode(function(n1, point1) {\n\t\t\tthis.eachNode(function(n2, point2) {\n\t\t\t\tif (point1 !== point2)\n\t\t\t\t{\n\t\t\t\t\tvar d = point1.p.subtract(point2.p);\n\t\t\t\t\tvar distance = d.magnitude() + 0.1; // avoid massive forces at small distances (and divide by zero)\n\t\t\t\t\tvar direction = d.normalise();\n\n\t\t\t\t\t// apply force to each end point\n\t\t\t\t\tpoint1.applyForce(direction.multiply(this.repulsion).divide(distance * distance * 0.5));\n\t\t\t\t\tpoint2.applyForce(direction.multiply(this.repulsion).divide(distance * distance * -0.5));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\n\tLayout.ForceDirected.prototype.applyHookesLaw = function() {\n\t\tthis.eachSpring(function(spring){\n\t\t\tvar d = spring.point2.p.subtract(spring.point1.p); // the direction of the spring\n\t\t\tvar displacement = spring.length - d.magnitude();\n\t\t\tvar direction = d.normalise();\n\n\t\t\t// apply force to each end point\n\t\t\tspring.point1.applyForce(direction.multiply(spring.k * displacement * -0.5));\n\t\t\tspring.point2.applyForce(direction.multiply(spring.k * displacement * 0.5));\n\t\t});\n\t};\n\n\tLayout.ForceDirected.prototype.attractToCentre = function() {\n\t\tthis.eachNode(function(node, point) {\n\t\t\tvar direction = point.p.multiply(-1.0);\n\t\t\tpoint.applyForce(direction.multiply(this.repulsion / 50.0));\n\t\t});\n\t};\n\n\n\tLayout.ForceDirected.prototype.updateVelocity = function(timestep) {\n\t\tthis.eachNode(function(node, point) {\n\t\t\t// Is this, along with updatePosition below, the only places that your\n\t\t\t// integration code exist?\n\t\t\tpoint.v = point.v.add(point.a.multiply(timestep)).multiply(this.damping);\n\t\t\tpoint.a = new Vector(0,0);\n\t\t});\n\t};\n\n\tLayout.ForceDirected.prototype.updatePosition = function(timestep) {\n\t\tthis.eachNode(function(node, point) {\n\t\t\t// Same question as above; along with updateVelocity, is this all of\n\t\t\t// your integration code?\n\t\t\tpoint.p = point.p.add(point.v.multiply(timestep));\n\t\t});\n\t};\n\n\t// Calculate the total kinetic energy of the system\n\tLayout.ForceDirected.prototype.totalEnergy = function(timestep) {\n\t\tvar energy = 0.0;\n\t\tthis.eachNode(function(node, point) {\n\t\t\tvar speed = point.v.magnitude();\n\t\t\tenergy += 0.5 * point.m * speed * speed;\n\t\t});\n\n\t\treturn energy;\n\t};\n\n\tvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }; // stolen from coffeescript, thanks jashkenas! ;-)\n\n\tSpringy.requestAnimationFrame = __bind(root.requestAnimationFrame ||\n\t\troot.webkitRequestAnimationFrame ||\n\t\troot.mozRequestAnimationFrame ||\n\t\troot.oRequestAnimationFrame ||\n\t\troot.msRequestAnimationFrame ||\n\t\t(function(callback, element) {\n\t\t\troot.setTimeout(callback, 10);\n\t\t}), root);\n\n\n\t/**\n\t * Start simulation if it's not running already.\n\t * In case it's running then the call is ignored, and none of the callbacks passed is ever executed.\n\t */\n\tLayout.ForceDirected.prototype.start = function(render, onRenderStop, onRenderStart) {\n\t\tvar t = this;\n\n\t\tif (this._started) return;\n\t\tthis._started = true;\n\t\tthis._stop = false;\n\n\t\tif (onRenderStart !== undefined) { onRenderStart(); }\n\n\t\tSpringy.requestAnimationFrame(function step() {\n\t\t\tt.tick(0.03);\n\n\t\t\tif (render !== undefined) {\n\t\t\t\trender();\n\t\t\t}\n\n\t\t\t// stop simulation when energy of the system goes below a threshold\n\t\t\tif (t._stop || t.totalEnergy() < t.minEnergyThreshold) {\n\t\t\t\tt._started = false;\n\t\t\t\tif (onRenderStop !== undefined) { onRenderStop(); }\n\t\t\t} else {\n\t\t\t\tSpringy.requestAnimationFrame(step);\n\t\t\t}\n\t\t});\n\t};\n\n\tLayout.ForceDirected.prototype.stop = function() {\n\t\tthis._stop = true;\n\t}\n\n\tLayout.ForceDirected.prototype.tick = function(timestep) {\n\t\tthis.applyCoulombsLaw();\n\t\tthis.applyHookesLaw();\n\t\tthis.attractToCentre();\n\t\tthis.updateVelocity(timestep);\n\t\tthis.updatePosition(timestep);\n\t};\n\n\t// Find the nearest point to a particular position\n\tLayout.ForceDirected.prototype.nearest = function(pos) {\n\t\tvar min = {node: null, point: null, distance: null};\n\t\tvar t = this;\n\t\tthis.graph.nodes.forEach(function(n){\n\t\t\tvar point = t.point(n);\n\t\t\tvar distance = point.p.subtract(pos).magnitude();\n\n\t\t\tif (min.distance === null || distance < min.distance) {\n\t\t\t\tmin = {node: n, point: point, distance: distance};\n\t\t\t}\n\t\t});\n\n\t\treturn min;\n\t};\n\n\t// returns [bottomleft, topright]\n\tLayout.ForceDirected.prototype.getBoundingBox = function() {\n\t\tvar bottomleft = new Vector(-2,-2);\n\t\tvar topright = new Vector(2,2);\n\n\t\tthis.eachNode(function(n, point) {\n\t\t\tif (point.p.x < bottomleft.x) {\n\t\t\t\tbottomleft.x = point.p.x;\n\t\t\t}\n\t\t\tif (point.p.y < bottomleft.y) {\n\t\t\t\tbottomleft.y = point.p.y;\n\t\t\t}\n\t\t\tif (point.p.x > topright.x) {\n\t\t\t\ttopright.x = point.p.x;\n\t\t\t}\n\t\t\tif (point.p.y > topright.y) {\n\t\t\t\ttopright.y = point.p.y;\n\t\t\t}\n\t\t});\n\n\t\tvar padding = topright.subtract(bottomleft).multiply(0.07); // ~5% padding\n\n\t\treturn {bottomleft: bottomleft.subtract(padding), topright: topright.add(padding)};\n\t};\n\n\n\t// Vector\n\tvar Vector = Springy.Vector = function(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t};\n\n\tVector.random = function() {\n\t\treturn new Vector(10.0 * (Math.random() - 0.5), 10.0 * (Math.random() - 0.5));\n\t};\n\n\tVector.prototype.add = function(v2) {\n\t\treturn new Vector(this.x + v2.x, this.y + v2.y);\n\t};\n\n\tVector.prototype.subtract = function(v2) {\n\t\treturn new Vector(this.x - v2.x, this.y - v2.y);\n\t};\n\n\tVector.prototype.multiply = function(n) {\n\t\treturn new Vector(this.x * n, this.y * n);\n\t};\n\n\tVector.prototype.divide = function(n) {\n\t\treturn new Vector((this.x / n) || 0, (this.y / n) || 0); // Avoid divide by zero errors..\n\t};\n\n\tVector.prototype.magnitude = function() {\n\t\treturn Math.sqrt(this.x*this.x + this.y*this.y);\n\t};\n\n\tVector.prototype.normal = function() {\n\t\treturn new Vector(-this.y, this.x);\n\t};\n\n\tVector.prototype.normalise = function() {\n\t\treturn this.divide(this.magnitude());\n\t};\n\n\t// Point\n\tLayout.ForceDirected.Point = function(position, mass) {\n\t\tthis.p = position; // position\n\t\tthis.m = mass; // mass\n\t\tthis.v = new Vector(0, 0); // velocity\n\t\tthis.a = new Vector(0, 0); // acceleration\n\t};\n\n\tLayout.ForceDirected.Point.prototype.applyForce = function(force) {\n\t\tthis.a = this.a.add(force.divide(this.m));\n\t};\n\n\t// Spring\n\tLayout.ForceDirected.Spring = function(point1, point2, length, k) {\n\t\tthis.point1 = point1;\n\t\tthis.point2 = point2;\n\t\tthis.length = length; // spring length at rest\n\t\tthis.k = k; // spring constant (See Hooke's law) .. how stiff the spring is\n\t};\n\n\t// Layout.ForceDirected.Spring.prototype.distanceToPoint = function(point)\n\t// {\n\t// \t// hardcore vector arithmetic.. ohh yeah!\n\t// \t// .. see http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment/865080#865080\n\t// \tvar n = this.point2.p.subtract(this.point1.p).normalise().normal();\n\t// \tvar ac = point.p.subtract(this.point1.p);\n\t// \treturn Math.abs(ac.x * n.x + ac.y * n.y);\n\t// };\n\n\t/**\n\t * Renderer handles the layout rendering loop\n\t * @param onRenderStop optional callback function that gets executed whenever rendering stops.\n\t * @param onRenderStart optional callback function that gets executed whenever rendering starts.\n\t */\n\tvar Renderer = Springy.Renderer = function(layout, clear, drawEdge, drawNode, onRenderStop, onRenderStart) {\n\t\tthis.layout = layout;\n\t\tthis.clear = clear;\n\t\tthis.drawEdge = drawEdge;\n\t\tthis.drawNode = drawNode;\n\t\tthis.onRenderStop = onRenderStop;\n\t\tthis.onRenderStart = onRenderStart;\n\n\t\tthis.layout.graph.addGraphListener(this);\n\t}\n\n\tRenderer.prototype.graphChanged = function(e) {\n\t\tthis.start();\n\t};\n\n\t/**\n\t * Starts the simulation of the layout in use.\n\t *\n\t * Note that in case the algorithm is still or already running then the layout that's in use\n\t * might silently ignore the call, and your optional <code>done</code> callback is never executed.\n\t * At least the built-in ForceDirected layout behaves in this way.\n\t *\n\t * @param done An optional callback function that gets executed when the springy algorithm stops,\n\t * either because it ended or because stop() was called.\n\t */\n\tRenderer.prototype.start = function(done) {\n\t\tvar t = this;\n\t\tthis.layout.start(function render() {\n\t\t\tt.clear();\n\n\t\t\tt.layout.eachEdge(function(edge, spring) {\n\t\t\t\tt.drawEdge(edge, spring.point1.p, spring.point2.p);\n\t\t\t});\n\n\t\t\tt.layout.eachNode(function(node, point) {\n\t\t\t\tt.drawNode(node, point.p);\n\t\t\t});\n\t\t}, this.onRenderStart, this.onRenderStop);\n\t};\n\n\tRenderer.prototype.stop = function() {\n\t\tthis.layout.stop();\n\t};\n\n\t// Array.forEach implementation for IE support..\n\t//https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\n\tif ( !Array.prototype.forEach ) {\n\t\tArray.prototype.forEach = function( callback, thisArg ) {\n\t\t\tvar T, k;\n\t\t\tif ( this == null ) {\n\t\t\t\tthrow new TypeError( \" this is null or not defined\" );\n\t\t\t}\n\t\t\tvar O = Object(this);\n\t\t\tvar len = O.length >>> 0; // Hack to convert O.length to a UInt32\n\t\t\tif ( {}.toString.call(callback) != \"[object Function]\" ) {\n\t\t\t\tthrow new TypeError( callback + \" is not a function\" );\n\t\t\t}\n\t\t\tif ( thisArg ) {\n\t\t\t\tT = thisArg;\n\t\t\t}\n\t\t\tk = 0;\n\t\t\twhile( k < len ) {\n\t\t\t\tvar kValue;\n\t\t\t\tif ( k in O ) {\n\t\t\t\t\tkValue = O[ k ];\n\t\t\t\t\tcallback.call( T, kValue, k, O );\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t};\n\t}\n\n\tvar isEmpty = function(obj) {\n\t\tfor (var k in obj) {\n\t\t\tif (obj.hasOwnProperty(k)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n}).call(this);\n"]}