{"version":3,"sources":["bootstrap-formhelpers-languages.js"],"names":[],"mappingsfile":"bootstrap-formhelpers-languages.js","sourcesContent":["/* ==========================================================\n * bootstrap-formhelpers-languages.js\n * https://github.com/vlamanna/BootstrapFormHelpers\n * ==========================================================\n * Copyright 2012 Vincent Lamanna\n * Contribution 2013 Tomasz Kuter\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n+function ($) {\n\n  'use strict';\n\n\n  /* LANGUAGES CLASS DEFINITION\n   * ====================== */\n\n  var BFHLanguages = function (element, options) {\n    this.options = $.extend({}, $.fn.bfhlanguages.defaults, options);\n    this.$element = $(element);\n\n    if (this.$element.is('select')) {\n      this.addLanguages();\n    }\n\n    if (this.$element.is('span')) {\n      this.displayLanguage();\n    }\n\n    if (this.$element.hasClass('bfh-selectbox')) {\n      this.addBootstrapLanguages();\n    }\n  };\n\n  BFHLanguages.prototype = {\n\n    constructor: BFHLanguages,\n\n    getLanguages: function () {\n      var split,\n          language,\n          languages;\n\n      if (this.options.available) {\n        languages = [];\n\n        this.options.available = this.options.available.split(',');\n\n        for (language in this.options.available) {\n          if (this.options.available.hasOwnProperty(language)) {\n            if (this.options.available[language].indexOf('_') !== -1) {\n              split = this.options.available[language].split('_');\n              languages[split[0]] = {name: BFHLanguagesList[split[0]], country: split[1]};\n            } else {\n              languages[this.options.available[language]] = BFHLanguagesList[this.options.available[language]];\n            }\n          }\n        }\n\n        return languages;\n      } else {\n        return BFHLanguagesList;\n      }\n    },\n\n    addLanguages: function () {\n      var split,\n          value,\n          languages,\n          language;\n\n      value = this.options.language;\n      languages = this.getLanguages();\n\n      this.$element.html('');\n\n      if (this.options.blank === true) {\n        this.$element.append('<option value=\"\"></option>');\n      }\n\n      for (language in languages) {\n        if (languages.hasOwnProperty(language)) {\n          if (languages[language].hasOwnProperty('name')) {\n            this.$element.append('<option value=\"' + language + '_' + languages[language].country + '\">' + languages[language].name.toProperCase() + ' (' + BFHCountriesList[languages[language].country] + ')</option>');\n          } else {\n            this.$element.append('<option value=\"' + language + '\">' + languages[language].toProperCase() + '</option>');\n          }\n        }\n      }\n\n      this.$element.val(value);\n    },\n\n    addBootstrapLanguages: function() {\n      var $input,\n          $toggle,\n          $options,\n          value,\n          languages,\n          language,\n          split;\n\n      value = this.options.language;\n      $input = this.$element.find('input[type=\"hidden\"]');\n      $toggle = this.$element.find('.bfh-selectbox-option');\n      $options = this.$element.find('[role=option]');\n      languages = this.getLanguages();\n\n      $options.html('');\n\n      if (this.options.blank === true) {\n        $options.append('<li><a tabindex=\"-1\" href=\"#\" data-option=\"\"></a></li>');\n      }\n\n      for (language in languages) {\n        if (languages.hasOwnProperty(language)) {\n          if (languages[language].hasOwnProperty('name')) {\n            if (this.options.flags === true) {\n              $options.append('<li><a tabindex=\"-1\" href=\"#\" data-option=\"' + language + '_' + languages[language].country + '\"><i class=\"glyphicon bfh-flag-' + languages[language].country + '\"></i>' + languages[language].name.toProperCase() + '</a></li>');\n            } else {\n              $options.append('<li><a tabindex=\"-1\" href=\"#\" data-option=\"' + language + '_' + languages[language].country + '\">' + languages[language].name.toProperCase() + ' (' + BFHCountriesList[languages[language].country] + ')</a></li>');\n            }\n          } else {\n            $options.append('<li><a tabindex=\"-1\" href=\"#\" data-option=\"' + language + '\">' + languages[language] + '</a></li>');\n          }\n        }\n      }\n\n      this.$element.val(value);\n    },\n\n    displayLanguage: function () {\n      var value;\n\n      value = this.options.language;\n\n      if (value.indexOf('_') !== -1) {\n        value = value.split('_');\n        if (this.options.flags === true) {\n          this.$element.html('<i class=\"glyphicon bfh-flag-' + value[1] + '\"></i> ' + BFHLanguagesList[value[0]].toProperCase());\n        } else {\n          this.$element.html(BFHLanguagesList[value[0]].toProperCase() + ' (' + BFHCountriesList[value[1]] + ')');\n        }\n      } else {\n        this.$element.html(BFHLanguagesList[value].toProperCase());\n      }\n    }\n\n  };\n\n\n  /* LANGUAGES PLUGIN DEFINITION\n   * ======================= */\n\n  var old = $.fn.bfhlanguages;\n\n  $.fn.bfhlanguages = function (option) {\n    return this.each(function () {\n      var $this,\n          data,\n          options;\n\n      $this = $(this);\n      data = $this.data('bfhlanguages');\n      options = typeof option === 'object' && option;\n\n      if (!data) {\n        $this.data('bfhlanguages', (data = new BFHLanguages(this, options)));\n      }\n      if (typeof option === 'string') {\n        data[option].call($this);\n      }\n    });\n  };\n\n  $.fn.bfhlanguages.Constructor = BFHLanguages;\n\n  $.fn.bfhlanguages.defaults = {\n    language: '',\n    available: '',\n    flags: false,\n    blank: true\n  };\n\n\n  /* LANGUAGES NO CONFLICT\n   * ========================== */\n\n  $.fn.bfhlanguages.noConflict = function () {\n    $.fn.bfhlanguages = old;\n    return this;\n  };\n\n\n  /* LANGUAGES DATA-API\n   * ============== */\n\n  $(document).ready( function () {\n    $('form select.bfh-languages, span.bfh-languages, div.bfh-languages').each(function () {\n      var $languages;\n\n      $languages = $(this);\n\n      if ($languages.hasClass('bfh-selectbox')) {\n        $languages.bfhselectbox($languages.data());\n      }\n      $languages.bfhlanguages($languages.data());\n    });\n  });\n\n\n  /* LANGUAGES HELPERS\n   * ============== */\n\n  String.prototype.toProperCase = function () {\n    return this.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n  };\n\n}(window.jQuery);\n"]}